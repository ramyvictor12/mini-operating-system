
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 58 07 86 f0 01 	movl   $0x1,0xf0860758
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 2c 07 86 f0 01 	movl   $0x1,0xf086072c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 08 86 f0       	mov    $0xf08608bc,%edx
f010006a:	b8 9c fb 85 f0       	mov    $0xf085fb9c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c fb 85 f0       	push   $0xf085fb9c
f010007e:	e8 5b 1b 03 00       	call   f0131bde <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 54 07 86 f0 ff 	movl   $0xffffffff,0xf0860754
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 99 61 00 00       	call   f0106238 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 25 5d 00 00       	call   f0105dc9 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 a6 64 00 00       	call   f010654f <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 19 a1 00 00       	call   f010a1c7 <env_init>
	idt_init();
f01000ae:	e8 d1 b6 00 00       	call   f010b784 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 03 e2 00 00       	call   f010e2bb <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 a6 d0 00 00       	call   f010d16d <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 25 3d 00 00       	call   f0103df4 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 0b 78 00 00       	call   f01078e2 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 91 d0 00 00       	call   f010d16d <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 10 3d 00 00       	call   f0103df4 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 49 04 03 00       	call   f0130541 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 24 07 86 f0 61 	movl   $0x61,0xf0860724
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b0 06 86 f0 59 	movl   $0x59,0xf08606b0
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 24 07 86 f0       	mov    0xf0860724,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 0c 70 00 00       	call   f0107129 <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 7f e6 00 00       	call   f010e7ad <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 8d e2 00 00       	call   f010e3c8 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 68 e2 00 00       	call   f010e3b0 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 88 e2 00 00       	call   f010e3e0 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 e3 5a 00 00       	call   f0105c43 <pic_init>
	sched_init() ;
f0100160:	e8 8c 47 00 00       	call   f01048f1 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 40 38 13 f0       	push   $0xf0133840
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 6c 38 13 f0       	push   $0xf013386c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 91 38 13 f0       	push   $0xf0133891
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 98 38 13 f0       	push   $0xf0133898
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 e0 38 13 f0       	push   $0xf01338e0
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 28 39 13 f0       	push   $0xf0133928
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 e0 38 13 f0       	push   $0xf01338e0
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 98 38 13 f0       	push   $0xf0133898
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 6d 39 13 f0       	push   $0xf013396d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 fb 85 f0       	mov    %eax,0xf085fba0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 72 39 13 f0       	push   $0xf0133972
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 8b 39 13 f0       	push   $0xf013398b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 4d 9e 00 00       	call   f010a0bc <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 54 07 86 f0       	mov    0xf0860754,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 54 07 86 f0       	mov    0xf0860754,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 8d 39 13 f0       	push   $0xf013398d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 be 44 00 00       	call   f0104752 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 fb 85 f0       	mov    %eax,0xf085fba0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 72 39 13 f0       	push   $0xf0133972
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 8b 39 13 f0       	push   $0xf013398b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 54 07 86 f0       	mov    0xf0860754,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 ee 51 00 00       	call   f0105507 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 9b 4f 00 00       	call   f01052ce <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 17 44 00 00       	call   f0104752 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 fb 85 f0       	mov    %eax,0xf085fba0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 72 39 13 f0       	push   $0xf0133972
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 8b 39 13 f0       	push   $0xf013398b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 b1 47 00 00       	call   f0104b86 <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 54 07 86 f0       	mov    0xf0860754,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 54 07 86 f0 00 	movl   $0x0,0xf0860754
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 a2 39 13 f0       	push   $0xf01339a2
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 8b 39 13 f0       	push   $0xf013398b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 fb 85 f0       	mov    0xf085fbc0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 fb 85 f0       	mov    %eax,0xf085fbc0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 fb 85 f0 b4 	movl   $0x3b4,0xf085fbc4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 fb 85 f0 d4 	movl   $0x3d4,0xf085fbc4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 fb 85 f0       	mov    0xf085fbc4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 fb 85 f0       	mov    0xf085fbc4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 fb 85 f0       	mov    0xf085fbc4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 fb 85 f0       	mov    0xf085fbc4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 fb 85 f0       	mov    %eax,0xf085fbc8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc fb 85 f0    	mov    %ax,0xf085fbcc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc fb 85 f0    	mov    %ax,0xf085fbcc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 fb 85 f0    	mov    0xf085fbc8,%edx
f0100771:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc fb 85 f0    	mov    %ax,0xf085fbcc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc fb 85 f0 	mov    0xf085fbcc,%cx
f01007a4:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc fb 85 f0    	mov    %ax,0xf085fbcc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 fb 85 f0    	mov    0xf085fbc8,%ecx
f010080e:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc fb 85 f0 	mov    %dx,0xf085fbcc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 fb 85 f0       	mov    0xf085fbc8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 fb 85 f0       	mov    0xf085fbc8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 b4 13 03 00       	call   f0131c0e <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 fb 85 f0    	mov    0xf085fbc8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc fb 85 f0    	mov    %ax,0xf085fbcc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 fb 85 f0       	mov    0xf085fbc4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 fb 85 f0    	mov    0xf085fbc4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 fb 85 f0       	mov    0xf085fbc4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc fb 85 f0    	mov    0xf085fbcc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 fb 85 f0    	mov    0xf085fbc4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 fd 85 f0       	mov    %eax,0xf085fde8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 fd 85 f0       	mov    %eax,0xf085fde8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 fd 85 f0       	mov    %eax,0xf085fde8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 fd 85 f0       	mov    %eax,0xf085fde8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 fd 85 f0       	mov    %eax,0xf085fde8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 fd 85 f0       	mov    0xf085fde8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 bd 39 13 f0       	push   $0xf01339bd
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 fd 85 f0    	mov    %edx,0xf085fde4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 fb 85 f0    	mov    %dl,-0xf7a0420(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 fd 85 f0 00 	movl   $0x0,0xf085fde4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 fd 85 f0    	mov    0xf085fde0,%edx
f0100b03:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 fd 85 f0       	mov    0xf085fde0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 fd 85 f0    	mov    %edx,0xf085fde0
f0100b1a:	8a 80 e0 fb 85 f0    	mov    -0xf7a0420(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 fd 85 f0       	mov    0xf085fde0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 fd 85 f0 00 	movl   $0x0,0xf085fde0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 fb 85 f0       	mov    0xf085fbc0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 fd 85 f0    	mov    %edx,0xf085fde4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 fb 85 f0    	mov    %dl,-0xf7a0420(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 fd 85 f0 00 	movl   $0x0,0xf085fde4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 fd 85 f0    	mov    %edx,0xf085fde4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 fb 85 f0    	mov    %dl,-0xf7a0420(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 fd 85 f0 00 	movl   $0x0,0xf085fde4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 fd 85 f0    	mov    0xf085fde0,%edx
f0100bf3:	a1 e4 fd 85 f0       	mov    0xf085fde4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 fd 85 f0       	mov    0xf085fde0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 fd 85 f0    	mov    %edx,0xf085fde0
f0100c0a:	8a 80 e0 fb 85 f0    	mov    -0xf7a0420(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 fd 85 f0       	mov    0xf085fde0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 fd 85 f0 00 	movl   $0x0,0xf085fde0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 fb 85 f0       	mov    0xf085fbc0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 c9 39 13 f0       	push   $0xf01339c9
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 3c 06 03 00       	call   f0131342 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 e6 39 13 f0       	push   $0xf01339e6
f0100d4c:	e8 99 0a 03 00       	call   f01317ea <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	53                   	push   %ebx
f0100d74:	83 ec 64             	sub    $0x64,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d77:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0100d7a:	50                   	push   %eax
f0100d7b:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0100d7e:	50                   	push   %eax
f0100d7f:	68 ec 39 13 f0       	push   $0xf01339ec
f0100d84:	ff 75 08             	pushl  0x8(%ebp)
f0100d87:	e8 98 12 03 00       	call   f0132024 <strsplit>
f0100d8c:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100d92:	85 c0                	test   %eax,%eax
f0100d94:	75 0a                	jne    f0100da0 <execute_command+0x30>
		return 0;
f0100d96:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9b:	e9 62 01 00 00       	jmp    f0100f02 <execute_command+0x192>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	int i ;
	int check=0;
f0100da7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100dae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db5:	e9 e4 00 00 00       	jmp    f0100e9e <execute_command+0x12e>
	{

	if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0&&strlen(arguments[0])==strlen(commands[i].name))
f0100dba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100dbd:	83 ec 0c             	sub    $0xc,%esp
f0100dc0:	50                   	push   %eax
f0100dc1:	e8 2a 0c 03 00       	call   f01319f0 <strlen>
f0100dc6:	83 c4 10             	add    $0x10,%esp
f0100dc9:	89 c1                	mov    %eax,%ecx
f0100dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dce:	89 d0                	mov    %edx,%eax
f0100dd0:	01 c0                	add    %eax,%eax
f0100dd2:	01 d0                	add    %edx,%eax
f0100dd4:	c1 e0 02             	shl    $0x2,%eax
f0100dd7:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100ddc:	8b 10                	mov    (%eax),%edx
f0100dde:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100de1:	83 ec 04             	sub    $0x4,%esp
f0100de4:	51                   	push   %ecx
f0100de5:	52                   	push   %edx
f0100de6:	50                   	push   %eax
f0100de7:	e8 48 0d 03 00       	call   f0131b34 <strncmp>
f0100dec:	83 c4 10             	add    $0x10,%esp
f0100def:	85 c0                	test   %eax,%eax
f0100df1:	75 3d                	jne    f0100e30 <execute_command+0xc0>
f0100df3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100df6:	83 ec 0c             	sub    $0xc,%esp
f0100df9:	50                   	push   %eax
f0100dfa:	e8 f1 0b 03 00       	call   f01319f0 <strlen>
f0100dff:	83 c4 10             	add    $0x10,%esp
f0100e02:	89 c3                	mov    %eax,%ebx
f0100e04:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e07:	89 d0                	mov    %edx,%eax
f0100e09:	01 c0                	add    %eax,%eax
f0100e0b:	01 d0                	add    %edx,%eax
f0100e0d:	c1 e0 02             	shl    $0x2,%eax
f0100e10:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e15:	8b 00                	mov    (%eax),%eax
f0100e17:	83 ec 0c             	sub    $0xc,%esp
f0100e1a:	50                   	push   %eax
f0100e1b:	e8 d0 0b 03 00       	call   f01319f0 <strlen>
f0100e20:	83 c4 10             	add    $0x10,%esp
f0100e23:	39 c3                	cmp    %eax,%ebx
f0100e25:	75 09                	jne    f0100e30 <execute_command+0xc0>
			{
				command_found = 1;
f0100e27:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				break;
f0100e2e:	eb 7e                	jmp    f0100eae <execute_command+0x13e>
			}
	else
	{

		if(strncmp(arguments[0],commands[i].name,strlen(arguments[0]))==0)
f0100e30:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100e33:	83 ec 0c             	sub    $0xc,%esp
f0100e36:	50                   	push   %eax
f0100e37:	e8 b4 0b 03 00       	call   f01319f0 <strlen>
f0100e3c:	83 c4 10             	add    $0x10,%esp
f0100e3f:	89 c1                	mov    %eax,%ecx
f0100e41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e44:	89 d0                	mov    %edx,%eax
f0100e46:	01 c0                	add    %eax,%eax
f0100e48:	01 d0                	add    %edx,%eax
f0100e4a:	c1 e0 02             	shl    $0x2,%eax
f0100e4d:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e52:	8b 10                	mov    (%eax),%edx
f0100e54:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100e57:	83 ec 04             	sub    $0x4,%esp
f0100e5a:	51                   	push   %ecx
f0100e5b:	52                   	push   %edx
f0100e5c:	50                   	push   %eax
f0100e5d:	e8 d2 0c 03 00       	call   f0131b34 <strncmp>
f0100e62:	83 c4 10             	add    $0x10,%esp
f0100e65:	85 c0                	test   %eax,%eax
f0100e67:	75 32                	jne    f0100e9b <execute_command+0x12b>
		{

			cprintf(commands[i].name);
f0100e69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e6c:	89 d0                	mov    %edx,%eax
f0100e6e:	01 c0                	add    %eax,%eax
f0100e70:	01 d0                	add    %edx,%eax
f0100e72:	c1 e0 02             	shl    $0x2,%eax
f0100e75:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e7a:	8b 00                	mov    (%eax),%eax
f0100e7c:	83 ec 0c             	sub    $0xc,%esp
f0100e7f:	50                   	push   %eax
f0100e80:	e8 89 fe ff ff       	call   f0100d0e <cprintf>
f0100e85:	83 c4 10             	add    $0x10,%esp
			cprintf("\n");
f0100e88:	83 ec 0c             	sub    $0xc,%esp
f0100e8b:	68 f1 39 13 f0       	push   $0xf01339f1
f0100e90:	e8 79 fe ff ff       	call   f0100d0e <cprintf>
f0100e95:	83 c4 10             	add    $0x10,%esp
			check++;
f0100e98:	ff 45 ec             	incl   -0x14(%ebp)
	// Lookup in the commands array and execute the command
	int command_found = 0;

	int i ;
	int check=0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e9b:	ff 45 f0             	incl   -0x10(%ebp)
f0100e9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100ea1:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100ea6:	39 c2                	cmp    %eax,%edx
f0100ea8:	0f 82 0c ff ff ff    	jb     f0100dba <execute_command+0x4a>

	}

	}

	if(command_found)
f0100eae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100eb2:	74 28                	je     f0100edc <execute_command+0x16c>
	{
		int return_value;
		return_value=commands[i].function_to_execute(number_of_arguments,arguments);
f0100eb4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100eb7:	89 d0                	mov    %edx,%eax
f0100eb9:	01 c0                	add    %eax,%eax
f0100ebb:	01 d0                	add    %edx,%eax
f0100ebd:	c1 e0 02             	shl    $0x2,%eax
f0100ec0:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100ec5:	8b 00                	mov    (%eax),%eax
f0100ec7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100eca:	83 ec 08             	sub    $0x8,%esp
f0100ecd:	8d 4d a4             	lea    -0x5c(%ebp),%ecx
f0100ed0:	51                   	push   %ecx
f0100ed1:	52                   	push   %edx
f0100ed2:	ff d0                	call   *%eax
f0100ed4:	83 c4 10             	add    $0x10,%esp
f0100ed7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100eda:	eb 21                	jmp    f0100efd <execute_command+0x18d>
	}
	else if(check!=0)
f0100edc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100ee0:	75 1b                	jne    f0100efd <execute_command+0x18d>
	}

	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100ee2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100ee5:	83 ec 08             	sub    $0x8,%esp
f0100ee8:	50                   	push   %eax
f0100ee9:	68 f3 39 13 f0       	push   $0xf01339f3
f0100eee:	e8 1b fe ff ff       	call   f0100d0e <cprintf>
f0100ef3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0100ef6:	b8 00 00 00 00       	mov    $0x0,%eax
f0100efb:	eb 05                	jmp    f0100f02 <execute_command+0x192>
	}
	return 0;
f0100efd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100f02:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100f05:	c9                   	leave  
f0100f06:	c3                   	ret    

f0100f07 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	c7 05 58 07 86 f0 00 	movl   $0x0,0xf0860758
f0100f11:	00 00 00 
f0100f14:	90                   	nop
f0100f15:	5d                   	pop    %ebp
f0100f16:	c3                   	ret    

f0100f17 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100f17:	55                   	push   %ebp
f0100f18:	89 e5                	mov    %esp,%ebp
f0100f1a:	c7 05 58 07 86 f0 01 	movl   $0x1,0xf0860758
f0100f21:	00 00 00 
f0100f24:	90                   	nop
f0100f25:	5d                   	pop    %ebp
f0100f26:	c3                   	ret    

f0100f27 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100f27:	55                   	push   %ebp
f0100f28:	89 e5                	mov    %esp,%ebp
f0100f2a:	c7 05 58 07 86 f0 02 	movl   $0x2,0xf0860758
f0100f31:	00 00 00 
f0100f34:	90                   	nop
f0100f35:	5d                   	pop    %ebp
f0100f36:	c3                   	ret    

f0100f37 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f37:	55                   	push   %ebp
f0100f38:	89 e5                	mov    %esp,%ebp
f0100f3a:	c7 05 58 07 86 f0 03 	movl   $0x3,0xf0860758
f0100f41:	00 00 00 
f0100f44:	90                   	nop
f0100f45:	5d                   	pop    %ebp
f0100f46:	c3                   	ret    

f0100f47 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	c7 05 58 07 86 f0 04 	movl   $0x4,0xf0860758
f0100f51:	00 00 00 
f0100f54:	90                   	nop
f0100f55:	5d                   	pop    %ebp
f0100f56:	c3                   	ret    

f0100f57 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f57:	55                   	push   %ebp
f0100f58:	89 e5                	mov    %esp,%ebp
f0100f5a:	a1 58 07 86 f0       	mov    0xf0860758,%eax
f0100f5f:	85 c0                	test   %eax,%eax
f0100f61:	75 04                	jne    f0100f67 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f63:	b0 01                	mov    $0x1,%al
f0100f65:	eb 02                	jmp    f0100f69 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f67:	b0 00                	mov    $0x0,%al
f0100f69:	5d                   	pop    %ebp
f0100f6a:	c3                   	ret    

f0100f6b <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f6b:	55                   	push   %ebp
f0100f6c:	89 e5                	mov    %esp,%ebp
f0100f6e:	a1 58 07 86 f0       	mov    0xf0860758,%eax
f0100f73:	83 f8 01             	cmp    $0x1,%eax
f0100f76:	75 04                	jne    f0100f7c <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f78:	b0 01                	mov    $0x1,%al
f0100f7a:	eb 02                	jmp    f0100f7e <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f7c:	b0 00                	mov    $0x0,%al
f0100f7e:	5d                   	pop    %ebp
f0100f7f:	c3                   	ret    

f0100f80 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f80:	55                   	push   %ebp
f0100f81:	89 e5                	mov    %esp,%ebp
f0100f83:	a1 58 07 86 f0       	mov    0xf0860758,%eax
f0100f88:	83 f8 02             	cmp    $0x2,%eax
f0100f8b:	75 04                	jne    f0100f91 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f8d:	b0 01                	mov    $0x1,%al
f0100f8f:	eb 02                	jmp    f0100f93 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f91:	b0 00                	mov    $0x0,%al
f0100f93:	5d                   	pop    %ebp
f0100f94:	c3                   	ret    

f0100f95 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f95:	55                   	push   %ebp
f0100f96:	89 e5                	mov    %esp,%ebp
f0100f98:	a1 58 07 86 f0       	mov    0xf0860758,%eax
f0100f9d:	83 f8 03             	cmp    $0x3,%eax
f0100fa0:	75 04                	jne    f0100fa6 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100fa2:	b0 01                	mov    $0x1,%al
f0100fa4:	eb 02                	jmp    f0100fa8 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100fa6:	b0 00                	mov    $0x0,%al
f0100fa8:	5d                   	pop    %ebp
f0100fa9:	c3                   	ret    

f0100faa <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100faa:	55                   	push   %ebp
f0100fab:	89 e5                	mov    %esp,%ebp
f0100fad:	a1 58 07 86 f0       	mov    0xf0860758,%eax
f0100fb2:	83 f8 04             	cmp    $0x4,%eax
f0100fb5:	75 04                	jne    f0100fbb <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100fb7:	b0 01                	mov    $0x1,%al
f0100fb9:	eb 02                	jmp    f0100fbd <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100fbb:	b0 00                	mov    $0x0,%al
f0100fbd:	5d                   	pop    %ebp
f0100fbe:	c3                   	ret    

f0100fbf <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100fbf:	55                   	push   %ebp
f0100fc0:	89 e5                	mov    %esp,%ebp
f0100fc2:	c7 05 2c 07 86 f0 01 	movl   $0x1,0xf086072c
f0100fc9:	00 00 00 
f0100fcc:	90                   	nop
f0100fcd:	5d                   	pop    %ebp
f0100fce:	c3                   	ret    

f0100fcf <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fcf:	55                   	push   %ebp
f0100fd0:	89 e5                	mov    %esp,%ebp
f0100fd2:	c7 05 2c 07 86 f0 02 	movl   $0x2,0xf086072c
f0100fd9:	00 00 00 
f0100fdc:	90                   	nop
f0100fdd:	5d                   	pop    %ebp
f0100fde:	c3                   	ret    

f0100fdf <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fdf:	55                   	push   %ebp
f0100fe0:	89 e5                	mov    %esp,%ebp
f0100fe2:	c7 05 2c 07 86 f0 03 	movl   $0x3,0xf086072c
f0100fe9:	00 00 00 
f0100fec:	90                   	nop
f0100fed:	5d                   	pop    %ebp
f0100fee:	c3                   	ret    

f0100fef <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fef:	55                   	push   %ebp
f0100ff0:	89 e5                	mov    %esp,%ebp
f0100ff2:	c7 05 2c 07 86 f0 04 	movl   $0x4,0xf086072c
f0100ff9:	00 00 00 
f0100ffc:	90                   	nop
f0100ffd:	5d                   	pop    %ebp
f0100ffe:	c3                   	ret    

f0100fff <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fff:	55                   	push   %ebp
f0101000:	89 e5                	mov    %esp,%ebp
f0101002:	a1 2c 07 86 f0       	mov    0xf086072c,%eax
f0101007:	83 f8 01             	cmp    $0x1,%eax
f010100a:	75 04                	jne    f0101010 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f010100c:	b0 01                	mov    $0x1,%al
f010100e:	eb 02                	jmp    f0101012 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0101010:	b0 00                	mov    $0x0,%al
f0101012:	5d                   	pop    %ebp
f0101013:	c3                   	ret    

f0101014 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0101014:	55                   	push   %ebp
f0101015:	89 e5                	mov    %esp,%ebp
f0101017:	a1 2c 07 86 f0       	mov    0xf086072c,%eax
f010101c:	83 f8 02             	cmp    $0x2,%eax
f010101f:	75 04                	jne    f0101025 <isUHeapPlacementStrategyBESTFIT+0x11>
f0101021:	b0 01                	mov    $0x1,%al
f0101023:	eb 02                	jmp    f0101027 <isUHeapPlacementStrategyBESTFIT+0x13>
f0101025:	b0 00                	mov    $0x0,%al
f0101027:	5d                   	pop    %ebp
f0101028:	c3                   	ret    

f0101029 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0101029:	55                   	push   %ebp
f010102a:	89 e5                	mov    %esp,%ebp
f010102c:	a1 2c 07 86 f0       	mov    0xf086072c,%eax
f0101031:	83 f8 03             	cmp    $0x3,%eax
f0101034:	75 04                	jne    f010103a <isUHeapPlacementStrategyNEXTFIT+0x11>
f0101036:	b0 01                	mov    $0x1,%al
f0101038:	eb 02                	jmp    f010103c <isUHeapPlacementStrategyNEXTFIT+0x13>
f010103a:	b0 00                	mov    $0x0,%al
f010103c:	5d                   	pop    %ebp
f010103d:	c3                   	ret    

f010103e <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010103e:	55                   	push   %ebp
f010103f:	89 e5                	mov    %esp,%ebp
f0101041:	a1 2c 07 86 f0       	mov    0xf086072c,%eax
f0101046:	83 f8 04             	cmp    $0x4,%eax
f0101049:	75 04                	jne    f010104f <isUHeapPlacementStrategyWORSTFIT+0x11>
f010104b:	b0 01                	mov    $0x1,%al
f010104d:	eb 02                	jmp    f0101051 <isUHeapPlacementStrategyWORSTFIT+0x13>
f010104f:	b0 00                	mov    $0x0,%al
f0101051:	5d                   	pop    %ebp
f0101052:	c3                   	ret    

f0101053 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101053:	55                   	push   %ebp
f0101054:	89 e5                	mov    %esp,%ebp
f0101056:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0101059:	8b 45 08             	mov    0x8(%ebp),%eax
f010105c:	c1 e8 0c             	shr    $0xc,%eax
f010105f:	89 c2                	mov    %eax,%edx
f0101061:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0101066:	39 c2                	cmp    %eax,%edx
f0101068:	72 14                	jb     f010107e <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010106a:	83 ec 04             	sub    $0x4,%esp
f010106d:	68 0c 3a 13 f0       	push   $0xf0133a0c
f0101072:	6a 55                	push   $0x55
f0101074:	68 34 3a 13 f0       	push   $0xf0133a34
f0101079:	e8 87 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f010107e:	8b 15 50 07 86 f0    	mov    0xf0860750,%edx
f0101084:	8b 45 08             	mov    0x8(%ebp),%eax
f0101087:	c1 e8 0c             	shr    $0xc,%eax
f010108a:	89 c1                	mov    %eax,%ecx
f010108c:	89 c8                	mov    %ecx,%eax
f010108e:	01 c0                	add    %eax,%eax
f0101090:	01 c8                	add    %ecx,%eax
f0101092:	c1 e0 03             	shl    $0x3,%eax
f0101095:	01 d0                	add    %edx,%eax
}
f0101097:	c9                   	leave  
f0101098:	c3                   	ret    

f0101099 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0101099:	55                   	push   %ebp
f010109a:	89 e5                	mov    %esp,%ebp
f010109c:	53                   	push   %ebx
f010109d:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010a7:	eb 3b                	jmp    f01010e4 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01010a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010ac:	89 d0                	mov    %edx,%eax
f01010ae:	01 c0                	add    %eax,%eax
f01010b0:	01 d0                	add    %edx,%eax
f01010b2:	c1 e0 02             	shl    $0x2,%eax
f01010b5:	05 44 35 19 f0       	add    $0xf0193544,%eax
f01010ba:	8b 10                	mov    (%eax),%edx
f01010bc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010bf:	89 c8                	mov    %ecx,%eax
f01010c1:	01 c0                	add    %eax,%eax
f01010c3:	01 c8                	add    %ecx,%eax
f01010c5:	c1 e0 02             	shl    $0x2,%eax
f01010c8:	05 40 35 19 f0       	add    $0xf0193540,%eax
f01010cd:	8b 00                	mov    (%eax),%eax
f01010cf:	83 ec 04             	sub    $0x4,%esp
f01010d2:	52                   	push   %edx
f01010d3:	50                   	push   %eax
f01010d4:	68 ae 48 13 f0       	push   $0xf01348ae
f01010d9:	e8 30 fc ff ff       	call   f0100d0e <cprintf>
f01010de:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010e1:	ff 45 f4             	incl   -0xc(%ebp)
f01010e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e7:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010ec:	39 c2                	cmp    %eax,%edx
f01010ee:	72 b9                	jb     f01010a9 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010f0:	83 ec 0c             	sub    $0xc,%esp
f01010f3:	68 b7 48 13 f0       	push   $0xf01348b7
f01010f8:	e8 11 fc ff ff       	call   f0100d0e <cprintf>
f01010fd:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101100:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101107:	eb 42                	jmp    f010114b <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101109:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f010110f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101112:	89 d0                	mov    %edx,%eax
f0101114:	01 c0                	add    %eax,%eax
f0101116:	01 d0                	add    %edx,%eax
f0101118:	c1 e0 02             	shl    $0x2,%eax
f010111b:	01 c8                	add    %ecx,%eax
f010111d:	8b 50 04             	mov    0x4(%eax),%edx
f0101120:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f0101126:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101129:	89 c8                	mov    %ecx,%eax
f010112b:	01 c0                	add    %eax,%eax
f010112d:	01 c8                	add    %ecx,%eax
f010112f:	c1 e0 02             	shl    $0x2,%eax
f0101132:	01 d8                	add    %ebx,%eax
f0101134:	8b 00                	mov    (%eax),%eax
f0101136:	83 ec 04             	sub    $0x4,%esp
f0101139:	52                   	push   %edx
f010113a:	50                   	push   %eax
f010113b:	68 cc 48 13 f0       	push   $0xf01348cc
f0101140:	e8 c9 fb ff ff       	call   f0100d0e <cprintf>
f0101145:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101148:	ff 45 f4             	incl   -0xc(%ebp)
f010114b:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f0101150:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101153:	7c b4                	jl     f0101109 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101155:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010115a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010115d:	c9                   	leave  
f010115e:	c3                   	ret    

f010115f <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010115f:	55                   	push   %ebp
f0101160:	89 e5                	mov    %esp,%ebp
f0101162:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101165:	83 ec 0c             	sub    $0xc,%esp
f0101168:	68 e8 48 13 f0       	push   $0xf01348e8
f010116d:	e8 9c fb ff ff       	call   f0100d0e <cprintf>
f0101172:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101175:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010117a:	83 ec 04             	sub    $0x4,%esp
f010117d:	50                   	push   %eax
f010117e:	68 0c 00 10 f0       	push   $0xf010000c
f0101183:	68 04 49 13 f0       	push   $0xf0134904
f0101188:	e8 81 fb ff ff       	call   f0100d0e <cprintf>
f010118d:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101190:	b8 21 38 13 00       	mov    $0x133821,%eax
f0101195:	83 ec 04             	sub    $0x4,%esp
f0101198:	50                   	push   %eax
f0101199:	68 21 38 13 f0       	push   $0xf0133821
f010119e:	68 40 49 13 f0       	push   $0xf0134940
f01011a3:	e8 66 fb ff ff       	call   f0100d0e <cprintf>
f01011a8:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01011ab:	b8 9c fb 85 00       	mov    $0x85fb9c,%eax
f01011b0:	83 ec 04             	sub    $0x4,%esp
f01011b3:	50                   	push   %eax
f01011b4:	68 9c fb 85 f0       	push   $0xf085fb9c
f01011b9:	68 7c 49 13 f0       	push   $0xf013497c
f01011be:	e8 4b fb ff ff       	call   f0100d0e <cprintf>
f01011c3:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01011c6:	b8 bc 08 86 00       	mov    $0x8608bc,%eax
f01011cb:	83 ec 04             	sub    $0x4,%esp
f01011ce:	50                   	push   %eax
f01011cf:	68 bc 08 86 f0       	push   $0xf08608bc
f01011d4:	68 c4 49 13 f0       	push   $0xf01349c4
f01011d9:	e8 30 fb ff ff       	call   f0100d0e <cprintf>
f01011de:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011e1:	b8 bc 08 86 f0       	mov    $0xf08608bc,%eax
f01011e6:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011ec:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011f1:	29 c2                	sub    %eax,%edx
f01011f3:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011f5:	85 c0                	test   %eax,%eax
f01011f7:	79 05                	jns    f01011fe <command_kernel_info+0x9f>
f01011f9:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011fe:	c1 f8 0a             	sar    $0xa,%eax
f0101201:	83 ec 08             	sub    $0x8,%esp
f0101204:	50                   	push   %eax
f0101205:	68 00 4a 13 f0       	push   $0xf0134a00
f010120a:	e8 ff fa ff ff       	call   f0100d0e <cprintf>
f010120f:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101212:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101217:	c9                   	leave  
f0101218:	c3                   	ret    

f0101219 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f0101219:	55                   	push   %ebp
f010121a:	89 e5                	mov    %esp,%ebp
f010121c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010121f:	83 ec 04             	sub    $0x4,%esp
f0101222:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101227:	68 b0 00 00 00       	push   $0xb0
f010122c:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101231:	e8 cf ef ff ff       	call   f0100205 <_panic>

f0101236 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101236:	55                   	push   %ebp
f0101237:	89 e5                	mov    %esp,%ebp
f0101239:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010123c:	83 ec 04             	sub    $0x4,%esp
f010123f:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101244:	68 ba 00 00 00       	push   $0xba
f0101249:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010124e:	e8 b2 ef ff ff       	call   f0100205 <_panic>

f0101253 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101253:	55                   	push   %ebp
f0101254:	89 e5                	mov    %esp,%ebp
f0101256:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101259:	83 ec 04             	sub    $0x4,%esp
f010125c:	68 2c 4a 13 f0       	push   $0xf0134a2c
f0101261:	68 c3 00 00 00       	push   $0xc3
f0101266:	68 4d 4a 13 f0       	push   $0xf0134a4d
f010126b:	e8 95 ef ff ff       	call   f0100205 <_panic>

f0101270 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101270:	55                   	push   %ebp
f0101271:	89 e5                	mov    %esp,%ebp
f0101273:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101276:	83 ec 04             	sub    $0x4,%esp
f0101279:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010127e:	68 cf 00 00 00       	push   $0xcf
f0101283:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101288:	e8 78 ef ff ff       	call   f0100205 <_panic>

f010128d <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f010128d:	55                   	push   %ebp
f010128e:	89 e5                	mov    %esp,%ebp
f0101290:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101293:	83 ec 04             	sub    $0x4,%esp
f0101296:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010129b:	68 d8 00 00 00       	push   $0xd8
f01012a0:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01012a5:	e8 5b ef ff ff       	call   f0100205 <_panic>

f01012aa <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f01012aa:	55                   	push   %ebp
f01012ab:	89 e5                	mov    %esp,%ebp
f01012ad:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012b0:	83 ec 04             	sub    $0x4,%esp
f01012b3:	68 2c 4a 13 f0       	push   $0xf0134a2c
f01012b8:	68 e1 00 00 00       	push   $0xe1
f01012bd:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01012c2:	e8 3e ef ff ff       	call   f0100205 <_panic>

f01012c7 <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01012c7:	55                   	push   %ebp
f01012c8:	89 e5                	mov    %esp,%ebp
f01012ca:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012cd:	83 ec 04             	sub    $0x4,%esp
f01012d0:	68 2c 4a 13 f0       	push   $0xf0134a2c
f01012d5:	68 ee 00 00 00       	push   $0xee
f01012da:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01012df:	e8 21 ef ff ff       	call   f0100205 <_panic>

f01012e4 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012e4:	55                   	push   %ebp
f01012e5:	89 e5                	mov    %esp,%ebp
f01012e7:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012ed:	83 c0 04             	add    $0x4,%eax
f01012f0:	8b 00                	mov    (%eax),%eax
f01012f2:	83 ec 04             	sub    $0x4,%esp
f01012f5:	6a 10                	push   $0x10
f01012f7:	6a 00                	push   $0x0
f01012f9:	50                   	push   %eax
f01012fa:	e8 51 0a 03 00       	call   f0131d50 <strtol>
f01012ff:	83 c4 10             	add    $0x10,%esp
f0101302:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f0101305:	83 ec 0c             	sub    $0xc,%esp
f0101308:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010130b:	50                   	push   %eax
f010130c:	e8 0d 56 00 00       	call   f010691e <allocate_frame>
f0101311:	83 c4 10             	add    $0x10,%esp
f0101314:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f0101317:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010131a:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f010131f:	6a 06                	push   $0x6
f0101321:	ff 75 f4             	pushl  -0xc(%ebp)
f0101324:	52                   	push   %edx
f0101325:	50                   	push   %eax
f0101326:	e8 42 5a 00 00       	call   f0106d6d <map_frame>
f010132b:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f010132e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101333:	c9                   	leave  
f0101334:	c3                   	ret    

f0101335 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101335:	55                   	push   %ebp
f0101336:	89 e5                	mov    %esp,%ebp
f0101338:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010133b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010133e:	83 c0 04             	add    $0x4,%eax
f0101341:	8b 00                	mov    (%eax),%eax
f0101343:	83 ec 04             	sub    $0x4,%esp
f0101346:	6a 10                	push   $0x10
f0101348:	6a 00                	push   $0x0
f010134a:	50                   	push   %eax
f010134b:	e8 00 0a 03 00       	call   f0131d50 <strtol>
f0101350:	83 c4 10             	add    $0x10,%esp
f0101353:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101356:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f010135b:	83 ec 08             	sub    $0x8,%esp
f010135e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101361:	50                   	push   %eax
f0101362:	e8 3b 5b 00 00       	call   f0106ea2 <unmap_frame>
f0101367:	83 c4 10             	add    $0x10,%esp

	return 0;
f010136a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010136f:	c9                   	leave  
f0101370:	c3                   	ret    

f0101371 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101371:	55                   	push   %ebp
f0101372:	89 e5                	mov    %esp,%ebp
f0101374:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101377:	83 ec 04             	sub    $0x4,%esp
f010137a:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010137f:	68 18 01 00 00       	push   $0x118
f0101384:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101389:	e8 77 ee ff ff       	call   f0100205 <_panic>

f010138e <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f010138e:	55                   	push   %ebp
f010138f:	89 e5                	mov    %esp,%ebp
f0101391:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101394:	83 ec 04             	sub    $0x4,%esp
f0101397:	68 2c 4a 13 f0       	push   $0xf0134a2c
f010139c:	68 23 01 00 00       	push   $0x123
f01013a1:	68 4d 4a 13 f0       	push   $0xf0134a4d
f01013a6:	e8 5a ee ff ff       	call   f0100205 <_panic>

f01013ab <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f01013ab:	55                   	push   %ebp
f01013ac:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01013ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013b3:	5d                   	pop    %ebp
f01013b4:	c3                   	ret    

f01013b5 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01013b5:	55                   	push   %ebp
f01013b6:	89 e5                	mov    %esp,%ebp
f01013b8:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01013bb:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01013bf:	75 37                	jne    f01013f8 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01013c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013c4:	83 c0 04             	add    $0x4,%eax
f01013c7:	8b 00                	mov    (%eax),%eax
f01013c9:	83 ec 04             	sub    $0x4,%esp
f01013cc:	6a 10                	push   $0x10
f01013ce:	6a 00                	push   $0x0
f01013d0:	50                   	push   %eax
f01013d1:	e8 7a 09 03 00       	call   f0131d50 <strtol>
f01013d6:	83 c4 10             	add    $0x10,%esp
f01013d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013df:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013e5:	83 c0 08             	add    $0x8,%eax
f01013e8:	8b 00                	mov    (%eax),%eax
f01013ea:	8a 00                	mov    (%eax),%al
f01013ec:	88 c2                	mov    %al,%dl
f01013ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013f1:	88 10                	mov    %dl,(%eax)
f01013f3:	e9 b9 00 00 00       	jmp    f01014b1 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013f8:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013fc:	0f 85 9f 00 00 00    	jne    f01014a1 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0101402:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101405:	83 c0 04             	add    $0x4,%eax
f0101408:	8b 00                	mov    (%eax),%eax
f010140a:	83 ec 04             	sub    $0x4,%esp
f010140d:	6a 0a                	push   $0xa
f010140f:	6a 00                	push   $0x0
f0101411:	50                   	push   %eax
f0101412:	e8 39 09 03 00       	call   f0131d50 <strtol>
f0101417:	83 c4 10             	add    $0x10,%esp
f010141a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010141d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101424:	83 ec 04             	sub    $0x4,%esp
f0101427:	6a 00                	push   $0x0
f0101429:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010142c:	50                   	push   %eax
f010142d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101430:	e8 a6 8c 00 00       	call   f010a0db <envid2env>
f0101435:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101438:	8b 45 0c             	mov    0xc(%ebp),%eax
f010143b:	83 c0 08             	add    $0x8,%eax
f010143e:	8b 00                	mov    (%eax),%eax
f0101440:	83 ec 04             	sub    $0x4,%esp
f0101443:	6a 10                	push   $0x10
f0101445:	6a 00                	push   $0x0
f0101447:	50                   	push   %eax
f0101448:	e8 03 09 03 00       	call   f0131d50 <strtol>
f010144d:	83 c4 10             	add    $0x10,%esp
f0101450:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101453:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101456:	85 c0                	test   %eax,%eax
f0101458:	75 07                	jne    f0101461 <command_writeusermem+0xac>
f010145a:	b8 00 00 00 00       	mov    $0x0,%eax
f010145f:	eb 55                	jmp    f01014b6 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101461:	0f 20 d8             	mov    %cr3,%eax
f0101464:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101467:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010146a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f010146d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101470:	8b 40 60             	mov    0x60(%eax),%eax
f0101473:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101476:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101479:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010147c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010147f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101482:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101485:	83 c0 0c             	add    $0xc,%eax
f0101488:	8b 00                	mov    (%eax),%eax
f010148a:	8a 00                	mov    (%eax),%al
f010148c:	88 c2                	mov    %al,%dl
f010148e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101491:	88 10                	mov    %dl,(%eax)
f0101493:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101496:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101499:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010149c:	0f 22 d8             	mov    %eax,%cr3
f010149f:	eb 10                	jmp    f01014b1 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01014a1:	83 ec 0c             	sub    $0xc,%esp
f01014a4:	68 64 4a 13 f0       	push   $0xf0134a64
f01014a9:	e8 60 f8 ff ff       	call   f0100d0e <cprintf>
f01014ae:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01014b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01014b6:	c9                   	leave  
f01014b7:	c3                   	ret    

f01014b8 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01014b8:	55                   	push   %ebp
f01014b9:	89 e5                	mov    %esp,%ebp
f01014bb:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01014be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014c1:	83 c0 04             	add    $0x4,%eax
f01014c4:	8b 00                	mov    (%eax),%eax
f01014c6:	83 ec 04             	sub    $0x4,%esp
f01014c9:	6a 10                	push   $0x10
f01014cb:	6a 00                	push   $0x0
f01014cd:	50                   	push   %eax
f01014ce:	e8 7d 08 03 00       	call   f0131d50 <strtol>
f01014d3:	83 c4 10             	add    $0x10,%esp
f01014d6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014db:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e1:	83 c0 08             	add    $0x8,%eax
f01014e4:	8b 00                	mov    (%eax),%eax
f01014e6:	83 ec 04             	sub    $0x4,%esp
f01014e9:	6a 0a                	push   $0xa
f01014eb:	6a 00                	push   $0x0
f01014ed:	50                   	push   %eax
f01014ee:	e8 5d 08 03 00       	call   f0131d50 <strtol>
f01014f3:	83 c4 10             	add    $0x10,%esp
f01014f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101500:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101503:	83 c0 0c             	add    $0xc,%eax
f0101506:	8b 00                	mov    (%eax),%eax
f0101508:	83 ec 0c             	sub    $0xc,%esp
f010150b:	50                   	push   %eax
f010150c:	e8 df 04 03 00       	call   f01319f0 <strlen>
f0101511:	83 c4 10             	add    $0x10,%esp
f0101514:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101517:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010151e:	eb 30                	jmp    f0101550 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101520:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101527:	eb 1c                	jmp    f0101545 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101529:	8b 45 0c             	mov    0xc(%ebp),%eax
f010152c:	83 c0 0c             	add    $0xc,%eax
f010152f:	8b 10                	mov    (%eax),%edx
f0101531:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101534:	01 d0                	add    %edx,%eax
f0101536:	8a 00                	mov    (%eax),%al
f0101538:	88 c2                	mov    %al,%dl
f010153a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010153d:	88 10                	mov    %dl,(%eax)
			address++;
f010153f:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101542:	ff 45 ec             	incl   -0x14(%ebp)
f0101545:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101548:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010154b:	7c dc                	jl     f0101529 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f010154d:	ff 45 f0             	incl   -0x10(%ebp)
f0101550:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101553:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101556:	7c c8                	jl     f0101520 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101558:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010155d:	c9                   	leave  
f010155e:	c3                   	ret    

f010155f <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010155f:	55                   	push   %ebp
f0101560:	89 e5                	mov    %esp,%ebp
f0101562:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101565:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101569:	75 42                	jne    f01015ad <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010156b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010156e:	83 c0 04             	add    $0x4,%eax
f0101571:	8b 00                	mov    (%eax),%eax
f0101573:	83 ec 04             	sub    $0x4,%esp
f0101576:	6a 10                	push   $0x10
f0101578:	6a 00                	push   $0x0
f010157a:	50                   	push   %eax
f010157b:	e8 d0 07 03 00       	call   f0131d50 <strtol>
f0101580:	83 c4 10             	add    $0x10,%esp
f0101583:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101586:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101589:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010158c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010158f:	8a 00                	mov    (%eax),%al
f0101591:	0f b6 c0             	movzbl %al,%eax
f0101594:	83 ec 04             	sub    $0x4,%esp
f0101597:	50                   	push   %eax
f0101598:	ff 75 d8             	pushl  -0x28(%ebp)
f010159b:	68 8e 4a 13 f0       	push   $0xf0134a8e
f01015a0:	e8 69 f7 ff ff       	call   f0100d0e <cprintf>
f01015a5:	83 c4 10             	add    $0x10,%esp
f01015a8:	e9 c4 00 00 00       	jmp    f0101671 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01015ad:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01015b1:	0f 85 aa 00 00 00    	jne    f0101661 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01015b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015ba:	83 c0 04             	add    $0x4,%eax
f01015bd:	8b 00                	mov    (%eax),%eax
f01015bf:	83 ec 04             	sub    $0x4,%esp
f01015c2:	6a 0a                	push   $0xa
f01015c4:	6a 00                	push   $0x0
f01015c6:	50                   	push   %eax
f01015c7:	e8 84 07 03 00       	call   f0131d50 <strtol>
f01015cc:	83 c4 10             	add    $0x10,%esp
f01015cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015d2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015d9:	83 ec 04             	sub    $0x4,%esp
f01015dc:	6a 00                	push   $0x0
f01015de:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015e1:	50                   	push   %eax
f01015e2:	ff 75 f4             	pushl  -0xc(%ebp)
f01015e5:	e8 f1 8a 00 00       	call   f010a0db <envid2env>
f01015ea:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015f0:	83 c0 08             	add    $0x8,%eax
f01015f3:	8b 00                	mov    (%eax),%eax
f01015f5:	83 ec 04             	sub    $0x4,%esp
f01015f8:	6a 10                	push   $0x10
f01015fa:	6a 00                	push   $0x0
f01015fc:	50                   	push   %eax
f01015fd:	e8 4e 07 03 00       	call   f0131d50 <strtol>
f0101602:	83 c4 10             	add    $0x10,%esp
f0101605:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101608:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010160b:	85 c0                	test   %eax,%eax
f010160d:	75 07                	jne    f0101616 <command_readusermem+0xb7>
f010160f:	b8 00 00 00 00       	mov    $0x0,%eax
f0101614:	eb 60                	jmp    f0101676 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101616:	0f 20 d8             	mov    %cr3,%eax
f0101619:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010161c:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010161f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101622:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101625:	8b 40 60             	mov    0x60(%eax),%eax
f0101628:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010162b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010162e:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101631:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101634:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f0101637:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010163a:	8a 00                	mov    (%eax),%al
f010163c:	0f b6 c0             	movzbl %al,%eax
f010163f:	83 ec 04             	sub    $0x4,%esp
f0101642:	50                   	push   %eax
f0101643:	ff 75 f0             	pushl  -0x10(%ebp)
f0101646:	68 8e 4a 13 f0       	push   $0xf0134a8e
f010164b:	e8 be f6 ff ff       	call   f0100d0e <cprintf>
f0101650:	83 c4 10             	add    $0x10,%esp
f0101653:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101656:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101659:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010165c:	0f 22 d8             	mov    %eax,%cr3
f010165f:	eb 10                	jmp    f0101671 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101661:	83 ec 0c             	sub    $0xc,%esp
f0101664:	68 a8 4a 13 f0       	push   $0xf0134aa8
f0101669:	e8 a0 f6 ff ff       	call   f0100d0e <cprintf>
f010166e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101671:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101676:	c9                   	leave  
f0101677:	c3                   	ret    

f0101678 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101678:	55                   	push   %ebp
f0101679:	89 e5                	mov    %esp,%ebp
f010167b:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010167e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101681:	83 c0 04             	add    $0x4,%eax
f0101684:	8b 00                	mov    (%eax),%eax
f0101686:	83 ec 04             	sub    $0x4,%esp
f0101689:	6a 10                	push   $0x10
f010168b:	6a 00                	push   $0x0
f010168d:	50                   	push   %eax
f010168e:	e8 bd 06 03 00       	call   f0131d50 <strtol>
f0101693:	83 c4 10             	add    $0x10,%esp
f0101696:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010169b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f010169e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016a1:	83 c0 08             	add    $0x8,%eax
f01016a4:	8b 00                	mov    (%eax),%eax
f01016a6:	83 ec 04             	sub    $0x4,%esp
f01016a9:	6a 0a                	push   $0xa
f01016ab:	6a 00                	push   $0x0
f01016ad:	50                   	push   %eax
f01016ae:	e8 9d 06 03 00       	call   f0131d50 <strtol>
f01016b3:	83 c4 10             	add    $0x10,%esp
f01016b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01016b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01016c0:	eb 22                	jmp    f01016e4 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01016c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016c5:	8d 50 01             	lea    0x1(%eax),%edx
f01016c8:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01016cb:	8a 00                	mov    (%eax),%al
f01016cd:	0f b6 c0             	movzbl %al,%eax
f01016d0:	83 ec 08             	sub    $0x8,%esp
f01016d3:	50                   	push   %eax
f01016d4:	68 d2 4a 13 f0       	push   $0xf0134ad2
f01016d9:	e8 30 f6 ff ff       	call   f0100d0e <cprintf>
f01016de:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016e1:	ff 45 f0             	incl   -0x10(%ebp)
f01016e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016e7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016ea:	7c d6                	jl     f01016c2 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016ec:	83 ec 0c             	sub    $0xc,%esp
f01016ef:	68 d5 4a 13 f0       	push   $0xf0134ad5
f01016f4:	e8 15 f6 ff ff       	call   f0100d0e <cprintf>
f01016f9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101701:	c9                   	leave  
f0101702:	c3                   	ret    

f0101703 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101703:	55                   	push   %ebp
f0101704:	89 e5                	mov    %esp,%ebp
f0101706:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101709:	8b 45 0c             	mov    0xc(%ebp),%eax
f010170c:	83 c0 04             	add    $0x4,%eax
f010170f:	8b 00                	mov    (%eax),%eax
f0101711:	83 ec 04             	sub    $0x4,%esp
f0101714:	6a 0a                	push   $0xa
f0101716:	6a 00                	push   $0x0
f0101718:	50                   	push   %eax
f0101719:	e8 32 06 03 00       	call   f0131d50 <strtol>
f010171e:	83 c4 10             	add    $0x10,%esp
f0101721:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101724:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	6a 00                	push   $0x0
f0101730:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101733:	50                   	push   %eax
f0101734:	ff 75 ec             	pushl  -0x14(%ebp)
f0101737:	e8 9f 89 00 00       	call   f010a0db <envid2env>
f010173c:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f010173f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101742:	83 c0 08             	add    $0x8,%eax
f0101745:	8b 00                	mov    (%eax),%eax
f0101747:	83 ec 04             	sub    $0x4,%esp
f010174a:	6a 10                	push   $0x10
f010174c:	6a 00                	push   $0x0
f010174e:	50                   	push   %eax
f010174f:	e8 fc 05 03 00       	call   f0131d50 <strtol>
f0101754:	83 c4 10             	add    $0x10,%esp
f0101757:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010175a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010175d:	83 c0 0c             	add    $0xc,%eax
f0101760:	8b 00                	mov    (%eax),%eax
f0101762:	83 ec 04             	sub    $0x4,%esp
f0101765:	6a 0a                	push   $0xa
f0101767:	6a 00                	push   $0x0
f0101769:	50                   	push   %eax
f010176a:	e8 e1 05 03 00       	call   f0131d50 <strtol>
f010176f:	83 c4 10             	add    $0x10,%esp
f0101772:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101775:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101778:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010177b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010177e:	85 c0                	test   %eax,%eax
f0101780:	75 07                	jne    f0101789 <command_readuserblock+0x86>
f0101782:	b8 00 00 00 00       	mov    $0x0,%eax
f0101787:	eb 65                	jmp    f01017ee <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101789:	0f 20 d8             	mov    %cr3,%eax
f010178c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010178f:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101792:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101795:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101798:	8b 40 60             	mov    0x60(%eax),%eax
f010179b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010179e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01017a1:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01017a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01017ab:	eb 28                	jmp    f01017d5 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01017ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01017b0:	8a 00                	mov    (%eax),%al
f01017b2:	0f b6 d0             	movzbl %al,%edx
f01017b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01017b8:	8a 00                	mov    (%eax),%al
f01017ba:	0f b6 c0             	movzbl %al,%eax
f01017bd:	52                   	push   %edx
f01017be:	50                   	push   %eax
f01017bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01017c2:	68 d7 4a 13 f0       	push   $0xf0134ad7
f01017c7:	e8 42 f5 ff ff       	call   f0100d0e <cprintf>
f01017cc:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017cf:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017d2:	ff 45 f0             	incl   -0x10(%ebp)
f01017d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017d8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017db:	7c d0                	jl     f01017ad <command_readuserblock+0xaa>
f01017dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017e6:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017ee:	c9                   	leave  
f01017ef:	c3                   	ret    

f01017f0 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017f0:	55                   	push   %ebp
f01017f1:	89 e5                	mov    %esp,%ebp
f01017f3:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017f9:	83 c0 04             	add    $0x4,%eax
f01017fc:	8b 00                	mov    (%eax),%eax
f01017fe:	83 ec 04             	sub    $0x4,%esp
f0101801:	6a 0a                	push   $0xa
f0101803:	6a 00                	push   $0x0
f0101805:	50                   	push   %eax
f0101806:	e8 45 05 03 00       	call   f0131d50 <strtol>
f010180b:	83 c4 10             	add    $0x10,%esp
f010180e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101811:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101818:	83 ec 04             	sub    $0x4,%esp
f010181b:	6a 00                	push   $0x0
f010181d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101820:	50                   	push   %eax
f0101821:	ff 75 f4             	pushl  -0xc(%ebp)
f0101824:	e8 b2 88 00 00       	call   f010a0db <envid2env>
f0101829:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010182c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010182f:	85 c0                	test   %eax,%eax
f0101831:	75 0a                	jne    f010183d <command_remove_table+0x4d>
f0101833:	b8 00 00 00 00       	mov    $0x0,%eax
f0101838:	e9 c7 00 00 00       	jmp    f0101904 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f010183d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101840:	83 c0 08             	add    $0x8,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	83 ec 04             	sub    $0x4,%esp
f0101848:	6a 10                	push   $0x10
f010184a:	6a 00                	push   $0x0
f010184c:	50                   	push   %eax
f010184d:	e8 fe 04 03 00       	call   f0131d50 <strtol>
f0101852:	83 c4 10             	add    $0x10,%esp
f0101855:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101858:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f010185e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101861:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101864:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101867:	c1 ea 16             	shr    $0x16,%edx
f010186a:	c1 e2 02             	shl    $0x2,%edx
f010186d:	01 d0                	add    %edx,%eax
f010186f:	8b 00                	mov    (%eax),%eax
f0101871:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101876:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0101879:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010187c:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101881:	77 1c                	ja     f010189f <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101883:	83 ec 0c             	sub    $0xc,%esp
f0101886:	ff 75 e8             	pushl  -0x18(%ebp)
f0101889:	e8 bf 63 00 00       	call   f0107c4d <kheap_virtual_address>
f010188e:	83 c4 10             	add    $0x10,%esp
f0101891:	83 ec 0c             	sub    $0xc,%esp
f0101894:	50                   	push   %eax
f0101895:	e8 8c 62 00 00       	call   f0107b26 <kfree>
f010189a:	83 c4 10             	add    $0x10,%esp
f010189d:	eb 28                	jmp    f01018c7 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010189f:	83 ec 0c             	sub    $0xc,%esp
f01018a2:	ff 75 e8             	pushl  -0x18(%ebp)
f01018a5:	e8 a9 f7 ff ff       	call   f0101053 <to_frame_info>
f01018aa:	83 c4 10             	add    $0x10,%esp
f01018ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f01018b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01018b3:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f01018b9:	83 ec 0c             	sub    $0xc,%esp
f01018bc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01018bf:	e8 6f 51 00 00       	call   f0106a33 <free_frame>
f01018c4:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f01018c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01018ca:	c1 e8 16             	shr    $0x16,%eax
f01018cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018d3:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018d9:	c1 e2 02             	shl    $0x2,%edx
f01018dc:	01 c2                	add    %eax,%edx
f01018de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018e1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018e4:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018e7:	c1 e1 02             	shl    $0x2,%ecx
f01018ea:	01 c8                	add    %ecx,%eax
f01018ec:	8b 00                	mov    (%eax),%eax
f01018ee:	83 e0 fe             	and    $0xfffffffe,%eax
f01018f1:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018f3:	0f 20 d8             	mov    %cr3,%eax
f01018f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018fc:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101904:	c9                   	leave  
f0101905:	c3                   	ret    

f0101906 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101906:	55                   	push   %ebp
f0101907:	89 e5                	mov    %esp,%ebp
f0101909:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f010190c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101910:	7e 06                	jle    f0101918 <command_allocuserpage+0x12>
f0101912:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101916:	7e 1a                	jle    f0101932 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	68 e8 4a 13 f0       	push   $0xf0134ae8
f0101920:	e8 e9 f3 ff ff       	call   f0100d0e <cprintf>
f0101925:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101928:	b8 00 00 00 00       	mov    $0x0,%eax
f010192d:	e9 46 01 00 00       	jmp    f0101a78 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101932:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101935:	83 c0 04             	add    $0x4,%eax
f0101938:	8b 00                	mov    (%eax),%eax
f010193a:	83 ec 04             	sub    $0x4,%esp
f010193d:	6a 0a                	push   $0xa
f010193f:	6a 00                	push   $0x0
f0101941:	50                   	push   %eax
f0101942:	e8 09 04 03 00       	call   f0131d50 <strtol>
f0101947:	83 c4 10             	add    $0x10,%esp
f010194a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f010194d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101954:	83 ec 04             	sub    $0x4,%esp
f0101957:	6a 00                	push   $0x0
f0101959:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010195c:	50                   	push   %eax
f010195d:	ff 75 f0             	pushl  -0x10(%ebp)
f0101960:	e8 76 87 00 00       	call   f010a0db <envid2env>
f0101965:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101968:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010196b:	85 c0                	test   %eax,%eax
f010196d:	75 0a                	jne    f0101979 <command_allocuserpage+0x73>
f010196f:	b8 00 00 00 00       	mov    $0x0,%eax
f0101974:	e9 ff 00 00 00       	jmp    f0101a78 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101979:	8b 45 0c             	mov    0xc(%ebp),%eax
f010197c:	83 c0 08             	add    $0x8,%eax
f010197f:	8b 00                	mov    (%eax),%eax
f0101981:	83 ec 04             	sub    $0x4,%esp
f0101984:	6a 10                	push   $0x10
f0101986:	6a 00                	push   $0x0
f0101988:	50                   	push   %eax
f0101989:	e8 c2 03 03 00       	call   f0131d50 <strtol>
f010198e:	83 c4 10             	add    $0x10,%esp
f0101991:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101994:	83 ec 0c             	sub    $0xc,%esp
f0101997:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010199a:	50                   	push   %eax
f010199b:	e8 7e 4f 00 00       	call   f010691e <allocate_frame>
f01019a0:	83 c4 10             	add    $0x10,%esp
f01019a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f01019a6:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f01019aa:	75 1a                	jne    f01019c6 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f01019ac:	83 ec 0c             	sub    $0xc,%esp
f01019af:	68 12 4b 13 f0       	push   $0xf0134b12
f01019b4:	e8 55 f3 ff ff       	call   f0100d0e <cprintf>
f01019b9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01019bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01019c1:	e9 b2 00 00 00       	jmp    f0101a78 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f01019c6:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01019ca:	75 1d                	jne    f01019e9 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019cc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019d2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019d5:	6a 06                	push   $0x6
f01019d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01019da:	52                   	push   %edx
f01019db:	50                   	push   %eax
f01019dc:	e8 8c 53 00 00       	call   f0106d6d <map_frame>
f01019e1:	83 c4 10             	add    $0x10,%esp
f01019e4:	e9 8a 00 00 00       	jmp    f0101a73 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019e9:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019ed:	0f 85 80 00 00 00    	jne    f0101a73 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019f6:	83 c0 0c             	add    $0xc,%eax
f01019f9:	8b 00                	mov    (%eax),%eax
f01019fb:	8a 00                	mov    (%eax),%al
f01019fd:	3c 72                	cmp    $0x72,%al
f01019ff:	74 0e                	je     f0101a0f <command_allocuserpage+0x109>
f0101a01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a04:	83 c0 0c             	add    $0xc,%eax
f0101a07:	8b 00                	mov    (%eax),%eax
f0101a09:	8a 00                	mov    (%eax),%al
f0101a0b:	3c 52                	cmp    $0x52,%al
f0101a0d:	75 09                	jne    f0101a18 <command_allocuserpage+0x112>
			rw = 0 ;
f0101a0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101a16:	eb 3c                	jmp    f0101a54 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0101a18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1b:	83 c0 0c             	add    $0xc,%eax
f0101a1e:	8b 00                	mov    (%eax),%eax
f0101a20:	8a 00                	mov    (%eax),%al
f0101a22:	3c 77                	cmp    $0x77,%al
f0101a24:	74 0e                	je     f0101a34 <command_allocuserpage+0x12e>
f0101a26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a29:	83 c0 0c             	add    $0xc,%eax
f0101a2c:	8b 00                	mov    (%eax),%eax
f0101a2e:	8a 00                	mov    (%eax),%al
f0101a30:	3c 57                	cmp    $0x57,%al
f0101a32:	75 09                	jne    f0101a3d <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a34:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a3b:	eb 17                	jmp    f0101a54 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a3d:	83 ec 0c             	sub    $0xc,%esp
f0101a40:	68 2c 4b 13 f0       	push   $0xf0134b2c
f0101a45:	e8 c4 f2 ff ff       	call   f0100d0e <cprintf>
f0101a4a:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a4d:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a57:	83 c8 04             	or     $0x4,%eax
f0101a5a:	89 c1                	mov    %eax,%ecx
f0101a5c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a62:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a65:	51                   	push   %ecx
f0101a66:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a69:	52                   	push   %edx
f0101a6a:	50                   	push   %eax
f0101a6b:	e8 fd 52 00 00       	call   f0106d6d <map_frame>
f0101a70:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a73:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a78:	c9                   	leave  
f0101a79:	c3                   	ret    

f0101a7a <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a7a:	55                   	push   %ebp
f0101a7b:	89 e5                	mov    %esp,%ebp
f0101a7d:	56                   	push   %esi
f0101a7e:	53                   	push   %ebx
f0101a7f:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a82:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a85:	83 ec 0c             	sub    $0xc,%esp
f0101a88:	50                   	push   %eax
f0101a89:	e8 79 55 00 00       	call   f0107007 <calculate_available_frames>
f0101a8e:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a91:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a9a:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a9d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101aa0:	01 de                	add    %ebx,%esi
f0101aa2:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101aa5:	01 f3                	add    %esi,%ebx
f0101aa7:	83 ec 0c             	sub    $0xc,%esp
f0101aaa:	51                   	push   %ecx
f0101aab:	52                   	push   %edx
f0101aac:	50                   	push   %eax
f0101aad:	53                   	push   %ebx
f0101aae:	68 70 4b 13 f0       	push   $0xf0134b70
f0101ab3:	e8 56 f2 ff ff       	call   f0100d0e <cprintf>
f0101ab8:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101abb:	a1 70 07 86 f0       	mov    0xf0860770,%eax
f0101ac0:	83 ec 08             	sub    $0x8,%esp
f0101ac3:	50                   	push   %eax
f0101ac4:	68 c8 4b 13 f0       	push   $0xf0134bc8
f0101ac9:	e8 40 f2 ff ff       	call   f0100d0e <cprintf>
f0101ace:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ad1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ad6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101ad9:	5b                   	pop    %ebx
f0101ada:	5e                   	pop    %esi
f0101adb:	5d                   	pop    %ebp
f0101adc:	c3                   	ret    

f0101add <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101add:	55                   	push   %ebp
f0101ade:	89 e5                	mov    %esp,%ebp
f0101ae0:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ae3:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101aea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101af1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101af8:	8b 45 08             	mov    0x8(%ebp),%eax
f0101afb:	83 f8 04             	cmp    $0x4,%eax
f0101afe:	0f 84 94 00 00 00    	je     f0101b98 <CreateEnv+0xbb>
f0101b04:	83 f8 05             	cmp    $0x5,%eax
f0101b07:	74 0e                	je     f0101b17 <CreateEnv+0x3a>
f0101b09:	83 f8 03             	cmp    $0x3,%eax
f0101b0c:	0f 84 ec 00 00 00    	je     f0101bfe <CreateEnv+0x121>
f0101b12:	e9 2f 01 00 00       	jmp    f0101c46 <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b17:	83 ec 0c             	sub    $0xc,%esp
f0101b1a:	6a 02                	push   $0x2
f0101b1c:	e8 f2 c7 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0101b21:	83 c4 10             	add    $0x10,%esp
f0101b24:	85 c0                	test   %eax,%eax
f0101b26:	75 1a                	jne    f0101b42 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101b28:	83 ec 0c             	sub    $0xc,%esp
f0101b2b:	68 04 4c 13 f0       	push   $0xf0134c04
f0101b30:	e8 d9 f1 ff ff       	call   f0100d0e <cprintf>
f0101b35:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b38:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b3d:	e9 d5 01 00 00       	jmp    f0101d17 <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b45:	83 c0 10             	add    $0x10,%eax
f0101b48:	8b 00                	mov    (%eax),%eax
f0101b4a:	83 ec 04             	sub    $0x4,%esp
f0101b4d:	6a 0a                	push   $0xa
f0101b4f:	6a 00                	push   $0x0
f0101b51:	50                   	push   %eax
f0101b52:	e8 f9 01 03 00       	call   f0131d50 <strtol>
f0101b57:	83 c4 10             	add    $0x10,%esp
f0101b5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b60:	83 c0 0c             	add    $0xc,%eax
f0101b63:	8b 00                	mov    (%eax),%eax
f0101b65:	83 ec 04             	sub    $0x4,%esp
f0101b68:	6a 0a                	push   $0xa
f0101b6a:	6a 00                	push   $0x0
f0101b6c:	50                   	push   %eax
f0101b6d:	e8 de 01 03 00       	call   f0131d50 <strtol>
f0101b72:	83 c4 10             	add    $0x10,%esp
f0101b75:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b7b:	83 c0 08             	add    $0x8,%eax
f0101b7e:	8b 00                	mov    (%eax),%eax
f0101b80:	83 ec 04             	sub    $0x4,%esp
f0101b83:	6a 0a                	push   $0xa
f0101b85:	6a 00                	push   $0x0
f0101b87:	50                   	push   %eax
f0101b88:	e8 c3 01 03 00       	call   f0131d50 <strtol>
f0101b8d:	83 c4 10             	add    $0x10,%esp
f0101b90:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b93:	e9 c8 00 00 00       	jmp    f0101c60 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b98:	83 ec 0c             	sub    $0xc,%esp
f0101b9b:	6a 02                	push   $0x2
f0101b9d:	e8 71 c7 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0101ba2:	83 c4 10             	add    $0x10,%esp
f0101ba5:	85 c0                	test   %eax,%eax
f0101ba7:	75 1d                	jne    f0101bc6 <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101ba9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bac:	83 c0 0c             	add    $0xc,%eax
f0101baf:	8b 00                	mov    (%eax),%eax
f0101bb1:	83 ec 04             	sub    $0x4,%esp
f0101bb4:	6a 0a                	push   $0xa
f0101bb6:	6a 00                	push   $0x0
f0101bb8:	50                   	push   %eax
f0101bb9:	e8 92 01 03 00       	call   f0131d50 <strtol>
f0101bbe:	83 c4 10             	add    $0x10,%esp
f0101bc1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101bc4:	eb 1b                	jmp    f0101be1 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc9:	83 c0 0c             	add    $0xc,%eax
f0101bcc:	8b 00                	mov    (%eax),%eax
f0101bce:	83 ec 04             	sub    $0x4,%esp
f0101bd1:	6a 0a                	push   $0xa
f0101bd3:	6a 00                	push   $0x0
f0101bd5:	50                   	push   %eax
f0101bd6:	e8 75 01 03 00       	call   f0131d50 <strtol>
f0101bdb:	83 c4 10             	add    $0x10,%esp
f0101bde:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101be1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101be4:	83 c0 08             	add    $0x8,%eax
f0101be7:	8b 00                	mov    (%eax),%eax
f0101be9:	83 ec 04             	sub    $0x4,%esp
f0101bec:	6a 0a                	push   $0xa
f0101bee:	6a 00                	push   $0x0
f0101bf0:	50                   	push   %eax
f0101bf1:	e8 5a 01 03 00       	call   f0131d50 <strtol>
f0101bf6:	83 c4 10             	add    $0x10,%esp
f0101bf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bfc:	eb 62                	jmp    f0101c60 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bfe:	83 ec 0c             	sub    $0xc,%esp
f0101c01:	6a 02                	push   $0x2
f0101c03:	e8 0b c7 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0101c08:	83 c4 10             	add    $0x10,%esp
f0101c0b:	85 c0                	test   %eax,%eax
f0101c0d:	74 1a                	je     f0101c29 <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101c0f:	83 ec 0c             	sub    $0xc,%esp
f0101c12:	68 c4 4c 13 f0       	push   $0xf0134cc4
f0101c17:	e8 f2 f0 ff ff       	call   f0100d0e <cprintf>
f0101c1c:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c1f:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c24:	e9 ee 00 00 00       	jmp    f0101d17 <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c2c:	83 c0 08             	add    $0x8,%eax
f0101c2f:	8b 00                	mov    (%eax),%eax
f0101c31:	83 ec 04             	sub    $0x4,%esp
f0101c34:	6a 0a                	push   $0xa
f0101c36:	6a 00                	push   $0x0
f0101c38:	50                   	push   %eax
f0101c39:	e8 12 01 03 00       	call   f0131d50 <strtol>
f0101c3e:	83 c4 10             	add    $0x10,%esp
f0101c41:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c44:	eb 1a                	jmp    f0101c60 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c46:	83 ec 0c             	sub    $0xc,%esp
f0101c49:	68 54 4d 13 f0       	push   $0xf0134d54
f0101c4e:	e8 bb f0 ff ff       	call   f0100d0e <cprintf>
f0101c53:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c56:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c5b:	e9 b7 00 00 00       	jmp    f0101d17 <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c60:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c67:	76 1f                	jbe    f0101c88 <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c69:	83 ec 08             	sub    $0x8,%esp
f0101c6c:	68 88 13 00 00       	push   $0x1388
f0101c71:	68 ec 4d 13 f0       	push   $0xf0134dec
f0101c76:	e8 93 f0 ff ff       	call   f0100d0e <cprintf>
f0101c7b:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c7e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c83:	e9 8f 00 00 00       	jmp    f0101d17 <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c88:	83 ec 0c             	sub    $0xc,%esp
f0101c8b:	6a 02                	push   $0x2
f0101c8d:	e8 81 c6 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0101c92:	83 c4 10             	add    $0x10,%esp
f0101c95:	85 c0                	test   %eax,%eax
f0101c97:	74 20                	je     f0101cb9 <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c9c:	48                   	dec    %eax
f0101c9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101ca0:	73 17                	jae    f0101cb9 <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101ca2:	83 ec 0c             	sub    $0xc,%esp
f0101ca5:	68 2c 4e 13 f0       	push   $0xf0134e2c
f0101caa:	e8 5f f0 ff ff       	call   f0100d0e <cprintf>
f0101caf:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101cb2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cb7:	eb 5e                	jmp    f0101d17 <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cb9:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cbd:	76 19                	jbe    f0101cd8 <CreateEnv+0x1fb>
f0101cbf:	68 84 4e 13 f0       	push   $0xf0134e84
f0101cc4:	68 c9 4e 13 f0       	push   $0xf0134ec9
f0101cc9:	68 5a 02 00 00       	push   $0x25a
f0101cce:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101cd3:	e8 2d e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cd8:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cdc:	76 19                	jbe    f0101cf7 <CreateEnv+0x21a>
f0101cde:	68 84 4e 13 f0       	push   $0xf0134e84
f0101ce3:	68 c9 4e 13 f0       	push   $0xf0134ec9
f0101ce8:	68 71 02 00 00       	push   $0x271
f0101ced:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0101cf2:	e8 0e e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101cf7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cfa:	83 c0 04             	add    $0x4,%eax
f0101cfd:	8b 00                	mov    (%eax),%eax
f0101cff:	ff 75 ec             	pushl  -0x14(%ebp)
f0101d02:	ff 75 f0             	pushl  -0x10(%ebp)
f0101d05:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d08:	50                   	push   %eax
f0101d09:	e8 26 77 00 00       	call   f0109434 <env_create>
f0101d0e:	83 c4 10             	add    $0x10,%esp
f0101d11:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101d14:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101d17:	c9                   	leave  
f0101d18:	c3                   	ret    

f0101d19 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101d19:	55                   	push   %ebp
f0101d1a:	89 e5                	mov    %esp,%ebp
f0101d1c:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d1f:	83 ec 08             	sub    $0x8,%esp
f0101d22:	ff 75 0c             	pushl  0xc(%ebp)
f0101d25:	ff 75 08             	pushl  0x8(%ebp)
f0101d28:	e8 b0 fd ff ff       	call   f0101add <CreateEnv>
f0101d2d:	83 c4 10             	add    $0x10,%esp
f0101d30:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d37:	75 07                	jne    f0101d40 <command_run_program+0x27>
f0101d39:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d3e:	eb 46                	jmp    f0101d86 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d43:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d46:	83 ec 08             	sub    $0x8,%esp
f0101d49:	50                   	push   %eax
f0101d4a:	68 de 4e 13 f0       	push   $0xf0134ede
f0101d4f:	e8 ba ef ff ff       	call   f0100d0e <cprintf>
f0101d54:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d57:	c7 05 70 07 86 f0 00 	movl   $0x0,0xf0860770
f0101d5e:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d61:	83 ec 0c             	sub    $0xc,%esp
f0101d64:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d67:	e8 c4 34 00 00       	call   f0105230 <sched_new_env>
f0101d6c:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d72:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d75:	83 ec 0c             	sub    $0xc,%esp
f0101d78:	50                   	push   %eax
f0101d79:	e8 cf 34 00 00       	call   f010524d <sched_run_env>
f0101d7e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d86:	c9                   	leave  
f0101d87:	c3                   	ret    

f0101d88 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d88:	55                   	push   %ebp
f0101d89:	89 e5                	mov    %esp,%ebp
f0101d8b:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d91:	83 c0 04             	add    $0x4,%eax
f0101d94:	8b 00                	mov    (%eax),%eax
f0101d96:	83 ec 04             	sub    $0x4,%esp
f0101d99:	6a 0a                	push   $0xa
f0101d9b:	6a 00                	push   $0x0
f0101d9d:	50                   	push   %eax
f0101d9e:	e8 ad ff 02 00       	call   f0131d50 <strtol>
f0101da3:	83 c4 10             	add    $0x10,%esp
f0101da6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101da9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dac:	83 ec 0c             	sub    $0xc,%esp
f0101daf:	50                   	push   %eax
f0101db0:	e8 b6 38 00 00       	call   f010566b <sched_kill_env>
f0101db5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101db8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101dbd:	c9                   	leave  
f0101dbe:	c3                   	ret    

f0101dbf <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101dbf:	55                   	push   %ebp
f0101dc0:	89 e5                	mov    %esp,%ebp
f0101dc2:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101dc5:	83 ec 08             	sub    $0x8,%esp
f0101dc8:	ff 75 0c             	pushl  0xc(%ebp)
f0101dcb:	ff 75 08             	pushl  0x8(%ebp)
f0101dce:	e8 0a fd ff ff       	call   f0101add <CreateEnv>
f0101dd3:	83 c4 10             	add    $0x10,%esp
f0101dd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ddd:	75 07                	jne    f0101de6 <commnad_load_env+0x27>
		return 0 ;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
f0101de4:	eb 2a                	jmp    f0101e10 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101de6:	83 ec 0c             	sub    $0xc,%esp
f0101de9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dec:	e8 3f 34 00 00       	call   f0105230 <sched_new_env>
f0101df1:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101df7:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dfa:	83 ec 08             	sub    $0x8,%esp
f0101dfd:	50                   	push   %eax
f0101dfe:	68 de 4e 13 f0       	push   $0xf0134ede
f0101e03:	e8 06 ef ff ff       	call   f0100d0e <cprintf>
f0101e08:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e10:	c9                   	leave  
f0101e11:	c3                   	ret    

f0101e12 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101e12:	55                   	push   %ebp
f0101e13:	89 e5                	mov    %esp,%ebp
f0101e15:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101e18:	c7 05 70 07 86 f0 00 	movl   $0x0,0xf0860770
f0101e1f:	00 00 00 
	sched_run_all();
f0101e22:	e8 51 30 00 00       	call   f0104e78 <sched_run_all>

	return 0 ;
f0101e27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e2c:	c9                   	leave  
f0101e2d:	c3                   	ret    

f0101e2e <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e2e:	55                   	push   %ebp
f0101e2f:	89 e5                	mov    %esp,%ebp
f0101e31:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e34:	e8 35 2e 00 00       	call   f0104c6e <sched_print_all>

	return 0 ;
f0101e39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e3e:	c9                   	leave  
f0101e3f:	c3                   	ret    

f0101e40 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e40:	55                   	push   %ebp
f0101e41:	89 e5                	mov    %esp,%ebp
f0101e43:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e46:	e8 a0 30 00 00       	call   f0104eeb <sched_kill_all>

	return 0 ;
f0101e4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e50:	c9                   	leave  
f0101e51:	c3                   	ret    

f0101e52 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e52:	55                   	push   %ebp
f0101e53:	89 e5                	mov    %esp,%ebp
f0101e55:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e58:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e5c:	7f 1a                	jg     f0101e78 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e5e:	83 ec 0c             	sub    $0xc,%esp
f0101e61:	68 f4 4e 13 f0       	push   $0xf0134ef4
f0101e66:	e8 a3 ee ff ff       	call   f0100d0e <cprintf>
f0101e6b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e73:	e9 83 00 00 00       	jmp    f0101efb <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e7b:	83 c0 04             	add    $0x4,%eax
f0101e7e:	8b 00                	mov    (%eax),%eax
f0101e80:	83 ec 04             	sub    $0x4,%esp
f0101e83:	6a 0a                	push   $0xa
f0101e85:	6a 00                	push   $0x0
f0101e87:	50                   	push   %eax
f0101e88:	e8 c3 fe 02 00       	call   f0131d50 <strtol>
f0101e8d:	83 c4 10             	add    $0x10,%esp
f0101e90:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e93:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e97:	75 20                	jne    f0101eb9 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e99:	83 ec 0c             	sub    $0xc,%esp
f0101e9c:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e9f:	e8 e4 c3 00 00       	call   f010e288 <setPageReplacmentAlgorithmLRU>
f0101ea4:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101ea7:	83 ec 0c             	sub    $0xc,%esp
f0101eaa:	68 54 4f 13 f0       	push   $0xf0134f54
f0101eaf:	e8 5a ee ff ff       	call   f0100d0e <cprintf>
f0101eb4:	83 c4 10             	add    $0x10,%esp
f0101eb7:	eb 3d                	jmp    f0101ef6 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101eb9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101ebd:	75 20                	jne    f0101edf <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101ebf:	83 ec 0c             	sub    $0xc,%esp
f0101ec2:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ec5:	e8 be c3 00 00       	call   f010e288 <setPageReplacmentAlgorithmLRU>
f0101eca:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ecd:	83 ec 0c             	sub    $0xc,%esp
f0101ed0:	68 98 4f 13 f0       	push   $0xf0134f98
f0101ed5:	e8 34 ee ff ff       	call   f0100d0e <cprintf>
f0101eda:	83 c4 10             	add    $0x10,%esp
f0101edd:	eb 17                	jmp    f0101ef6 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101edf:	83 ec 0c             	sub    $0xc,%esp
f0101ee2:	68 d8 4f 13 f0       	push   $0xf0134fd8
f0101ee7:	e8 22 ee ff ff       	call   f0100d0e <cprintf>
f0101eec:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101eef:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ef4:	eb 05                	jmp    f0101efb <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101ef6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101efb:	c9                   	leave  
f0101efc:	c3                   	ret    

f0101efd <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101efd:	55                   	push   %ebp
f0101efe:	89 e5                	mov    %esp,%ebp
f0101f00:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101f03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f06:	83 c0 04             	add    $0x4,%eax
f0101f09:	8b 00                	mov    (%eax),%eax
f0101f0b:	83 ec 04             	sub    $0x4,%esp
f0101f0e:	6a 0a                	push   $0xa
f0101f10:	6a 00                	push   $0x0
f0101f12:	50                   	push   %eax
f0101f13:	e8 38 fe 02 00       	call   f0131d50 <strtol>
f0101f18:	83 c4 10             	add    $0x10,%esp
f0101f1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101f1e:	83 ec 0c             	sub    $0xc,%esp
f0101f21:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f24:	e8 d2 c3 00 00       	call   f010e2fb <setPageReplacmentAlgorithmNchanceCLOCK>
f0101f29:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f2c:	83 ec 0c             	sub    $0xc,%esp
f0101f2f:	68 2c 50 13 f0       	push   $0xf013502c
f0101f34:	e8 d5 ed ff ff       	call   f0100d0e <cprintf>
f0101f39:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f41:	c9                   	leave  
f0101f42:	c3                   	ret    

f0101f43 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f43:	55                   	push   %ebp
f0101f44:	89 e5                	mov    %esp,%ebp
f0101f46:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f49:	e8 6d c3 00 00       	call   f010e2bb <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f4e:	83 ec 0c             	sub    $0xc,%esp
f0101f51:	68 60 50 13 f0       	push   $0xf0135060
f0101f56:	e8 b3 ed ff ff       	call   f0100d0e <cprintf>
f0101f5b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f63:	c9                   	leave  
f0101f64:	c3                   	ret    

f0101f65 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f65:	55                   	push   %ebp
f0101f66:	89 e5                	mov    %esp,%ebp
f0101f68:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f6b:	e8 5b c3 00 00       	call   f010e2cb <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f70:	83 ec 0c             	sub    $0xc,%esp
f0101f73:	68 8c 50 13 f0       	push   $0xf013508c
f0101f78:	e8 91 ed ff ff       	call   f0100d0e <cprintf>
f0101f7d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f85:	c9                   	leave  
f0101f86:	c3                   	ret    

f0101f87 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f87:	55                   	push   %ebp
f0101f88:	89 e5                	mov    %esp,%ebp
f0101f8a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f8d:	e8 49 c3 00 00       	call   f010e2db <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f92:	83 ec 0c             	sub    $0xc,%esp
f0101f95:	68 b4 50 13 f0       	push   $0xf01350b4
f0101f9a:	e8 6f ed ff ff       	call   f0100d0e <cprintf>
f0101f9f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fa2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fa7:	c9                   	leave  
f0101fa8:	c3                   	ret    

f0101fa9 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101fa9:	55                   	push   %ebp
f0101faa:	89 e5                	mov    %esp,%ebp
f0101fac:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fb2:	83 c0 04             	add    $0x4,%eax
f0101fb5:	8b 00                	mov    (%eax),%eax
f0101fb7:	83 ec 04             	sub    $0x4,%esp
f0101fba:	6a 0a                	push   $0xa
f0101fbc:	6a 00                	push   $0x0
f0101fbe:	50                   	push   %eax
f0101fbf:	e8 8c fd 02 00       	call   f0131d50 <strtol>
f0101fc4:	83 c4 10             	add    $0x10,%esp
f0101fc7:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101fca:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fce:	83 ec 0c             	sub    $0xc,%esp
f0101fd1:	50                   	push   %eax
f0101fd2:	e8 67 28 00 00       	call   f010483e <sched_init_RR>
f0101fd7:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fda:	a1 28 07 86 f0       	mov    0xf0860728,%eax
f0101fdf:	8a 00                	mov    (%eax),%al
f0101fe1:	0f b6 c0             	movzbl %al,%eax
f0101fe4:	83 ec 08             	sub    $0x8,%esp
f0101fe7:	50                   	push   %eax
f0101fe8:	68 e8 50 13 f0       	push   $0xf01350e8
f0101fed:	e8 1c ed ff ff       	call   f0100d0e <cprintf>
f0101ff2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ff5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ffa:	c9                   	leave  
f0101ffb:	c3                   	ret    

f0101ffc <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101ffc:	55                   	push   %ebp
f0101ffd:	89 e5                	mov    %esp,%ebp
f0101fff:	53                   	push   %ebx
f0102000:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102003:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102006:	83 c0 04             	add    $0x4,%eax
f0102009:	8b 00                	mov    (%eax),%eax
f010200b:	83 ec 04             	sub    $0x4,%esp
f010200e:	6a 0a                	push   $0xa
f0102010:	6a 00                	push   $0x0
f0102012:	50                   	push   %eax
f0102013:	e8 38 fd 02 00       	call   f0131d50 <strtol>
f0102018:	83 c4 10             	add    $0x10,%esp
f010201b:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010201e:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102025:	eb 2e                	jmp    f0102055 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102027:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202a:	8d 58 fe             	lea    -0x2(%eax),%ebx
f010202d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102030:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102037:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203a:	01 d0                	add    %edx,%eax
f010203c:	8b 00                	mov    (%eax),%eax
f010203e:	83 ec 04             	sub    $0x4,%esp
f0102041:	6a 0a                	push   $0xa
f0102043:	6a 00                	push   $0x0
f0102045:	50                   	push   %eax
f0102046:	e8 05 fd 02 00       	call   f0131d50 <strtol>
f010204b:	83 c4 10             	add    $0x10,%esp
f010204e:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102052:	ff 45 f4             	incl   -0xc(%ebp)
f0102055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102058:	3b 45 08             	cmp    0x8(%ebp),%eax
f010205b:	7c ca                	jl     f0102027 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010205d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102061:	83 ec 08             	sub    $0x8,%esp
f0102064:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102067:	52                   	push   %edx
f0102068:	50                   	push   %eax
f0102069:	e8 5b 28 00 00       	call   f01048c9 <sched_init_MLFQ>
f010206e:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102071:	83 ec 0c             	sub    $0xc,%esp
f0102074:	68 20 51 13 f0       	push   $0xf0135120
f0102079:	e8 90 ec ff ff       	call   f0100d0e <cprintf>
f010207e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102081:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102088:	eb 24                	jmp    f01020ae <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010208a:	8b 15 28 07 86 f0    	mov    0xf0860728,%edx
f0102090:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102093:	01 d0                	add    %edx,%eax
f0102095:	8a 00                	mov    (%eax),%al
f0102097:	0f b6 c0             	movzbl %al,%eax
f010209a:	83 ec 08             	sub    $0x8,%esp
f010209d:	50                   	push   %eax
f010209e:	68 4d 51 13 f0       	push   $0xf013514d
f01020a3:	e8 66 ec ff ff       	call   f0100d0e <cprintf>
f01020a8:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01020ab:	ff 45 f0             	incl   -0x10(%ebp)
f01020ae:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01020b3:	0f b6 c0             	movzbl %al,%eax
f01020b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01020b9:	7f cf                	jg     f010208a <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01020bb:	83 ec 0c             	sub    $0xc,%esp
f01020be:	68 d5 4a 13 f0       	push   $0xf0134ad5
f01020c3:	e8 46 ec ff ff       	call   f0100d0e <cprintf>
f01020c8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01020cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020d3:	c9                   	leave  
f01020d4:	c3                   	ret    

f01020d5 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020d5:	55                   	push   %ebp
f01020d6:	89 e5                	mov    %esp,%ebp
f01020d8:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020db:	e8 8d 23 00 00       	call   f010446d <isSchedMethodMLFQ>
f01020e0:	85 c0                	test   %eax,%eax
f01020e2:	74 5c                	je     f0102140 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020e4:	83 ec 0c             	sub    $0xc,%esp
f01020e7:	68 54 51 13 f0       	push   $0xf0135154
f01020ec:	e8 1d ec ff ff       	call   f0100d0e <cprintf>
f01020f1:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020fb:	eb 24                	jmp    f0102121 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020fd:	8b 15 28 07 86 f0    	mov    0xf0860728,%edx
f0102103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102106:	01 d0                	add    %edx,%eax
f0102108:	8a 00                	mov    (%eax),%al
f010210a:	0f b6 c0             	movzbl %al,%eax
f010210d:	83 ec 08             	sub    $0x8,%esp
f0102110:	50                   	push   %eax
f0102111:	68 4d 51 13 f0       	push   $0xf013514d
f0102116:	e8 f3 eb ff ff       	call   f0100d0e <cprintf>
f010211b:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010211e:	ff 45 f4             	incl   -0xc(%ebp)
f0102121:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0102126:	0f b6 c0             	movzbl %al,%eax
f0102129:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010212c:	7f cf                	jg     f01020fd <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f010212e:	83 ec 0c             	sub    $0xc,%esp
f0102131:	68 d5 4a 13 f0       	push   $0xf0134ad5
f0102136:	e8 d3 eb ff ff       	call   f0100d0e <cprintf>
f010213b:	83 c4 10             	add    $0x10,%esp
f010213e:	eb 36                	jmp    f0102176 <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102140:	e8 0e 23 00 00       	call   f0104453 <isSchedMethodRR>
f0102145:	85 c0                	test   %eax,%eax
f0102147:	74 1d                	je     f0102166 <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102149:	a1 28 07 86 f0       	mov    0xf0860728,%eax
f010214e:	8a 00                	mov    (%eax),%al
f0102150:	0f b6 c0             	movzbl %al,%eax
f0102153:	83 ec 08             	sub    $0x8,%esp
f0102156:	50                   	push   %eax
f0102157:	68 88 51 13 f0       	push   $0xf0135188
f010215c:	e8 ad eb ff ff       	call   f0100d0e <cprintf>
f0102161:	83 c4 10             	add    $0x10,%esp
f0102164:	eb 10                	jmp    f0102176 <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0102166:	83 ec 0c             	sub    $0xc,%esp
f0102169:	68 c4 51 13 f0       	push   $0xf01351c4
f010216e:	e8 9b eb ff ff       	call   f0100d0e <cprintf>
f0102173:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102176:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010217b:	c9                   	leave  
f010217c:	c3                   	ret    

f010217d <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010217d:	55                   	push   %ebp
f010217e:	89 e5                	mov    %esp,%ebp
f0102180:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102183:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102186:	83 c0 04             	add    $0x4,%eax
f0102189:	8b 00                	mov    (%eax),%eax
f010218b:	83 ec 04             	sub    $0x4,%esp
f010218e:	6a 0a                	push   $0xa
f0102190:	6a 00                	push   $0x0
f0102192:	50                   	push   %eax
f0102193:	e8 b8 fb 02 00       	call   f0131d50 <strtol>
f0102198:	83 c4 10             	add    $0x10,%esp
f010219b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010219e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021a1:	0f b6 c0             	movzbl %al,%eax
f01021a4:	83 ec 0c             	sub    $0xc,%esp
f01021a7:	50                   	push   %eax
f01021a8:	e8 c9 ea 02 00       	call   f0130c76 <chksch>
f01021ad:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01021b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01021b4:	75 12                	jne    f01021c8 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01021b6:	83 ec 0c             	sub    $0xc,%esp
f01021b9:	68 ec 51 13 f0       	push   $0xf01351ec
f01021be:	e8 4b eb ff ff       	call   f0100d0e <cprintf>
f01021c3:	83 c4 10             	add    $0x10,%esp
f01021c6:	eb 16                	jmp    f01021de <command_sch_test+0x61>
	else if (status == 1)
f01021c8:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021cc:	75 10                	jne    f01021de <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021ce:	83 ec 0c             	sub    $0xc,%esp
f01021d1:	68 14 52 13 f0       	push   $0xf0135214
f01021d6:	e8 33 eb ff ff       	call   f0100d0e <cprintf>
f01021db:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021e3:	c9                   	leave  
f01021e4:	c3                   	ret    

f01021e5 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021e5:	55                   	push   %ebp
f01021e6:	89 e5                	mov    %esp,%ebp
f01021e8:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021eb:	e8 39 c1 00 00       	call   f010e329 <isPageReplacmentAlgorithmCLOCK>
f01021f0:	85 c0                	test   %eax,%eax
f01021f2:	74 15                	je     f0102209 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021f4:	83 ec 0c             	sub    $0xc,%esp
f01021f7:	68 38 52 13 f0       	push   $0xf0135238
f01021fc:	e8 0d eb ff ff       	call   f0100d0e <cprintf>
f0102201:	83 c4 10             	add    $0x10,%esp
f0102204:	e9 8c 00 00 00       	jmp    f0102295 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0102209:	83 ec 0c             	sub    $0xc,%esp
f010220c:	6a 01                	push   $0x1
f010220e:	e8 00 c1 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0102213:	83 c4 10             	add    $0x10,%esp
f0102216:	85 c0                	test   %eax,%eax
f0102218:	74 12                	je     f010222c <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010221a:	83 ec 0c             	sub    $0xc,%esp
f010221d:	68 60 52 13 f0       	push   $0xf0135260
f0102222:	e8 e7 ea ff ff       	call   f0100d0e <cprintf>
f0102227:	83 c4 10             	add    $0x10,%esp
f010222a:	eb 69                	jmp    f0102295 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	6a 02                	push   $0x2
f0102231:	e8 dd c0 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0102236:	83 c4 10             	add    $0x10,%esp
f0102239:	85 c0                	test   %eax,%eax
f010223b:	74 12                	je     f010224f <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f010223d:	83 ec 0c             	sub    $0xc,%esp
f0102240:	68 a0 52 13 f0       	push   $0xf01352a0
f0102245:	e8 c4 ea ff ff       	call   f0100d0e <cprintf>
f010224a:	83 c4 10             	add    $0x10,%esp
f010224d:	eb 46                	jmp    f0102295 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f010224f:	e8 f0 c0 00 00       	call   f010e344 <isPageReplacmentAlgorithmFIFO>
f0102254:	85 c0                	test   %eax,%eax
f0102256:	74 12                	je     f010226a <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0102258:	83 ec 0c             	sub    $0xc,%esp
f010225b:	68 dc 52 13 f0       	push   $0xf01352dc
f0102260:	e8 a9 ea ff ff       	call   f0100d0e <cprintf>
f0102265:	83 c4 10             	add    $0x10,%esp
f0102268:	eb 2b                	jmp    f0102295 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010226a:	e8 f0 c0 00 00       	call   f010e35f <isPageReplacmentAlgorithmModifiedCLOCK>
f010226f:	85 c0                	test   %eax,%eax
f0102271:	74 12                	je     f0102285 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102273:	83 ec 0c             	sub    $0xc,%esp
f0102276:	68 00 53 13 f0       	push   $0xf0135300
f010227b:	e8 8e ea ff ff       	call   f0100d0e <cprintf>
f0102280:	83 c4 10             	add    $0x10,%esp
f0102283:	eb 10                	jmp    f0102295 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102285:	83 ec 0c             	sub    $0xc,%esp
f0102288:	68 30 53 13 f0       	push   $0xf0135330
f010228d:	e8 7c ea ff ff       	call   f0100d0e <cprintf>
f0102292:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102295:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010229a:	c9                   	leave  
f010229b:	c3                   	ret    

f010229c <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010229c:	55                   	push   %ebp
f010229d:	89 e5                	mov    %esp,%ebp
f010229f:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01022a2:	e8 18 ed ff ff       	call   f0100fbf <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01022a7:	83 ec 0c             	sub    $0xc,%esp
f01022aa:	68 5c 53 13 f0       	push   $0xf013535c
f01022af:	e8 5a ea ff ff       	call   f0100d0e <cprintf>
f01022b4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022bc:	c9                   	leave  
f01022bd:	c3                   	ret    

f01022be <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01022be:	55                   	push   %ebp
f01022bf:	89 e5                	mov    %esp,%ebp
f01022c1:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f01022c4:	e8 06 ed ff ff       	call   f0100fcf <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f01022c9:	83 ec 0c             	sub    $0xc,%esp
f01022cc:	68 8c 53 13 f0       	push   $0xf013538c
f01022d1:	e8 38 ea ff ff       	call   f0100d0e <cprintf>
f01022d6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022de:	c9                   	leave  
f01022df:	c3                   	ret    

f01022e0 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022e0:	55                   	push   %ebp
f01022e1:	89 e5                	mov    %esp,%ebp
f01022e3:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022e6:	e8 f4 ec ff ff       	call   f0100fdf <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022eb:	83 ec 0c             	sub    $0xc,%esp
f01022ee:	68 bc 53 13 f0       	push   $0xf01353bc
f01022f3:	e8 16 ea ff ff       	call   f0100d0e <cprintf>
f01022f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102300:	c9                   	leave  
f0102301:	c3                   	ret    

f0102302 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102302:	55                   	push   %ebp
f0102303:	89 e5                	mov    %esp,%ebp
f0102305:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102308:	e8 e2 ec ff ff       	call   f0100fef <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010230d:	83 ec 0c             	sub    $0xc,%esp
f0102310:	68 ec 53 13 f0       	push   $0xf01353ec
f0102315:	e8 f4 e9 ff ff       	call   f0100d0e <cprintf>
f010231a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010231d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102322:	c9                   	leave  
f0102323:	c3                   	ret    

f0102324 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102324:	55                   	push   %ebp
f0102325:	89 e5                	mov    %esp,%ebp
f0102327:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010232a:	e8 d0 ec ff ff       	call   f0100fff <isUHeapPlacementStrategyFIRSTFIT>
f010232f:	84 c0                	test   %al,%al
f0102331:	74 12                	je     f0102345 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102333:	83 ec 0c             	sub    $0xc,%esp
f0102336:	68 1c 54 13 f0       	push   $0xf013541c
f010233b:	e8 ce e9 ff ff       	call   f0100d0e <cprintf>
f0102340:	83 c4 10             	add    $0x10,%esp
f0102343:	eb 61                	jmp    f01023a6 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102345:	e8 ca ec ff ff       	call   f0101014 <isUHeapPlacementStrategyBESTFIT>
f010234a:	84 c0                	test   %al,%al
f010234c:	74 12                	je     f0102360 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010234e:	83 ec 0c             	sub    $0xc,%esp
f0102351:	68 48 54 13 f0       	push   $0xf0135448
f0102356:	e8 b3 e9 ff ff       	call   f0100d0e <cprintf>
f010235b:	83 c4 10             	add    $0x10,%esp
f010235e:	eb 46                	jmp    f01023a6 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102360:	e8 c4 ec ff ff       	call   f0101029 <isUHeapPlacementStrategyNEXTFIT>
f0102365:	84 c0                	test   %al,%al
f0102367:	74 12                	je     f010237b <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0102369:	83 ec 0c             	sub    $0xc,%esp
f010236c:	68 74 54 13 f0       	push   $0xf0135474
f0102371:	e8 98 e9 ff ff       	call   f0100d0e <cprintf>
f0102376:	83 c4 10             	add    $0x10,%esp
f0102379:	eb 2b                	jmp    f01023a6 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010237b:	e8 be ec ff ff       	call   f010103e <isUHeapPlacementStrategyWORSTFIT>
f0102380:	84 c0                	test   %al,%al
f0102382:	74 12                	je     f0102396 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102384:	83 ec 0c             	sub    $0xc,%esp
f0102387:	68 a0 54 13 f0       	push   $0xf01354a0
f010238c:	e8 7d e9 ff ff       	call   f0100d0e <cprintf>
f0102391:	83 c4 10             	add    $0x10,%esp
f0102394:	eb 10                	jmp    f01023a6 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102396:	83 ec 0c             	sub    $0xc,%esp
f0102399:	68 cc 54 13 f0       	push   $0xf01354cc
f010239e:	e8 6b e9 ff ff       	call   f0100d0e <cprintf>
f01023a3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01023a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023ab:	c9                   	leave  
f01023ac:	c3                   	ret    

f01023ad <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01023ad:	55                   	push   %ebp
f01023ae:	89 e5                	mov    %esp,%ebp
f01023b0:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01023b3:	e8 4f eb ff ff       	call   f0100f07 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023b8:	83 ec 0c             	sub    $0xc,%esp
f01023bb:	68 f8 54 13 f0       	push   $0xf01354f8
f01023c0:	e8 49 e9 ff ff       	call   f0100d0e <cprintf>
f01023c5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023cd:	c9                   	leave  
f01023ce:	c3                   	ret    

f01023cf <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023cf:	55                   	push   %ebp
f01023d0:	89 e5                	mov    %esp,%ebp
f01023d2:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023d5:	e8 3d eb ff ff       	call   f0100f17 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023da:	83 ec 0c             	sub    $0xc,%esp
f01023dd:	68 f8 54 13 f0       	push   $0xf01354f8
f01023e2:	e8 27 e9 ff ff       	call   f0100d0e <cprintf>
f01023e7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023ef:	c9                   	leave  
f01023f0:	c3                   	ret    

f01023f1 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023f1:	55                   	push   %ebp
f01023f2:	89 e5                	mov    %esp,%ebp
f01023f4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023f7:	e8 2b eb ff ff       	call   f0100f27 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023fc:	83 ec 0c             	sub    $0xc,%esp
f01023ff:	68 2c 55 13 f0       	push   $0xf013552c
f0102404:	e8 05 e9 ff ff       	call   f0100d0e <cprintf>
f0102409:	83 c4 10             	add    $0x10,%esp
	return 0;
f010240c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102411:	c9                   	leave  
f0102412:	c3                   	ret    

f0102413 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102413:	55                   	push   %ebp
f0102414:	89 e5                	mov    %esp,%ebp
f0102416:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102419:	e8 19 eb ff ff       	call   f0100f37 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010241e:	83 ec 0c             	sub    $0xc,%esp
f0102421:	68 5c 55 13 f0       	push   $0xf013555c
f0102426:	e8 e3 e8 ff ff       	call   f0100d0e <cprintf>
f010242b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010242e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102433:	c9                   	leave  
f0102434:	c3                   	ret    

f0102435 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102435:	55                   	push   %ebp
f0102436:	89 e5                	mov    %esp,%ebp
f0102438:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010243b:	e8 07 eb ff ff       	call   f0100f47 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102440:	83 ec 0c             	sub    $0xc,%esp
f0102443:	68 8c 55 13 f0       	push   $0xf013558c
f0102448:	e8 c1 e8 ff ff       	call   f0100d0e <cprintf>
f010244d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102450:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102455:	c9                   	leave  
f0102456:	c3                   	ret    

f0102457 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102457:	55                   	push   %ebp
f0102458:	89 e5                	mov    %esp,%ebp
f010245a:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010245d:	e8 f5 ea ff ff       	call   f0100f57 <isKHeapPlacementStrategyCONTALLOC>
f0102462:	84 c0                	test   %al,%al
f0102464:	74 12                	je     f0102478 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102466:	83 ec 0c             	sub    $0xc,%esp
f0102469:	68 c0 55 13 f0       	push   $0xf01355c0
f010246e:	e8 9b e8 ff ff       	call   f0100d0e <cprintf>
f0102473:	83 c4 10             	add    $0x10,%esp
f0102476:	eb 7c                	jmp    f01024f4 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102478:	e8 ee ea ff ff       	call   f0100f6b <isKHeapPlacementStrategyFIRSTFIT>
f010247d:	84 c0                	test   %al,%al
f010247f:	74 12                	je     f0102493 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102481:	83 ec 0c             	sub    $0xc,%esp
f0102484:	68 fc 55 13 f0       	push   $0xf01355fc
f0102489:	e8 80 e8 ff ff       	call   f0100d0e <cprintf>
f010248e:	83 c4 10             	add    $0x10,%esp
f0102491:	eb 61                	jmp    f01024f4 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102493:	e8 e8 ea ff ff       	call   f0100f80 <isKHeapPlacementStrategyBESTFIT>
f0102498:	84 c0                	test   %al,%al
f010249a:	74 12                	je     f01024ae <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010249c:	83 ec 0c             	sub    $0xc,%esp
f010249f:	68 2c 56 13 f0       	push   $0xf013562c
f01024a4:	e8 65 e8 ff ff       	call   f0100d0e <cprintf>
f01024a9:	83 c4 10             	add    $0x10,%esp
f01024ac:	eb 46                	jmp    f01024f4 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01024ae:	e8 e2 ea ff ff       	call   f0100f95 <isKHeapPlacementStrategyNEXTFIT>
f01024b3:	84 c0                	test   %al,%al
f01024b5:	74 12                	je     f01024c9 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01024b7:	83 ec 0c             	sub    $0xc,%esp
f01024ba:	68 58 56 13 f0       	push   $0xf0135658
f01024bf:	e8 4a e8 ff ff       	call   f0100d0e <cprintf>
f01024c4:	83 c4 10             	add    $0x10,%esp
f01024c7:	eb 2b                	jmp    f01024f4 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f01024c9:	e8 dc ea ff ff       	call   f0100faa <isKHeapPlacementStrategyWORSTFIT>
f01024ce:	84 c0                	test   %al,%al
f01024d0:	74 12                	je     f01024e4 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024d2:	83 ec 0c             	sub    $0xc,%esp
f01024d5:	68 84 56 13 f0       	push   $0xf0135684
f01024da:	e8 2f e8 ff ff       	call   f0100d0e <cprintf>
f01024df:	83 c4 10             	add    $0x10,%esp
f01024e2:	eb 10                	jmp    f01024f4 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024e4:	83 ec 0c             	sub    $0xc,%esp
f01024e7:	68 b4 56 13 f0       	push   $0xf01356b4
f01024ec:	e8 1d e8 ff ff       	call   f0100d0e <cprintf>
f01024f1:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024f9:	c9                   	leave  
f01024fa:	c3                   	ret    

f01024fb <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024fb:	55                   	push   %ebp
f01024fc:	89 e5                	mov    %esp,%ebp
f01024fe:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102501:	e8 d0 be 00 00       	call   f010e3d6 <isBufferingEnabled>
f0102506:	84 c0                	test   %al,%al
f0102508:	75 12                	jne    f010251c <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010250a:	83 ec 0c             	sub    $0xc,%esp
f010250d:	68 e4 56 13 f0       	push   $0xf01356e4
f0102512:	e8 f7 e7 ff ff       	call   f0100d0e <cprintf>
f0102517:	83 c4 10             	add    $0x10,%esp
f010251a:	eb 1d                	jmp    f0102539 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f010251c:	83 ec 0c             	sub    $0xc,%esp
f010251f:	6a 00                	push   $0x0
f0102521:	e8 8a be 00 00       	call   f010e3b0 <enableModifiedBuffer>
f0102526:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102529:	83 ec 0c             	sub    $0xc,%esp
f010252c:	68 20 57 13 f0       	push   $0xf0135720
f0102531:	e8 d8 e7 ff ff       	call   f0100d0e <cprintf>
f0102536:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102539:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010253e:	c9                   	leave  
f010253f:	c3                   	ret    

f0102540 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102540:	55                   	push   %ebp
f0102541:	89 e5                	mov    %esp,%ebp
f0102543:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102546:	e8 8b be 00 00       	call   f010e3d6 <isBufferingEnabled>
f010254b:	84 c0                	test   %al,%al
f010254d:	75 12                	jne    f0102561 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010254f:	83 ec 0c             	sub    $0xc,%esp
f0102552:	68 e4 56 13 f0       	push   $0xf01356e4
f0102557:	e8 b2 e7 ff ff       	call   f0100d0e <cprintf>
f010255c:	83 c4 10             	add    $0x10,%esp
f010255f:	eb 1d                	jmp    f010257e <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102561:	83 ec 0c             	sub    $0xc,%esp
f0102564:	6a 01                	push   $0x1
f0102566:	e8 45 be 00 00       	call   f010e3b0 <enableModifiedBuffer>
f010256b:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f010256e:	83 ec 0c             	sub    $0xc,%esp
f0102571:	68 44 57 13 f0       	push   $0xf0135744
f0102576:	e8 93 e7 ff ff       	call   f0100d0e <cprintf>
f010257b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010257e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102583:	c9                   	leave  
f0102584:	c3                   	ret    

f0102585 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102585:	55                   	push   %ebp
f0102586:	89 e5                	mov    %esp,%ebp
f0102588:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010258b:	83 ec 0c             	sub    $0xc,%esp
f010258e:	6a 00                	push   $0x0
f0102590:	e8 33 be 00 00       	call   f010e3c8 <enableBuffering>
f0102595:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102598:	83 ec 0c             	sub    $0xc,%esp
f010259b:	6a 00                	push   $0x0
f010259d:	e8 0e be 00 00       	call   f010e3b0 <enableModifiedBuffer>
f01025a2:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01025a5:	83 ec 0c             	sub    $0xc,%esp
f01025a8:	68 64 57 13 f0       	push   $0xf0135764
f01025ad:	e8 5c e7 ff ff       	call   f0100d0e <cprintf>
f01025b2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025ba:	c9                   	leave  
f01025bb:	c3                   	ret    

f01025bc <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01025bc:	55                   	push   %ebp
f01025bd:	89 e5                	mov    %esp,%ebp
f01025bf:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01025c2:	83 ec 0c             	sub    $0xc,%esp
f01025c5:	6a 01                	push   $0x1
f01025c7:	e8 fc bd 00 00       	call   f010e3c8 <enableBuffering>
f01025cc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025cf:	83 ec 0c             	sub    $0xc,%esp
f01025d2:	6a 01                	push   $0x1
f01025d4:	e8 d7 bd 00 00       	call   f010e3b0 <enableModifiedBuffer>
f01025d9:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025dc:	e8 0d be 00 00       	call   f010e3ee <getModifiedBufferLength>
f01025e1:	85 c0                	test   %eax,%eax
f01025e3:	75 59                	jne    f010263e <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025e5:	83 ec 0c             	sub    $0xc,%esp
f01025e8:	68 80 57 13 f0       	push   $0xf0135780
f01025ed:	e8 1c e7 ff ff       	call   f0100d0e <cprintf>
f01025f2:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025f5:	83 ec 08             	sub    $0x8,%esp
f01025f8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025fb:	50                   	push   %eax
f01025fc:	68 b0 57 13 f0       	push   $0xf01357b0
f0102601:	e8 e4 f1 02 00       	call   f01317ea <readline>
f0102606:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102609:	83 ec 04             	sub    $0x4,%esp
f010260c:	6a 0a                	push   $0xa
f010260e:	6a 00                	push   $0x0
f0102610:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102613:	50                   	push   %eax
f0102614:	e8 37 f7 02 00       	call   f0131d50 <strtol>
f0102619:	83 c4 10             	add    $0x10,%esp
f010261c:	83 ec 0c             	sub    $0xc,%esp
f010261f:	50                   	push   %eax
f0102620:	e8 bb bd 00 00       	call   f010e3e0 <setModifiedBufferLength>
f0102625:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102628:	e8 c1 bd 00 00       	call   f010e3ee <getModifiedBufferLength>
f010262d:	83 ec 08             	sub    $0x8,%esp
f0102630:	50                   	push   %eax
f0102631:	68 dc 57 13 f0       	push   $0xf01357dc
f0102636:	e8 d3 e6 ff ff       	call   f0100d0e <cprintf>
f010263b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010263e:	83 ec 0c             	sub    $0xc,%esp
f0102641:	68 01 58 13 f0       	push   $0xf0135801
f0102646:	e8 c3 e6 ff ff       	call   f0100d0e <cprintf>
f010264b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010264e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102653:	c9                   	leave  
f0102654:	c3                   	ret    

f0102655 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102655:	55                   	push   %ebp
f0102656:	89 e5                	mov    %esp,%ebp
f0102658:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010265b:	e8 76 bd 00 00       	call   f010e3d6 <isBufferingEnabled>
f0102660:	84 c0                	test   %al,%al
f0102662:	75 12                	jne    f0102676 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102664:	83 ec 0c             	sub    $0xc,%esp
f0102667:	68 1c 58 13 f0       	push   $0xf013581c
f010266c:	e8 9d e6 ff ff       	call   f0100d0e <cprintf>
f0102671:	83 c4 10             	add    $0x10,%esp
f0102674:	eb 19                	jmp    f010268f <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102676:	e8 43 bd 00 00       	call   f010e3be <isModifiedBufferEnabled>
f010267b:	84 c0                	test   %al,%al
f010267d:	75 10                	jne    f010268f <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010267f:	83 ec 0c             	sub    $0xc,%esp
f0102682:	68 6c 58 13 f0       	push   $0xf013586c
f0102687:	e8 82 e6 ff ff       	call   f0100d0e <cprintf>
f010268c:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010268f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102692:	83 c0 04             	add    $0x4,%eax
f0102695:	8b 00                	mov    (%eax),%eax
f0102697:	83 ec 04             	sub    $0x4,%esp
f010269a:	6a 0a                	push   $0xa
f010269c:	6a 00                	push   $0x0
f010269e:	50                   	push   %eax
f010269f:	e8 ac f6 02 00       	call   f0131d50 <strtol>
f01026a4:	83 c4 10             	add    $0x10,%esp
f01026a7:	83 ec 0c             	sub    $0xc,%esp
f01026aa:	50                   	push   %eax
f01026ab:	e8 30 bd 00 00       	call   f010e3e0 <setModifiedBufferLength>
f01026b0:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01026b3:	e8 36 bd 00 00       	call   f010e3ee <getModifiedBufferLength>
f01026b8:	83 ec 08             	sub    $0x8,%esp
f01026bb:	50                   	push   %eax
f01026bc:	68 dc 57 13 f0       	push   $0xf01357dc
f01026c1:	e8 48 e6 ff ff       	call   f0100d0e <cprintf>
f01026c6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026ce:	c9                   	leave  
f01026cf:	c3                   	ret    

f01026d0 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026d0:	55                   	push   %ebp
f01026d1:	89 e5                	mov    %esp,%ebp
f01026d3:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026d6:	e8 fb bc 00 00       	call   f010e3d6 <isBufferingEnabled>
f01026db:	84 c0                	test   %al,%al
f01026dd:	75 12                	jne    f01026f1 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026df:	83 ec 0c             	sub    $0xc,%esp
f01026e2:	68 1c 58 13 f0       	push   $0xf013581c
f01026e7:	e8 22 e6 ff ff       	call   f0100d0e <cprintf>
f01026ec:	83 c4 10             	add    $0x10,%esp
f01026ef:	eb 19                	jmp    f010270a <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026f1:	e8 c8 bc 00 00       	call   f010e3be <isModifiedBufferEnabled>
f01026f6:	84 c0                	test   %al,%al
f01026f8:	75 10                	jne    f010270a <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026fa:	83 ec 0c             	sub    $0xc,%esp
f01026fd:	68 6c 58 13 f0       	push   $0xf013586c
f0102702:	e8 07 e6 ff ff       	call   f0100d0e <cprintf>
f0102707:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f010270a:	e8 df bc 00 00       	call   f010e3ee <getModifiedBufferLength>
f010270f:	83 ec 08             	sub    $0x8,%esp
f0102712:	50                   	push   %eax
f0102713:	68 b2 58 13 f0       	push   $0xf01358b2
f0102718:	e8 f1 e5 ff ff       	call   f0100d0e <cprintf>
f010271d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102720:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102725:	c9                   	leave  
f0102726:	c3                   	ret    

f0102727 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102727:	55                   	push   %ebp
f0102728:	89 e5                	mov    %esp,%ebp
f010272a:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f010272d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102734:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102738:	75 1b                	jne    f0102755 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010273a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010273d:	83 c0 04             	add    $0x4,%eax
f0102740:	8b 00                	mov    (%eax),%eax
f0102742:	83 ec 04             	sub    $0x4,%esp
f0102745:	6a 0a                	push   $0xa
f0102747:	6a 00                	push   $0x0
f0102749:	50                   	push   %eax
f010274a:	e8 01 f6 02 00       	call   f0131d50 <strtol>
f010274f:	83 c4 10             	add    $0x10,%esp
f0102752:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102755:	e8 fd e7 ff ff       	call   f0100f57 <isKHeapPlacementStrategyCONTALLOC>
f010275a:	84 c0                	test   %al,%al
f010275c:	74 0a                	je     f0102768 <command_test_kmalloc+0x41>
		test_kmalloc();
f010275e:	e8 7c 57 01 00       	call   f0117edf <test_kmalloc>
f0102763:	e9 e8 00 00 00       	jmp    f0102850 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102768:	e8 fe e7 ff ff       	call   f0100f6b <isKHeapPlacementStrategyFIRSTFIT>
f010276d:	84 c0                	test   %al,%al
f010276f:	74 44                	je     f01027b5 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102771:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102775:	75 1a                	jne    f0102791 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102777:	83 ec 0c             	sub    $0xc,%esp
f010277a:	68 d0 58 13 f0       	push   $0xf01358d0
f010277f:	e8 8a e5 ff ff       	call   f0100d0e <cprintf>
f0102784:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102787:	b8 00 00 00 00       	mov    $0x0,%eax
f010278c:	e9 c4 00 00 00       	jmp    f0102855 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102791:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102795:	75 0a                	jne    f01027a1 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f0102797:	e8 cc a5 01 00       	call   f011cd68 <test_kmalloc_firstfit1>
f010279c:	e9 af 00 00 00       	jmp    f0102850 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027a1:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027a5:	0f 85 a5 00 00 00    	jne    f0102850 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01027ab:	e8 5a b9 01 00       	call   f011e10a <test_kmalloc_firstfit2>
f01027b0:	e9 9b 00 00 00       	jmp    f0102850 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01027b5:	e8 c6 e7 ff ff       	call   f0100f80 <isKHeapPlacementStrategyBESTFIT>
f01027ba:	84 c0                	test   %al,%al
f01027bc:	74 44                	je     f0102802 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01027be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027c2:	75 17                	jne    f01027db <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f01027c4:	83 ec 0c             	sub    $0xc,%esp
f01027c7:	68 20 59 13 f0       	push   $0xf0135920
f01027cc:	e8 3d e5 ff ff       	call   f0100d0e <cprintf>
f01027d1:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01027d9:	eb 7a                	jmp    f0102855 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027db:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027df:	75 07                	jne    f01027e8 <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027e1:	e8 f9 56 01 00       	call   f0117edf <test_kmalloc>
f01027e6:	eb 68                	jmp    f0102850 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027e8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027ec:	75 07                	jne    f01027f5 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027ee:	e8 3f 80 01 00       	call   f011a832 <test_kmalloc_bestfit1>
f01027f3:	eb 5b                	jmp    f0102850 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027f5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027f9:	75 55                	jne    f0102850 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027fb:	e8 88 92 01 00       	call   f011ba88 <test_kmalloc_bestfit2>
f0102800:	eb 4e                	jmp    f0102850 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102802:	e8 8e e7 ff ff       	call   f0100f95 <isKHeapPlacementStrategyNEXTFIT>
f0102807:	84 c0                	test   %al,%al
f0102809:	74 37                	je     f0102842 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f010280b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010280f:	75 17                	jne    f0102828 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102811:	83 ec 0c             	sub    $0xc,%esp
f0102814:	68 70 59 13 f0       	push   $0xf0135970
f0102819:	e8 f0 e4 ff ff       	call   f0100d0e <cprintf>
f010281e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102821:	b8 00 00 00 00       	mov    $0x0,%eax
f0102826:	eb 2d                	jmp    f0102855 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102828:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010282c:	75 07                	jne    f0102835 <command_test_kmalloc+0x10e>
			test_kmalloc();
f010282e:	e8 ac 56 01 00       	call   f0117edf <test_kmalloc>
f0102833:	eb 1b                	jmp    f0102850 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102835:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102839:	75 15                	jne    f0102850 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010283b:	e8 fd 68 01 00       	call   f011913d <test_kmalloc_nextfit>
f0102840:	eb 0e                	jmp    f0102850 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102842:	e8 63 e7 ff ff       	call   f0100faa <isKHeapPlacementStrategyWORSTFIT>
f0102847:	84 c0                	test   %al,%al
f0102849:	74 05                	je     f0102850 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010284b:	e8 4f c7 01 00       	call   f011ef9f <test_kmalloc_worstfit>
	return 0;
f0102850:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102855:	c9                   	leave  
f0102856:	c3                   	ret    

f0102857 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102857:	55                   	push   %ebp
f0102858:	89 e5                	mov    %esp,%ebp
f010285a:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010285d:	e8 1e e7 ff ff       	call   f0100f80 <isKHeapPlacementStrategyBESTFIT>
f0102862:	84 c0                	test   %al,%al
f0102864:	75 09                	jne    f010286f <command_test_kfree+0x18>
f0102866:	e8 00 e7 ff ff       	call   f0100f6b <isKHeapPlacementStrategyFIRSTFIT>
f010286b:	84 c0                	test   %al,%al
f010286d:	74 07                	je     f0102876 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f010286f:	e8 cd fe 01 00       	call   f0122741 <test_kfree_bestfirstfit>
f0102874:	eb 05                	jmp    f010287b <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f0102876:	e8 74 dd 01 00       	call   f01205ef <test_kfree>
	}
	return 0;
f010287b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102880:	c9                   	leave  
f0102881:	c3                   	ret    

f0102882 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102882:	55                   	push   %ebp
f0102883:	89 e5                	mov    %esp,%ebp
f0102885:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102888:	e8 b0 18 02 00       	call   f012413d <test_kheap_phys_addr>
	return 0;
f010288d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102892:	c9                   	leave  
f0102893:	c3                   	ret    

f0102894 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102894:	55                   	push   %ebp
f0102895:	89 e5                	mov    %esp,%ebp
f0102897:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010289a:	e8 6e 2d 02 00       	call   f012560d <test_kheap_virt_addr>
	return 0;
f010289f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028a4:	c9                   	leave  
f01028a5:	c3                   	ret    

f01028a6 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01028a6:	55                   	push   %ebp
f01028a7:	89 e5                	mov    %esp,%ebp
f01028a9:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01028ac:	e8 39 42 02 00       	call   f0126aea <test_three_creation_functions>
	return 0;
f01028b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b6:	c9                   	leave  
f01028b7:	c3                   	ret    

f01028b8 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01028b8:	55                   	push   %ebp
f01028b9:	89 e5                	mov    %esp,%ebp
f01028bb:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01028be:	e8 d2 e6 ff ff       	call   f0100f95 <isKHeapPlacementStrategyNEXTFIT>
f01028c3:	84 c0                	test   %al,%al
f01028c5:	74 07                	je     f01028ce <command_test_krealloc+0x16>
		test_krealloc();
f01028c7:	e8 35 9c 02 00       	call   f012c501 <test_krealloc>
f01028cc:	eb 0e                	jmp    f01028dc <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028ce:	e8 ad e6 ff ff       	call   f0100f80 <isKHeapPlacementStrategyBESTFIT>
f01028d3:	84 c0                	test   %al,%al
f01028d5:	74 05                	je     f01028dc <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028d7:	e8 d5 bb 02 00       	call   f012e4b1 <test_krealloc_BF>
	return 0;
f01028dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028e1:	c9                   	leave  
f01028e2:	c3                   	ret    

f01028e3 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028e3:	55                   	push   %ebp
f01028e4:	89 e5                	mov    %esp,%ebp
f01028e6:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028e9:	e8 06 42 01 00       	call   f0116af4 <test_priority_normal_and_higher>
	return 0;
f01028ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028f3:	c9                   	leave  
f01028f4:	c3                   	ret    

f01028f5 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028f5:	55                   	push   %ebp
f01028f6:	89 e5                	mov    %esp,%ebp
f01028f8:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028fb:	e8 da 4b 01 00       	call   f01174da <test_priority_normal_and_lower>
	return 0;
f0102900:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102905:	c9                   	leave  
f0102906:	c3                   	ret    

f0102907 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102907:	55                   	push   %ebp
f0102908:	89 e5                	mov    %esp,%ebp
f010290a:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010290d:	e8 12 44 02 00       	call   f0126d24 <test_kfreeall>
	return 0;
f0102912:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102917:	c9                   	leave  
f0102918:	c3                   	ret    

f0102919 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102919:	55                   	push   %ebp
f010291a:	89 e5                	mov    %esp,%ebp
f010291c:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010291f:	e8 ec 5a 02 00       	call   f0128410 <test_kexpand>
	return 0;
f0102924:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102929:	c9                   	leave  
f010292a:	c3                   	ret    

f010292b <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f010292b:	55                   	push   %ebp
f010292c:	89 e5                	mov    %esp,%ebp
f010292e:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102931:	e8 5b 68 02 00       	call   f0129191 <test_kshrink>
	return 0;
f0102936:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010293b:	c9                   	leave  
f010293c:	c3                   	ret    

f010293d <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010293d:	55                   	push   %ebp
f010293e:	89 e5                	mov    %esp,%ebp
f0102940:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102943:	e8 36 77 02 00       	call   f012a07e <test_kfreelast>
	return 0;
f0102948:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010294d:	c9                   	leave  
f010294e:	c3                   	ret    

f010294f <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010294f:	55                   	push   %ebp
f0102950:	89 e5                	mov    %esp,%ebp
f0102952:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102955:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102958:	83 c0 04             	add    $0x4,%eax
f010295b:	8b 00                	mov    (%eax),%eax
f010295d:	83 ec 04             	sub    $0x4,%esp
f0102960:	6a 0a                	push   $0xa
f0102962:	6a 00                	push   $0x0
f0102964:	50                   	push   %eax
f0102965:	e8 e6 f3 02 00       	call   f0131d50 <strtol>
f010296a:	83 c4 10             	add    $0x10,%esp
f010296d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102970:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f0102977:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010297e:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f0102983:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102986:	eb 3d                	jmp    f01029c5 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f0102988:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010298b:	05 5c 05 00 00       	add    $0x55c,%eax
f0102990:	83 ec 08             	sub    $0x8,%esp
f0102993:	68 be 59 13 f0       	push   $0xf01359be
f0102998:	50                   	push   %eax
f0102999:	e8 5e f1 02 00       	call   f0131afc <strcmp>
f010299e:	83 c4 10             	add    $0x10,%esp
f01029a1:	85 c0                	test   %eax,%eax
f01029a3:	75 12                	jne    f01029b7 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01029a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01029a9:	74 07                	je     f01029b2 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01029ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01029b2:	ff 45 f4             	incl   -0xc(%ebp)
f01029b5:	eb 06                	jmp    f01029bd <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01029b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01029bb:	74 31                	je     f01029ee <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01029bd:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f01029c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01029c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029c9:	74 08                	je     f01029d3 <command_test_sc_MLFQ+0x84>
f01029cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029ce:	8b 40 44             	mov    0x44(%eax),%eax
f01029d1:	eb 05                	jmp    f01029d8 <command_test_sc_MLFQ+0x89>
f01029d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01029d8:	a3 f8 06 86 f0       	mov    %eax,0xf08606f8
f01029dd:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f01029e2:	85 c0                	test   %eax,%eax
f01029e4:	75 a2                	jne    f0102988 <command_test_sc_MLFQ+0x39>
f01029e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029ea:	75 9c                	jne    f0102988 <command_test_sc_MLFQ+0x39>
f01029ec:	eb 01                	jmp    f01029ef <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029ee:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029f2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029f5:	75 12                	jne    f0102a09 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029f7:	83 ec 0c             	sub    $0xc,%esp
f01029fa:	68 c8 59 13 f0       	push   $0xf01359c8
f01029ff:	e8 0a e3 ff ff       	call   f0100d0e <cprintf>
f0102a04:	83 c4 10             	add    $0x10,%esp
f0102a07:	eb 17                	jmp    f0102a20 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102a09:	83 ec 04             	sub    $0x4,%esp
f0102a0c:	68 01 5a 13 f0       	push   $0xf0135a01
f0102a11:	68 8b 04 00 00       	push   $0x48b
f0102a16:	68 4d 4a 13 f0       	push   $0xf0134a4d
f0102a1b:	e8 e5 d7 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f0102a20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a25:	c9                   	leave  
f0102a26:	c3                   	ret    

f0102a27 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102a27:	55                   	push   %ebp
f0102a28:	89 e5                	mov    %esp,%ebp
f0102a2a:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a2d:	e8 be ed 00 00       	call   f01117f0 <TestAutoCompleteCommand>
f0102a32:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a3a:	c9                   	leave  
f0102a3b:	c3                   	ret    

f0102a3c <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a3c:	55                   	push   %ebp
f0102a3d:	89 e5                	mov    %esp,%ebp
f0102a3f:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a42:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a46:	74 1a                	je     f0102a62 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a48:	83 ec 0c             	sub    $0xc,%esp
f0102a4b:	68 18 5a 13 f0       	push   $0xf0135a18
f0102a50:	e8 b9 e2 ff ff       	call   f0100d0e <cprintf>
f0102a55:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a5d:	e9 82 01 00 00       	jmp    f0102be4 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a65:	83 c0 04             	add    $0x4,%eax
f0102a68:	8b 00                	mov    (%eax),%eax
f0102a6a:	83 ec 08             	sub    $0x8,%esp
f0102a6d:	68 50 5a 13 f0       	push   $0xf0135a50
f0102a72:	50                   	push   %eax
f0102a73:	e8 84 f0 02 00       	call   f0131afc <strcmp>
f0102a78:	83 c4 10             	add    $0x10,%esp
f0102a7b:	85 c0                	test   %eax,%eax
f0102a7d:	75 0a                	jne    f0102a89 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a7f:	e8 16 c3 00 00       	call   f010ed9a <test_initialize_MemBlocksList>
f0102a84:	e9 56 01 00 00       	jmp    f0102bdf <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a8c:	83 c0 04             	add    $0x4,%eax
f0102a8f:	8b 00                	mov    (%eax),%eax
f0102a91:	83 ec 08             	sub    $0x8,%esp
f0102a94:	68 55 5a 13 f0       	push   $0xf0135a55
f0102a99:	50                   	push   %eax
f0102a9a:	e8 5d f0 02 00       	call   f0131afc <strcmp>
f0102a9f:	83 c4 10             	add    $0x10,%esp
f0102aa2:	85 c0                	test   %eax,%eax
f0102aa4:	75 0a                	jne    f0102ab0 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102aa6:	e8 03 c4 00 00       	call   f010eeae <test_insert_sorted_allocList>
f0102aab:	e9 2f 01 00 00       	jmp    f0102bdf <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102ab0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ab3:	83 c0 04             	add    $0x4,%eax
f0102ab6:	8b 00                	mov    (%eax),%eax
f0102ab8:	83 ec 08             	sub    $0x8,%esp
f0102abb:	68 5b 5a 13 f0       	push   $0xf0135a5b
f0102ac0:	50                   	push   %eax
f0102ac1:	e8 36 f0 02 00       	call   f0131afc <strcmp>
f0102ac6:	83 c4 10             	add    $0x10,%esp
f0102ac9:	85 c0                	test   %eax,%eax
f0102acb:	75 0a                	jne    f0102ad7 <command_test_lists+0x9b>
	{
		test_find_block();
f0102acd:	e8 9a c8 00 00       	call   f010f36c <test_find_block>
f0102ad2:	e9 08 01 00 00       	jmp    f0102bdf <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102ad7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ada:	83 c0 04             	add    $0x4,%eax
f0102add:	8b 00                	mov    (%eax),%eax
f0102adf:	83 ec 08             	sub    $0x8,%esp
f0102ae2:	68 60 5a 13 f0       	push   $0xf0135a60
f0102ae7:	50                   	push   %eax
f0102ae8:	e8 0f f0 02 00       	call   f0131afc <strcmp>
f0102aed:	83 c4 10             	add    $0x10,%esp
f0102af0:	85 c0                	test   %eax,%eax
f0102af2:	74 1d                	je     f0102b11 <command_test_lists+0xd5>
f0102af4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af7:	83 c0 04             	add    $0x4,%eax
f0102afa:	8b 00                	mov    (%eax),%eax
f0102afc:	83 ec 08             	sub    $0x8,%esp
f0102aff:	68 63 5a 13 f0       	push   $0xf0135a63
f0102b04:	50                   	push   %eax
f0102b05:	e8 f2 ef 02 00       	call   f0131afc <strcmp>
f0102b0a:	83 c4 10             	add    $0x10,%esp
f0102b0d:	85 c0                	test   %eax,%eax
f0102b0f:	75 0a                	jne    f0102b1b <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102b11:	e8 b1 cb 00 00       	call   f010f6c7 <test_alloc_block_FF>
f0102b16:	e9 c4 00 00 00       	jmp    f0102bdf <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b1e:	83 c0 04             	add    $0x4,%eax
f0102b21:	8b 00                	mov    (%eax),%eax
f0102b23:	83 ec 08             	sub    $0x8,%esp
f0102b26:	68 66 5a 13 f0       	push   $0xf0135a66
f0102b2b:	50                   	push   %eax
f0102b2c:	e8 cb ef 02 00       	call   f0131afc <strcmp>
f0102b31:	83 c4 10             	add    $0x10,%esp
f0102b34:	85 c0                	test   %eax,%eax
f0102b36:	74 1d                	je     f0102b55 <command_test_lists+0x119>
f0102b38:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b3b:	83 c0 04             	add    $0x4,%eax
f0102b3e:	8b 00                	mov    (%eax),%eax
f0102b40:	83 ec 08             	sub    $0x8,%esp
f0102b43:	68 69 5a 13 f0       	push   $0xf0135a69
f0102b48:	50                   	push   %eax
f0102b49:	e8 ae ef 02 00       	call   f0131afc <strcmp>
f0102b4e:	83 c4 10             	add    $0x10,%esp
f0102b51:	85 c0                	test   %eax,%eax
f0102b53:	75 0a                	jne    f0102b5f <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b55:	e8 eb cf 00 00       	call   f010fb45 <test_alloc_block_BF>
f0102b5a:	e9 80 00 00 00       	jmp    f0102bdf <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b62:	83 c0 04             	add    $0x4,%eax
f0102b65:	8b 00                	mov    (%eax),%eax
f0102b67:	83 ec 08             	sub    $0x8,%esp
f0102b6a:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0102b6f:	50                   	push   %eax
f0102b70:	e8 87 ef 02 00       	call   f0131afc <strcmp>
f0102b75:	83 c4 10             	add    $0x10,%esp
f0102b78:	85 c0                	test   %eax,%eax
f0102b7a:	74 1d                	je     f0102b99 <command_test_lists+0x15d>
f0102b7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7f:	83 c0 04             	add    $0x4,%eax
f0102b82:	8b 00                	mov    (%eax),%eax
f0102b84:	83 ec 08             	sub    $0x8,%esp
f0102b87:	68 6f 5a 13 f0       	push   $0xf0135a6f
f0102b8c:	50                   	push   %eax
f0102b8d:	e8 6a ef 02 00       	call   f0131afc <strcmp>
f0102b92:	83 c4 10             	add    $0x10,%esp
f0102b95:	85 c0                	test   %eax,%eax
f0102b97:	75 07                	jne    f0102ba0 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b99:	e8 2e d6 00 00       	call   f01101cc <test_alloc_block_NF>
f0102b9e:	eb 3f                	jmp    f0102bdf <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102ba0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba3:	83 c0 04             	add    $0x4,%eax
f0102ba6:	8b 00                	mov    (%eax),%eax
f0102ba8:	83 ec 08             	sub    $0x8,%esp
f0102bab:	68 72 5a 13 f0       	push   $0xf0135a72
f0102bb0:	50                   	push   %eax
f0102bb1:	e8 46 ef 02 00       	call   f0131afc <strcmp>
f0102bb6:	83 c4 10             	add    $0x10,%esp
f0102bb9:	85 c0                	test   %eax,%eax
f0102bbb:	74 1d                	je     f0102bda <command_test_lists+0x19e>
f0102bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bc0:	83 c0 04             	add    $0x4,%eax
f0102bc3:	8b 00                	mov    (%eax),%eax
f0102bc5:	83 ec 08             	sub    $0x8,%esp
f0102bc8:	68 78 5a 13 f0       	push   $0xf0135a78
f0102bcd:	50                   	push   %eax
f0102bce:	e8 29 ef 02 00       	call   f0131afc <strcmp>
f0102bd3:	83 c4 10             	add    $0x10,%esp
f0102bd6:	85 c0                	test   %eax,%eax
f0102bd8:	75 05                	jne    f0102bdf <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bda:	e8 7b de 00 00       	call   f0110a5a <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bdf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102be4:	c9                   	leave  
f0102be5:	c3                   	ret    

f0102be6 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102be6:	55                   	push   %ebp
f0102be7:	89 e5                	mov    %esp,%ebp
f0102be9:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bec:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bf0:	74 1a                	je     f0102c0c <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bf2:	83 ec 0c             	sub    $0xc,%esp
f0102bf5:	68 80 5a 13 f0       	push   $0xf0135a80
f0102bfa:	e8 0f e1 ff ff       	call   f0100d0e <cprintf>
f0102bff:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102c02:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c07:	e9 e1 00 00 00       	jmp    f0102ced <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0f:	83 c0 04             	add    $0x4,%eax
f0102c12:	8b 00                	mov    (%eax),%eax
f0102c14:	83 ec 08             	sub    $0x8,%esp
f0102c17:	68 b9 5a 13 f0       	push   $0xf0135ab9
f0102c1c:	50                   	push   %eax
f0102c1d:	e8 da ee 02 00       	call   f0131afc <strcmp>
f0102c22:	83 c4 10             	add    $0x10,%esp
f0102c25:	85 c0                	test   %eax,%eax
f0102c27:	75 0a                	jne    f0102c33 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102c29:	e8 56 f6 00 00       	call   f0112284 <test_cut_paste_pages>
f0102c2e:	e9 b5 00 00 00       	jmp    f0102ce8 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c36:	83 c0 04             	add    $0x4,%eax
f0102c39:	8b 00                	mov    (%eax),%eax
f0102c3b:	83 ec 08             	sub    $0x8,%esp
f0102c3e:	68 c2 5a 13 f0       	push   $0xf0135ac2
f0102c43:	50                   	push   %eax
f0102c44:	e8 b3 ee 02 00       	call   f0131afc <strcmp>
f0102c49:	83 c4 10             	add    $0x10,%esp
f0102c4c:	85 c0                	test   %eax,%eax
f0102c4e:	75 0a                	jne    f0102c5a <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c50:	e8 7a 00 01 00       	call   f0112ccf <test_copy_paste_chunk>
f0102c55:	e9 8e 00 00 00       	jmp    f0102ce8 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c5d:	83 c0 04             	add    $0x4,%eax
f0102c60:	8b 00                	mov    (%eax),%eax
f0102c62:	83 ec 08             	sub    $0x8,%esp
f0102c65:	68 cc 5a 13 f0       	push   $0xf0135acc
f0102c6a:	50                   	push   %eax
f0102c6b:	e8 8c ee 02 00       	call   f0131afc <strcmp>
f0102c70:	83 c4 10             	add    $0x10,%esp
f0102c73:	85 c0                	test   %eax,%eax
f0102c75:	75 07                	jne    f0102c7e <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c77:	e8 51 11 01 00       	call   f0113dcd <test_share_chunk>
f0102c7c:	eb 6a                	jmp    f0102ce8 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c81:	83 c0 04             	add    $0x4,%eax
f0102c84:	8b 00                	mov    (%eax),%eax
f0102c86:	83 ec 08             	sub    $0x8,%esp
f0102c89:	68 d2 5a 13 f0       	push   $0xf0135ad2
f0102c8e:	50                   	push   %eax
f0102c8f:	e8 68 ee 02 00       	call   f0131afc <strcmp>
f0102c94:	83 c4 10             	add    $0x10,%esp
f0102c97:	85 c0                	test   %eax,%eax
f0102c99:	75 07                	jne    f0102ca2 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c9b:	e8 55 1b 01 00       	call   f01147f5 <test_allocate_chunk>
f0102ca0:	eb 46                	jmp    f0102ce8 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102ca2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ca5:	83 c0 04             	add    $0x4,%eax
f0102ca8:	8b 00                	mov    (%eax),%eax
f0102caa:	83 ec 08             	sub    $0x8,%esp
f0102cad:	68 db 5a 13 f0       	push   $0xf0135adb
f0102cb2:	50                   	push   %eax
f0102cb3:	e8 44 ee 02 00       	call   f0131afc <strcmp>
f0102cb8:	83 c4 10             	add    $0x10,%esp
f0102cbb:	85 c0                	test   %eax,%eax
f0102cbd:	75 07                	jne    f0102cc6 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102cbf:	e8 e0 23 01 00       	call   f01150a4 <test_calculate_required_frames>
f0102cc4:	eb 22                	jmp    f0102ce8 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cc9:	83 c0 04             	add    $0x4,%eax
f0102ccc:	8b 00                	mov    (%eax),%eax
f0102cce:	83 ec 08             	sub    $0x8,%esp
f0102cd1:	68 ea 5a 13 f0       	push   $0xf0135aea
f0102cd6:	50                   	push   %eax
f0102cd7:	e8 20 ee 02 00       	call   f0131afc <strcmp>
f0102cdc:	83 c4 10             	add    $0x10,%esp
f0102cdf:	85 c0                	test   %eax,%eax
f0102ce1:	75 05                	jne    f0102ce8 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102ce3:	e8 30 2c 01 00       	call   f0115918 <test_calculate_allocated_space>
	}
	return 0;
f0102ce8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ced:	c9                   	leave  
f0102cee:	c3                   	ret    

f0102cef <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cef:	55                   	push   %ebp
f0102cf0:	89 e5                	mov    %esp,%ebp
f0102cf2:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cf5:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102cf9:	74 1a                	je     f0102d15 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102cfb:	83 ec 0c             	sub    $0xc,%esp
f0102cfe:	68 fc 5a 13 f0       	push   $0xf0135afc
f0102d03:	e8 06 e0 ff ff       	call   f0100d0e <cprintf>
f0102d08:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d0b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d10:	e9 e1 00 00 00       	jmp    f0102df6 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102d15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d18:	83 c0 04             	add    $0x4,%eax
f0102d1b:	8b 00                	mov    (%eax),%eax
f0102d1d:	83 ec 08             	sub    $0x8,%esp
f0102d20:	68 32 5b 13 f0       	push   $0xf0135b32
f0102d25:	50                   	push   %eax
f0102d26:	e8 d1 ed 02 00       	call   f0131afc <strcmp>
f0102d2b:	83 c4 10             	add    $0x10,%esp
f0102d2e:	85 c0                	test   %eax,%eax
f0102d30:	75 0a                	jne    f0102d3c <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d32:	e8 3e ec 00 00       	call   f0111975 <test_pt_set_page_permissions>
f0102d37:	e9 b5 00 00 00       	jmp    f0102df1 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3f:	83 c0 04             	add    $0x4,%eax
f0102d42:	8b 00                	mov    (%eax),%eax
f0102d44:	83 ec 08             	sub    $0x8,%esp
f0102d47:	68 3a 5b 13 f0       	push   $0xf0135b3a
f0102d4c:	50                   	push   %eax
f0102d4d:	e8 aa ed 02 00       	call   f0131afc <strcmp>
f0102d52:	83 c4 10             	add    $0x10,%esp
f0102d55:	85 c0                	test   %eax,%eax
f0102d57:	75 0a                	jne    f0102d63 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d59:	e8 7a ee 00 00       	call   f0111bd8 <test_pt_set_page_permissions_invalid_va>
f0102d5e:	e9 8e 00 00 00       	jmp    f0102df1 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d66:	83 c0 04             	add    $0x4,%eax
f0102d69:	8b 00                	mov    (%eax),%eax
f0102d6b:	83 ec 08             	sub    $0x8,%esp
f0102d6e:	68 42 5b 13 f0       	push   $0xf0135b42
f0102d73:	50                   	push   %eax
f0102d74:	e8 83 ed 02 00       	call   f0131afc <strcmp>
f0102d79:	83 c4 10             	add    $0x10,%esp
f0102d7c:	85 c0                	test   %eax,%eax
f0102d7e:	75 07                	jne    f0102d87 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d80:	e8 9c ee 00 00       	call   f0111c21 <test_pt_get_page_permissions>
f0102d85:	eb 6a                	jmp    f0102df1 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d8a:	83 c0 04             	add    $0x4,%eax
f0102d8d:	8b 00                	mov    (%eax),%eax
f0102d8f:	83 ec 08             	sub    $0x8,%esp
f0102d92:	68 4a 5b 13 f0       	push   $0xf0135b4a
f0102d97:	50                   	push   %eax
f0102d98:	e8 5f ed 02 00       	call   f0131afc <strcmp>
f0102d9d:	83 c4 10             	add    $0x10,%esp
f0102da0:	85 c0                	test   %eax,%eax
f0102da2:	75 07                	jne    f0102dab <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102da4:	e8 bc ef 00 00       	call   f0111d65 <test_pt_clear_page_table_entry>
f0102da9:	eb 46                	jmp    f0102df1 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102dab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dae:	83 c0 04             	add    $0x4,%eax
f0102db1:	8b 00                	mov    (%eax),%eax
f0102db3:	83 ec 08             	sub    $0x8,%esp
f0102db6:	68 51 5b 13 f0       	push   $0xf0135b51
f0102dbb:	50                   	push   %eax
f0102dbc:	e8 3b ed 02 00       	call   f0131afc <strcmp>
f0102dc1:	83 c4 10             	add    $0x10,%esp
f0102dc4:	85 c0                	test   %eax,%eax
f0102dc6:	75 07                	jne    f0102dcf <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102dc8:	e8 f1 f0 00 00       	call   f0111ebe <test_pt_clear_page_table_entry_invalid_va>
f0102dcd:	eb 22                	jmp    f0102df1 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd2:	83 c0 04             	add    $0x4,%eax
f0102dd5:	8b 00                	mov    (%eax),%eax
f0102dd7:	83 ec 08             	sub    $0x8,%esp
f0102dda:	68 58 5b 13 f0       	push   $0xf0135b58
f0102ddf:	50                   	push   %eax
f0102de0:	e8 17 ed 02 00       	call   f0131afc <strcmp>
f0102de5:	83 c4 10             	add    $0x10,%esp
f0102de8:	85 c0                	test   %eax,%eax
f0102dea:	75 05                	jne    f0102df1 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dec:	e8 05 f1 00 00       	call   f0111ef6 <test_virtual_to_physical>
	}
	return 0;
f0102df1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102df6:	c9                   	leave  
f0102df7:	c3                   	ret    

f0102df8 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102df8:	55                   	push   %ebp
f0102df9:	89 e5                	mov    %esp,%ebp
f0102dfb:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e01:	83 c0 08             	add    $0x8,%eax
f0102e04:	8b 00                	mov    (%eax),%eax
f0102e06:	83 ec 08             	sub    $0x8,%esp
f0102e09:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102e0e:	50                   	push   %eax
f0102e0f:	e8 e8 ec 02 00       	call   f0131afc <strcmp>
f0102e14:	83 c4 10             	add    $0x10,%esp
f0102e17:	85 c0                	test   %eax,%eax
f0102e19:	75 20                	jne    f0102e3b <command_test_kheap+0x43>
f0102e1b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102e1f:	74 1a                	je     f0102e3b <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102e21:	83 ec 0c             	sub    $0xc,%esp
f0102e24:	68 64 5b 13 f0       	push   $0xf0135b64
f0102e29:	e8 e0 de ff ff       	call   f0100d0e <cprintf>
f0102e2e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e31:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e36:	e9 33 03 00 00       	jmp    f010316e <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e3e:	83 c0 08             	add    $0x8,%eax
f0102e41:	8b 00                	mov    (%eax),%eax
f0102e43:	83 ec 08             	sub    $0x8,%esp
f0102e46:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102e4b:	50                   	push   %eax
f0102e4c:	e8 ab ec 02 00       	call   f0131afc <strcmp>
f0102e51:	83 c4 10             	add    $0x10,%esp
f0102e54:	85 c0                	test   %eax,%eax
f0102e56:	74 20                	je     f0102e78 <command_test_kheap+0x80>
f0102e58:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e5c:	74 1a                	je     f0102e78 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e5e:	83 ec 0c             	sub    $0xc,%esp
f0102e61:	68 b4 5b 13 f0       	push   $0xf0135bb4
f0102e66:	e8 a3 de ff ff       	call   f0100d0e <cprintf>
f0102e6b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e73:	e9 f6 02 00 00       	jmp    f010316e <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e7b:	83 c0 04             	add    $0x4,%eax
f0102e7e:	8b 00                	mov    (%eax),%eax
f0102e80:	83 ec 08             	sub    $0x8,%esp
f0102e83:	68 60 5a 13 f0       	push   $0xf0135a60
f0102e88:	50                   	push   %eax
f0102e89:	e8 6e ec 02 00       	call   f0131afc <strcmp>
f0102e8e:	83 c4 10             	add    $0x10,%esp
f0102e91:	85 c0                	test   %eax,%eax
f0102e93:	74 1d                	je     f0102eb2 <command_test_kheap+0xba>
f0102e95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e98:	83 c0 04             	add    $0x4,%eax
f0102e9b:	8b 00                	mov    (%eax),%eax
f0102e9d:	83 ec 08             	sub    $0x8,%esp
f0102ea0:	68 63 5a 13 f0       	push   $0xf0135a63
f0102ea5:	50                   	push   %eax
f0102ea6:	e8 51 ec 02 00       	call   f0131afc <strcmp>
f0102eab:	83 c4 10             	add    $0x10,%esp
f0102eae:	85 c0                	test   %eax,%eax
f0102eb0:	75 1a                	jne    f0102ecc <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102eb2:	e8 60 e0 ff ff       	call   f0100f17 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102eb7:	83 ec 0c             	sub    $0xc,%esp
f0102eba:	68 fc 55 13 f0       	push   $0xf01355fc
f0102ebf:	e8 4a de ff ff       	call   f0100d0e <cprintf>
f0102ec4:	83 c4 10             	add    $0x10,%esp
f0102ec7:	e9 a0 00 00 00       	jmp    f0102f6c <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ecc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ecf:	83 c0 04             	add    $0x4,%eax
f0102ed2:	8b 00                	mov    (%eax),%eax
f0102ed4:	83 ec 08             	sub    $0x8,%esp
f0102ed7:	68 66 5a 13 f0       	push   $0xf0135a66
f0102edc:	50                   	push   %eax
f0102edd:	e8 1a ec 02 00       	call   f0131afc <strcmp>
f0102ee2:	83 c4 10             	add    $0x10,%esp
f0102ee5:	85 c0                	test   %eax,%eax
f0102ee7:	74 1d                	je     f0102f06 <command_test_kheap+0x10e>
f0102ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eec:	83 c0 04             	add    $0x4,%eax
f0102eef:	8b 00                	mov    (%eax),%eax
f0102ef1:	83 ec 08             	sub    $0x8,%esp
f0102ef4:	68 69 5a 13 f0       	push   $0xf0135a69
f0102ef9:	50                   	push   %eax
f0102efa:	e8 fd eb 02 00       	call   f0131afc <strcmp>
f0102eff:	83 c4 10             	add    $0x10,%esp
f0102f02:	85 c0                	test   %eax,%eax
f0102f04:	75 17                	jne    f0102f1d <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102f06:	e8 1c e0 ff ff       	call   f0100f27 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102f0b:	83 ec 0c             	sub    $0xc,%esp
f0102f0e:	68 2c 56 13 f0       	push   $0xf013562c
f0102f13:	e8 f6 dd ff ff       	call   f0100d0e <cprintf>
f0102f18:	83 c4 10             	add    $0x10,%esp
f0102f1b:	eb 4f                	jmp    f0102f6c <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f20:	83 c0 04             	add    $0x4,%eax
f0102f23:	8b 00                	mov    (%eax),%eax
f0102f25:	83 ec 08             	sub    $0x8,%esp
f0102f28:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0102f2d:	50                   	push   %eax
f0102f2e:	e8 c9 eb 02 00       	call   f0131afc <strcmp>
f0102f33:	83 c4 10             	add    $0x10,%esp
f0102f36:	85 c0                	test   %eax,%eax
f0102f38:	74 1d                	je     f0102f57 <command_test_kheap+0x15f>
f0102f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f3d:	83 c0 04             	add    $0x4,%eax
f0102f40:	8b 00                	mov    (%eax),%eax
f0102f42:	83 ec 08             	sub    $0x8,%esp
f0102f45:	68 6f 5a 13 f0       	push   $0xf0135a6f
f0102f4a:	50                   	push   %eax
f0102f4b:	e8 ac eb 02 00       	call   f0131afc <strcmp>
f0102f50:	83 c4 10             	add    $0x10,%esp
f0102f53:	85 c0                	test   %eax,%eax
f0102f55:	75 15                	jne    f0102f6c <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f57:	e8 db df ff ff       	call   f0100f37 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f5c:	83 ec 0c             	sub    $0xc,%esp
f0102f5f:	68 58 56 13 f0       	push   $0xf0135658
f0102f64:	e8 a5 dd ff ff       	call   f0100d0e <cprintf>
f0102f69:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f6f:	83 c0 08             	add    $0x8,%eax
f0102f72:	8b 00                	mov    (%eax),%eax
f0102f74:	83 ec 08             	sub    $0x8,%esp
f0102f77:	68 5c 5b 13 f0       	push   $0xf0135b5c
f0102f7c:	50                   	push   %eax
f0102f7d:	e8 7a eb 02 00       	call   f0131afc <strcmp>
f0102f82:	83 c4 10             	add    $0x10,%esp
f0102f85:	85 c0                	test   %eax,%eax
f0102f87:	0f 85 13 01 00 00    	jne    f01030a0 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f90:	83 c0 0c             	add    $0xc,%eax
f0102f93:	8b 00                	mov    (%eax),%eax
f0102f95:	83 ec 04             	sub    $0x4,%esp
f0102f98:	6a 0a                	push   $0xa
f0102f9a:	6a 00                	push   $0x0
f0102f9c:	50                   	push   %eax
f0102f9d:	e8 ae ed 02 00       	call   f0131d50 <strtol>
f0102fa2:	83 c4 10             	add    $0x10,%esp
f0102fa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102fa8:	e8 be df ff ff       	call   f0100f6b <isKHeapPlacementStrategyFIRSTFIT>
f0102fad:	84 c0                	test   %al,%al
f0102faf:	74 54                	je     f0103005 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102fb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fb5:	75 1a                	jne    f0102fd1 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102fb7:	83 ec 0c             	sub    $0xc,%esp
f0102fba:	68 d0 58 13 f0       	push   $0xf01358d0
f0102fbf:	e8 4a dd ff ff       	call   f0100d0e <cprintf>
f0102fc4:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fc7:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fcc:	e9 9d 01 00 00       	jmp    f010316e <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fd1:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fd5:	75 0a                	jne    f0102fe1 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fd7:	e8 03 4f 01 00       	call   f0117edf <test_kmalloc>
f0102fdc:	e9 b5 00 00 00       	jmp    f0103096 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fe1:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fe5:	75 0a                	jne    f0102ff1 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fe7:	e8 7c 9d 01 00       	call   f011cd68 <test_kmalloc_firstfit1>
f0102fec:	e9 a5 00 00 00       	jmp    f0103096 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102ff1:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102ff5:	0f 85 9b 00 00 00    	jne    f0103096 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102ffb:	e8 0a b1 01 00       	call   f011e10a <test_kmalloc_firstfit2>
f0103000:	e9 91 00 00 00       	jmp    f0103096 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0103005:	e8 76 df ff ff       	call   f0100f80 <isKHeapPlacementStrategyBESTFIT>
f010300a:	84 c0                	test   %al,%al
f010300c:	74 47                	je     f0103055 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f010300e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103012:	75 1a                	jne    f010302e <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0103014:	83 ec 0c             	sub    $0xc,%esp
f0103017:	68 20 59 13 f0       	push   $0xf0135920
f010301c:	e8 ed dc ff ff       	call   f0100d0e <cprintf>
f0103021:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103024:	b8 00 00 00 00       	mov    $0x0,%eax
f0103029:	e9 40 01 00 00       	jmp    f010316e <command_test_kheap+0x376>
			}
			if (testNum == 1)
f010302e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103032:	75 07                	jne    f010303b <command_test_kheap+0x243>
				test_kmalloc();
f0103034:	e8 a6 4e 01 00       	call   f0117edf <test_kmalloc>
f0103039:	eb 5b                	jmp    f0103096 <command_test_kheap+0x29e>
			else if (testNum == 2)
f010303b:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010303f:	75 07                	jne    f0103048 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103041:	e8 ec 77 01 00       	call   f011a832 <test_kmalloc_bestfit1>
f0103046:	eb 4e                	jmp    f0103096 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0103048:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010304c:	75 48                	jne    f0103096 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f010304e:	e8 35 8a 01 00       	call   f011ba88 <test_kmalloc_bestfit2>
f0103053:	eb 41                	jmp    f0103096 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103055:	e8 3b df ff ff       	call   f0100f95 <isKHeapPlacementStrategyNEXTFIT>
f010305a:	84 c0                	test   %al,%al
f010305c:	74 38                	je     f0103096 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f010305e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103062:	75 1a                	jne    f010307e <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103064:	83 ec 0c             	sub    $0xc,%esp
f0103067:	68 70 59 13 f0       	push   $0xf0135970
f010306c:	e8 9d dc ff ff       	call   f0100d0e <cprintf>
f0103071:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103074:	b8 00 00 00 00       	mov    $0x0,%eax
f0103079:	e9 f0 00 00 00       	jmp    f010316e <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f010307e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103082:	75 07                	jne    f010308b <command_test_kheap+0x293>
				test_kmalloc();
f0103084:	e8 56 4e 01 00       	call   f0117edf <test_kmalloc>
f0103089:	eb 0b                	jmp    f0103096 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010308b:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010308f:	75 05                	jne    f0103096 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103091:	e8 a7 60 01 00       	call   f011913d <test_kmalloc_nextfit>
		}
		return 0;
f0103096:	b8 00 00 00 00       	mov    $0x0,%eax
f010309b:	e9 ce 00 00 00       	jmp    f010316e <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f01030a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030a3:	83 c0 08             	add    $0x8,%eax
f01030a6:	8b 00                	mov    (%eax),%eax
f01030a8:	83 ec 08             	sub    $0x8,%esp
f01030ab:	68 f8 5b 13 f0       	push   $0xf0135bf8
f01030b0:	50                   	push   %eax
f01030b1:	e8 46 ea 02 00       	call   f0131afc <strcmp>
f01030b6:	83 c4 10             	add    $0x10,%esp
f01030b9:	85 c0                	test   %eax,%eax
f01030bb:	75 28                	jne    f01030e5 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f01030bd:	e8 be de ff ff       	call   f0100f80 <isKHeapPlacementStrategyBESTFIT>
f01030c2:	84 c0                	test   %al,%al
f01030c4:	75 09                	jne    f01030cf <command_test_kheap+0x2d7>
f01030c6:	e8 a0 de ff ff       	call   f0100f6b <isKHeapPlacementStrategyFIRSTFIT>
f01030cb:	84 c0                	test   %al,%al
f01030cd:	74 07                	je     f01030d6 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030cf:	e8 6d f6 01 00       	call   f0122741 <test_kfree_bestfirstfit>
f01030d4:	eb 05                	jmp    f01030db <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030d6:	e8 14 d5 01 00       	call   f01205ef <test_kfree>
		}
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	e9 89 00 00 00       	jmp    f010316e <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e8:	83 c0 08             	add    $0x8,%eax
f01030eb:	8b 00                	mov    (%eax),%eax
f01030ed:	83 ec 08             	sub    $0x8,%esp
f01030f0:	68 fe 5b 13 f0       	push   $0xf0135bfe
f01030f5:	50                   	push   %eax
f01030f6:	e8 01 ea 02 00       	call   f0131afc <strcmp>
f01030fb:	83 c4 10             	add    $0x10,%esp
f01030fe:	85 c0                	test   %eax,%eax
f0103100:	75 0c                	jne    f010310e <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0103102:	e8 36 10 02 00       	call   f012413d <test_kheap_phys_addr>
		return 0;
f0103107:	b8 00 00 00 00       	mov    $0x0,%eax
f010310c:	eb 60                	jmp    f010316e <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010310e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103111:	83 c0 08             	add    $0x8,%eax
f0103114:	8b 00                	mov    (%eax),%eax
f0103116:	83 ec 08             	sub    $0x8,%esp
f0103119:	68 08 5c 13 f0       	push   $0xf0135c08
f010311e:	50                   	push   %eax
f010311f:	e8 d8 e9 02 00       	call   f0131afc <strcmp>
f0103124:	83 c4 10             	add    $0x10,%esp
f0103127:	85 c0                	test   %eax,%eax
f0103129:	75 0c                	jne    f0103137 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010312b:	e8 dd 24 02 00       	call   f012560d <test_kheap_virt_addr>
		return 0;
f0103130:	b8 00 00 00 00       	mov    $0x0,%eax
f0103135:	eb 37                	jmp    f010316e <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0103137:	8b 45 0c             	mov    0xc(%ebp),%eax
f010313a:	83 c0 08             	add    $0x8,%eax
f010313d:	8b 00                	mov    (%eax),%eax
f010313f:	83 ec 08             	sub    $0x8,%esp
f0103142:	68 12 5c 13 f0       	push   $0xf0135c12
f0103147:	50                   	push   %eax
f0103148:	e8 af e9 02 00       	call   f0131afc <strcmp>
f010314d:	83 c4 10             	add    $0x10,%esp
f0103150:	85 c0                	test   %eax,%eax
f0103152:	75 15                	jne    f0103169 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103154:	e8 27 de ff ff       	call   f0100f80 <isKHeapPlacementStrategyBESTFIT>
f0103159:	84 c0                	test   %al,%al
f010315b:	74 05                	je     f0103162 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f010315d:	e8 4f b3 02 00       	call   f012e4b1 <test_krealloc_BF>
		}
		return 0;
f0103162:	b8 00 00 00 00       	mov    $0x0,%eax
f0103167:	eb 05                	jmp    f010316e <command_test_kheap+0x376>
	}
	return 0;
f0103169:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010316e:	c9                   	leave  
f010316f:	c3                   	ret    

f0103170 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103170:	55                   	push   %ebp
f0103171:	89 e5                	mov    %esp,%ebp
f0103173:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103176:	8b 45 08             	mov    0x8(%ebp),%eax
f0103179:	05 00 14 00 00       	add    $0x1400,%eax
f010317e:	c1 e0 03             	shl    $0x3,%eax
f0103181:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103184:	83 ec 04             	sub    $0x4,%esp
f0103187:	6a 08                	push   $0x8
f0103189:	ff 75 0c             	pushl  0xc(%ebp)
f010318c:	ff 75 f4             	pushl  -0xc(%ebp)
f010318f:	e8 af ef 02 00       	call   f0132143 <ide_read>
f0103194:	83 c4 10             	add    $0x10,%esp
f0103197:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010319a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010319d:	c9                   	leave  
f010319e:	c3                   	ret    

f010319f <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010319f:	55                   	push   %ebp
f01031a0:	89 e5                	mov    %esp,%ebp
f01031a2:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01031a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031a8:	05 00 14 00 00       	add    $0x1400,%eax
f01031ad:	c1 e0 03             	shl    $0x3,%eax
f01031b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01031b3:	83 ec 04             	sub    $0x4,%esp
f01031b6:	6a 08                	push   $0x8
f01031b8:	ff 75 0c             	pushl  0xc(%ebp)
f01031bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01031be:	e8 c0 f0 02 00       	call   f0132283 <ide_write>
f01031c3:	83 c4 10             	add    $0x10,%esp
f01031c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01031c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031cd:	74 14                	je     f01031e3 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031cf:	83 ec 04             	sub    $0x4,%esp
f01031d2:	68 1c 5c 13 f0       	push   $0xf0135c1c
f01031d7:	6a 2e                	push   $0x2e
f01031d9:	68 33 5c 13 f0       	push   $0xf0135c33
f01031de:	e8 22 d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031e6:	c9                   	leave  
f01031e7:	c3                   	ret    

f01031e8 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031e8:	55                   	push   %ebp
f01031e9:	89 e5                	mov    %esp,%ebp
f01031eb:	53                   	push   %ebx
f01031ec:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031ef:	c7 05 b4 07 86 f0 00 	movl   $0x0,0xf08607b4
f01031f6:	00 00 00 
f01031f9:	c7 05 b8 07 86 f0 00 	movl   $0x0,0xf08607b8
f0103200:	00 00 00 
f0103203:	c7 05 c0 07 86 f0 00 	movl   $0x0,0xf08607c0
f010320a:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010320d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103214:	e9 e8 00 00 00       	jmp    f0103301 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103219:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f010321f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103222:	89 d0                	mov    %edx,%eax
f0103224:	01 c0                	add    %eax,%eax
f0103226:	01 d0                	add    %edx,%eax
f0103228:	c1 e0 03             	shl    $0x3,%eax
f010322b:	01 c8                	add    %ecx,%eax
f010322d:	83 ec 0c             	sub    $0xc,%esp
f0103230:	50                   	push   %eax
f0103231:	e8 cd 36 00 00       	call   f0106903 <initialize_frame_info>
f0103236:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103239:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	85 c0                	test   %eax,%eax
f010324f:	75 14                	jne    f0103265 <initialize_disk_page_file+0x7d>
f0103251:	83 ec 04             	sub    $0x4,%esp
f0103254:	68 50 5c 13 f0       	push   $0xf0135c50
f0103259:	6a 59                	push   $0x59
f010325b:	68 33 5c 13 f0       	push   $0xf0135c33
f0103260:	e8 a0 cf ff ff       	call   f0100205 <_panic>
f0103265:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f010326b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010326e:	89 d0                	mov    %edx,%eax
f0103270:	01 c0                	add    %eax,%eax
f0103272:	01 d0                	add    %edx,%eax
f0103274:	c1 e0 03             	shl    $0x3,%eax
f0103277:	01 c8                	add    %ecx,%eax
f0103279:	8b 15 b4 07 86 f0    	mov    0xf08607b4,%edx
f010327f:	89 10                	mov    %edx,(%eax)
f0103281:	8b 00                	mov    (%eax),%eax
f0103283:	85 c0                	test   %eax,%eax
f0103285:	74 1f                	je     f01032a6 <initialize_disk_page_file+0xbe>
f0103287:	8b 15 b4 07 86 f0    	mov    0xf08607b4,%edx
f010328d:	8b 1d d8 06 86 f0    	mov    0xf08606d8,%ebx
f0103293:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103296:	89 c8                	mov    %ecx,%eax
f0103298:	01 c0                	add    %eax,%eax
f010329a:	01 c8                	add    %ecx,%eax
f010329c:	c1 e0 03             	shl    $0x3,%eax
f010329f:	01 d8                	add    %ebx,%eax
f01032a1:	89 42 04             	mov    %eax,0x4(%edx)
f01032a4:	eb 19                	jmp    f01032bf <initialize_disk_page_file+0xd7>
f01032a6:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f01032ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032af:	89 d0                	mov    %edx,%eax
f01032b1:	01 c0                	add    %eax,%eax
f01032b3:	01 d0                	add    %edx,%eax
f01032b5:	c1 e0 03             	shl    $0x3,%eax
f01032b8:	01 c8                	add    %ecx,%eax
f01032ba:	a3 b8 07 86 f0       	mov    %eax,0xf08607b8
f01032bf:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f01032c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032c8:	89 d0                	mov    %edx,%eax
f01032ca:	01 c0                	add    %eax,%eax
f01032cc:	01 d0                	add    %edx,%eax
f01032ce:	c1 e0 03             	shl    $0x3,%eax
f01032d1:	01 c8                	add    %ecx,%eax
f01032d3:	a3 b4 07 86 f0       	mov    %eax,0xf08607b4
f01032d8:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f01032de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032e1:	89 d0                	mov    %edx,%eax
f01032e3:	01 c0                	add    %eax,%eax
f01032e5:	01 d0                	add    %edx,%eax
f01032e7:	c1 e0 03             	shl    $0x3,%eax
f01032ea:	01 c8                	add    %ecx,%eax
f01032ec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032f3:	a1 c0 07 86 f0       	mov    0xf08607c0,%eax
f01032f8:	40                   	inc    %eax
f01032f9:	a3 c0 07 86 f0       	mov    %eax,0xf08607c0
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032fe:	ff 45 f4             	incl   -0xc(%ebp)
f0103301:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103308:	0f 8e 0b ff ff ff    	jle    f0103219 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f010330e:	90                   	nop
f010330f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103312:	c9                   	leave  
f0103313:	c3                   	ret    

f0103314 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103314:	55                   	push   %ebp
f0103315:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103317:	8b 45 08             	mov    0x8(%ebp),%eax
f010331a:	8b 15 d8 06 86 f0    	mov    0xf08606d8,%edx
f0103320:	29 d0                	sub    %edx,%eax
f0103322:	c1 f8 03             	sar    $0x3,%eax
f0103325:	89 c2                	mov    %eax,%edx
f0103327:	89 d0                	mov    %edx,%eax
f0103329:	c1 e0 02             	shl    $0x2,%eax
f010332c:	01 d0                	add    %edx,%eax
f010332e:	c1 e0 02             	shl    $0x2,%eax
f0103331:	01 d0                	add    %edx,%eax
f0103333:	c1 e0 02             	shl    $0x2,%eax
f0103336:	01 d0                	add    %edx,%eax
f0103338:	89 c1                	mov    %eax,%ecx
f010333a:	c1 e1 08             	shl    $0x8,%ecx
f010333d:	01 c8                	add    %ecx,%eax
f010333f:	89 c1                	mov    %eax,%ecx
f0103341:	c1 e1 10             	shl    $0x10,%ecx
f0103344:	01 c8                	add    %ecx,%eax
f0103346:	01 c0                	add    %eax,%eax
f0103348:	01 d0                	add    %edx,%eax
}
f010334a:	5d                   	pop    %ebp
f010334b:	c3                   	ret    

f010334c <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010334c:	55                   	push   %ebp
f010334d:	89 e5                	mov    %esp,%ebp
f010334f:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103352:	a1 b4 07 86 f0       	mov    0xf08607b4,%eax
f0103357:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010335a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010335e:	75 0a                	jne    f010336a <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103360:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103365:	e9 a7 00 00 00       	jmp    f0103411 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010336a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010336e:	75 14                	jne    f0103384 <allocate_disk_frame+0x38>
f0103370:	83 ec 04             	sub    $0x4,%esp
f0103373:	68 73 5c 13 f0       	push   $0xf0135c73
f0103378:	6a 78                	push   $0x78
f010337a:	68 33 5c 13 f0       	push   $0xf0135c33
f010337f:	e8 81 ce ff ff       	call   f0100205 <_panic>
f0103384:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103387:	8b 00                	mov    (%eax),%eax
f0103389:	85 c0                	test   %eax,%eax
f010338b:	74 10                	je     f010339d <allocate_disk_frame+0x51>
f010338d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103390:	8b 00                	mov    (%eax),%eax
f0103392:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103395:	8b 52 04             	mov    0x4(%edx),%edx
f0103398:	89 50 04             	mov    %edx,0x4(%eax)
f010339b:	eb 0b                	jmp    f01033a8 <allocate_disk_frame+0x5c>
f010339d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a0:	8b 40 04             	mov    0x4(%eax),%eax
f01033a3:	a3 b8 07 86 f0       	mov    %eax,0xf08607b8
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	8b 40 04             	mov    0x4(%eax),%eax
f01033ae:	85 c0                	test   %eax,%eax
f01033b0:	74 0f                	je     f01033c1 <allocate_disk_frame+0x75>
f01033b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033b5:	8b 40 04             	mov    0x4(%eax),%eax
f01033b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01033bb:	8b 12                	mov    (%edx),%edx
f01033bd:	89 10                	mov    %edx,(%eax)
f01033bf:	eb 0a                	jmp    f01033cb <allocate_disk_frame+0x7f>
f01033c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033c4:	8b 00                	mov    (%eax),%eax
f01033c6:	a3 b4 07 86 f0       	mov    %eax,0xf08607b4
f01033cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033d7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033de:	a1 c0 07 86 f0       	mov    0xf08607c0,%eax
f01033e3:	48                   	dec    %eax
f01033e4:	a3 c0 07 86 f0       	mov    %eax,0xf08607c0
	initialize_frame_info(ptr_frame_info);
f01033e9:	83 ec 0c             	sub    $0xc,%esp
f01033ec:	ff 75 f4             	pushl  -0xc(%ebp)
f01033ef:	e8 0f 35 00 00       	call   f0106903 <initialize_frame_info>
f01033f4:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033f7:	83 ec 0c             	sub    $0xc,%esp
f01033fa:	ff 75 f4             	pushl  -0xc(%ebp)
f01033fd:	e8 12 ff ff ff       	call   f0103314 <to_disk_frame_number>
f0103402:	83 c4 10             	add    $0x10,%esp
f0103405:	89 c2                	mov    %eax,%edx
f0103407:	8b 45 08             	mov    0x8(%ebp),%eax
f010340a:	89 10                	mov    %edx,(%eax)
	return 0;
f010340c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103411:	c9                   	leave  
f0103412:	c3                   	ret    

f0103413 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103413:	55                   	push   %ebp
f0103414:	89 e5                	mov    %esp,%ebp
f0103416:	53                   	push   %ebx
f0103417:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f010341a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010341e:	0f 84 ca 00 00 00    	je     f01034ee <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103424:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f010342a:	8b 55 08             	mov    0x8(%ebp),%edx
f010342d:	89 d0                	mov    %edx,%eax
f010342f:	01 c0                	add    %eax,%eax
f0103431:	01 d0                	add    %edx,%eax
f0103433:	c1 e0 03             	shl    $0x3,%eax
f0103436:	01 c8                	add    %ecx,%eax
f0103438:	85 c0                	test   %eax,%eax
f010343a:	75 17                	jne    f0103453 <free_disk_frame+0x40>
f010343c:	83 ec 04             	sub    $0x4,%esp
f010343f:	68 50 5c 13 f0       	push   $0xf0135c50
f0103444:	68 85 00 00 00       	push   $0x85
f0103449:	68 33 5c 13 f0       	push   $0xf0135c33
f010344e:	e8 b2 cd ff ff       	call   f0100205 <_panic>
f0103453:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f0103459:	8b 55 08             	mov    0x8(%ebp),%edx
f010345c:	89 d0                	mov    %edx,%eax
f010345e:	01 c0                	add    %eax,%eax
f0103460:	01 d0                	add    %edx,%eax
f0103462:	c1 e0 03             	shl    $0x3,%eax
f0103465:	01 c8                	add    %ecx,%eax
f0103467:	8b 15 b4 07 86 f0    	mov    0xf08607b4,%edx
f010346d:	89 10                	mov    %edx,(%eax)
f010346f:	8b 00                	mov    (%eax),%eax
f0103471:	85 c0                	test   %eax,%eax
f0103473:	74 1f                	je     f0103494 <free_disk_frame+0x81>
f0103475:	8b 15 b4 07 86 f0    	mov    0xf08607b4,%edx
f010347b:	8b 1d d8 06 86 f0    	mov    0xf08606d8,%ebx
f0103481:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103484:	89 c8                	mov    %ecx,%eax
f0103486:	01 c0                	add    %eax,%eax
f0103488:	01 c8                	add    %ecx,%eax
f010348a:	c1 e0 03             	shl    $0x3,%eax
f010348d:	01 d8                	add    %ebx,%eax
f010348f:	89 42 04             	mov    %eax,0x4(%edx)
f0103492:	eb 19                	jmp    f01034ad <free_disk_frame+0x9a>
f0103494:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f010349a:	8b 55 08             	mov    0x8(%ebp),%edx
f010349d:	89 d0                	mov    %edx,%eax
f010349f:	01 c0                	add    %eax,%eax
f01034a1:	01 d0                	add    %edx,%eax
f01034a3:	c1 e0 03             	shl    $0x3,%eax
f01034a6:	01 c8                	add    %ecx,%eax
f01034a8:	a3 b8 07 86 f0       	mov    %eax,0xf08607b8
f01034ad:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f01034b3:	8b 55 08             	mov    0x8(%ebp),%edx
f01034b6:	89 d0                	mov    %edx,%eax
f01034b8:	01 c0                	add    %eax,%eax
f01034ba:	01 d0                	add    %edx,%eax
f01034bc:	c1 e0 03             	shl    $0x3,%eax
f01034bf:	01 c8                	add    %ecx,%eax
f01034c1:	a3 b4 07 86 f0       	mov    %eax,0xf08607b4
f01034c6:	8b 0d d8 06 86 f0    	mov    0xf08606d8,%ecx
f01034cc:	8b 55 08             	mov    0x8(%ebp),%edx
f01034cf:	89 d0                	mov    %edx,%eax
f01034d1:	01 c0                	add    %eax,%eax
f01034d3:	01 d0                	add    %edx,%eax
f01034d5:	c1 e0 03             	shl    $0x3,%eax
f01034d8:	01 c8                	add    %ecx,%eax
f01034da:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034e1:	a1 c0 07 86 f0       	mov    0xf08607c0,%eax
f01034e6:	40                   	inc    %eax
f01034e7:	a3 c0 07 86 f0       	mov    %eax,0xf08607c0
f01034ec:	eb 01                	jmp    f01034ef <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034ee:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034ef:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034f2:	c9                   	leave  
f01034f3:	c3                   	ret    

f01034f4 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034f4:	55                   	push   %ebp
f01034f5:	89 e5                	mov    %esp,%ebp
f01034f7:	53                   	push   %ebx
f01034f8:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034fe:	c1 e8 16             	shr    $0x16,%eax
f0103501:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103508:	8b 45 08             	mov    0x8(%ebp),%eax
f010350b:	01 d0                	add    %edx,%eax
f010350d:	8b 00                	mov    (%eax),%eax
f010350f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103512:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0103519:	77 1d                	ja     f0103538 <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f010351b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010351e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103523:	83 ec 0c             	sub    $0xc,%esp
f0103526:	50                   	push   %eax
f0103527:	e8 21 47 00 00       	call   f0107c4d <kheap_virtual_address>
f010352c:	83 c4 10             	add    $0x10,%esp
f010352f:	89 c2                	mov    %eax,%edx
f0103531:	8b 45 14             	mov    0x14(%ebp),%eax
f0103534:	89 10                	mov    %edx,(%eax)
f0103536:	eb 44                	jmp    f010357c <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103538:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010353b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103540:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103543:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103546:	c1 e8 0c             	shr    $0xc,%eax
f0103549:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010354c:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0103551:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103554:	72 17                	jb     f010356d <get_disk_page_table+0x79>
f0103556:	ff 75 f0             	pushl  -0x10(%ebp)
f0103559:	68 94 5c 13 f0       	push   $0xf0135c94
f010355e:	68 92 00 00 00       	push   $0x92
f0103563:	68 33 5c 13 f0       	push   $0xf0135c33
f0103568:	e8 98 cc ff ff       	call   f0100205 <_panic>
f010356d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103570:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103575:	89 c2                	mov    %eax,%edx
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010357c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103580:	0f 85 80 00 00 00    	jne    f0103606 <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103586:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010358a:	74 6a                	je     f01035f6 <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f010358c:	83 ec 0c             	sub    $0xc,%esp
f010358f:	68 00 10 00 00       	push   $0x1000
f0103594:	e8 cd 44 00 00       	call   f0107a66 <kmalloc>
f0103599:	83 c4 10             	add    $0x10,%esp
f010359c:	89 c2                	mov    %eax,%edx
f010359e:	8b 45 14             	mov    0x14(%ebp),%eax
f01035a1:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f01035a3:	8b 45 14             	mov    0x14(%ebp),%eax
f01035a6:	8b 00                	mov    (%eax),%eax
f01035a8:	85 c0                	test   %eax,%eax
f01035aa:	75 07                	jne    f01035b3 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f01035ac:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01035b1:	eb 58                	jmp    f010360b <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f01035b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01035b6:	c1 e8 16             	shr    $0x16,%eax
f01035b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01035c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01035c3:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f01035c6:	8b 45 14             	mov    0x14(%ebp),%eax
f01035c9:	8b 00                	mov    (%eax),%eax
f01035cb:	83 ec 0c             	sub    $0xc,%esp
f01035ce:	50                   	push   %eax
f01035cf:	e8 98 46 00 00       	call   f0107c6c <kheap_physical_address>
f01035d4:	83 c4 10             	add    $0x10,%esp
f01035d7:	83 c8 01             	or     $0x1,%eax
f01035da:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035dc:	8b 45 14             	mov    0x14(%ebp),%eax
f01035df:	8b 00                	mov    (%eax),%eax
f01035e1:	83 ec 04             	sub    $0x4,%esp
f01035e4:	68 00 10 00 00       	push   $0x1000
f01035e9:	6a 00                	push   $0x0
f01035eb:	50                   	push   %eax
f01035ec:	e8 ed e5 02 00       	call   f0131bde <memset>
f01035f1:	83 c4 10             	add    $0x10,%esp
f01035f4:	eb 10                	jmp    f0103606 <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035f6:	8b 45 14             	mov    0x14(%ebp),%eax
f01035f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0103604:	eb 05                	jmp    f010360b <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103606:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010360b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010360e:	c9                   	leave  
f010360f:	c3                   	ret    

f0103610 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103610:	55                   	push   %ebp
f0103611:	89 e5                	mov    %esp,%ebp
f0103613:	83 ec 28             	sub    $0x28,%esp
f0103616:	8b 45 10             	mov    0x10(%ebp),%eax
f0103619:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010361c:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103620:	74 75                	je     f0103697 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103622:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103629:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010362c:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103631:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103634:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103637:	ba 00 00 00 00       	mov    $0x0,%edx
f010363c:	f7 75 f4             	divl   -0xc(%ebp)
f010363f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103642:	29 d0                	sub    %edx,%eax
f0103644:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103647:	73 32                	jae    f010367b <pf_add_empty_env_page+0x6b>
f0103649:	8b 45 08             	mov    0x8(%ebp),%eax
f010364c:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103652:	b8 00 00 00 00       	mov    $0x0,%eax
f0103657:	29 d0                	sub    %edx,%eax
f0103659:	c1 e0 0c             	shl    $0xc,%eax
f010365c:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103661:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103664:	76 15                	jbe    f010367b <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103666:	8b 45 08             	mov    0x8(%ebp),%eax
f0103669:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010366f:	8d 50 01             	lea    0x1(%eax),%edx
f0103672:	8b 45 08             	mov    0x8(%ebp),%eax
f0103675:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010367b:	a1 5c 07 86 f0       	mov    0xf086075c,%eax
f0103680:	83 ec 04             	sub    $0x4,%esp
f0103683:	50                   	push   %eax
f0103684:	ff 75 0c             	pushl  0xc(%ebp)
f0103687:	ff 75 08             	pushl  0x8(%ebp)
f010368a:	e8 b2 00 00 00       	call   f0103741 <pf_add_env_page>
f010368f:	83 c4 10             	add    $0x10,%esp
f0103692:	e9 a8 00 00 00       	jmp    f010373f <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103697:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010369e:	76 19                	jbe    f01036b9 <pf_add_empty_env_page+0xa9>
f01036a0:	68 c4 5c 13 f0       	push   $0xf0135cc4
f01036a5:	68 ea 5c 13 f0       	push   $0xf0135cea
f01036aa:	68 d1 00 00 00       	push   $0xd1
f01036af:	68 33 5c 13 f0       	push   $0xf0135c33
f01036b4:	e8 4c cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01036b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01036bc:	83 c0 64             	add    $0x64,%eax
f01036bf:	83 ec 08             	sub    $0x8,%esp
f01036c2:	50                   	push   %eax
f01036c3:	ff 75 08             	pushl  0x8(%ebp)
f01036c6:	e8 10 06 00 00       	call   f0103cdb <get_disk_page_directory>
f01036cb:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01036d1:	8b 40 64             	mov    0x64(%eax),%eax
f01036d4:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036d7:	52                   	push   %edx
f01036d8:	6a 01                	push   $0x1
f01036da:	ff 75 0c             	pushl  0xc(%ebp)
f01036dd:	50                   	push   %eax
f01036de:	e8 11 fe ff ff       	call   f01034f4 <get_disk_page_table>
f01036e3:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036e9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036ec:	c1 ea 0c             	shr    $0xc,%edx
f01036ef:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036f5:	c1 e2 02             	shl    $0x2,%edx
f01036f8:	01 d0                	add    %edx,%eax
f01036fa:	8b 00                	mov    (%eax),%eax
f01036fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103702:	85 c0                	test   %eax,%eax
f0103704:	75 34                	jne    f010373a <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103706:	83 ec 0c             	sub    $0xc,%esp
f0103709:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010370c:	50                   	push   %eax
f010370d:	e8 3a fc ff ff       	call   f010334c <allocate_disk_frame>
f0103712:	83 c4 10             	add    $0x10,%esp
f0103715:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103718:	75 07                	jne    f0103721 <pf_add_empty_env_page+0x111>
f010371a:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010371f:	eb 1e                	jmp    f010373f <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103721:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103724:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103727:	c1 ea 0c             	shr    $0xc,%edx
f010372a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103730:	c1 e2 02             	shl    $0x2,%edx
f0103733:	01 c2                	add    %eax,%edx
f0103735:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103738:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010373a:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010373f:	c9                   	leave  
f0103740:	c3                   	ret    

f0103741 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103741:	55                   	push   %ebp
f0103742:	89 e5                	mov    %esp,%ebp
f0103744:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103747:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010374e:	76 19                	jbe    f0103769 <pf_add_env_page+0x28>
f0103750:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103755:	68 ea 5c 13 f0       	push   $0xf0135cea
f010375a:	68 e6 00 00 00       	push   $0xe6
f010375f:	68 33 5c 13 f0       	push   $0xf0135c33
f0103764:	e8 9c ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103769:	8b 45 08             	mov    0x8(%ebp),%eax
f010376c:	83 c0 64             	add    $0x64,%eax
f010376f:	83 ec 08             	sub    $0x8,%esp
f0103772:	50                   	push   %eax
f0103773:	ff 75 08             	pushl  0x8(%ebp)
f0103776:	e8 60 05 00 00       	call   f0103cdb <get_disk_page_directory>
f010377b:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f010377e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103781:	8b 40 64             	mov    0x64(%eax),%eax
f0103784:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103787:	52                   	push   %edx
f0103788:	6a 01                	push   $0x1
f010378a:	ff 75 0c             	pushl  0xc(%ebp)
f010378d:	50                   	push   %eax
f010378e:	e8 61 fd ff ff       	call   f01034f4 <get_disk_page_table>
f0103793:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103796:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103799:	8b 55 0c             	mov    0xc(%ebp),%edx
f010379c:	c1 ea 0c             	shr    $0xc,%edx
f010379f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037a5:	c1 e2 02             	shl    $0x2,%edx
f01037a8:	01 d0                	add    %edx,%eax
f01037aa:	8b 00                	mov    (%eax),%eax
f01037ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01037af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037b2:	85 c0                	test   %eax,%eax
f01037b4:	75 34                	jne    f01037ea <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01037b6:	83 ec 0c             	sub    $0xc,%esp
f01037b9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01037bc:	50                   	push   %eax
f01037bd:	e8 8a fb ff ff       	call   f010334c <allocate_disk_frame>
f01037c2:	83 c4 10             	add    $0x10,%esp
f01037c5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01037c8:	75 07                	jne    f01037d1 <pf_add_env_page+0x90>
f01037ca:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037cf:	eb 31                	jmp    f0103802 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037d7:	c1 ea 0c             	shr    $0xc,%edx
f01037da:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037e0:	c1 e2 02             	shl    $0x2,%edx
f01037e3:	01 c2                	add    %eax,%edx
f01037e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037e8:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037ed:	83 ec 08             	sub    $0x8,%esp
f01037f0:	ff 75 10             	pushl  0x10(%ebp)
f01037f3:	50                   	push   %eax
f01037f4:	e8 a6 f9 ff ff       	call   f010319f <write_disk_page>
f01037f9:	83 c4 10             	add    $0x10,%esp
f01037fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103802:	c9                   	leave  
f0103803:	c3                   	ret    

f0103804 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103804:	55                   	push   %ebp
f0103805:	89 e5                	mov    %esp,%ebp
f0103807:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010380a:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103811:	76 19                	jbe    f010382c <pf_update_env_page+0x28>
f0103813:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103818:	68 ea 5c 13 f0       	push   $0xf0135cea
f010381d:	68 08 01 00 00       	push   $0x108
f0103822:	68 33 5c 13 f0       	push   $0xf0135c33
f0103827:	e8 d9 c9 ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010382c:	8b 45 08             	mov    0x8(%ebp),%eax
f010382f:	83 c0 64             	add    $0x64,%eax
f0103832:	83 ec 08             	sub    $0x8,%esp
f0103835:	50                   	push   %eax
f0103836:	ff 75 08             	pushl  0x8(%ebp)
f0103839:	e8 9d 04 00 00       	call   f0103cdb <get_disk_page_directory>
f010383e:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103841:	8b 45 08             	mov    0x8(%ebp),%eax
f0103844:	8b 40 64             	mov    0x64(%eax),%eax
f0103847:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010384a:	52                   	push   %edx
f010384b:	6a 00                	push   $0x0
f010384d:	ff 75 0c             	pushl  0xc(%ebp)
f0103850:	50                   	push   %eax
f0103851:	e8 9e fc ff ff       	call   f01034f4 <get_disk_page_table>
f0103856:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103859:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010385c:	85 c0                	test   %eax,%eax
f010385e:	74 29                	je     f0103889 <pf_update_env_page+0x85>
f0103860:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103863:	85 c0                	test   %eax,%eax
f0103865:	0f 84 43 01 00 00    	je     f01039ae <pf_update_env_page+0x1aa>
f010386b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010386e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103871:	c1 ea 0c             	shr    $0xc,%edx
f0103874:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010387a:	c1 e2 02             	shl    $0x2,%edx
f010387d:	01 d0                	add    %edx,%eax
f010387f:	8b 00                	mov    (%eax),%eax
f0103881:	85 c0                	test   %eax,%eax
f0103883:	0f 85 25 01 00 00    	jne    f01039ae <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103889:	8b 45 0c             	mov    0xc(%ebp),%eax
f010388c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010388f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103892:	85 c0                	test   %eax,%eax
f0103894:	79 09                	jns    f010389f <pf_update_env_page+0x9b>
f0103896:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f010389d:	76 38                	jbe    f01038d7 <pf_update_env_page+0xd3>
f010389f:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01038a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01038a9:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01038ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01038b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01038b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01038b9:	f7 75 f0             	divl   -0x10(%ebp)
f01038bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01038bf:	29 d0                	sub    %edx,%eax
f01038c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01038c4:	0f 87 cd 00 00 00    	ja     f0103997 <pf_update_env_page+0x193>
f01038ca:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038d1:	0f 87 c0 00 00 00    	ja     f0103997 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01038da:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038dd:	83 ec 04             	sub    $0x4,%esp
f01038e0:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038e3:	52                   	push   %edx
f01038e4:	ff 75 0c             	pushl  0xc(%ebp)
f01038e7:	50                   	push   %eax
f01038e8:	e8 45 35 00 00       	call   f0106e32 <get_frame_info>
f01038ed:	83 c4 10             	add    $0x10,%esp
f01038f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038f6:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038f9:	75 52                	jne    f010394d <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038fe:	83 ec 04             	sub    $0x4,%esp
f0103901:	50                   	push   %eax
f0103902:	ff 75 f4             	pushl  -0xc(%ebp)
f0103905:	ff 75 08             	pushl  0x8(%ebp)
f0103908:	e8 34 fe ff ff       	call   f0103741 <pf_add_env_page>
f010390d:	83 c4 10             	add    $0x10,%esp
f0103910:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103913:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103917:	75 17                	jne    f0103930 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103919:	83 ec 04             	sub    $0x4,%esp
f010391c:	68 00 5d 13 f0       	push   $0xf0135d00
f0103921:	68 1d 01 00 00       	push   $0x11d
f0103926:	68 33 5c 13 f0       	push   $0xf0135c33
f010392b:	e8 d5 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103930:	8b 45 08             	mov    0x8(%ebp),%eax
f0103933:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103939:	8d 50 01             	lea    0x1(%eax),%edx
f010393c:	8b 45 08             	mov    0x8(%ebp),%eax
f010393f:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103948:	e9 17 01 00 00       	jmp    f0103a64 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f010394d:	83 ec 04             	sub    $0x4,%esp
f0103950:	6a 00                	push   $0x0
f0103952:	ff 75 f4             	pushl  -0xc(%ebp)
f0103955:	ff 75 08             	pushl  0x8(%ebp)
f0103958:	e8 b3 fc ff ff       	call   f0103610 <pf_add_empty_env_page>
f010395d:	83 c4 10             	add    $0x10,%esp
f0103960:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103963:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103967:	75 17                	jne    f0103980 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103969:	83 ec 04             	sub    $0x4,%esp
f010396c:	68 2c 5d 13 f0       	push   $0xf0135d2c
f0103971:	68 28 01 00 00       	push   $0x128
f0103976:	68 33 5c 13 f0       	push   $0xf0135c33
f010397b:	e8 85 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103980:	8b 45 08             	mov    0x8(%ebp),%eax
f0103983:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103989:	8d 50 01             	lea    0x1(%eax),%edx
f010398c:	8b 45 08             	mov    0x8(%ebp),%eax
f010398f:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103995:	eb 17                	jmp    f01039ae <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103997:	83 ec 04             	sub    $0x4,%esp
f010399a:	68 78 5d 13 f0       	push   $0xf0135d78
f010399f:	68 2f 01 00 00       	push   $0x12f
f01039a4:	68 33 5c 13 f0       	push   $0xf0135c33
f01039a9:	e8 57 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01039ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b1:	8b 40 64             	mov    0x64(%eax),%eax
f01039b4:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01039b7:	52                   	push   %edx
f01039b8:	6a 00                	push   $0x0
f01039ba:	ff 75 0c             	pushl  0xc(%ebp)
f01039bd:	50                   	push   %eax
f01039be:	e8 31 fb ff ff       	call   f01034f4 <get_disk_page_table>
f01039c3:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01039c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01039c9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039cc:	c1 ea 0c             	shr    $0xc,%edx
f01039cf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039d5:	c1 e2 02             	shl    $0x2,%edx
f01039d8:	01 d0                	add    %edx,%eax
f01039da:	8b 00                	mov    (%eax),%eax
f01039dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039df:	8b 45 08             	mov    0x8(%ebp),%eax
f01039e2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039e5:	6a 00                	push   $0x0
f01039e7:	68 00 00 80 ef       	push   $0xef800000
f01039ec:	ff 75 10             	pushl  0x10(%ebp)
f01039ef:	50                   	push   %eax
f01039f0:	e8 78 33 00 00       	call   f0106d6d <map_frame>
f01039f5:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039f8:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103a02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a07:	83 ec 08             	sub    $0x8,%esp
f0103a0a:	50                   	push   %eax
f0103a0b:	ff 75 e0             	pushl  -0x20(%ebp)
f0103a0e:	e8 8c f7 ff ff       	call   f010319f <write_disk_page>
f0103a13:	83 c4 10             	add    $0x10,%esp
f0103a16:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f0103a19:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a1c:	8b 40 08             	mov    0x8(%eax),%eax
f0103a1f:	40                   	inc    %eax
f0103a20:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a23:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f0103a27:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a2d:	83 ec 08             	sub    $0x8,%esp
f0103a30:	68 00 00 80 ef       	push   $0xef800000
f0103a35:	50                   	push   %eax
f0103a36:	e8 67 34 00 00       	call   f0106ea2 <unmap_frame>
f0103a3b:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a3e:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a41:	8b 40 08             	mov    0x8(%eax),%eax
f0103a44:	48                   	dec    %eax
f0103a45:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a48:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a4f:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a55:	8d 50 01             	lea    0x1(%eax),%edx
f0103a58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a5b:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a64:	c9                   	leave  
f0103a65:	c3                   	ret    

f0103a66 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a66:	55                   	push   %ebp
f0103a67:	89 e5                	mov    %esp,%ebp
f0103a69:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a7a:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a80:	8b 40 64             	mov    0x64(%eax),%eax
f0103a83:	85 c0                	test   %eax,%eax
f0103a85:	75 0a                	jne    f0103a91 <pf_read_env_page+0x2b>
f0103a87:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8c:	e9 90 00 00 00       	jmp    f0103b21 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a91:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a94:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a97:	8b 40 64             	mov    0x64(%eax),%eax
f0103a9a:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a9d:	51                   	push   %ecx
f0103a9e:	6a 00                	push   $0x0
f0103aa0:	52                   	push   %edx
f0103aa1:	50                   	push   %eax
f0103aa2:	e8 4d fa ff ff       	call   f01034f4 <get_disk_page_table>
f0103aa7:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103aad:	85 c0                	test   %eax,%eax
f0103aaf:	75 07                	jne    f0103ab8 <pf_read_env_page+0x52>
f0103ab1:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab6:	eb 69                	jmp    f0103b21 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103ab8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103abb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103abe:	c1 ea 0c             	shr    $0xc,%edx
f0103ac1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ac7:	c1 e2 02             	shl    $0x2,%edx
f0103aca:	01 d0                	add    %edx,%eax
f0103acc:	8b 00                	mov    (%eax),%eax
f0103ace:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103ad1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103ad5:	75 07                	jne    f0103ade <pf_read_env_page+0x78>
f0103ad7:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103adc:	eb 43                	jmp    f0103b21 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ade:	83 ec 08             	sub    $0x8,%esp
f0103ae1:	ff 75 0c             	pushl  0xc(%ebp)
f0103ae4:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ae7:	e8 84 f6 ff ff       	call   f0103170 <read_disk_page>
f0103aec:	83 c4 10             	add    $0x10,%esp
f0103aef:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103af2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103af5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103afb:	6a 40                	push   $0x40
f0103afd:	6a 00                	push   $0x0
f0103aff:	52                   	push   %edx
f0103b00:	50                   	push   %eax
f0103b01:	e8 1d 42 00 00       	call   f0107d23 <pt_set_page_permissions>
f0103b06:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103b09:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0c:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103b12:	8d 50 01             	lea    0x1(%eax),%edx
f0103b15:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b18:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103b1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103b21:	c9                   	leave  
f0103b22:	c3                   	ret    

f0103b23 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103b23:	55                   	push   %ebp
f0103b24:	89 e5                	mov    %esp,%ebp
f0103b26:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b29:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2c:	8b 40 64             	mov    0x64(%eax),%eax
f0103b2f:	85 c0                	test   %eax,%eax
f0103b31:	74 62                	je     f0103b95 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b33:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b36:	8b 40 64             	mov    0x64(%eax),%eax
f0103b39:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b3c:	52                   	push   %edx
f0103b3d:	6a 00                	push   $0x0
f0103b3f:	ff 75 0c             	pushl  0xc(%ebp)
f0103b42:	50                   	push   %eax
f0103b43:	e8 ac f9 ff ff       	call   f01034f4 <get_disk_page_table>
f0103b48:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b4e:	85 c0                	test   %eax,%eax
f0103b50:	74 46                	je     f0103b98 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b55:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b58:	c1 ea 0c             	shr    $0xc,%edx
f0103b5b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b61:	c1 e2 02             	shl    $0x2,%edx
f0103b64:	01 d0                	add    %edx,%eax
f0103b66:	8b 00                	mov    (%eax),%eax
f0103b68:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b6e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b71:	c1 ea 0c             	shr    $0xc,%edx
f0103b74:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b7a:	c1 e2 02             	shl    $0x2,%edx
f0103b7d:	01 d0                	add    %edx,%eax
f0103b7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b85:	83 ec 0c             	sub    $0xc,%esp
f0103b88:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b8b:	e8 83 f8 ff ff       	call   f0103413 <free_disk_frame>
f0103b90:	83 c4 10             	add    $0x10,%esp
f0103b93:	eb 04                	jmp    f0103b99 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b95:	90                   	nop
f0103b96:	eb 01                	jmp    f0103b99 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b98:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b99:	c9                   	leave  
f0103b9a:	c3                   	ret    

f0103b9b <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b9b:	55                   	push   %ebp
f0103b9c:	89 e5                	mov    %esp,%ebp
f0103b9e:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ba1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103ba8:	e9 b8 00 00 00       	jmp    f0103c65 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103bad:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bb0:	8b 40 64             	mov    0x64(%eax),%eax
f0103bb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bb6:	c1 e2 02             	shl    $0x2,%edx
f0103bb9:	01 d0                	add    %edx,%eax
f0103bbb:	8b 00                	mov    (%eax),%eax
f0103bbd:	83 e0 01             	and    $0x1,%eax
f0103bc0:	85 c0                	test   %eax,%eax
f0103bc2:	0f 84 99 00 00 00    	je     f0103c61 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103bc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bcb:	8b 40 64             	mov    0x64(%eax),%eax
f0103bce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bd1:	c1 e2 02             	shl    $0x2,%edx
f0103bd4:	01 d0                	add    %edx,%eax
f0103bd6:	8b 00                	mov    (%eax),%eax
f0103bd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bdd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103be0:	83 ec 0c             	sub    $0xc,%esp
f0103be3:	ff 75 ec             	pushl  -0x14(%ebp)
f0103be6:	e8 62 40 00 00       	call   f0107c4d <kheap_virtual_address>
f0103beb:	83 c4 10             	add    $0x10,%esp
f0103bee:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bf1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bf8:	eb 3a                	jmp    f0103c34 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bfd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c04:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c07:	01 d0                	add    %edx,%eax
f0103c09:	8b 00                	mov    (%eax),%eax
f0103c0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c11:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c18:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c1b:	01 d0                	add    %edx,%eax
f0103c1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103c23:	83 ec 0c             	sub    $0xc,%esp
f0103c26:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c29:	e8 e5 f7 ff ff       	call   f0103413 <free_disk_frame>
f0103c2e:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c31:	ff 45 f0             	incl   -0x10(%ebp)
f0103c34:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c3b:	76 bd                	jbe    f0103bfa <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c40:	8b 40 64             	mov    0x64(%eax),%eax
f0103c43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c46:	c1 e2 02             	shl    $0x2,%edx
f0103c49:	01 d0                	add    %edx,%eax
f0103c4b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c51:	83 ec 0c             	sub    $0xc,%esp
f0103c54:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c57:	e8 ca 3e 00 00       	call   f0107b26 <kfree>
f0103c5c:	83 c4 10             	add    $0x10,%esp
f0103c5f:	eb 01                	jmp    f0103c62 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c61:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c62:	ff 45 f4             	incl   -0xc(%ebp)
f0103c65:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c6c:	0f 86 3b ff ff ff    	jbe    f0103bad <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c72:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c75:	8b 40 64             	mov    0x64(%eax),%eax
f0103c78:	83 ec 0c             	sub    $0xc,%esp
f0103c7b:	50                   	push   %eax
f0103c7c:	e8 a5 3e 00 00       	call   f0107b26 <kfree>
f0103c81:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c91:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c98:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c9b:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c9e:	85 c0                	test   %eax,%eax
f0103ca0:	74 36                	je     f0103cd8 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103ca2:	83 ec 0c             	sub    $0xc,%esp
f0103ca5:	ff 75 08             	pushl  0x8(%ebp)
f0103ca8:	e8 05 03 00 00       	call   f0103fb2 <__pf_remove_env_all_tables>
f0103cad:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103cb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb3:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103cb6:	83 ec 0c             	sub    $0xc,%esp
f0103cb9:	50                   	push   %eax
f0103cba:	e8 67 3e 00 00       	call   f0107b26 <kfree>
f0103cbf:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103cc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cc5:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ccc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ccf:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103cd6:	eb 01                	jmp    f0103cd9 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cd8:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cd9:	c9                   	leave  
f0103cda:	c3                   	ret    

f0103cdb <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103cdb:	55                   	push   %ebp
f0103cdc:	89 e5                	mov    %esp,%ebp
f0103cde:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103ce1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce4:	8b 50 64             	mov    0x64(%eax),%edx
f0103ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cea:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cec:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cef:	8b 00                	mov    (%eax),%eax
f0103cf1:	85 c0                	test   %eax,%eax
f0103cf3:	75 58                	jne    f0103d4d <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	68 00 10 00 00       	push   $0x1000
f0103cfd:	e8 64 3d 00 00       	call   f0107a66 <kmalloc>
f0103d02:	83 c4 10             	add    $0x10,%esp
f0103d05:	89 c2                	mov    %eax,%edx
f0103d07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0a:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103d0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0f:	8b 00                	mov    (%eax),%eax
f0103d11:	85 c0                	test   %eax,%eax
f0103d13:	75 07                	jne    f0103d1c <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103d15:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103d1a:	eb 36                	jmp    f0103d52 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103d1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d1f:	8b 00                	mov    (%eax),%eax
f0103d21:	83 ec 0c             	sub    $0xc,%esp
f0103d24:	50                   	push   %eax
f0103d25:	e8 42 3f 00 00       	call   f0107c6c <kheap_physical_address>
f0103d2a:	83 c4 10             	add    $0x10,%esp
f0103d2d:	89 c2                	mov    %eax,%edx
f0103d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d32:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d38:	8b 00                	mov    (%eax),%eax
f0103d3a:	83 ec 04             	sub    $0x4,%esp
f0103d3d:	68 00 10 00 00       	push   $0x1000
f0103d42:	6a 00                	push   $0x0
f0103d44:	50                   	push   %eax
f0103d45:	e8 94 de 02 00       	call   f0131bde <memset>
f0103d4a:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d52:	c9                   	leave  
f0103d53:	c3                   	ret    

f0103d54 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d54:	55                   	push   %ebp
f0103d55:	89 e5                	mov    %esp,%ebp
f0103d57:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d68:	eb 78                	jmp    f0103de2 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d6d:	8b 40 64             	mov    0x64(%eax),%eax
f0103d70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d73:	c1 e2 02             	shl    $0x2,%edx
f0103d76:	01 d0                	add    %edx,%eax
f0103d78:	8b 00                	mov    (%eax),%eax
f0103d7a:	83 e0 01             	and    $0x1,%eax
f0103d7d:	85 c0                	test   %eax,%eax
f0103d7f:	74 5d                	je     f0103dde <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d84:	8b 40 64             	mov    0x64(%eax),%eax
f0103d87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d8a:	c1 e2 02             	shl    $0x2,%edx
f0103d8d:	01 d0                	add    %edx,%eax
f0103d8f:	8b 00                	mov    (%eax),%eax
f0103d91:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d96:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d99:	83 ec 0c             	sub    $0xc,%esp
f0103d9c:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d9f:	e8 a9 3e 00 00       	call   f0107c4d <kheap_virtual_address>
f0103da4:	83 c4 10             	add    $0x10,%esp
f0103da7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103daa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103db1:	eb 20                	jmp    f0103dd3 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103db3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103db6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103dbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103dc0:	01 d0                	add    %edx,%eax
f0103dc2:	8b 00                	mov    (%eax),%eax
f0103dc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103dc7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103dcb:	74 03                	je     f0103dd0 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103dcd:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103dd0:	ff 45 ec             	incl   -0x14(%ebp)
f0103dd3:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dda:	76 d7                	jbe    f0103db3 <pf_calculate_allocated_pages+0x5f>
f0103ddc:	eb 01                	jmp    f0103ddf <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103dde:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103ddf:	ff 45 f4             	incl   -0xc(%ebp)
f0103de2:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103de9:	0f 86 7b ff ff ff    	jbe    f0103d6a <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103def:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103df2:	c9                   	leave  
f0103df3:	c3                   	ret    

f0103df4 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103df4:	55                   	push   %ebp
f0103df5:	89 e5                	mov    %esp,%ebp
f0103df7:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dfa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103e01:	a1 b4 07 86 f0       	mov    0xf08607b4,%eax
f0103e06:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103e09:	eb 0b                	jmp    f0103e16 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103e0b:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103e0e:	a1 bc 07 86 f0       	mov    0xf08607bc,%eax
f0103e13:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103e16:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e1a:	74 07                	je     f0103e23 <pf_calculate_free_frames+0x2f>
f0103e1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103e1f:	8b 00                	mov    (%eax),%eax
f0103e21:	eb 05                	jmp    f0103e28 <pf_calculate_free_frames+0x34>
f0103e23:	b8 00 00 00 00       	mov    $0x0,%eax
f0103e28:	a3 bc 07 86 f0       	mov    %eax,0xf08607bc
f0103e2d:	a1 bc 07 86 f0       	mov    0xf08607bc,%eax
f0103e32:	85 c0                	test   %eax,%eax
f0103e34:	75 d5                	jne    f0103e0b <pf_calculate_free_frames+0x17>
f0103e36:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e3a:	75 cf                	jne    f0103e0b <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e3f:	c9                   	leave  
f0103e40:	c3                   	ret    

f0103e41 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e41:	55                   	push   %ebp
f0103e42:	89 e5                	mov    %esp,%ebp
f0103e44:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e47:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e4a:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e50:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e55:	8b 00                	mov    (%eax),%eax
f0103e57:	85 c0                	test   %eax,%eax
f0103e59:	75 58                	jne    f0103eb3 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	68 00 10 00 00       	push   $0x1000
f0103e63:	e8 fe 3b 00 00       	call   f0107a66 <kmalloc>
f0103e68:	83 c4 10             	add    $0x10,%esp
f0103e6b:	89 c2                	mov    %eax,%edx
f0103e6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e70:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e75:	8b 00                	mov    (%eax),%eax
f0103e77:	85 c0                	test   %eax,%eax
f0103e79:	75 07                	jne    f0103e82 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e7b:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e80:	eb 36                	jmp    f0103eb8 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e85:	8b 00                	mov    (%eax),%eax
f0103e87:	83 ec 0c             	sub    $0xc,%esp
f0103e8a:	50                   	push   %eax
f0103e8b:	e8 dc 3d 00 00       	call   f0107c6c <kheap_physical_address>
f0103e90:	83 c4 10             	add    $0x10,%esp
f0103e93:	89 c2                	mov    %eax,%edx
f0103e95:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e98:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e9e:	8b 00                	mov    (%eax),%eax
f0103ea0:	83 ec 04             	sub    $0x4,%esp
f0103ea3:	68 00 10 00 00       	push   $0x1000
f0103ea8:	6a 00                	push   $0x0
f0103eaa:	50                   	push   %eax
f0103eab:	e8 2e dd 02 00       	call   f0131bde <memset>
f0103eb0:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103eb8:	c9                   	leave  
f0103eb9:	c3                   	ret    

f0103eba <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103eba:	55                   	push   %ebp
f0103ebb:	89 e5                	mov    %esp,%ebp
f0103ebd:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103ec0:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103ec7:	76 19                	jbe    f0103ee2 <__pf_write_env_table+0x28>
f0103ec9:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0103ece:	68 ea 5c 13 f0       	push   $0xf0135cea
f0103ed3:	68 5a 02 00 00       	push   $0x25a
f0103ed8:	68 33 5c 13 f0       	push   $0xf0135c33
f0103edd:	e8 23 c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103ee2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ee5:	83 c0 6c             	add    $0x6c,%eax
f0103ee8:	83 ec 08             	sub    $0x8,%esp
f0103eeb:	50                   	push   %eax
f0103eec:	ff 75 08             	pushl  0x8(%ebp)
f0103eef:	e8 4d ff ff ff       	call   f0103e41 <get_disk_table_directory>
f0103ef4:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ef7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103efa:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103efd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f00:	c1 ea 16             	shr    $0x16,%edx
f0103f03:	c1 e2 02             	shl    $0x2,%edx
f0103f06:	01 d0                	add    %edx,%eax
f0103f08:	8b 00                	mov    (%eax),%eax
f0103f0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103f0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f10:	85 c0                	test   %eax,%eax
f0103f12:	75 31                	jne    f0103f45 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f14:	83 ec 0c             	sub    $0xc,%esp
f0103f17:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103f1a:	50                   	push   %eax
f0103f1b:	e8 2c f4 ff ff       	call   f010334c <allocate_disk_frame>
f0103f20:	83 c4 10             	add    $0x10,%esp
f0103f23:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f26:	75 07                	jne    f0103f2f <__pf_write_env_table+0x75>
f0103f28:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f2d:	eb 2e                	jmp    f0103f5d <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f32:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f35:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f38:	c1 ea 16             	shr    $0x16,%edx
f0103f3b:	c1 e2 02             	shl    $0x2,%edx
f0103f3e:	01 c2                	add    %eax,%edx
f0103f40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f43:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f48:	83 ec 08             	sub    $0x8,%esp
f0103f4b:	ff 75 10             	pushl  0x10(%ebp)
f0103f4e:	50                   	push   %eax
f0103f4f:	e8 4b f2 ff ff       	call   f010319f <write_disk_page>
f0103f54:	83 c4 10             	add    $0x10,%esp
f0103f57:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f5d:	c9                   	leave  
f0103f5e:	c3                   	ret    

f0103f5f <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f5f:	55                   	push   %ebp
f0103f60:	89 e5                	mov    %esp,%ebp
f0103f62:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f68:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f6b:	85 c0                	test   %eax,%eax
f0103f6d:	75 07                	jne    f0103f76 <__pf_read_env_table+0x17>
f0103f6f:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f74:	eb 3a                	jmp    f0103fb0 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f76:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f79:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f7c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f7f:	c1 ea 16             	shr    $0x16,%edx
f0103f82:	c1 e2 02             	shl    $0x2,%edx
f0103f85:	01 d0                	add    %edx,%eax
f0103f87:	8b 00                	mov    (%eax),%eax
f0103f89:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f90:	75 07                	jne    f0103f99 <__pf_read_env_table+0x3a>
f0103f92:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f97:	eb 17                	jmp    f0103fb0 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f99:	83 ec 08             	sub    $0x8,%esp
f0103f9c:	ff 75 10             	pushl  0x10(%ebp)
f0103f9f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103fa2:	e8 c9 f1 ff ff       	call   f0103170 <read_disk_page>
f0103fa7:	83 c4 10             	add    $0x10,%esp
f0103faa:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103fad:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103fb0:	c9                   	leave  
f0103fb1:	c3                   	ret    

f0103fb2 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103fb2:	55                   	push   %ebp
f0103fb3:	89 e5                	mov    %esp,%ebp
f0103fb5:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fbb:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fbe:	85 c0                	test   %eax,%eax
f0103fc0:	74 4c                	je     f010400e <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103fc9:	eb 38                	jmp    f0104003 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103fcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fce:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fd4:	c1 e2 02             	shl    $0x2,%edx
f0103fd7:	01 d0                	add    %edx,%eax
f0103fd9:	8b 00                	mov    (%eax),%eax
f0103fdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe1:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fe4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fe7:	c1 e2 02             	shl    $0x2,%edx
f0103fea:	01 d0                	add    %edx,%eax
f0103fec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103ff2:	83 ec 0c             	sub    $0xc,%esp
f0103ff5:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ff8:	e8 16 f4 ff ff       	call   f0103413 <free_disk_frame>
f0103ffd:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104000:	ff 45 f4             	incl   -0xc(%ebp)
f0104003:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010400a:	76 bf                	jbe    f0103fcb <__pf_remove_env_all_tables+0x19>
f010400c:	eb 01                	jmp    f010400f <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010400e:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f010400f:	c9                   	leave  
f0104010:	c3                   	ret    

f0104011 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104011:	55                   	push   %ebp
f0104012:	89 e5                	mov    %esp,%ebp
f0104014:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0104017:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010401b:	75 10                	jne    f010402d <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f010401d:	83 ec 0c             	sub    $0xc,%esp
f0104020:	68 f4 5d 13 f0       	push   $0xf0135df4
f0104025:	e8 e4 cc ff ff       	call   f0100d0e <cprintf>
f010402a:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010402d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104030:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104033:	85 c0                	test   %eax,%eax
f0104035:	74 3d                	je     f0104074 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104037:	8b 45 08             	mov    0x8(%ebp),%eax
f010403a:	8b 40 6c             	mov    0x6c(%eax),%eax
f010403d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104040:	c1 ea 16             	shr    $0x16,%edx
f0104043:	c1 e2 02             	shl    $0x2,%edx
f0104046:	01 d0                	add    %edx,%eax
f0104048:	8b 00                	mov    (%eax),%eax
f010404a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010404d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104050:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104053:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104056:	c1 ea 16             	shr    $0x16,%edx
f0104059:	c1 e2 02             	shl    $0x2,%edx
f010405c:	01 d0                	add    %edx,%eax
f010405e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104064:	83 ec 0c             	sub    $0xc,%esp
f0104067:	ff 75 f4             	pushl  -0xc(%ebp)
f010406a:	e8 a4 f3 ff ff       	call   f0103413 <free_disk_frame>
f010406f:	83 c4 10             	add    $0x10,%esp
f0104072:	eb 01                	jmp    f0104075 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104074:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104075:	c9                   	leave  
f0104076:	c3                   	ret    

f0104077 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104077:	55                   	push   %ebp
f0104078:	89 e5                	mov    %esp,%ebp
f010407a:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010407d:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104084:	eb 1f                	jmp    f01040a5 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104086:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104089:	83 ec 04             	sub    $0x4,%esp
f010408c:	6a 08                	push   $0x8
f010408e:	ff 75 08             	pushl  0x8(%ebp)
f0104091:	50                   	push   %eax
f0104092:	e8 ec e1 02 00       	call   f0132283 <ide_write>
f0104097:	83 c4 10             	add    $0x10,%esp
f010409a:	85 c0                	test   %eax,%eax
f010409c:	75 12                	jne    f01040b0 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010409e:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01040a5:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01040ac:	7e d8                	jle    f0104086 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01040ae:	eb 01                	jmp    f01040b1 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01040b0:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01040b1:	90                   	nop
f01040b2:	c9                   	leave  
f01040b3:	c3                   	ret    

f01040b4 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01040b4:	55                   	push   %ebp
f01040b5:	89 e5                	mov    %esp,%ebp
f01040b7:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01040bd:	0f b6 c0             	movzbl %al,%eax
f01040c0:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040c7:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040ca:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040cd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d0:	ee                   	out    %al,(%dx)
f01040d1:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040db:	89 c2                	mov    %eax,%edx
f01040dd:	ec                   	in     (%dx),%al
f01040de:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040e1:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040e4:	0f b6 c0             	movzbl %al,%eax
}
f01040e7:	c9                   	leave  
f01040e8:	c3                   	ret    

f01040e9 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040e9:	55                   	push   %ebp
f01040ea:	89 e5                	mov    %esp,%ebp
f01040ec:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01040f2:	0f b6 c0             	movzbl %al,%eax
f01040f5:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040fc:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040ff:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104102:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104105:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104106:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104109:	0f b6 c0             	movzbl %al,%eax
f010410c:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104113:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104116:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104119:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010411c:	ee                   	out    %al,(%dx)
}
f010411d:	90                   	nop
f010411e:	c9                   	leave  
f010411f:	c3                   	ret    

f0104120 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104120:	55                   	push   %ebp
f0104121:	89 e5                	mov    %esp,%ebp
f0104123:	53                   	push   %ebx
f0104124:	83 ec 24             	sub    $0x24,%esp
f0104127:	8b 45 08             	mov    0x8(%ebp),%eax
f010412a:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010412d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104134:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104138:	8a 45 ef             	mov    -0x11(%ebp),%al
f010413b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010413e:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010413f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104143:	77 48                	ja     f010418d <kclock_start+0x6d>
f0104145:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010414c:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104150:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104153:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104156:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104157:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010415b:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104160:	99                   	cltd   
f0104161:	f7 fb                	idiv   %ebx
f0104163:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104169:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010416d:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104172:	99                   	cltd   
f0104173:	f7 fb                	idiv   %ebx
f0104175:	89 c3                	mov    %eax,%ebx
f0104177:	89 c8                	mov    %ecx,%eax
f0104179:	99                   	cltd   
f010417a:	f7 fb                	idiv   %ebx
f010417c:	0f b7 c0             	movzwl %ax,%eax
f010417f:	83 ec 0c             	sub    $0xc,%esp
f0104182:	50                   	push   %eax
f0104183:	e8 b8 01 00 00       	call   f0104340 <kclock_write_cnt0_LSB_first>
f0104188:	83 c4 10             	add    $0x10,%esp
f010418b:	eb 13                	jmp    f01041a0 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010418d:	6a 35                	push   $0x35
f010418f:	68 18 5e 13 f0       	push   $0xf0135e18
f0104194:	6a 33                	push   $0x33
f0104196:	68 74 5e 13 f0       	push   $0xf0135e74
f010419b:	e8 65 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041a0:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f01041a6:	0f b7 c0             	movzwl %ax,%eax
f01041a9:	25 fe ff 00 00       	and    $0xfffe,%eax
f01041ae:	83 ec 0c             	sub    $0xc,%esp
f01041b1:	50                   	push   %eax
f01041b2:	e8 bc 1b 00 00       	call   f0105d73 <irq_setmask_8259A>
f01041b7:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01041ba:	90                   	nop
f01041bb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01041be:	c9                   	leave  
f01041bf:	c3                   	ret    

f01041c0 <kclock_stop>:

void
kclock_stop(void)
{
f01041c0:	55                   	push   %ebp
f01041c1:	89 e5                	mov    %esp,%ebp
f01041c3:	83 ec 18             	sub    $0x18,%esp
f01041c6:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041cd:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041d1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041d7:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041d8:	83 ec 0c             	sub    $0xc,%esp
f01041db:	68 ff ff 00 00       	push   $0xffff
f01041e0:	e8 8e 1b 00 00       	call   f0105d73 <irq_setmask_8259A>
f01041e5:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041e8:	90                   	nop
f01041e9:	c9                   	leave  
f01041ea:	c3                   	ret    

f01041eb <kclock_resume>:

void
kclock_resume(void)
{
f01041eb:	55                   	push   %ebp
f01041ec:	89 e5                	mov    %esp,%ebp
f01041ee:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041f1:	e8 8c 01 00 00       	call   f0104382 <kclock_read_cnt0>
f01041f6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041fa:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041ff:	77 06                	ja     f0104207 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104201:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104207:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010420b:	83 e0 01             	and    $0x1,%eax
f010420e:	66 85 c0             	test   %ax,%ax
f0104211:	74 09                	je     f010421c <kclock_resume+0x31>
		cnt0++;
f0104213:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104217:	40                   	inc    %eax
f0104218:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010421c:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104223:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104227:	8a 45 ef             	mov    -0x11(%ebp),%al
f010422a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010422d:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010422e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104232:	83 ec 0c             	sub    $0xc,%esp
f0104235:	50                   	push   %eax
f0104236:	e8 05 01 00 00       	call   f0104340 <kclock_write_cnt0_LSB_first>
f010423b:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010423e:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104244:	0f b7 c0             	movzwl %ax,%eax
f0104247:	25 fe ff 00 00       	and    $0xfffe,%eax
f010424c:	83 ec 0c             	sub    $0xc,%esp
f010424f:	50                   	push   %eax
f0104250:	e8 1e 1b 00 00       	call   f0105d73 <irq_setmask_8259A>
f0104255:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104258:	90                   	nop
f0104259:	c9                   	leave  
f010425a:	c3                   	ret    

f010425b <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010425b:	55                   	push   %ebp
f010425c:	89 e5                	mov    %esp,%ebp
f010425e:	83 ec 28             	sub    $0x28,%esp
f0104261:	8b 45 08             	mov    0x8(%ebp),%eax
f0104264:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104267:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010426e:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104272:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104275:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104278:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104279:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010427d:	83 ec 0c             	sub    $0xc,%esp
f0104280:	50                   	push   %eax
f0104281:	e8 ba 00 00 00       	call   f0104340 <kclock_write_cnt0_LSB_first>
f0104286:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104289:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010428f:	0f b7 c0             	movzwl %ax,%eax
f0104292:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104297:	83 ec 0c             	sub    $0xc,%esp
f010429a:	50                   	push   %eax
f010429b:	e8 d3 1a 00 00       	call   f0105d73 <irq_setmask_8259A>
f01042a0:	83 c4 10             	add    $0x10,%esp

}
f01042a3:	90                   	nop
f01042a4:	c9                   	leave  
f01042a5:	c3                   	ret    

f01042a6 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01042a6:	55                   	push   %ebp
f01042a7:	89 e5                	mov    %esp,%ebp
f01042a9:	53                   	push   %ebx
f01042aa:	83 ec 24             	sub    $0x24,%esp
f01042ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01042b0:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01042b3:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01042b7:	77 6c                	ja     f0104325 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01042b9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042bd:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01042c2:	99                   	cltd   
f01042c3:	f7 fb                	idiv   %ebx
f01042c5:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01042cb:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042cf:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042d4:	99                   	cltd   
f01042d5:	f7 fb                	idiv   %ebx
f01042d7:	89 c3                	mov    %eax,%ebx
f01042d9:	89 c8                	mov    %ecx,%eax
f01042db:	99                   	cltd   
f01042dc:	f7 fb                	idiv   %ebx
f01042de:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e4:	25 01 00 00 80       	and    $0x80000001,%eax
f01042e9:	85 c0                	test   %eax,%eax
f01042eb:	79 05                	jns    f01042f2 <kclock_set_quantum+0x4c>
f01042ed:	48                   	dec    %eax
f01042ee:	83 c8 fe             	or     $0xfffffffe,%eax
f01042f1:	40                   	inc    %eax
f01042f2:	83 f8 01             	cmp    $0x1,%eax
f01042f5:	75 03                	jne    f01042fa <kclock_set_quantum+0x54>
			cnt++;
f01042f7:	ff 45 f4             	incl   -0xc(%ebp)
f01042fa:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104301:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104305:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104308:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010430b:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f010430c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010430f:	0f b7 c0             	movzwl %ax,%eax
f0104312:	83 ec 0c             	sub    $0xc,%esp
f0104315:	50                   	push   %eax
f0104316:	e8 25 00 00 00       	call   f0104340 <kclock_write_cnt0_LSB_first>
f010431b:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010431e:	e8 9d fe ff ff       	call   f01041c0 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104323:	eb 16                	jmp    f010433b <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104325:	6a 35                	push   $0x35
f0104327:	68 18 5e 13 f0       	push   $0xf0135e18
f010432c:	68 c9 00 00 00       	push   $0xc9
f0104331:	68 74 5e 13 f0       	push   $0xf0135e74
f0104336:	e8 ca be ff ff       	call   f0100205 <_panic>
	}
}
f010433b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010433e:	c9                   	leave  
f010433f:	c3                   	ret    

f0104340 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104340:	55                   	push   %ebp
f0104341:	89 e5                	mov    %esp,%ebp
f0104343:	83 ec 14             	sub    $0x14,%esp
f0104346:	8b 45 08             	mov    0x8(%ebp),%eax
f0104349:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f010434d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104350:	0f b6 c0             	movzbl %al,%eax
f0104353:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010435a:	88 45 f6             	mov    %al,-0xa(%ebp)
f010435d:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104360:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104363:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104364:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104367:	66 c1 e8 08          	shr    $0x8,%ax
f010436b:	0f b6 c0             	movzbl %al,%eax
f010436e:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104375:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104378:	8a 45 f7             	mov    -0x9(%ebp),%al
f010437b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010437e:	ee                   	out    %al,(%dx)
}
f010437f:	90                   	nop
f0104380:	c9                   	leave  
f0104381:	c3                   	ret    

f0104382 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104382:	55                   	push   %ebp
f0104383:	89 e5                	mov    %esp,%ebp
f0104385:	83 ec 20             	sub    $0x20,%esp
f0104388:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010438f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104392:	89 c2                	mov    %eax,%edx
f0104394:	ec                   	in     (%dx),%al
f0104395:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104398:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010439b:	88 45 ff             	mov    %al,-0x1(%ebp)
f010439e:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043a8:	89 c2                	mov    %eax,%edx
f01043aa:	ec                   	in     (%dx),%al
f01043ab:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01043ae:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043b1:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043b4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01043b8:	c1 e0 08             	shl    $0x8,%eax
f01043bb:	89 c2                	mov    %eax,%edx
f01043bd:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01043c1:	09 d0                	or     %edx,%eax
f01043c3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01043c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01043ca:	c9                   	leave  
f01043cb:	c3                   	ret    

f01043cc <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043cc:	55                   	push   %ebp
f01043cd:	89 e5                	mov    %esp,%ebp
f01043cf:	83 ec 30             	sub    $0x30,%esp
f01043d2:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043dc:	89 c2                	mov    %eax,%edx
f01043de:	ec                   	in     (%dx),%al
f01043df:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043e2:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043e5:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043e8:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043ef:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043f3:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043f9:	ee                   	out    %al,(%dx)
f01043fa:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104401:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104404:	89 c2                	mov    %eax,%edx
f0104406:	ec                   	in     (%dx),%al
f0104407:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f010440a:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010440d:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104410:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104417:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010441a:	89 c2                	mov    %eax,%edx
f010441c:	ec                   	in     (%dx),%al
f010441d:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104420:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104423:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104426:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f010442a:	c1 e0 08             	shl    $0x8,%eax
f010442d:	89 c2                	mov    %eax,%edx
f010442f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104433:	09 d0                	or     %edx,%eax
f0104435:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104439:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010443d:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104444:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104447:	8a 45 df             	mov    -0x21(%ebp),%al
f010444a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010444d:	ee                   	out    %al,(%dx)

	return cnt0 ;
f010444e:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104451:	c9                   	leave  
f0104452:	c3                   	ret    

f0104453 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104453:	55                   	push   %ebp
f0104454:	89 e5                	mov    %esp,%ebp
f0104456:	a1 48 07 86 f0       	mov    0xf0860748,%eax
f010445b:	85 c0                	test   %eax,%eax
f010445d:	75 07                	jne    f0104466 <isSchedMethodRR+0x13>
f010445f:	b8 01 00 00 00       	mov    $0x1,%eax
f0104464:	eb 05                	jmp    f010446b <isSchedMethodRR+0x18>
f0104466:	b8 00 00 00 00       	mov    $0x0,%eax
f010446b:	5d                   	pop    %ebp
f010446c:	c3                   	ret    

f010446d <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010446d:	55                   	push   %ebp
f010446e:	89 e5                	mov    %esp,%ebp
f0104470:	a1 48 07 86 f0       	mov    0xf0860748,%eax
f0104475:	83 f8 01             	cmp    $0x1,%eax
f0104478:	75 07                	jne    f0104481 <isSchedMethodMLFQ+0x14>
f010447a:	b8 01 00 00 00       	mov    $0x1,%eax
f010447f:	eb 05                	jmp    f0104486 <isSchedMethodMLFQ+0x19>
f0104481:	b8 00 00 00 00       	mov    $0x0,%eax
f0104486:	5d                   	pop    %ebp
f0104487:	c3                   	ret    

f0104488 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104488:	55                   	push   %ebp
f0104489:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010448b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448f:	74 1d                	je     f01044ae <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104491:	8b 45 08             	mov    0x8(%ebp),%eax
f0104494:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010449a:	8b 45 08             	mov    0x8(%ebp),%eax
f010449d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01044a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01044ae:	90                   	nop
f01044af:	5d                   	pop    %ebp
f01044b0:	c3                   	ret    

f01044b1 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01044b1:	55                   	push   %ebp
f01044b2:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01044b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044b8:	74 08                	je     f01044c2 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01044ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01044bd:	8b 40 0c             	mov    0xc(%eax),%eax
f01044c0:	eb 05                	jmp    f01044c7 <queue_size+0x16>
	}
	else
	{
		return 0;
f01044c2:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01044c7:	5d                   	pop    %ebp
f01044c8:	c3                   	ret    

f01044c9 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01044c9:	55                   	push   %ebp
f01044ca:	89 e5                	mov    %esp,%ebp
f01044cc:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044d3:	75 16                	jne    f01044eb <enqueue+0x22>
f01044d5:	68 88 5e 13 f0       	push   $0xf0135e88
f01044da:	68 96 5e 13 f0       	push   $0xf0135e96
f01044df:	6a 2d                	push   $0x2d
f01044e1:	68 ab 5e 13 f0       	push   $0xf0135eab
f01044e6:	e8 1a bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044ef:	74 66                	je     f0104557 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044f5:	75 14                	jne    f010450b <enqueue+0x42>
f01044f7:	83 ec 04             	sub    $0x4,%esp
f01044fa:	68 bc 5e 13 f0       	push   $0xf0135ebc
f01044ff:	6a 30                	push   $0x30
f0104501:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104506:	e8 fa bc ff ff       	call   f0100205 <_panic>
f010450b:	8b 45 08             	mov    0x8(%ebp),%eax
f010450e:	8b 10                	mov    (%eax),%edx
f0104510:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104513:	89 50 44             	mov    %edx,0x44(%eax)
f0104516:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104519:	8b 40 44             	mov    0x44(%eax),%eax
f010451c:	85 c0                	test   %eax,%eax
f010451e:	74 0d                	je     f010452d <enqueue+0x64>
f0104520:	8b 45 08             	mov    0x8(%ebp),%eax
f0104523:	8b 00                	mov    (%eax),%eax
f0104525:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104528:	89 50 48             	mov    %edx,0x48(%eax)
f010452b:	eb 09                	jmp    f0104536 <enqueue+0x6d>
f010452d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104530:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104533:	89 50 04             	mov    %edx,0x4(%eax)
f0104536:	8b 45 08             	mov    0x8(%ebp),%eax
f0104539:	8b 55 0c             	mov    0xc(%ebp),%edx
f010453c:	89 10                	mov    %edx,(%eax)
f010453e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104541:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104548:	8b 45 08             	mov    0x8(%ebp),%eax
f010454b:	8b 40 0c             	mov    0xc(%eax),%eax
f010454e:	8d 50 01             	lea    0x1(%eax),%edx
f0104551:	8b 45 08             	mov    0x8(%ebp),%eax
f0104554:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104557:	90                   	nop
f0104558:	c9                   	leave  
f0104559:	c3                   	ret    

f010455a <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010455a:	55                   	push   %ebp
f010455b:	89 e5                	mov    %esp,%ebp
f010455d:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104560:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104564:	75 0a                	jne    f0104570 <dequeue+0x16>
f0104566:	b8 00 00 00 00       	mov    $0x0,%eax
f010456b:	e9 a0 00 00 00       	jmp    f0104610 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104570:	8b 45 08             	mov    0x8(%ebp),%eax
f0104573:	8b 40 04             	mov    0x4(%eax),%eax
f0104576:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104579:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010457d:	0f 84 8a 00 00 00    	je     f010460d <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104583:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104587:	75 14                	jne    f010459d <dequeue+0x43>
f0104589:	83 ec 04             	sub    $0x4,%esp
f010458c:	68 df 5e 13 f0       	push   $0xf0135edf
f0104591:	6a 3a                	push   $0x3a
f0104593:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104598:	e8 68 bc ff ff       	call   f0100205 <_panic>
f010459d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a0:	8b 40 44             	mov    0x44(%eax),%eax
f01045a3:	85 c0                	test   %eax,%eax
f01045a5:	74 11                	je     f01045b8 <dequeue+0x5e>
f01045a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045aa:	8b 40 44             	mov    0x44(%eax),%eax
f01045ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045b0:	8b 52 48             	mov    0x48(%edx),%edx
f01045b3:	89 50 48             	mov    %edx,0x48(%eax)
f01045b6:	eb 0c                	jmp    f01045c4 <dequeue+0x6a>
f01045b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045bb:	8b 50 48             	mov    0x48(%eax),%edx
f01045be:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c1:	89 50 04             	mov    %edx,0x4(%eax)
f01045c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c7:	8b 40 48             	mov    0x48(%eax),%eax
f01045ca:	85 c0                	test   %eax,%eax
f01045cc:	74 11                	je     f01045df <dequeue+0x85>
f01045ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045d1:	8b 40 48             	mov    0x48(%eax),%eax
f01045d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045d7:	8b 52 44             	mov    0x44(%edx),%edx
f01045da:	89 50 44             	mov    %edx,0x44(%eax)
f01045dd:	eb 0b                	jmp    f01045ea <dequeue+0x90>
f01045df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045e2:	8b 50 44             	mov    0x44(%eax),%edx
f01045e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01045e8:	89 10                	mov    %edx,(%eax)
f01045ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045ed:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045f7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104601:	8b 40 0c             	mov    0xc(%eax),%eax
f0104604:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104607:	8b 45 08             	mov    0x8(%ebp),%eax
f010460a:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f010460d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104610:	c9                   	leave  
f0104611:	c3                   	ret    

f0104612 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104612:	55                   	push   %ebp
f0104613:	89 e5                	mov    %esp,%ebp
f0104615:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104618:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010461c:	75 16                	jne    f0104634 <remove_from_queue+0x22>
f010461e:	68 88 5e 13 f0       	push   $0xf0135e88
f0104623:	68 96 5e 13 f0       	push   $0xf0135e96
f0104628:	6a 41                	push   $0x41
f010462a:	68 ab 5e 13 f0       	push   $0xf0135eab
f010462f:	e8 d1 bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104634:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104638:	0f 84 8a 00 00 00    	je     f01046c8 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f010463e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104642:	75 14                	jne    f0104658 <remove_from_queue+0x46>
f0104644:	83 ec 04             	sub    $0x4,%esp
f0104647:	68 df 5e 13 f0       	push   $0xf0135edf
f010464c:	6a 45                	push   $0x45
f010464e:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104653:	e8 ad bb ff ff       	call   f0100205 <_panic>
f0104658:	8b 45 0c             	mov    0xc(%ebp),%eax
f010465b:	8b 40 44             	mov    0x44(%eax),%eax
f010465e:	85 c0                	test   %eax,%eax
f0104660:	74 11                	je     f0104673 <remove_from_queue+0x61>
f0104662:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104665:	8b 40 44             	mov    0x44(%eax),%eax
f0104668:	8b 55 0c             	mov    0xc(%ebp),%edx
f010466b:	8b 52 48             	mov    0x48(%edx),%edx
f010466e:	89 50 48             	mov    %edx,0x48(%eax)
f0104671:	eb 0c                	jmp    f010467f <remove_from_queue+0x6d>
f0104673:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104676:	8b 50 48             	mov    0x48(%eax),%edx
f0104679:	8b 45 08             	mov    0x8(%ebp),%eax
f010467c:	89 50 04             	mov    %edx,0x4(%eax)
f010467f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104682:	8b 40 48             	mov    0x48(%eax),%eax
f0104685:	85 c0                	test   %eax,%eax
f0104687:	74 11                	je     f010469a <remove_from_queue+0x88>
f0104689:	8b 45 0c             	mov    0xc(%ebp),%eax
f010468c:	8b 40 48             	mov    0x48(%eax),%eax
f010468f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104692:	8b 52 44             	mov    0x44(%edx),%edx
f0104695:	89 50 44             	mov    %edx,0x44(%eax)
f0104698:	eb 0b                	jmp    f01046a5 <remove_from_queue+0x93>
f010469a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010469d:	8b 50 44             	mov    0x44(%eax),%edx
f01046a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01046a3:	89 10                	mov    %edx,(%eax)
f01046a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046a8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01046af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046b2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01046bf:	8d 50 ff             	lea    -0x1(%eax),%edx
f01046c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01046c5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01046c8:	90                   	nop
f01046c9:	c9                   	leave  
f01046ca:	c3                   	ret    

f01046cb <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01046cb:	55                   	push   %ebp
f01046cc:	89 e5                	mov    %esp,%ebp
f01046ce:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046d5:	75 07                	jne    f01046de <find_env_in_queue+0x13>
f01046d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01046dc:	eb 58                	jmp    f0104736 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046e8:	8b 00                	mov    (%eax),%eax
f01046ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046ed:	eb 19                	jmp    f0104708 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046f2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046f8:	75 05                	jne    f01046ff <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046fd:	eb 37                	jmp    f0104736 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104702:	8b 40 08             	mov    0x8(%eax),%eax
f0104705:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104708:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010470c:	74 08                	je     f0104716 <find_env_in_queue+0x4b>
f010470e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104711:	8b 40 44             	mov    0x44(%eax),%eax
f0104714:	eb 05                	jmp    f010471b <find_env_in_queue+0x50>
f0104716:	b8 00 00 00 00       	mov    $0x0,%eax
f010471b:	8b 55 08             	mov    0x8(%ebp),%edx
f010471e:	89 42 08             	mov    %eax,0x8(%edx)
f0104721:	8b 45 08             	mov    0x8(%ebp),%eax
f0104724:	8b 40 08             	mov    0x8(%eax),%eax
f0104727:	85 c0                	test   %eax,%eax
f0104729:	75 c4                	jne    f01046ef <find_env_in_queue+0x24>
f010472b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010472f:	75 be                	jne    f01046ef <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104731:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104736:	c9                   	leave  
f0104737:	c3                   	ret    

f0104738 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f0104738:	55                   	push   %ebp
f0104739:	89 e5                	mov    %esp,%ebp
f010473b:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f010473e:	83 ec 04             	sub    $0x4,%esp
f0104741:	68 00 5f 13 f0       	push   $0xf0135f00
f0104746:	6a 5e                	push   $0x5e
f0104748:	68 ab 5e 13 f0       	push   $0xf0135eab
f010474d:	e8 b3 ba ff ff       	call   f0100205 <_panic>

f0104752 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104752:	55                   	push   %ebp
f0104753:	89 e5                	mov    %esp,%ebp
f0104755:	83 ec 18             	sub    $0x18,%esp
	chk1();
f0104758:	e8 52 c5 02 00       	call   f0130caf <chk1>
	scheduler_status = SCH_STARTED;
f010475d:	c7 05 54 07 86 f0 01 	movl   $0x1,0xf0860754
f0104764:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104767:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f010476e:	a1 48 07 86 f0       	mov    0xf0860748,%eax
f0104773:	85 c0                	test   %eax,%eax
f0104775:	75 4d                	jne    f01047c4 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104777:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010477c:	85 c0                	test   %eax,%eax
f010477e:	74 18                	je     f0104798 <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104780:	8b 15 f4 fd 85 f0    	mov    0xf085fdf4,%edx
f0104786:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010478b:	83 ec 08             	sub    $0x8,%esp
f010478e:	52                   	push   %edx
f010478f:	50                   	push   %eax
f0104790:	e8 34 fd ff ff       	call   f01044c9 <enqueue>
f0104795:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0104798:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010479d:	83 ec 0c             	sub    $0xc,%esp
f01047a0:	50                   	push   %eax
f01047a1:	e8 b4 fd ff ff       	call   f010455a <dequeue>
f01047a6:	83 c4 10             	add    $0x10,%esp
f01047a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f01047ac:	a1 28 07 86 f0       	mov    0xf0860728,%eax
f01047b1:	8a 00                	mov    (%eax),%al
f01047b3:	0f b6 c0             	movzbl %al,%eax
f01047b6:	83 ec 0c             	sub    $0xc,%esp
f01047b9:	50                   	push   %eax
f01047ba:	e8 e7 fa ff ff       	call   f01042a6 <kclock_set_quantum>
f01047bf:	83 c4 10             	add    $0x10,%esp
f01047c2:	eb 12                	jmp    f01047d6 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01047c4:	a1 48 07 86 f0       	mov    0xf0860748,%eax
f01047c9:	83 f8 01             	cmp    $0x1,%eax
f01047cc:	75 08                	jne    f01047d6 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047ce:	e8 65 ff ff ff       	call   f0104738 <fos_scheduler_MLFQ>
f01047d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047d6:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01047db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047e1:	a3 f4 fd 85 f0       	mov    %eax,0xf085fdf4
	chk2(next_env) ;
f01047e6:	83 ec 0c             	sub    $0xc,%esp
f01047e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047ec:	e8 fb c4 02 00       	call   f0130cec <chk2>
f01047f1:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047f7:	a3 f4 fd 85 f0       	mov    %eax,0xf085fdf4

	//sched_print_all();

	if(next_env != NULL)
f01047fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104800:	74 0b                	je     f010480d <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0104802:	83 ec 0c             	sub    $0xc,%esp
f0104805:	ff 75 f4             	pushl  -0xc(%ebp)
f0104808:	e8 30 58 00 00       	call   f010a03d <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f010480d:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f0104814:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0104817:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f010481c:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010481f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104822:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0104825:	c7 05 54 07 86 f0 00 	movl   $0x0,0xf0860754
f010482c:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f010482f:	83 ec 0c             	sub    $0xc,%esp
f0104832:	6a 00                	push   $0x0
f0104834:	e8 fb c4 ff ff       	call   f0100d34 <run_command_prompt>
f0104839:	83 c4 10             	add    $0x10,%esp
f010483c:	eb f1                	jmp    f010482f <fos_scheduler+0xdd>

f010483e <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f010483e:	55                   	push   %ebp
f010483f:	89 e5                	mov    %esp,%ebp
f0104841:	83 ec 18             	sub    $0x18,%esp
f0104844:	8b 45 08             	mov    0x8(%ebp),%eax
f0104847:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010484a:	c6 05 7c 07 86 f0 01 	movb   $0x1,0xf086077c
#if USE_KHEAP
	sched_delete_ready_queues();
f0104851:	e8 e5 00 00 00       	call   f010493b <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0104856:	83 ec 0c             	sub    $0xc,%esp
f0104859:	6a 10                	push   $0x10
f010485b:	e8 06 32 00 00       	call   f0107a66 <kmalloc>
f0104860:	83 c4 10             	add    $0x10,%esp
f0104863:	a3 e4 06 86 f0       	mov    %eax,0xf08606e4
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f0104868:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f010486d:	0f b6 c0             	movzbl %al,%eax
f0104870:	83 ec 0c             	sub    $0xc,%esp
f0104873:	50                   	push   %eax
f0104874:	e8 ed 31 00 00       	call   f0107a66 <kmalloc>
f0104879:	83 c4 10             	add    $0x10,%esp
f010487c:	a3 28 07 86 f0       	mov    %eax,0xf0860728
#endif
	quantums[0] = quantum;
f0104881:	a1 28 07 86 f0       	mov    0xf0860728,%eax
f0104886:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0104889:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010488b:	a1 28 07 86 f0       	mov    0xf0860728,%eax
f0104890:	8a 00                	mov    (%eax),%al
f0104892:	0f b6 c0             	movzbl %al,%eax
f0104895:	83 ec 0c             	sub    $0xc,%esp
f0104898:	50                   	push   %eax
f0104899:	e8 08 fa ff ff       	call   f01042a6 <kclock_set_quantum>
f010489e:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01048a1:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01048a6:	83 ec 0c             	sub    $0xc,%esp
f01048a9:	50                   	push   %eax
f01048aa:	e8 d9 fb ff ff       	call   f0104488 <init_queue>
f01048af:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f01048b2:	c7 05 54 07 86 f0 00 	movl   $0x0,0xf0860754
f01048b9:	00 00 00 
	scheduler_method = SCH_RR;
f01048bc:	c7 05 48 07 86 f0 00 	movl   $0x0,0xf0860748
f01048c3:	00 00 00 
	//=========================================
	//=========================================
}
f01048c6:	90                   	nop
f01048c7:	c9                   	leave  
f01048c8:	c3                   	ret    

f01048c9 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01048c9:	55                   	push   %ebp
f01048ca:	89 e5                	mov    %esp,%ebp
f01048cc:	83 ec 18             	sub    $0x18,%esp
f01048cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01048d2:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048d5:	e8 61 00 00 00       	call   f010493b <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048da:	83 ec 04             	sub    $0x4,%esp
f01048dd:	68 34 5f 13 f0       	push   $0xf0135f34
f01048e2:	68 d1 00 00 00       	push   $0xd1
f01048e7:	68 ab 5e 13 f0       	push   $0xf0135eab
f01048ec:	e8 14 b9 ff ff       	call   f0100205 <_panic>

f01048f1 <sched_init>:

}


void sched_init()
{
f01048f1:	55                   	push   %ebp
f01048f2:	89 e5                	mov    %esp,%ebp
f01048f4:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048f7:	c7 05 04 07 86 f0 00 	movl   $0x0,0xf0860704
f01048fe:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0104901:	83 ec 0c             	sub    $0xc,%esp
f0104904:	6a 0a                	push   $0xa
f0104906:	e8 33 ff ff ff       	call   f010483e <sched_init_RR>
f010490b:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f010490e:	83 ec 0c             	sub    $0xc,%esp
f0104911:	68 38 07 86 f0       	push   $0xf0860738
f0104916:	e8 6d fb ff ff       	call   f0104488 <init_queue>
f010491b:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f010491e:	83 ec 0c             	sub    $0xc,%esp
f0104921:	68 f0 06 86 f0       	push   $0xf08606f0
f0104926:	e8 5d fb ff ff       	call   f0104488 <init_queue>
f010492b:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f010492e:	c7 05 54 07 86 f0 00 	movl   $0x0,0xf0860754
f0104935:	00 00 00 
}
f0104938:	90                   	nop
f0104939:	c9                   	leave  
f010493a:	c3                   	ret    

f010493b <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010493b:	55                   	push   %ebp
f010493c:	89 e5                	mov    %esp,%ebp
f010493e:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104941:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104946:	85 c0                	test   %eax,%eax
f0104948:	74 11                	je     f010495b <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010494a:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010494f:	83 ec 0c             	sub    $0xc,%esp
f0104952:	50                   	push   %eax
f0104953:	e8 ce 31 00 00       	call   f0107b26 <kfree>
f0104958:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010495b:	a1 28 07 86 f0       	mov    0xf0860728,%eax
f0104960:	85 c0                	test   %eax,%eax
f0104962:	74 11                	je     f0104975 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104964:	a1 28 07 86 f0       	mov    0xf0860728,%eax
f0104969:	83 ec 0c             	sub    $0xc,%esp
f010496c:	50                   	push   %eax
f010496d:	e8 b4 31 00 00       	call   f0107b26 <kfree>
f0104972:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104975:	90                   	nop
f0104976:	c9                   	leave  
f0104977:	c3                   	ret    

f0104978 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0104978:	55                   	push   %ebp
f0104979:	89 e5                	mov    %esp,%ebp
f010497b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010497e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104982:	74 1e                	je     f01049a2 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104984:	8b 45 08             	mov    0x8(%ebp),%eax
f0104987:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f010498e:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104993:	83 ec 08             	sub    $0x8,%esp
f0104996:	ff 75 08             	pushl  0x8(%ebp)
f0104999:	50                   	push   %eax
f010499a:	e8 2a fb ff ff       	call   f01044c9 <enqueue>
f010499f:	83 c4 10             	add    $0x10,%esp
	}
}
f01049a2:	90                   	nop
f01049a3:	c9                   	leave  
f01049a4:	c3                   	ret    

f01049a5 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01049a5:	55                   	push   %ebp
f01049a6:	89 e5                	mov    %esp,%ebp
f01049a8:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01049ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049af:	0f 84 fe 00 00 00    	je     f0104ab3 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01049b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01049bc:	e9 e1 00 00 00       	jmp    f0104aa2 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01049c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01049c7:	89 c2                	mov    %eax,%edx
f01049c9:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01049ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049d1:	c1 e1 04             	shl    $0x4,%ecx
f01049d4:	01 c8                	add    %ecx,%eax
f01049d6:	52                   	push   %edx
f01049d7:	50                   	push   %eax
f01049d8:	e8 ee fc ff ff       	call   f01046cb <find_env_in_queue>
f01049dd:	83 c4 08             	add    $0x8,%esp
f01049e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049e7:	0f 84 b2 00 00 00    	je     f0104a9f <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049f1:	75 17                	jne    f0104a0a <sched_remove_ready+0x65>
f01049f3:	83 ec 04             	sub    $0x4,%esp
f01049f6:	68 df 5e 13 f0       	push   $0xf0135edf
f01049fb:	68 0b 01 00 00       	push   $0x10b
f0104a00:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104a05:	e8 fb b7 ff ff       	call   f0100205 <_panic>
f0104a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a0d:	8b 40 44             	mov    0x44(%eax),%eax
f0104a10:	85 c0                	test   %eax,%eax
f0104a12:	74 11                	je     f0104a25 <sched_remove_ready+0x80>
f0104a14:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a17:	8b 40 44             	mov    0x44(%eax),%eax
f0104a1a:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a1d:	8b 52 48             	mov    0x48(%edx),%edx
f0104a20:	89 50 48             	mov    %edx,0x48(%eax)
f0104a23:	eb 16                	jmp    f0104a3b <sched_remove_ready+0x96>
f0104a25:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104a2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a2d:	c1 e2 04             	shl    $0x4,%edx
f0104a30:	01 c2                	add    %eax,%edx
f0104a32:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a35:	8b 40 48             	mov    0x48(%eax),%eax
f0104a38:	89 42 04             	mov    %eax,0x4(%edx)
f0104a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a41:	85 c0                	test   %eax,%eax
f0104a43:	74 11                	je     f0104a56 <sched_remove_ready+0xb1>
f0104a45:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a48:	8b 40 48             	mov    0x48(%eax),%eax
f0104a4b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a4e:	8b 52 44             	mov    0x44(%edx),%edx
f0104a51:	89 50 44             	mov    %edx,0x44(%eax)
f0104a54:	eb 15                	jmp    f0104a6b <sched_remove_ready+0xc6>
f0104a56:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104a5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5e:	c1 e2 04             	shl    $0x4,%edx
f0104a61:	01 c2                	add    %eax,%edx
f0104a63:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a66:	8b 40 44             	mov    0x44(%eax),%eax
f0104a69:	89 02                	mov    %eax,(%edx)
f0104a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a75:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a78:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a7f:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104a84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a87:	c1 e2 04             	shl    $0x4,%edx
f0104a8a:	01 d0                	add    %edx,%eax
f0104a8c:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a8f:	4a                   	dec    %edx
f0104a90:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a93:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a96:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a9d:	eb 14                	jmp    f0104ab3 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a9f:	ff 45 f4             	incl   -0xc(%ebp)
f0104aa2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0104aa7:	0f b6 c0             	movzbl %al,%eax
f0104aaa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104aad:	0f 8f 0e ff ff ff    	jg     f01049c1 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	74 1d                	je     f0104ade <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104ac1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ac4:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104acb:	83 ec 08             	sub    $0x8,%esp
f0104ace:	ff 75 08             	pushl  0x8(%ebp)
f0104ad1:	68 38 07 86 f0       	push   $0xf0860738
f0104ad6:	e8 ee f9 ff ff       	call   f01044c9 <enqueue>
f0104adb:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ade:	90                   	nop
f0104adf:	c9                   	leave  
f0104ae0:	c3                   	ret    

f0104ae1 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ae1:	55                   	push   %ebp
f0104ae2:	89 e5                	mov    %esp,%ebp
f0104ae4:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ae7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104aeb:	0f 84 92 00 00 00    	je     f0104b83 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104af1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104af5:	75 17                	jne    f0104b0e <sched_remove_new+0x2d>
f0104af7:	83 ec 04             	sub    $0x4,%esp
f0104afa:	68 df 5e 13 f0       	push   $0xf0135edf
f0104aff:	68 1f 01 00 00       	push   $0x11f
f0104b04:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104b09:	e8 f7 b6 ff ff       	call   f0100205 <_panic>
f0104b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b11:	8b 40 44             	mov    0x44(%eax),%eax
f0104b14:	85 c0                	test   %eax,%eax
f0104b16:	74 11                	je     f0104b29 <sched_remove_new+0x48>
f0104b18:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b1b:	8b 40 44             	mov    0x44(%eax),%eax
f0104b1e:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b21:	8b 52 48             	mov    0x48(%edx),%edx
f0104b24:	89 50 48             	mov    %edx,0x48(%eax)
f0104b27:	eb 0b                	jmp    f0104b34 <sched_remove_new+0x53>
f0104b29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b2c:	8b 40 48             	mov    0x48(%eax),%eax
f0104b2f:	a3 3c 07 86 f0       	mov    %eax,0xf086073c
f0104b34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b37:	8b 40 48             	mov    0x48(%eax),%eax
f0104b3a:	85 c0                	test   %eax,%eax
f0104b3c:	74 11                	je     f0104b4f <sched_remove_new+0x6e>
f0104b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b41:	8b 40 48             	mov    0x48(%eax),%eax
f0104b44:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b47:	8b 52 44             	mov    0x44(%edx),%edx
f0104b4a:	89 50 44             	mov    %edx,0x44(%eax)
f0104b4d:	eb 0b                	jmp    f0104b5a <sched_remove_new+0x79>
f0104b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b52:	8b 40 44             	mov    0x44(%eax),%eax
f0104b55:	a3 38 07 86 f0       	mov    %eax,0xf0860738
f0104b5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b5d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b64:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b67:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b6e:	a1 44 07 86 f0       	mov    0xf0860744,%eax
f0104b73:	48                   	dec    %eax
f0104b74:	a3 44 07 86 f0       	mov    %eax,0xf0860744
		env->env_status = ENV_UNKNOWN;
f0104b79:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b7c:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b83:	90                   	nop
f0104b84:	c9                   	leave  
f0104b85:	c3                   	ret    

f0104b86 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b86:	55                   	push   %ebp
f0104b87:	89 e5                	mov    %esp,%ebp
f0104b89:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b8c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b90:	74 34                	je     f0104bc6 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b92:	e8 3f 98 00 00       	call   f010e3d6 <isBufferingEnabled>
f0104b97:	84 c0                	test   %al,%al
f0104b99:	74 0e                	je     f0104ba9 <sched_insert_exit+0x23>
f0104b9b:	83 ec 0c             	sub    $0xc,%esp
f0104b9e:	ff 75 08             	pushl  0x8(%ebp)
f0104ba1:	e8 05 69 00 00       	call   f010b4ab <cleanup_buffers>
f0104ba6:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104ba9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bac:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104bb3:	83 ec 08             	sub    $0x8,%esp
f0104bb6:	ff 75 08             	pushl  0x8(%ebp)
f0104bb9:	68 f0 06 86 f0       	push   $0xf08606f0
f0104bbe:	e8 06 f9 ff ff       	call   f01044c9 <enqueue>
f0104bc3:	83 c4 10             	add    $0x10,%esp
	}
}
f0104bc6:	90                   	nop
f0104bc7:	c9                   	leave  
f0104bc8:	c3                   	ret    

f0104bc9 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104bc9:	55                   	push   %ebp
f0104bca:	89 e5                	mov    %esp,%ebp
f0104bcc:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104bcf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bd3:	0f 84 92 00 00 00    	je     f0104c6b <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bd9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bdd:	75 17                	jne    f0104bf6 <sched_remove_exit+0x2d>
f0104bdf:	83 ec 04             	sub    $0x4,%esp
f0104be2:	68 df 5e 13 f0       	push   $0xf0135edf
f0104be7:	68 31 01 00 00       	push   $0x131
f0104bec:	68 ab 5e 13 f0       	push   $0xf0135eab
f0104bf1:	e8 0f b6 ff ff       	call   f0100205 <_panic>
f0104bf6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf9:	8b 40 44             	mov    0x44(%eax),%eax
f0104bfc:	85 c0                	test   %eax,%eax
f0104bfe:	74 11                	je     f0104c11 <sched_remove_exit+0x48>
f0104c00:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c03:	8b 40 44             	mov    0x44(%eax),%eax
f0104c06:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c09:	8b 52 48             	mov    0x48(%edx),%edx
f0104c0c:	89 50 48             	mov    %edx,0x48(%eax)
f0104c0f:	eb 0b                	jmp    f0104c1c <sched_remove_exit+0x53>
f0104c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c14:	8b 40 48             	mov    0x48(%eax),%eax
f0104c17:	a3 f4 06 86 f0       	mov    %eax,0xf08606f4
f0104c1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c1f:	8b 40 48             	mov    0x48(%eax),%eax
f0104c22:	85 c0                	test   %eax,%eax
f0104c24:	74 11                	je     f0104c37 <sched_remove_exit+0x6e>
f0104c26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c29:	8b 40 48             	mov    0x48(%eax),%eax
f0104c2c:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c2f:	8b 52 44             	mov    0x44(%edx),%edx
f0104c32:	89 50 44             	mov    %edx,0x44(%eax)
f0104c35:	eb 0b                	jmp    f0104c42 <sched_remove_exit+0x79>
f0104c37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104c3d:	a3 f0 06 86 f0       	mov    %eax,0xf08606f0
f0104c42:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c45:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c4f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c56:	a1 fc 06 86 f0       	mov    0xf08606fc,%eax
f0104c5b:	48                   	dec    %eax
f0104c5c:	a3 fc 06 86 f0       	mov    %eax,0xf08606fc
		env->env_status = ENV_UNKNOWN;
f0104c61:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c64:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c6b:	90                   	nop
f0104c6c:	c9                   	leave  
f0104c6d:	c3                   	ret    

f0104c6e <sched_print_all>:

void sched_print_all()
{
f0104c6e:	55                   	push   %ebp
f0104c6f:	89 e5                	mov    %esp,%ebp
f0104c71:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c74:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f0104c79:	85 c0                	test   %eax,%eax
f0104c7b:	74 6c                	je     f0104ce9 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c7d:	83 ec 0c             	sub    $0xc,%esp
f0104c80:	68 64 5f 13 f0       	push   $0xf0135f64
f0104c85:	e8 84 c0 ff ff       	call   f0100d0e <cprintf>
f0104c8a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8d:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f0104c92:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c95:	eb 29                	jmp    f0104cc0 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ca3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ca6:	83 ec 04             	sub    $0x4,%esp
f0104ca9:	52                   	push   %edx
f0104caa:	50                   	push   %eax
f0104cab:	68 86 5f 13 f0       	push   $0xf0135f86
f0104cb0:	e8 59 c0 ff ff       	call   f0100d0e <cprintf>
f0104cb5:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104cb8:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0104cbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cc4:	74 08                	je     f0104cce <sched_print_all+0x60>
f0104cc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cc9:	8b 40 44             	mov    0x44(%eax),%eax
f0104ccc:	eb 05                	jmp    f0104cd3 <sched_print_all+0x65>
f0104cce:	b8 00 00 00 00       	mov    $0x0,%eax
f0104cd3:	a3 40 07 86 f0       	mov    %eax,0xf0860740
f0104cd8:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0104cdd:	85 c0                	test   %eax,%eax
f0104cdf:	75 b6                	jne    f0104c97 <sched_print_all+0x29>
f0104ce1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ce5:	75 b0                	jne    f0104c97 <sched_print_all+0x29>
f0104ce7:	eb 10                	jmp    f0104cf9 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104ce9:	83 ec 0c             	sub    $0xc,%esp
f0104cec:	68 90 5f 13 f0       	push   $0xf0135f90
f0104cf1:	e8 18 c0 ff ff       	call   f0100d0e <cprintf>
f0104cf6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104cf9:	83 ec 0c             	sub    $0xc,%esp
f0104cfc:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104d01:	e8 08 c0 ff ff       	call   f0100d0e <cprintf>
f0104d06:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104d09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104d10:	e9 ca 00 00 00       	jmp    f0104ddf <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104d15:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104d1a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1d:	c1 e2 04             	shl    $0x4,%edx
f0104d20:	01 d0                	add    %edx,%eax
f0104d22:	8b 00                	mov    (%eax),%eax
f0104d24:	85 c0                	test   %eax,%eax
f0104d26:	0f 84 8d 00 00 00    	je     f0104db9 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d2c:	83 ec 08             	sub    $0x8,%esp
f0104d2f:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d32:	68 e0 5f 13 f0       	push   $0xf0135fe0
f0104d37:	e8 d2 bf ff ff       	call   f0100d0e <cprintf>
f0104d3c:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d3f:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104d44:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d47:	c1 e2 04             	shl    $0x4,%edx
f0104d4a:	01 d0                	add    %edx,%eax
f0104d4c:	8b 00                	mov    (%eax),%eax
f0104d4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d51:	eb 34                	jmp    f0104d87 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d56:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d5f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d62:	83 ec 04             	sub    $0x4,%esp
f0104d65:	52                   	push   %edx
f0104d66:	50                   	push   %eax
f0104d67:	68 86 5f 13 f0       	push   $0xf0135f86
f0104d6c:	e8 9d bf ff ff       	call   f0100d0e <cprintf>
f0104d71:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d74:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104d79:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d7c:	c1 e2 04             	shl    $0x4,%edx
f0104d7f:	01 d0                	add    %edx,%eax
f0104d81:	8b 40 08             	mov    0x8(%eax),%eax
f0104d84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d87:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104d8c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d8f:	c1 e2 04             	shl    $0x4,%edx
f0104d92:	01 d0                	add    %edx,%eax
f0104d94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d98:	74 08                	je     f0104da2 <sched_print_all+0x134>
f0104d9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d9d:	8b 52 44             	mov    0x44(%edx),%edx
f0104da0:	eb 05                	jmp    f0104da7 <sched_print_all+0x139>
f0104da2:	ba 00 00 00 00       	mov    $0x0,%edx
f0104da7:	89 50 08             	mov    %edx,0x8(%eax)
f0104daa:	8b 40 08             	mov    0x8(%eax),%eax
f0104dad:	85 c0                	test   %eax,%eax
f0104daf:	75 a2                	jne    f0104d53 <sched_print_all+0xe5>
f0104db1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db5:	75 9c                	jne    f0104d53 <sched_print_all+0xe5>
f0104db7:	eb 13                	jmp    f0104dcc <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104db9:	83 ec 08             	sub    $0x8,%esp
f0104dbc:	ff 75 f0             	pushl  -0x10(%ebp)
f0104dbf:	68 08 60 13 f0       	push   $0xf0136008
f0104dc4:	e8 45 bf ff ff       	call   f0100d0e <cprintf>
f0104dc9:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104dcc:	83 ec 0c             	sub    $0xc,%esp
f0104dcf:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104dd4:	e8 35 bf ff ff       	call   f0100d0e <cprintf>
f0104dd9:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104ddc:	ff 45 f0             	incl   -0x10(%ebp)
f0104ddf:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0104de4:	0f b6 c0             	movzbl %al,%eax
f0104de7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dea:	0f 8f 25 ff ff ff    	jg     f0104d15 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104df0:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f0104df5:	85 c0                	test   %eax,%eax
f0104df7:	74 6c                	je     f0104e65 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104df9:	83 ec 0c             	sub    $0xc,%esp
f0104dfc:	68 2c 60 13 f0       	push   $0xf013602c
f0104e01:	e8 08 bf ff ff       	call   f0100d0e <cprintf>
f0104e06:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e09:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f0104e0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e11:	eb 29                	jmp    f0104e3c <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e16:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104e1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e1f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e22:	83 ec 04             	sub    $0x4,%esp
f0104e25:	52                   	push   %edx
f0104e26:	50                   	push   %eax
f0104e27:	68 86 5f 13 f0       	push   $0xf0135f86
f0104e2c:	e8 dd be ff ff       	call   f0100d0e <cprintf>
f0104e31:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e34:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0104e39:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e40:	74 08                	je     f0104e4a <sched_print_all+0x1dc>
f0104e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e45:	8b 40 44             	mov    0x44(%eax),%eax
f0104e48:	eb 05                	jmp    f0104e4f <sched_print_all+0x1e1>
f0104e4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e4f:	a3 f8 06 86 f0       	mov    %eax,0xf08606f8
f0104e54:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0104e59:	85 c0                	test   %eax,%eax
f0104e5b:	75 b6                	jne    f0104e13 <sched_print_all+0x1a5>
f0104e5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e61:	75 b0                	jne    f0104e13 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e63:	eb 10                	jmp    f0104e75 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e65:	83 ec 0c             	sub    $0xc,%esp
f0104e68:	68 4e 60 13 f0       	push   $0xf013604e
f0104e6d:	e8 9c be ff ff       	call   f0100d0e <cprintf>
f0104e72:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e75:	90                   	nop
f0104e76:	c9                   	leave  
f0104e77:	c3                   	ret    

f0104e78 <sched_run_all>:

void sched_run_all()
{
f0104e78:	55                   	push   %ebp
f0104e79:	89 e5                	mov    %esp,%ebp
f0104e7b:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e85:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f0104e8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e8d:	eb 24                	jmp    f0104eb3 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e8f:	83 ec 0c             	sub    $0xc,%esp
f0104e92:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e95:	e8 47 fc ff ff       	call   f0104ae1 <sched_remove_new>
f0104e9a:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e9d:	83 ec 0c             	sub    $0xc,%esp
f0104ea0:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ea3:	e8 d0 fa ff ff       	call   f0104978 <sched_insert_ready>
f0104ea8:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104eab:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0104eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eb7:	74 08                	je     f0104ec1 <sched_run_all+0x49>
f0104eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ebc:	8b 40 44             	mov    0x44(%eax),%eax
f0104ebf:	eb 05                	jmp    f0104ec6 <sched_run_all+0x4e>
f0104ec1:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ec6:	a3 40 07 86 f0       	mov    %eax,0xf0860740
f0104ecb:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0104ed0:	85 c0                	test   %eax,%eax
f0104ed2:	75 bb                	jne    f0104e8f <sched_run_all+0x17>
f0104ed4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ed8:	75 b5                	jne    f0104e8f <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eda:	a1 54 07 86 f0       	mov    0xf0860754,%eax
f0104edf:	85 c0                	test   %eax,%eax
f0104ee1:	75 05                	jne    f0104ee8 <sched_run_all+0x70>
		fos_scheduler();
f0104ee3:	e8 6a f8 ff ff       	call   f0104752 <fos_scheduler>
}
f0104ee8:	90                   	nop
f0104ee9:	c9                   	leave  
f0104eea:	c3                   	ret    

f0104eeb <sched_kill_all>:

void sched_kill_all()
{
f0104eeb:	55                   	push   %ebp
f0104eec:	89 e5                	mov    %esp,%ebp
f0104eee:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ef1:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f0104ef6:	85 c0                	test   %eax,%eax
f0104ef8:	0f 84 98 00 00 00    	je     f0104f96 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104efe:	83 ec 0c             	sub    $0xc,%esp
f0104f01:	68 6c 60 13 f0       	push   $0xf013606c
f0104f06:	e8 03 be ff ff       	call   f0100d0e <cprintf>
f0104f0b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f0e:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f0104f13:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f16:	eb 55                	jmp    f0104f6d <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f1b:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104f21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f24:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f27:	83 ec 04             	sub    $0x4,%esp
f0104f2a:	52                   	push   %edx
f0104f2b:	50                   	push   %eax
f0104f2c:	68 98 60 13 f0       	push   $0xf0136098
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f39:	83 ec 0c             	sub    $0xc,%esp
f0104f3c:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f3f:	e8 9d fb ff ff       	call   f0104ae1 <sched_remove_new>
f0104f44:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f47:	83 ec 0c             	sub    $0xc,%esp
f0104f4a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f4d:	e8 3f 51 00 00       	call   f010a091 <env_free>
f0104f52:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f55:	83 ec 0c             	sub    $0xc,%esp
f0104f58:	68 ab 60 13 f0       	push   $0xf01360ab
f0104f5d:	e8 ac bd ff ff       	call   f0100d0e <cprintf>
f0104f62:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f65:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0104f6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f71:	74 08                	je     f0104f7b <sched_kill_all+0x90>
f0104f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f76:	8b 40 44             	mov    0x44(%eax),%eax
f0104f79:	eb 05                	jmp    f0104f80 <sched_kill_all+0x95>
f0104f7b:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f80:	a3 40 07 86 f0       	mov    %eax,0xf0860740
f0104f85:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0104f8a:	85 c0                	test   %eax,%eax
f0104f8c:	75 8a                	jne    f0104f18 <sched_kill_all+0x2d>
f0104f8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f92:	75 84                	jne    f0104f18 <sched_kill_all+0x2d>
f0104f94:	eb 10                	jmp    f0104fa6 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f96:	83 ec 0c             	sub    $0xc,%esp
f0104f99:	68 b1 60 13 f0       	push   $0xf01360b1
f0104f9e:	e8 6b bd ff ff       	call   f0100d0e <cprintf>
f0104fa3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104fa6:	83 ec 0c             	sub    $0xc,%esp
f0104fa9:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104fae:	e8 5b bd ff ff       	call   f0100d0e <cprintf>
f0104fb3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104fb6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104fbd:	e9 99 01 00 00       	jmp    f010515b <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104fc2:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104fc7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fca:	c1 e2 04             	shl    $0x4,%edx
f0104fcd:	01 d0                	add    %edx,%eax
f0104fcf:	8b 00                	mov    (%eax),%eax
f0104fd1:	85 c0                	test   %eax,%eax
f0104fd3:	0f 84 5c 01 00 00    	je     f0105135 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fd9:	83 ec 08             	sub    $0x8,%esp
f0104fdc:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fdf:	68 cc 60 13 f0       	push   $0xf01360cc
f0104fe4:	e8 25 bd ff ff       	call   f0100d0e <cprintf>
f0104fe9:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fec:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0104ff1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ff4:	c1 e2 04             	shl    $0x4,%edx
f0104ff7:	01 d0                	add    %edx,%eax
f0104ff9:	8b 00                	mov    (%eax),%eax
f0104ffb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ffe:	e9 f8 00 00 00       	jmp    f01050fb <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105003:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105006:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010500c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010500f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105012:	83 ec 04             	sub    $0x4,%esp
f0105015:	52                   	push   %edx
f0105016:	50                   	push   %eax
f0105017:	68 98 60 13 f0       	push   $0xf0136098
f010501c:	e8 ed bc ff ff       	call   f0100d0e <cprintf>
f0105021:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105024:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105028:	75 17                	jne    f0105041 <sched_kill_all+0x156>
f010502a:	83 ec 04             	sub    $0x4,%esp
f010502d:	68 df 5e 13 f0       	push   $0xf0135edf
f0105032:	68 8c 01 00 00       	push   $0x18c
f0105037:	68 ab 5e 13 f0       	push   $0xf0135eab
f010503c:	e8 c4 b1 ff ff       	call   f0100205 <_panic>
f0105041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105044:	8b 40 44             	mov    0x44(%eax),%eax
f0105047:	85 c0                	test   %eax,%eax
f0105049:	74 11                	je     f010505c <sched_kill_all+0x171>
f010504b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010504e:	8b 40 44             	mov    0x44(%eax),%eax
f0105051:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105054:	8b 52 48             	mov    0x48(%edx),%edx
f0105057:	89 50 48             	mov    %edx,0x48(%eax)
f010505a:	eb 16                	jmp    f0105072 <sched_kill_all+0x187>
f010505c:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105061:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105064:	c1 e2 04             	shl    $0x4,%edx
f0105067:	01 c2                	add    %eax,%edx
f0105069:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506c:	8b 40 48             	mov    0x48(%eax),%eax
f010506f:	89 42 04             	mov    %eax,0x4(%edx)
f0105072:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105075:	8b 40 48             	mov    0x48(%eax),%eax
f0105078:	85 c0                	test   %eax,%eax
f010507a:	74 11                	je     f010508d <sched_kill_all+0x1a2>
f010507c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010507f:	8b 40 48             	mov    0x48(%eax),%eax
f0105082:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105085:	8b 52 44             	mov    0x44(%edx),%edx
f0105088:	89 50 44             	mov    %edx,0x44(%eax)
f010508b:	eb 15                	jmp    f01050a2 <sched_kill_all+0x1b7>
f010508d:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105092:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105095:	c1 e2 04             	shl    $0x4,%edx
f0105098:	01 c2                	add    %eax,%edx
f010509a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509d:	8b 40 44             	mov    0x44(%eax),%eax
f01050a0:	89 02                	mov    %eax,(%edx)
f01050a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050a5:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01050ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050af:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01050b6:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01050bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050be:	c1 e2 04             	shl    $0x4,%edx
f01050c1:	01 d0                	add    %edx,%eax
f01050c3:	8b 50 0c             	mov    0xc(%eax),%edx
f01050c6:	4a                   	dec    %edx
f01050c7:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f01050ca:	83 ec 0c             	sub    $0xc,%esp
f01050cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01050d0:	e8 bc 4f 00 00       	call   f010a091 <env_free>
f01050d5:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050d8:	83 ec 0c             	sub    $0xc,%esp
f01050db:	68 ab 60 13 f0       	push   $0xf01360ab
f01050e0:	e8 29 bc ff ff       	call   f0100d0e <cprintf>
f01050e5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050e8:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01050ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050f0:	c1 e2 04             	shl    $0x4,%edx
f01050f3:	01 d0                	add    %edx,%eax
f01050f5:	8b 40 08             	mov    0x8(%eax),%eax
f01050f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050fb:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105100:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105103:	c1 e2 04             	shl    $0x4,%edx
f0105106:	01 d0                	add    %edx,%eax
f0105108:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510c:	74 08                	je     f0105116 <sched_kill_all+0x22b>
f010510e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105111:	8b 52 44             	mov    0x44(%edx),%edx
f0105114:	eb 05                	jmp    f010511b <sched_kill_all+0x230>
f0105116:	ba 00 00 00 00       	mov    $0x0,%edx
f010511b:	89 50 08             	mov    %edx,0x8(%eax)
f010511e:	8b 40 08             	mov    0x8(%eax),%eax
f0105121:	85 c0                	test   %eax,%eax
f0105123:	0f 85 da fe ff ff    	jne    f0105003 <sched_kill_all+0x118>
f0105129:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010512d:	0f 85 d0 fe ff ff    	jne    f0105003 <sched_kill_all+0x118>
f0105133:	eb 13                	jmp    f0105148 <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105135:	83 ec 08             	sub    $0x8,%esp
f0105138:	ff 75 f0             	pushl  -0x10(%ebp)
f010513b:	68 08 60 13 f0       	push   $0xf0136008
f0105140:	e8 c9 bb ff ff       	call   f0100d0e <cprintf>
f0105145:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105148:	83 ec 0c             	sub    $0xc,%esp
f010514b:	68 ac 5f 13 f0       	push   $0xf0135fac
f0105150:	e8 b9 bb ff ff       	call   f0100d0e <cprintf>
f0105155:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105158:	ff 45 f0             	incl   -0x10(%ebp)
f010515b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0105160:	0f b6 c0             	movzbl %al,%eax
f0105163:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105166:	0f 8f 56 fe ff ff    	jg     f0104fc2 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f010516c:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f0105171:	85 c0                	test   %eax,%eax
f0105173:	0f 84 98 00 00 00    	je     f0105211 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105179:	83 ec 0c             	sub    $0xc,%esp
f010517c:	68 00 61 13 f0       	push   $0xf0136100
f0105181:	e8 88 bb ff ff       	call   f0100d0e <cprintf>
f0105186:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105189:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f010518e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105191:	eb 55                	jmp    f01051e8 <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105193:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105196:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010519c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010519f:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051a2:	83 ec 04             	sub    $0x4,%esp
f01051a5:	52                   	push   %edx
f01051a6:	50                   	push   %eax
f01051a7:	68 98 60 13 f0       	push   $0xf0136098
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01051b4:	83 ec 0c             	sub    $0xc,%esp
f01051b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01051ba:	e8 0a fa ff ff       	call   f0104bc9 <sched_remove_exit>
f01051bf:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01051c2:	83 ec 0c             	sub    $0xc,%esp
f01051c5:	ff 75 f4             	pushl  -0xc(%ebp)
f01051c8:	e8 c4 4e 00 00       	call   f010a091 <env_free>
f01051cd:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051d0:	83 ec 0c             	sub    $0xc,%esp
f01051d3:	68 ab 60 13 f0       	push   $0xf01360ab
f01051d8:	e8 31 bb ff ff       	call   f0100d0e <cprintf>
f01051dd:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051e0:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f01051e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051ec:	74 08                	je     f01051f6 <sched_kill_all+0x30b>
f01051ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051f1:	8b 40 44             	mov    0x44(%eax),%eax
f01051f4:	eb 05                	jmp    f01051fb <sched_kill_all+0x310>
f01051f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01051fb:	a3 f8 06 86 f0       	mov    %eax,0xf08606f8
f0105200:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0105205:	85 c0                	test   %eax,%eax
f0105207:	75 8a                	jne    f0105193 <sched_kill_all+0x2a8>
f0105209:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010520d:	75 84                	jne    f0105193 <sched_kill_all+0x2a8>
f010520f:	eb 10                	jmp    f0105221 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105211:	83 ec 0c             	sub    $0xc,%esp
f0105214:	68 4e 60 13 f0       	push   $0xf013604e
f0105219:	e8 f0 ba ff ff       	call   f0100d0e <cprintf>
f010521e:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105221:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f0105228:	00 00 00 
	fos_scheduler();
f010522b:	e8 22 f5 ff ff       	call   f0104752 <fos_scheduler>

f0105230 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105230:	55                   	push   %ebp
f0105231:	89 e5                	mov    %esp,%ebp
f0105233:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105236:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010523a:	74 0e                	je     f010524a <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010523c:	83 ec 0c             	sub    $0xc,%esp
f010523f:	ff 75 08             	pushl  0x8(%ebp)
f0105242:	e8 6e f8 ff ff       	call   f0104ab5 <sched_insert_new>
f0105247:	83 c4 10             	add    $0x10,%esp
	}
}
f010524a:	90                   	nop
f010524b:	c9                   	leave  
f010524c:	c3                   	ret    

f010524d <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010524d:	55                   	push   %ebp
f010524e:	89 e5                	mov    %esp,%ebp
f0105250:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105253:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010525a:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f010525f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105262:	eb 3d                	jmp    f01052a1 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105264:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105267:	8b 40 4c             	mov    0x4c(%eax),%eax
f010526a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010526d:	75 2a                	jne    f0105299 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f010526f:	83 ec 0c             	sub    $0xc,%esp
f0105272:	ff 75 f4             	pushl  -0xc(%ebp)
f0105275:	e8 67 f8 ff ff       	call   f0104ae1 <sched_remove_new>
f010527a:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f010527d:	83 ec 0c             	sub    $0xc,%esp
f0105280:	ff 75 f4             	pushl  -0xc(%ebp)
f0105283:	e8 f0 f6 ff ff       	call   f0104978 <sched_insert_ready>
f0105288:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010528b:	a1 54 07 86 f0       	mov    0xf0860754,%eax
f0105290:	85 c0                	test   %eax,%eax
f0105292:	75 36                	jne    f01052ca <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105294:	e8 b9 f4 ff ff       	call   f0104752 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105299:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f010529e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052a5:	74 08                	je     f01052af <sched_run_env+0x62>
f01052a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052aa:	8b 40 44             	mov    0x44(%eax),%eax
f01052ad:	eb 05                	jmp    f01052b4 <sched_run_env+0x67>
f01052af:	b8 00 00 00 00       	mov    $0x0,%eax
f01052b4:	a3 40 07 86 f0       	mov    %eax,0xf0860740
f01052b9:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f01052be:	85 c0                	test   %eax,%eax
f01052c0:	75 a2                	jne    f0105264 <sched_run_env+0x17>
f01052c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052c6:	75 9c                	jne    f0105264 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01052c8:	eb 01                	jmp    f01052cb <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01052ca:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01052cb:	90                   	nop
f01052cc:	c9                   	leave  
f01052cd:	c3                   	ret    

f01052ce <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052ce:	55                   	push   %ebp
f01052cf:	89 e5                	mov    %esp,%ebp
f01052d1:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052e6:	75 59                	jne    f0105341 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e8:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f01052ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052f0:	eb 28                	jmp    f010531a <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052f8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052fb:	75 15                	jne    f0105312 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052fd:	83 ec 0c             	sub    $0xc,%esp
f0105300:	ff 75 f4             	pushl  -0xc(%ebp)
f0105303:	e8 d9 f7 ff ff       	call   f0104ae1 <sched_remove_new>
f0105308:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010530b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105312:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0105317:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010531a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010531e:	74 08                	je     f0105328 <sched_exit_env+0x5a>
f0105320:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105323:	8b 40 44             	mov    0x44(%eax),%eax
f0105326:	eb 05                	jmp    f010532d <sched_exit_env+0x5f>
f0105328:	b8 00 00 00 00       	mov    $0x0,%eax
f010532d:	a3 40 07 86 f0       	mov    %eax,0xf0860740
f0105332:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0105337:	85 c0                	test   %eax,%eax
f0105339:	75 b7                	jne    f01052f2 <sched_exit_env+0x24>
f010533b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010533f:	75 b1                	jne    f01052f2 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105341:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105345:	0f 85 67 01 00 00    	jne    f01054b2 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010534b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105352:	e9 47 01 00 00       	jmp    f010549e <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105357:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010535c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010535f:	c1 e2 04             	shl    $0x4,%edx
f0105362:	01 d0                	add    %edx,%eax
f0105364:	8b 00                	mov    (%eax),%eax
f0105366:	85 c0                	test   %eax,%eax
f0105368:	0f 84 27 01 00 00    	je     f0105495 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f010536e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105375:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010537a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010537d:	c1 e2 04             	shl    $0x4,%edx
f0105380:	01 d0                	add    %edx,%eax
f0105382:	8b 00                	mov    (%eax),%eax
f0105384:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105387:	e9 d1 00 00 00       	jmp    f010545d <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105392:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105395:	0f 85 af 00 00 00    	jne    f010544a <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010539b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010539f:	75 17                	jne    f01053b8 <sched_exit_env+0xea>
f01053a1:	83 ec 04             	sub    $0x4,%esp
f01053a4:	68 df 5e 13 f0       	push   $0xf0135edf
f01053a9:	68 f7 01 00 00       	push   $0x1f7
f01053ae:	68 ab 5e 13 f0       	push   $0xf0135eab
f01053b3:	e8 4d ae ff ff       	call   f0100205 <_panic>
f01053b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053bb:	8b 40 44             	mov    0x44(%eax),%eax
f01053be:	85 c0                	test   %eax,%eax
f01053c0:	74 11                	je     f01053d3 <sched_exit_env+0x105>
f01053c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c5:	8b 40 44             	mov    0x44(%eax),%eax
f01053c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053cb:	8b 52 48             	mov    0x48(%edx),%edx
f01053ce:	89 50 48             	mov    %edx,0x48(%eax)
f01053d1:	eb 16                	jmp    f01053e9 <sched_exit_env+0x11b>
f01053d3:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01053d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053db:	c1 e2 04             	shl    $0x4,%edx
f01053de:	01 c2                	add    %eax,%edx
f01053e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e3:	8b 40 48             	mov    0x48(%eax),%eax
f01053e6:	89 42 04             	mov    %eax,0x4(%edx)
f01053e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ec:	8b 40 48             	mov    0x48(%eax),%eax
f01053ef:	85 c0                	test   %eax,%eax
f01053f1:	74 11                	je     f0105404 <sched_exit_env+0x136>
f01053f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f6:	8b 40 48             	mov    0x48(%eax),%eax
f01053f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053fc:	8b 52 44             	mov    0x44(%edx),%edx
f01053ff:	89 50 44             	mov    %edx,0x44(%eax)
f0105402:	eb 15                	jmp    f0105419 <sched_exit_env+0x14b>
f0105404:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105409:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010540c:	c1 e2 04             	shl    $0x4,%edx
f010540f:	01 c2                	add    %eax,%edx
f0105411:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105414:	8b 40 44             	mov    0x44(%eax),%eax
f0105417:	89 02                	mov    %eax,(%edx)
f0105419:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010541c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105426:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010542d:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105432:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105435:	c1 e2 04             	shl    $0x4,%edx
f0105438:	01 d0                	add    %edx,%eax
f010543a:	8b 50 0c             	mov    0xc(%eax),%edx
f010543d:	4a                   	dec    %edx
f010543e:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105441:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105448:	eb 4b                	jmp    f0105495 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010544a:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010544f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105452:	c1 e2 04             	shl    $0x4,%edx
f0105455:	01 d0                	add    %edx,%eax
f0105457:	8b 40 08             	mov    0x8(%eax),%eax
f010545a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010545d:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105462:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105465:	c1 e2 04             	shl    $0x4,%edx
f0105468:	01 d0                	add    %edx,%eax
f010546a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010546e:	74 08                	je     f0105478 <sched_exit_env+0x1aa>
f0105470:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105473:	8b 52 44             	mov    0x44(%edx),%edx
f0105476:	eb 05                	jmp    f010547d <sched_exit_env+0x1af>
f0105478:	ba 00 00 00 00       	mov    $0x0,%edx
f010547d:	89 50 08             	mov    %edx,0x8(%eax)
f0105480:	8b 40 08             	mov    0x8(%eax),%eax
f0105483:	85 c0                	test   %eax,%eax
f0105485:	0f 85 01 ff ff ff    	jne    f010538c <sched_exit_env+0xbe>
f010548b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010548f:	0f 85 f7 fe ff ff    	jne    f010538c <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105495:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105499:	75 16                	jne    f01054b1 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010549b:	ff 45 ec             	incl   -0x14(%ebp)
f010549e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01054a3:	0f b6 c0             	movzbl %al,%eax
f01054a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01054a9:	0f 8f a8 fe ff ff    	jg     f0105357 <sched_exit_env+0x89>
f01054af:	eb 01                	jmp    f01054b2 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f01054b1:	90                   	nop
		}
	}
	if (!found)
f01054b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054b6:	75 1c                	jne    f01054d4 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f01054b8:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01054bd:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c3:	75 0f                	jne    f01054d4 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f01054c5:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01054ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054cd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054d8:	74 2a                	je     f0105504 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054da:	83 ec 0c             	sub    $0xc,%esp
f01054dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01054e0:	e8 a1 f6 ff ff       	call   f0104b86 <sched_insert_exit>
f01054e5:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054e8:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01054ed:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054f0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054f3:	75 0f                	jne    f0105504 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054f5:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f01054fc:	00 00 00 
			fos_scheduler();
f01054ff:	e8 4e f2 ff ff       	call   f0104752 <fos_scheduler>
		}
	}
}
f0105504:	90                   	nop
f0105505:	c9                   	leave  
f0105506:	c3                   	ret    

f0105507 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105507:	55                   	push   %ebp
f0105508:	89 e5                	mov    %esp,%ebp
f010550a:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010550d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105514:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010551b:	e9 37 01 00 00       	jmp    f0105657 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105520:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105525:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105528:	c1 e2 04             	shl    $0x4,%edx
f010552b:	01 d0                	add    %edx,%eax
f010552d:	8b 00                	mov    (%eax),%eax
f010552f:	85 c0                	test   %eax,%eax
f0105531:	0f 84 1d 01 00 00    	je     f0105654 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f0105537:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010553e:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105543:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105546:	c1 e2 04             	shl    $0x4,%edx
f0105549:	01 d0                	add    %edx,%eax
f010554b:	8b 00                	mov    (%eax),%eax
f010554d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105550:	e9 c7 00 00 00       	jmp    f010561c <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105555:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105559:	75 17                	jne    f0105572 <sched_exit_all_ready_envs+0x6b>
f010555b:	83 ec 04             	sub    $0x4,%esp
f010555e:	68 df 5e 13 f0       	push   $0xf0135edf
f0105563:	68 22 02 00 00       	push   $0x222
f0105568:	68 ab 5e 13 f0       	push   $0xf0135eab
f010556d:	e8 93 ac ff ff       	call   f0100205 <_panic>
f0105572:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105575:	8b 40 44             	mov    0x44(%eax),%eax
f0105578:	85 c0                	test   %eax,%eax
f010557a:	74 11                	je     f010558d <sched_exit_all_ready_envs+0x86>
f010557c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557f:	8b 40 44             	mov    0x44(%eax),%eax
f0105582:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105585:	8b 52 48             	mov    0x48(%edx),%edx
f0105588:	89 50 48             	mov    %edx,0x48(%eax)
f010558b:	eb 16                	jmp    f01055a3 <sched_exit_all_ready_envs+0x9c>
f010558d:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105592:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105595:	c1 e2 04             	shl    $0x4,%edx
f0105598:	01 c2                	add    %eax,%edx
f010559a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559d:	8b 40 48             	mov    0x48(%eax),%eax
f01055a0:	89 42 04             	mov    %eax,0x4(%edx)
f01055a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a6:	8b 40 48             	mov    0x48(%eax),%eax
f01055a9:	85 c0                	test   %eax,%eax
f01055ab:	74 11                	je     f01055be <sched_exit_all_ready_envs+0xb7>
f01055ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b0:	8b 40 48             	mov    0x48(%eax),%eax
f01055b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01055b6:	8b 52 44             	mov    0x44(%edx),%edx
f01055b9:	89 50 44             	mov    %edx,0x44(%eax)
f01055bc:	eb 15                	jmp    f01055d3 <sched_exit_all_ready_envs+0xcc>
f01055be:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01055c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c6:	c1 e2 04             	shl    $0x4,%edx
f01055c9:	01 c2                	add    %eax,%edx
f01055cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055ce:	8b 40 44             	mov    0x44(%eax),%eax
f01055d1:	89 02                	mov    %eax,(%edx)
f01055d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e0:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055e7:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01055ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055ef:	c1 e2 04             	shl    $0x4,%edx
f01055f2:	01 d0                	add    %edx,%eax
f01055f4:	8b 50 0c             	mov    0xc(%eax),%edx
f01055f7:	4a                   	dec    %edx
f01055f8:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055fb:	83 ec 0c             	sub    $0xc,%esp
f01055fe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105601:	e8 80 f5 ff ff       	call   f0104b86 <sched_insert_exit>
f0105606:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105609:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010560e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105611:	c1 e2 04             	shl    $0x4,%edx
f0105614:	01 d0                	add    %edx,%eax
f0105616:	8b 40 08             	mov    0x8(%eax),%eax
f0105619:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010561c:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105621:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105624:	c1 e2 04             	shl    $0x4,%edx
f0105627:	01 d0                	add    %edx,%eax
f0105629:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010562d:	74 08                	je     f0105637 <sched_exit_all_ready_envs+0x130>
f010562f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105632:	8b 52 44             	mov    0x44(%edx),%edx
f0105635:	eb 05                	jmp    f010563c <sched_exit_all_ready_envs+0x135>
f0105637:	ba 00 00 00 00       	mov    $0x0,%edx
f010563c:	89 50 08             	mov    %edx,0x8(%eax)
f010563f:	8b 40 08             	mov    0x8(%eax),%eax
f0105642:	85 c0                	test   %eax,%eax
f0105644:	0f 85 0b ff ff ff    	jne    f0105555 <sched_exit_all_ready_envs+0x4e>
f010564a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010564e:	0f 85 01 ff ff ff    	jne    f0105555 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105654:	ff 45 f0             	incl   -0x10(%ebp)
f0105657:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f010565c:	0f b6 c0             	movzbl %al,%eax
f010565f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105662:	0f 8f b8 fe ff ff    	jg     f0105520 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105668:	90                   	nop
f0105669:	c9                   	leave  
f010566a:	c3                   	ret    

f010566b <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010566b:	55                   	push   %ebp
f010566c:	89 e5                	mov    %esp,%ebp
f010566e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105678:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010567f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105683:	0f 85 a0 00 00 00    	jne    f0105729 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105689:	a1 38 07 86 f0       	mov    0xf0860738,%eax
f010568e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105691:	eb 67                	jmp    f01056fa <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105693:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105696:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105699:	3b 45 08             	cmp    0x8(%ebp),%eax
f010569c:	75 54                	jne    f01056f2 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010569e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056a1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01056a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056aa:	8b 40 4c             	mov    0x4c(%eax),%eax
f01056ad:	83 ec 04             	sub    $0x4,%esp
f01056b0:	52                   	push   %edx
f01056b1:	50                   	push   %eax
f01056b2:	68 2c 61 13 f0       	push   $0xf013612c
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01056bf:	83 ec 0c             	sub    $0xc,%esp
f01056c2:	ff 75 f4             	pushl  -0xc(%ebp)
f01056c5:	e8 17 f4 ff ff       	call   f0104ae1 <sched_remove_new>
f01056ca:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056cd:	83 ec 0c             	sub    $0xc,%esp
f01056d0:	ff 75 f4             	pushl  -0xc(%ebp)
f01056d3:	e8 b9 49 00 00       	call   f010a091 <env_free>
f01056d8:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056db:	83 ec 0c             	sub    $0xc,%esp
f01056de:	68 ab 60 13 f0       	push   $0xf01360ab
f01056e3:	e8 26 b6 ff ff       	call   f0100d0e <cprintf>
f01056e8:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056eb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056f2:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f01056f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056fe:	74 08                	je     f0105708 <sched_kill_env+0x9d>
f0105700:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105703:	8b 40 44             	mov    0x44(%eax),%eax
f0105706:	eb 05                	jmp    f010570d <sched_kill_env+0xa2>
f0105708:	b8 00 00 00 00       	mov    $0x0,%eax
f010570d:	a3 40 07 86 f0       	mov    %eax,0xf0860740
f0105712:	a1 40 07 86 f0       	mov    0xf0860740,%eax
f0105717:	85 c0                	test   %eax,%eax
f0105719:	0f 85 74 ff ff ff    	jne    f0105693 <sched_kill_env+0x28>
f010571f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105723:	0f 85 6a ff ff ff    	jne    f0105693 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0105729:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010572d:	0f 85 a6 01 00 00    	jne    f01058d9 <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105733:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010573a:	e9 86 01 00 00       	jmp    f01058c5 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010573f:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105744:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105747:	c1 e2 04             	shl    $0x4,%edx
f010574a:	01 d0                	add    %edx,%eax
f010574c:	8b 00                	mov    (%eax),%eax
f010574e:	85 c0                	test   %eax,%eax
f0105750:	0f 84 66 01 00 00    	je     f01058bc <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105756:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010575d:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105762:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105765:	c1 e2 04             	shl    $0x4,%edx
f0105768:	01 d0                	add    %edx,%eax
f010576a:	8b 00                	mov    (%eax),%eax
f010576c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010576f:	e9 10 01 00 00       	jmp    f0105884 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105774:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105777:	8b 40 4c             	mov    0x4c(%eax),%eax
f010577a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010577d:	0f 85 ee 00 00 00    	jne    f0105871 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105783:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105786:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010578c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010578f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105792:	ff 75 ec             	pushl  -0x14(%ebp)
f0105795:	52                   	push   %edx
f0105796:	50                   	push   %eax
f0105797:	68 54 61 13 f0       	push   $0xf0136154
f010579c:	e8 6d b5 ff ff       	call   f0100d0e <cprintf>
f01057a1:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01057a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057a8:	75 17                	jne    f01057c1 <sched_kill_env+0x156>
f01057aa:	83 ec 04             	sub    $0x4,%esp
f01057ad:	68 df 5e 13 f0       	push   $0xf0135edf
f01057b2:	68 49 02 00 00       	push   $0x249
f01057b7:	68 ab 5e 13 f0       	push   $0xf0135eab
f01057bc:	e8 44 aa ff ff       	call   f0100205 <_panic>
f01057c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c4:	8b 40 44             	mov    0x44(%eax),%eax
f01057c7:	85 c0                	test   %eax,%eax
f01057c9:	74 11                	je     f01057dc <sched_kill_env+0x171>
f01057cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ce:	8b 40 44             	mov    0x44(%eax),%eax
f01057d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d4:	8b 52 48             	mov    0x48(%edx),%edx
f01057d7:	89 50 48             	mov    %edx,0x48(%eax)
f01057da:	eb 16                	jmp    f01057f2 <sched_kill_env+0x187>
f01057dc:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01057e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e4:	c1 e2 04             	shl    $0x4,%edx
f01057e7:	01 c2                	add    %eax,%edx
f01057e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ec:	8b 40 48             	mov    0x48(%eax),%eax
f01057ef:	89 42 04             	mov    %eax,0x4(%edx)
f01057f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f5:	8b 40 48             	mov    0x48(%eax),%eax
f01057f8:	85 c0                	test   %eax,%eax
f01057fa:	74 11                	je     f010580d <sched_kill_env+0x1a2>
f01057fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ff:	8b 40 48             	mov    0x48(%eax),%eax
f0105802:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105805:	8b 52 44             	mov    0x44(%edx),%edx
f0105808:	89 50 44             	mov    %edx,0x44(%eax)
f010580b:	eb 15                	jmp    f0105822 <sched_kill_env+0x1b7>
f010580d:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105812:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105815:	c1 e2 04             	shl    $0x4,%edx
f0105818:	01 c2                	add    %eax,%edx
f010581a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010581d:	8b 40 44             	mov    0x44(%eax),%eax
f0105820:	89 02                	mov    %eax,(%edx)
f0105822:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105825:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010582c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010582f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105836:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f010583b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010583e:	c1 e2 04             	shl    $0x4,%edx
f0105841:	01 d0                	add    %edx,%eax
f0105843:	8b 50 0c             	mov    0xc(%eax),%edx
f0105846:	4a                   	dec    %edx
f0105847:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010584a:	83 ec 0c             	sub    $0xc,%esp
f010584d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105850:	e8 3c 48 00 00       	call   f010a091 <env_free>
f0105855:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105858:	83 ec 0c             	sub    $0xc,%esp
f010585b:	68 ab 60 13 f0       	push   $0xf01360ab
f0105860:	e8 a9 b4 ff ff       	call   f0100d0e <cprintf>
f0105865:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0105868:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010586f:	eb 4b                	jmp    f01058bc <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105871:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105876:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105879:	c1 e2 04             	shl    $0x4,%edx
f010587c:	01 d0                	add    %edx,%eax
f010587e:	8b 40 08             	mov    0x8(%eax),%eax
f0105881:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105884:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0105889:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010588c:	c1 e2 04             	shl    $0x4,%edx
f010588f:	01 d0                	add    %edx,%eax
f0105891:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105895:	74 08                	je     f010589f <sched_kill_env+0x234>
f0105897:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010589a:	8b 52 44             	mov    0x44(%edx),%edx
f010589d:	eb 05                	jmp    f01058a4 <sched_kill_env+0x239>
f010589f:	ba 00 00 00 00       	mov    $0x0,%edx
f01058a4:	89 50 08             	mov    %edx,0x8(%eax)
f01058a7:	8b 40 08             	mov    0x8(%eax),%eax
f01058aa:	85 c0                	test   %eax,%eax
f01058ac:	0f 85 c2 fe ff ff    	jne    f0105774 <sched_kill_env+0x109>
f01058b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058b6:	0f 85 b8 fe ff ff    	jne    f0105774 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f01058bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058c0:	75 16                	jne    f01058d8 <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01058c2:	ff 45 ec             	incl   -0x14(%ebp)
f01058c5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01058ca:	0f b6 c0             	movzbl %al,%eax
f01058cd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058d0:	0f 8f 69 fe ff ff    	jg     f010573f <sched_kill_env+0xd4>
f01058d6:	eb 01                	jmp    f01058d9 <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058d8:	90                   	nop
		}
	}
	if (!found)
f01058d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058dd:	0f 85 a7 00 00 00    	jne    f010598a <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058ea:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f01058ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058f2:	eb 67                	jmp    f010595b <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058f7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058fa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058fd:	75 54                	jne    f0105953 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105902:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105908:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010590b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010590e:	83 ec 04             	sub    $0x4,%esp
f0105911:	52                   	push   %edx
f0105912:	50                   	push   %eax
f0105913:	68 80 61 13 f0       	push   $0xf0136180
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105920:	83 ec 0c             	sub    $0xc,%esp
f0105923:	ff 75 f4             	pushl  -0xc(%ebp)
f0105926:	e8 9e f2 ff ff       	call   f0104bc9 <sched_remove_exit>
f010592b:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010592e:	83 ec 0c             	sub    $0xc,%esp
f0105931:	ff 75 f4             	pushl  -0xc(%ebp)
f0105934:	e8 58 47 00 00       	call   f010a091 <env_free>
f0105939:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010593c:	83 ec 0c             	sub    $0xc,%esp
f010593f:	68 ab 60 13 f0       	push   $0xf01360ab
f0105944:	e8 c5 b3 ff ff       	call   f0100d0e <cprintf>
f0105949:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010594c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105953:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0105958:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010595b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010595f:	74 08                	je     f0105969 <sched_kill_env+0x2fe>
f0105961:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105964:	8b 40 44             	mov    0x44(%eax),%eax
f0105967:	eb 05                	jmp    f010596e <sched_kill_env+0x303>
f0105969:	b8 00 00 00 00       	mov    $0x0,%eax
f010596e:	a3 f8 06 86 f0       	mov    %eax,0xf08606f8
f0105973:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0105978:	85 c0                	test   %eax,%eax
f010597a:	0f 85 74 ff ff ff    	jne    f01058f4 <sched_kill_env+0x289>
f0105980:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105984:	0f 85 6a ff ff ff    	jne    f01058f4 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010598a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010598e:	0f 85 a0 00 00 00    	jne    f0105a34 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105994:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0105999:	8b 40 4c             	mov    0x4c(%eax),%eax
f010599c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010599f:	0f 85 8f 00 00 00    	jne    f0105a34 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f01059a5:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01059aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f01059ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b3:	83 f8 02             	cmp    $0x2,%eax
f01059b6:	74 19                	je     f01059d1 <sched_kill_env+0x366>
f01059b8:	68 a8 61 13 f0       	push   $0xf01361a8
f01059bd:	68 96 5e 13 f0       	push   $0xf0135e96
f01059c2:	68 6c 02 00 00       	push   $0x26c
f01059c7:	68 ab 5e 13 f0       	push   $0xf0135eab
f01059cc:	e8 34 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059d4:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059dd:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059e0:	83 ec 04             	sub    $0x4,%esp
f01059e3:	52                   	push   %edx
f01059e4:	50                   	push   %eax
f01059e5:	68 c8 61 13 f0       	push   $0xf01361c8
f01059ea:	e8 1f b3 ff ff       	call   f0100d0e <cprintf>
f01059ef:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059f2:	83 ec 0c             	sub    $0xc,%esp
f01059f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01059f8:	e8 94 46 00 00       	call   f010a091 <env_free>
f01059fd:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105a00:	83 ec 0c             	sub    $0xc,%esp
f0105a03:	68 ab 60 13 f0       	push   $0xf01360ab
f0105a08:	e8 01 b3 ff ff       	call   f0100d0e <cprintf>
f0105a0d:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105a10:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105a17:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f0105a1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a22:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105a25:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f0105a2c:	00 00 00 
			fos_scheduler();
f0105a2f:	e8 1e ed ff ff       	call   f0104752 <fos_scheduler>
		}
	}
}
f0105a34:	90                   	nop
f0105a35:	c9                   	leave  
f0105a36:	c3                   	ret    

f0105a37 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a37:	55                   	push   %ebp
f0105a38:	89 e5                	mov    %esp,%ebp
f0105a3a:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a3d:	83 ec 0c             	sub    $0xc,%esp
f0105a40:	6a 01                	push   $0x1
f0105a42:	e8 cc 88 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0105a47:	83 c4 10             	add    $0x10,%esp
f0105a4a:	85 c0                	test   %eax,%eax
f0105a4c:	74 05                	je     f0105a53 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a4e:	e8 05 00 00 00       	call   f0105a58 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a53:	e8 fa ec ff ff       	call   f0104752 <fos_scheduler>

f0105a58 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a58:	55                   	push   %ebp
f0105a59:	89 e5                	mov    %esp,%ebp
f0105a5b:	53                   	push   %ebx
f0105a5c:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a5f:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0105a64:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a6b:	0f 84 cc 01 00 00    	je     f0105c3d <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a78:	e9 cf 00 00 00       	jmp    f0105b4c <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a80:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a86:	89 d0                	mov    %edx,%eax
f0105a88:	01 c0                	add    %eax,%eax
f0105a8a:	01 d0                	add    %edx,%eax
f0105a8c:	c1 e0 03             	shl    $0x3,%eax
f0105a8f:	01 c8                	add    %ecx,%eax
f0105a91:	8a 40 04             	mov    0x4(%eax),%al
f0105a94:	3c 01                	cmp    $0x1,%al
f0105a96:	0f 84 ad 00 00 00    	je     f0105b49 <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a9f:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aa5:	89 d0                	mov    %edx,%eax
f0105aa7:	01 c0                	add    %eax,%eax
f0105aa9:	01 d0                	add    %edx,%eax
f0105aab:	c1 e0 03             	shl    $0x3,%eax
f0105aae:	01 c8                	add    %ecx,%eax
f0105ab0:	8b 00                	mov    (%eax),%eax
f0105ab2:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105ab5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ab8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105abb:	83 ec 08             	sub    $0x8,%esp
f0105abe:	ff 75 e8             	pushl  -0x18(%ebp)
f0105ac1:	50                   	push   %eax
f0105ac2:	e8 11 23 00 00       	call   f0107dd8 <pt_get_page_permissions>
f0105ac7:	83 c4 10             	add    $0x10,%esp
f0105aca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105acd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ad0:	8b 48 78             	mov    0x78(%eax),%ecx
f0105ad3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ad6:	89 d0                	mov    %edx,%eax
f0105ad8:	01 c0                	add    %eax,%eax
f0105ada:	01 d0                	add    %edx,%eax
f0105adc:	c1 e0 03             	shl    $0x3,%eax
f0105adf:	01 c8                	add    %ecx,%eax
f0105ae1:	8b 40 08             	mov    0x8(%eax),%eax
f0105ae4:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105ae7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105aea:	83 e0 20             	and    $0x20,%eax
f0105aed:	85 c0                	test   %eax,%eax
f0105aef:	74 3b                	je     f0105b2c <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105af1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105af4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105af7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105afa:	89 d0                	mov    %edx,%eax
f0105afc:	01 c0                	add    %eax,%eax
f0105afe:	01 d0                	add    %edx,%eax
f0105b00:	c1 e0 03             	shl    $0x3,%eax
f0105b03:	01 c8                	add    %ecx,%eax
f0105b05:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b08:	c1 ea 02             	shr    $0x2,%edx
f0105b0b:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105b11:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105b14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b17:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b1a:	6a 20                	push   $0x20
f0105b1c:	6a 00                	push   $0x0
f0105b1e:	ff 75 e8             	pushl  -0x18(%ebp)
f0105b21:	50                   	push   %eax
f0105b22:	e8 fc 21 00 00       	call   f0107d23 <pt_set_page_permissions>
f0105b27:	83 c4 10             	add    $0x10,%esp
f0105b2a:	eb 1d                	jmp    f0105b49 <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b2f:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b35:	89 d0                	mov    %edx,%eax
f0105b37:	01 c0                	add    %eax,%eax
f0105b39:	01 d0                	add    %edx,%eax
f0105b3b:	c1 e0 03             	shl    $0x3,%eax
f0105b3e:	01 c8                	add    %ecx,%eax
f0105b40:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b43:	c1 ea 02             	shr    $0x2,%edx
f0105b46:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b49:	ff 45 f4             	incl   -0xc(%ebp)
f0105b4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b4f:	8b 50 74             	mov    0x74(%eax),%edx
f0105b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b55:	39 c2                	cmp    %eax,%edx
f0105b57:	0f 87 20 ff ff ff    	ja     f0105a7d <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b5d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b64:	e9 ca 00 00 00       	jmp    f0105c33 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b69:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b6f:	89 d0                	mov    %edx,%eax
f0105b71:	01 c0                	add    %eax,%eax
f0105b73:	01 d0                	add    %edx,%eax
f0105b75:	c1 e0 03             	shl    $0x3,%eax
f0105b78:	01 c8                	add    %ecx,%eax
f0105b7a:	83 e8 80             	sub    $0xffffff80,%eax
f0105b7d:	8a 00                	mov    (%eax),%al
f0105b7f:	3c 01                	cmp    $0x1,%al
f0105b81:	0f 84 a9 00 00 00    	je     f0105c30 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b87:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b8d:	89 d0                	mov    %edx,%eax
f0105b8f:	01 c0                	add    %eax,%eax
f0105b91:	01 d0                	add    %edx,%eax
f0105b93:	c1 e0 03             	shl    $0x3,%eax
f0105b96:	01 c8                	add    %ecx,%eax
f0105b98:	83 c0 7c             	add    $0x7c,%eax
f0105b9b:	8b 00                	mov    (%eax),%eax
f0105b9d:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105ba0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105ba3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ba6:	89 d0                	mov    %edx,%eax
f0105ba8:	01 c0                	add    %eax,%eax
f0105baa:	01 d0                	add    %edx,%eax
f0105bac:	c1 e0 03             	shl    $0x3,%eax
f0105baf:	01 c8                	add    %ecx,%eax
f0105bb1:	05 84 00 00 00       	add    $0x84,%eax
f0105bb6:	8b 00                	mov    (%eax),%eax
f0105bb8:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105bbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bbe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bc1:	83 ec 08             	sub    $0x8,%esp
f0105bc4:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bc7:	50                   	push   %eax
f0105bc8:	e8 23 23 00 00       	call   f0107ef0 <pd_is_table_used>
f0105bcd:	83 c4 10             	add    $0x10,%esp
f0105bd0:	85 c0                	test   %eax,%eax
f0105bd2:	74 3c                	je     f0105c10 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105bd4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bd7:	c1 e8 02             	shr    $0x2,%eax
f0105bda:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bdf:	89 c1                	mov    %eax,%ecx
f0105be1:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105be4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105be7:	89 d0                	mov    %edx,%eax
f0105be9:	01 c0                	add    %eax,%eax
f0105beb:	01 d0                	add    %edx,%eax
f0105bed:	c1 e0 03             	shl    $0x3,%eax
f0105bf0:	01 d8                	add    %ebx,%eax
f0105bf2:	05 84 00 00 00       	add    $0x84,%eax
f0105bf7:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bfc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bff:	83 ec 08             	sub    $0x8,%esp
f0105c02:	ff 75 dc             	pushl  -0x24(%ebp)
f0105c05:	50                   	push   %eax
f0105c06:	e8 09 23 00 00       	call   f0107f14 <pd_set_table_unused>
f0105c0b:	83 c4 10             	add    $0x10,%esp
f0105c0e:	eb 20                	jmp    f0105c30 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105c10:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105c13:	c1 e8 02             	shr    $0x2,%eax
f0105c16:	89 c1                	mov    %eax,%ecx
f0105c18:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105c1b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c1e:	89 d0                	mov    %edx,%eax
f0105c20:	01 c0                	add    %eax,%eax
f0105c22:	01 d0                	add    %edx,%eax
f0105c24:	c1 e0 03             	shl    $0x3,%eax
f0105c27:	01 d8                	add    %ebx,%eax
f0105c29:	05 84 00 00 00       	add    $0x84,%eax
f0105c2e:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c30:	ff 45 f0             	incl   -0x10(%ebp)
f0105c33:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c37:	0f 8e 2c ff ff ff    	jle    f0105b69 <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c3d:	90                   	nop
f0105c3e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c41:	c9                   	leave  
f0105c42:	c3                   	ret    

f0105c43 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c43:	55                   	push   %ebp
f0105c44:	89 e5                	mov    %esp,%ebp
f0105c46:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c49:	c7 05 ec fd 85 f0 01 	movl   $0x1,0xf085fdec
f0105c50:	00 00 00 
f0105c53:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c5a:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c5e:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c64:	ee                   	out    %al,(%dx)
f0105c65:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c6c:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c70:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c73:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c76:	ee                   	out    %al,(%dx)
f0105c77:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c7e:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c82:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c85:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c88:	ee                   	out    %al,(%dx)
f0105c89:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c90:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c94:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c97:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c9a:	ee                   	out    %al,(%dx)
f0105c9b:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105ca2:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105ca6:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105ca9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105cac:	ee                   	out    %al,(%dx)
f0105cad:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105cb4:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105cb8:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105cbb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105cbe:	ee                   	out    %al,(%dx)
f0105cbf:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105cc6:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105cca:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ccd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105cd0:	ee                   	out    %al,(%dx)
f0105cd1:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cd8:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cdc:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cdf:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105ce2:	ee                   	out    %al,(%dx)
f0105ce3:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cea:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cee:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cf1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cf4:	ee                   	out    %al,(%dx)
f0105cf5:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cfc:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105d00:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105d03:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105d06:	ee                   	out    %al,(%dx)
f0105d07:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105d0e:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105d12:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105d15:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105d18:	ee                   	out    %al,(%dx)
f0105d19:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105d20:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105d24:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105d27:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105d2a:	ee                   	out    %al,(%dx)
f0105d2b:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d32:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d36:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d39:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d3c:	ee                   	out    %al,(%dx)
f0105d3d:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d44:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d48:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d4b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d4e:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d4f:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d55:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d59:	74 15                	je     f0105d70 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d5b:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d61:	0f b7 c0             	movzwl %ax,%eax
f0105d64:	83 ec 0c             	sub    $0xc,%esp
f0105d67:	50                   	push   %eax
f0105d68:	e8 06 00 00 00       	call   f0105d73 <irq_setmask_8259A>
f0105d6d:	83 c4 10             	add    $0x10,%esp
}
f0105d70:	90                   	nop
f0105d71:	c9                   	leave  
f0105d72:	c3                   	ret    

f0105d73 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d73:	55                   	push   %ebp
f0105d74:	89 e5                	mov    %esp,%ebp
f0105d76:	83 ec 14             	sub    $0x14,%esp
f0105d79:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d7c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d83:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d89:	a1 ec fd 85 f0       	mov    0xf085fdec,%eax
f0105d8e:	85 c0                	test   %eax,%eax
f0105d90:	74 34                	je     f0105dc6 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d95:	0f b6 c0             	movzbl %al,%eax
f0105d98:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d9f:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105da2:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105da5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105da8:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105dac:	66 c1 e8 08          	shr    $0x8,%ax
f0105db0:	0f b6 c0             	movzbl %al,%eax
f0105db3:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105dba:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105dbd:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105dc0:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105dc3:	ee                   	out    %al,(%dx)
f0105dc4:	eb 01                	jmp    f0105dc7 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105dc6:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105dc7:	c9                   	leave  
f0105dc8:	c3                   	ret    

f0105dc9 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105dc9:	55                   	push   %ebp
f0105dca:	89 e5                	mov    %esp,%ebp
f0105dcc:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105dcf:	83 ec 08             	sub    $0x8,%esp
f0105dd2:	68 00 10 00 00       	push   $0x1000
f0105dd7:	68 00 10 00 00       	push   $0x1000
f0105ddc:	e8 6a 02 00 00       	call   f010604b <boot_allocate_space>
f0105de1:	83 c4 10             	add    $0x10,%esp
f0105de4:	a3 78 07 86 f0       	mov    %eax,0xf0860778
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105de9:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0105dee:	83 ec 04             	sub    $0x4,%esp
f0105df1:	68 00 10 00 00       	push   $0x1000
f0105df6:	6a 00                	push   $0x0
f0105df8:	50                   	push   %eax
f0105df9:	e8 e0 bd 02 00       	call   f0131bde <memset>
f0105dfe:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105e01:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0105e06:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105e09:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105e10:	77 14                	ja     f0105e26 <initialize_kernel_VM+0x5d>
f0105e12:	ff 75 e8             	pushl  -0x18(%ebp)
f0105e15:	68 f4 61 13 f0       	push   $0xf01361f4
f0105e1a:	6a 45                	push   $0x45
f0105e1c:	68 28 62 13 f0       	push   $0xf0136228
f0105e21:	e8 df a3 ff ff       	call   f0100205 <_panic>
f0105e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105e29:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e2e:	a3 a8 07 86 f0       	mov    %eax,0xf08607a8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e33:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105e3a:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e41:	77 14                	ja     f0105e57 <initialize_kernel_VM+0x8e>
f0105e43:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e46:	68 f4 61 13 f0       	push   $0xf01361f4
f0105e4b:	6a 4d                	push   $0x4d
f0105e4d:	68 28 62 13 f0       	push   $0xf0136228
f0105e52:	e8 ae a3 ff ff       	call   f0100205 <_panic>
f0105e57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e5a:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e60:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0105e65:	83 ec 0c             	sub    $0xc,%esp
f0105e68:	6a 02                	push   $0x2
f0105e6a:	52                   	push   %edx
f0105e6b:	68 00 80 00 00       	push   $0x8000
f0105e70:	68 00 80 bf ef       	push   $0xefbf8000
f0105e75:	50                   	push   %eax
f0105e76:	e8 31 02 00 00       	call   f01060ac <boot_map_range>
f0105e7b:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e7e:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e85:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e8c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e93:	eb 25                	jmp    f0105eba <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e95:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e98:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e9b:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0105ea0:	83 ec 04             	sub    $0x4,%esp
f0105ea3:	6a 01                	push   $0x1
f0105ea5:	52                   	push   %edx
f0105ea6:	50                   	push   %eax
f0105ea7:	e8 74 02 00 00       	call   f0106120 <boot_get_page_table>
f0105eac:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105eaf:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105eb6:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105eba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ebe:	72 d5                	jb     f0105e95 <initialize_kernel_VM+0xcc>
f0105ec0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ec4:	77 06                	ja     f0105ecc <initialize_kernel_VM+0x103>
f0105ec6:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105eca:	76 c9                	jbe    f0105e95 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ecc:	8b 15 0c 07 86 f0    	mov    0xf086070c,%edx
f0105ed2:	89 d0                	mov    %edx,%eax
f0105ed4:	01 c0                	add    %eax,%eax
f0105ed6:	01 d0                	add    %edx,%eax
f0105ed8:	c1 e0 03             	shl    $0x3,%eax
f0105edb:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105ede:	83 ec 08             	sub    $0x8,%esp
f0105ee1:	68 00 10 00 00       	push   $0x1000
f0105ee6:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ee9:	e8 5d 01 00 00       	call   f010604b <boot_allocate_space>
f0105eee:	83 c4 10             	add    $0x10,%esp
f0105ef1:	a3 50 07 86 f0       	mov    %eax,0xf0860750
	memset(frames_info, 0, array_size);
f0105ef6:	a1 50 07 86 f0       	mov    0xf0860750,%eax
f0105efb:	83 ec 04             	sub    $0x4,%esp
f0105efe:	ff 75 e0             	pushl  -0x20(%ebp)
f0105f01:	6a 00                	push   $0x0
f0105f03:	50                   	push   %eax
f0105f04:	e8 d5 bc 02 00       	call   f0131bde <memset>
f0105f09:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105f0c:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105f13:	83 ec 08             	sub    $0x8,%esp
f0105f16:	68 00 10 00 00       	push   $0x1000
f0105f1b:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f1e:	e8 28 01 00 00       	call   f010604b <boot_allocate_space>
f0105f23:	83 c4 10             	add    $0x10,%esp
f0105f26:	a3 d8 06 86 f0       	mov    %eax,0xf08606d8
	memset(disk_frames_info , 0, disk_array_size);
f0105f2b:	a1 d8 06 86 f0       	mov    0xf08606d8,%eax
f0105f30:	83 ec 04             	sub    $0x4,%esp
f0105f33:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f36:	6a 00                	push   $0x0
f0105f38:	50                   	push   %eax
f0105f39:	e8 a0 bc 02 00       	call   f0131bde <memset>
f0105f3e:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f41:	e8 d5 04 00 00       	call   f010641b <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f46:	83 ec 0c             	sub    $0xc,%esp
f0105f49:	68 b1 02 00 00       	push   $0x2b1
f0105f4e:	e8 0f a8 02 00       	call   f0130762 <nearest_pow2_ceil>
f0105f53:	83 c4 10             	add    $0x10,%esp
f0105f56:	83 ec 04             	sub    $0x4,%esp
f0105f59:	50                   	push   %eax
f0105f5a:	68 b1 02 00 00       	push   $0x2b1
f0105f5f:	68 48 62 13 f0       	push   $0xf0136248
f0105f64:	e8 a5 ad ff ff       	call   f0100d0e <cprintf>
f0105f69:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f6c:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f73:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f76:	83 ec 08             	sub    $0x8,%esp
f0105f79:	68 00 10 00 00       	push   $0x1000
f0105f7e:	50                   	push   %eax
f0105f7f:	e8 c7 00 00 00       	call   f010604b <boot_allocate_space>
f0105f84:	83 c4 10             	add    $0x10,%esp
f0105f87:	a3 f0 fd 85 f0       	mov    %eax,0xf085fdf0
	memset(envs , 0, envs_size);
f0105f8c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f8f:	a1 f0 fd 85 f0       	mov    0xf085fdf0,%eax
f0105f94:	83 ec 04             	sub    $0x4,%esp
f0105f97:	52                   	push   %edx
f0105f98:	6a 00                	push   $0x0
f0105f9a:	50                   	push   %eax
f0105f9b:	e8 3e bc 02 00       	call   f0131bde <memset>
f0105fa0:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105fa3:	a1 f0 fd 85 f0       	mov    0xf085fdf0,%eax
f0105fa8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105fab:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105fb2:	77 17                	ja     f0105fcb <initialize_kernel_VM+0x202>
f0105fb4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105fb7:	68 f4 61 13 f0       	push   $0xf01361f4
f0105fbc:	68 96 00 00 00       	push   $0x96
f0105fc1:	68 28 62 13 f0       	push   $0xf0136228
f0105fc6:	e8 3a a2 ff ff       	call   f0100205 <_panic>
f0105fcb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fce:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fd4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fd7:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0105fdc:	83 ec 0c             	sub    $0xc,%esp
f0105fdf:	6a 04                	push   $0x4
f0105fe1:	51                   	push   %ecx
f0105fe2:	52                   	push   %edx
f0105fe3:	68 00 00 c0 ee       	push   $0xeec00000
f0105fe8:	50                   	push   %eax
f0105fe9:	e8 be 00 00 00       	call   f01060ac <boot_map_range>
f0105fee:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105ff1:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0105ff6:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105ffb:	8b 15 78 07 86 f0    	mov    0xf0860778,%edx
f0106001:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0106007:	8b 12                	mov    (%edx),%edx
f0106009:	83 ca 05             	or     $0x5,%edx
f010600c:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010600e:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f0106013:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106019:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f010601e:	83 ec 0c             	sub    $0xc,%esp
f0106021:	6a 02                	push   $0x2
f0106023:	6a 00                	push   $0x0
f0106025:	52                   	push   %edx
f0106026:	68 00 00 00 f0       	push   $0xf0000000
f010602b:	50                   	push   %eax
f010602c:	e8 7b 00 00 00       	call   f01060ac <boot_map_range>
f0106031:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106034:	e8 10 af 02 00       	call   f0130f49 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106039:	c7 05 ec 06 86 f0 19 	movl   $0x19,0xf08606ec
f0106040:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106043:	e8 d3 02 00 00       	call   f010631b <turn_on_paging>
}
f0106048:	90                   	nop
f0106049:	c9                   	leave  
f010604a:	c3                   	ret    

f010604b <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010604b:	55                   	push   %ebp
f010604c:	89 e5                	mov    %esp,%ebp
f010604e:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106051:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f0106056:	85 c0                	test   %eax,%eax
f0106058:	75 0a                	jne    f0106064 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010605a:	c7 05 74 07 86 f0 bc 	movl   $0xf08608bc,0xf0860774
f0106061:	08 86 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106064:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106067:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010606a:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f010606f:	89 c2                	mov    %eax,%edx
f0106071:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	48                   	dec    %eax
f0106077:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010607a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010607d:	ba 00 00 00 00       	mov    $0x0,%edx
f0106082:	f7 75 fc             	divl   -0x4(%ebp)
f0106085:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106088:	29 d0                	sub    %edx,%eax
f010608a:	a3 74 07 86 f0       	mov    %eax,0xf0860774

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f010608f:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f0106094:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0106097:	8b 15 74 07 86 f0    	mov    0xf0860774,%edx
f010609d:	8b 45 08             	mov    0x8(%ebp),%eax
f01060a0:	01 d0                	add    %edx,%eax
f01060a2:	a3 74 07 86 f0       	mov    %eax,0xf0860774

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01060a7:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f01060aa:	c9                   	leave  
f01060ab:	c3                   	ret    

f01060ac <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01060ac:	55                   	push   %ebp
f01060ad:	89 e5                	mov    %esp,%ebp
f01060af:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01060b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01060c0:	eb 53                	jmp    f0106115 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01060c2:	83 ec 04             	sub    $0x4,%esp
f01060c5:	6a 01                	push   $0x1
f01060c7:	ff 75 0c             	pushl  0xc(%ebp)
f01060ca:	ff 75 08             	pushl  0x8(%ebp)
f01060cd:	e8 4e 00 00 00       	call   f0106120 <boot_get_page_table>
f01060d2:	83 c4 10             	add    $0x10,%esp
f01060d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060db:	c1 e8 0c             	shr    $0xc,%eax
f01060de:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060f3:	01 c2                	add    %eax,%edx
f01060f5:	8b 45 18             	mov    0x18(%ebp),%eax
f01060f8:	0b 45 14             	or     0x14(%ebp),%eax
f01060fb:	83 c8 01             	or     $0x1,%eax
f01060fe:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106100:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106107:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010610e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106118:	3b 45 10             	cmp    0x10(%ebp),%eax
f010611b:	72 a5                	jb     f01060c2 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010611d:	90                   	nop
f010611e:	c9                   	leave  
f010611f:	c3                   	ret    

f0106120 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106120:	55                   	push   %ebp
f0106121:	89 e5                	mov    %esp,%ebp
f0106123:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106126:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106129:	c1 e8 16             	shr    $0x16,%eax
f010612c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010612f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106132:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106139:	8b 45 08             	mov    0x8(%ebp),%eax
f010613c:	01 d0                	add    %edx,%eax
f010613e:	8b 00                	mov    (%eax),%eax
f0106140:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106143:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106146:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010614b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010614e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106151:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106154:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106157:	c1 e8 0c             	shr    $0xc,%eax
f010615a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010615d:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0106162:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106165:	72 17                	jb     f010617e <boot_get_page_table+0x5e>
f0106167:	ff 75 e8             	pushl  -0x18(%ebp)
f010616a:	68 70 62 13 f0       	push   $0xf0136270
f010616f:	68 15 01 00 00       	push   $0x115
f0106174:	68 28 62 13 f0       	push   $0xf0136228
f0106179:	e8 87 a0 ff ff       	call   f0100205 <_panic>
f010617e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106181:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106186:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106189:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010618d:	75 72                	jne    f0106201 <boot_get_page_table+0xe1>
	{
		if (create)
f010618f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106193:	74 65                	je     f01061fa <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106195:	83 ec 08             	sub    $0x8,%esp
f0106198:	68 00 10 00 00       	push   $0x1000
f010619d:	68 00 10 00 00       	push   $0x1000
f01061a2:	e8 a4 fe ff ff       	call   f010604b <boot_allocate_space>
f01061a7:	83 c4 10             	add    $0x10,%esp
f01061aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01061ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01061b3:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01061ba:	77 17                	ja     f01061d3 <boot_get_page_table+0xb3>
f01061bc:	ff 75 dc             	pushl  -0x24(%ebp)
f01061bf:	68 f4 61 13 f0       	push   $0xf01361f4
f01061c4:	68 1b 01 00 00       	push   $0x11b
f01061c9:	68 28 62 13 f0       	push   $0xf0136228
f01061ce:	e8 32 a0 ff ff       	call   f0100205 <_panic>
f01061d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061d6:	05 00 00 00 10       	add    $0x10000000,%eax
f01061db:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01061eb:	01 d0                	add    %edx,%eax
f01061ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061f0:	83 ca 03             	or     $0x3,%edx
f01061f3:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061f8:	eb 0a                	jmp    f0106204 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01061ff:	eb 03                	jmp    f0106204 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106201:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106204:	c9                   	leave  
f0106205:	c3                   	ret    

f0106206 <nvram_read>:


int nvram_read(int r)
{
f0106206:	55                   	push   %ebp
f0106207:	89 e5                	mov    %esp,%ebp
f0106209:	53                   	push   %ebx
f010620a:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010620d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106210:	83 ec 0c             	sub    $0xc,%esp
f0106213:	50                   	push   %eax
f0106214:	e8 9b de ff ff       	call   f01040b4 <mc146818_read>
f0106219:	83 c4 10             	add    $0x10,%esp
f010621c:	89 c3                	mov    %eax,%ebx
f010621e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106221:	40                   	inc    %eax
f0106222:	83 ec 0c             	sub    $0xc,%esp
f0106225:	50                   	push   %eax
f0106226:	e8 89 de ff ff       	call   f01040b4 <mc146818_read>
f010622b:	83 c4 10             	add    $0x10,%esp
f010622e:	c1 e0 08             	shl    $0x8,%eax
f0106231:	09 d8                	or     %ebx,%eax
}
f0106233:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106236:	c9                   	leave  
f0106237:	c3                   	ret    

f0106238 <detect_memory>:

void detect_memory()
{
f0106238:	55                   	push   %ebp
f0106239:	89 e5                	mov    %esp,%ebp
f010623b:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f010623e:	83 ec 0c             	sub    $0xc,%esp
f0106241:	6a 15                	push   $0x15
f0106243:	e8 be ff ff ff       	call   f0106206 <nvram_read>
f0106248:	83 c4 10             	add    $0x10,%esp
f010624b:	c1 e0 0a             	shl    $0xa,%eax
f010624e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106251:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106254:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106259:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f010625c:	83 ec 0c             	sub    $0xc,%esp
f010625f:	6a 17                	push   $0x17
f0106261:	e8 a0 ff ff ff       	call   f0106206 <nvram_read>
f0106266:	83 c4 10             	add    $0x10,%esp
f0106269:	c1 e0 0a             	shl    $0xa,%eax
f010626c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010626f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106272:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106277:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010627a:	83 ec 0c             	sub    $0xc,%esp
f010627d:	6a 34                	push   $0x34
f010627f:	e8 82 ff ff ff       	call   f0106206 <nvram_read>
f0106284:	83 c4 10             	add    $0x10,%esp
f0106287:	c1 e0 10             	shl    $0x10,%eax
f010628a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010628d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106290:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106295:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106298:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010629c:	74 18                	je     f01062b6 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010629e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01062a1:	05 00 00 00 01       	add    $0x1000000,%eax
f01062a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01062a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ac:	2d 00 00 10 00       	sub    $0x100000,%eax
f01062b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01062b4:	eb 19                	jmp    f01062cf <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f01062b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01062ba:	74 0d                	je     f01062c9 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f01062bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062bf:	05 00 00 10 00       	add    $0x100000,%eax
f01062c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062c7:	eb 06                	jmp    f01062cf <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f01062c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062cf:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062d9:	c1 e8 0c             	shr    $0xc,%eax
f01062dc:	a3 0c 07 86 f0       	mov    %eax,0xf086070c

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062e4:	c1 e8 0a             	shr    $0xa,%eax
f01062e7:	83 ec 08             	sub    $0x8,%esp
f01062ea:	50                   	push   %eax
f01062eb:	68 a0 62 13 f0       	push   $0xf01362a0
f01062f0:	e8 19 aa ff ff       	call   f0100d0e <cprintf>
f01062f5:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062fb:	c1 e8 0a             	shr    $0xa,%eax
f01062fe:	89 c2                	mov    %eax,%edx
f0106300:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106303:	c1 e8 0a             	shr    $0xa,%eax
f0106306:	83 ec 04             	sub    $0x4,%esp
f0106309:	52                   	push   %edx
f010630a:	50                   	push   %eax
f010630b:	68 c1 62 13 f0       	push   $0xf01362c1
f0106310:	e8 f9 a9 ff ff       	call   f0100d0e <cprintf>
f0106315:	83 c4 10             	add    $0x10,%esp
}
f0106318:	90                   	nop
f0106319:	c9                   	leave  
f010631a:	c3                   	ret    

f010631b <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f010631b:	55                   	push   %ebp
f010631c:	89 e5                	mov    %esp,%ebp
f010631e:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106321:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106328:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010632f:	eb 24                	jmp    f0106355 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106331:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0106336:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106339:	c1 e2 02             	shl    $0x2,%edx
f010633c:	01 c2                	add    %eax,%edx
f010633e:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0106343:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106346:	c1 e1 02             	shl    $0x2,%ecx
f0106349:	01 c8                	add    %ecx,%eax
f010634b:	8b 00                	mov    (%eax),%eax
f010634d:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010634f:	ff 45 fc             	incl   -0x4(%ebp)
f0106352:	ff 45 f8             	incl   -0x8(%ebp)
f0106355:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f010635a:	c1 e8 16             	shr    $0x16,%eax
f010635d:	89 c2                	mov    %eax,%edx
f010635f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106362:	39 c2                	cmp    %eax,%edx
f0106364:	77 cb                	ja     f0106331 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106366:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f010636b:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010636e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106371:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106374:	0f 20 c0             	mov    %cr0,%eax
f0106377:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010637a:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010637d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106380:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106387:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010638b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010638e:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106391:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106394:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106397:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010639e:	b8 23 00 00 00       	mov    $0x23,%eax
f01063a3:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f01063a5:	b8 23 00 00 00       	mov    $0x23,%eax
f01063aa:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f01063ac:	b8 10 00 00 00       	mov    $0x10,%eax
f01063b1:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f01063b3:	b8 10 00 00 00       	mov    $0x10,%eax
f01063b8:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f01063ba:	b8 10 00 00 00       	mov    $0x10,%eax
f01063bf:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f01063c1:	ea c8 63 10 f0 08 00 	ljmp   $0x8,$0xf01063c8
	asm volatile("lldt %%ax" :: "a" (0));
f01063c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01063cd:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063d0:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063de:	eb 19                	jmp    f01063f9 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063e0:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01063e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063e8:	c1 e2 02             	shl    $0x2,%edx
f01063eb:	01 d0                	add    %edx,%eax
f01063ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063f3:	ff 45 f4             	incl   -0xc(%ebp)
f01063f6:	ff 45 f0             	incl   -0x10(%ebp)
f01063f9:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f01063fe:	c1 e8 16             	shr    $0x16,%eax
f0106401:	89 c2                	mov    %eax,%edx
f0106403:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106406:	39 c2                	cmp    %eax,%edx
f0106408:	77 d6                	ja     f01063e0 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f010640a:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f010640f:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106412:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106415:	0f 22 d8             	mov    %eax,%cr3
}
f0106418:	90                   	nop
f0106419:	c9                   	leave  
f010641a:	c3                   	ret    

f010641b <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f010641b:	55                   	push   %ebp
f010641c:	89 e5                	mov    %esp,%ebp
f010641e:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106421:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0106426:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106429:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106430:	77 17                	ja     f0106449 <setup_listing_to_all_page_tables_entries+0x2e>
f0106432:	ff 75 f4             	pushl  -0xc(%ebp)
f0106435:	68 f4 61 13 f0       	push   $0xf01361f4
f010643a:	68 ab 01 00 00       	push   $0x1ab
f010643f:	68 28 62 13 f0       	push   $0xf0136228
f0106444:	e8 bc 9d ff ff       	call   f0100205 <_panic>
f0106449:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010644c:	05 00 00 00 10       	add    $0x10000000,%eax
f0106451:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106454:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0106459:	05 fc 0e 00 00       	add    $0xefc,%eax
f010645e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106461:	83 ca 03             	or     $0x3,%edx
f0106464:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106466:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f010646b:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106471:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0106476:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106479:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106480:	77 17                	ja     f0106499 <setup_listing_to_all_page_tables_entries+0x7e>
f0106482:	ff 75 ec             	pushl  -0x14(%ebp)
f0106485:	68 f4 61 13 f0       	push   $0xf01361f4
f010648a:	68 b0 01 00 00       	push   $0x1b0
f010648f:	68 28 62 13 f0       	push   $0xf0136228
f0106494:	e8 6c 9d ff ff       	call   f0100205 <_panic>
f0106499:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649c:	05 00 00 00 10       	add    $0x10000000,%eax
f01064a1:	83 c8 05             	or     $0x5,%eax
f01064a4:	89 02                	mov    %eax,(%edx)

}
f01064a6:	90                   	nop
f01064a7:	c9                   	leave  
f01064a8:	c3                   	ret    

f01064a9 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01064a9:	55                   	push   %ebp
f01064aa:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01064ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01064af:	8b 15 50 07 86 f0    	mov    0xf0860750,%edx
f01064b5:	29 d0                	sub    %edx,%eax
f01064b7:	c1 f8 03             	sar    $0x3,%eax
f01064ba:	89 c2                	mov    %eax,%edx
f01064bc:	89 d0                	mov    %edx,%eax
f01064be:	c1 e0 02             	shl    $0x2,%eax
f01064c1:	01 d0                	add    %edx,%eax
f01064c3:	c1 e0 02             	shl    $0x2,%eax
f01064c6:	01 d0                	add    %edx,%eax
f01064c8:	c1 e0 02             	shl    $0x2,%eax
f01064cb:	01 d0                	add    %edx,%eax
f01064cd:	89 c1                	mov    %eax,%ecx
f01064cf:	c1 e1 08             	shl    $0x8,%ecx
f01064d2:	01 c8                	add    %ecx,%eax
f01064d4:	89 c1                	mov    %eax,%ecx
f01064d6:	c1 e1 10             	shl    $0x10,%ecx
f01064d9:	01 c8                	add    %ecx,%eax
f01064db:	01 c0                	add    %eax,%eax
f01064dd:	01 d0                	add    %edx,%eax
}
f01064df:	5d                   	pop    %ebp
f01064e0:	c3                   	ret    

f01064e1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064e1:	55                   	push   %ebp
f01064e2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064e4:	ff 75 08             	pushl  0x8(%ebp)
f01064e7:	e8 bd ff ff ff       	call   f01064a9 <to_frame_number>
f01064ec:	83 c4 04             	add    $0x4,%esp
f01064ef:	c1 e0 0c             	shl    $0xc,%eax
}
f01064f2:	c9                   	leave  
f01064f3:	c3                   	ret    

f01064f4 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064f4:	55                   	push   %ebp
f01064f5:	89 e5                	mov    %esp,%ebp
f01064f7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fd:	c1 e8 0c             	shr    $0xc,%eax
f0106500:	89 c2                	mov    %eax,%edx
f0106502:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0106507:	39 c2                	cmp    %eax,%edx
f0106509:	72 14                	jb     f010651f <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010650b:	83 ec 04             	sub    $0x4,%esp
f010650e:	68 e0 62 13 f0       	push   $0xf01362e0
f0106513:	6a 55                	push   $0x55
f0106515:	68 05 63 13 f0       	push   $0xf0136305
f010651a:	e8 e6 9c ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f010651f:	8b 15 50 07 86 f0    	mov    0xf0860750,%edx
f0106525:	8b 45 08             	mov    0x8(%ebp),%eax
f0106528:	c1 e8 0c             	shr    $0xc,%eax
f010652b:	89 c1                	mov    %eax,%ecx
f010652d:	89 c8                	mov    %ecx,%eax
f010652f:	01 c0                	add    %eax,%eax
f0106531:	01 c8                	add    %ecx,%eax
f0106533:	c1 e0 03             	shl    $0x3,%eax
f0106536:	01 d0                	add    %edx,%eax
}
f0106538:	c9                   	leave  
f0106539:	c3                   	ret    

f010653a <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010653a:	55                   	push   %ebp
f010653b:	89 e5                	mov    %esp,%ebp
f010653d:	83 ec 10             	sub    $0x10,%esp
f0106540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106543:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106546:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106549:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f010654c:	90                   	nop
f010654d:	c9                   	leave  
f010654e:	c3                   	ret    

f010654f <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010654f:	55                   	push   %ebp
f0106550:	89 e5                	mov    %esp,%ebp
f0106552:	53                   	push   %ebx
f0106553:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106556:	c7 05 14 07 86 f0 00 	movl   $0x0,0xf0860714
f010655d:	00 00 00 
f0106560:	c7 05 18 07 86 f0 00 	movl   $0x0,0xf0860718
f0106567:	00 00 00 
f010656a:	c7 05 20 07 86 f0 00 	movl   $0x0,0xf0860720
f0106571:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106574:	c7 05 b4 06 86 f0 00 	movl   $0x0,0xf08606b4
f010657b:	00 00 00 
f010657e:	c7 05 b8 06 86 f0 00 	movl   $0x0,0xf08606b8
f0106585:	00 00 00 
f0106588:	c7 05 c0 06 86 f0 00 	movl   $0x0,0xf08606c0
f010658f:	00 00 00 

	frames_info[0].references = 1;
f0106592:	a1 50 07 86 f0       	mov    0xf0860750,%eax
f0106597:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010659d:	a1 50 07 86 f0       	mov    0xf0860750,%eax
f01065a2:	83 c0 18             	add    $0x18,%eax
f01065a5:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01065ab:	a1 50 07 86 f0       	mov    0xf0860750,%eax
f01065b0:	83 c0 30             	add    $0x30,%eax
f01065b3:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01065b9:	c7 05 5c 07 86 f0 00 	movl   $0xf0001000,0xf086075c
f01065c0:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01065c3:	c7 05 80 07 86 f0 00 	movl   $0xf0002000,0xf0860780
f01065ca:	20 00 f0 
	i =0;
f01065cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065d4:	eb 1f                	jmp    f01065f5 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065d6:	8b 15 5c 07 86 f0    	mov    0xf086075c,%edx
f01065dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065df:	01 d0                	add    %edx,%eax
f01065e1:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065e4:	8b 15 80 07 86 f0    	mov    0xf0860780,%edx
f01065ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065ed:	01 d0                	add    %edx,%eax
f01065ef:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065f2:	ff 45 f4             	incl   -0xc(%ebp)
f01065f5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065fc:	7e d8                	jle    f01065d6 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065fe:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106608:	05 ff ff 09 00       	add    $0x9ffff,%eax
f010660d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106610:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106613:	ba 00 00 00 00       	mov    $0x0,%edx
f0106618:	f7 75 f0             	divl   -0x10(%ebp)
f010661b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010661e:	29 d0                	sub    %edx,%eax
f0106620:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106623:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f010662a:	e9 e8 00 00 00       	jmp    f0106717 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f010662f:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f0106635:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106638:	89 d0                	mov    %edx,%eax
f010663a:	01 c0                	add    %eax,%eax
f010663c:	01 d0                	add    %edx,%eax
f010663e:	c1 e0 03             	shl    $0x3,%eax
f0106641:	01 c8                	add    %ecx,%eax
f0106643:	83 ec 0c             	sub    $0xc,%esp
f0106646:	50                   	push   %eax
f0106647:	e8 b7 02 00 00       	call   f0106903 <initialize_frame_info>
f010664c:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010664f:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	85 c0                	test   %eax,%eax
f0106665:	75 14                	jne    f010667b <initialize_paging+0x12c>
f0106667:	83 ec 04             	sub    $0x4,%esp
f010666a:	68 20 63 13 f0       	push   $0xf0136320
f010666f:	6a 5c                	push   $0x5c
f0106671:	68 43 63 13 f0       	push   $0xf0136343
f0106676:	e8 8a 9b ff ff       	call   f0100205 <_panic>
f010667b:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f0106681:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106684:	89 d0                	mov    %edx,%eax
f0106686:	01 c0                	add    %eax,%eax
f0106688:	01 d0                	add    %edx,%eax
f010668a:	c1 e0 03             	shl    $0x3,%eax
f010668d:	01 c8                	add    %ecx,%eax
f010668f:	8b 15 14 07 86 f0    	mov    0xf0860714,%edx
f0106695:	89 10                	mov    %edx,(%eax)
f0106697:	8b 00                	mov    (%eax),%eax
f0106699:	85 c0                	test   %eax,%eax
f010669b:	74 1f                	je     f01066bc <initialize_paging+0x16d>
f010669d:	8b 15 14 07 86 f0    	mov    0xf0860714,%edx
f01066a3:	8b 1d 50 07 86 f0    	mov    0xf0860750,%ebx
f01066a9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01066ac:	89 c8                	mov    %ecx,%eax
f01066ae:	01 c0                	add    %eax,%eax
f01066b0:	01 c8                	add    %ecx,%eax
f01066b2:	c1 e0 03             	shl    $0x3,%eax
f01066b5:	01 d8                	add    %ebx,%eax
f01066b7:	89 42 04             	mov    %eax,0x4(%edx)
f01066ba:	eb 19                	jmp    f01066d5 <initialize_paging+0x186>
f01066bc:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f01066c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066c5:	89 d0                	mov    %edx,%eax
f01066c7:	01 c0                	add    %eax,%eax
f01066c9:	01 d0                	add    %edx,%eax
f01066cb:	c1 e0 03             	shl    $0x3,%eax
f01066ce:	01 c8                	add    %ecx,%eax
f01066d0:	a3 18 07 86 f0       	mov    %eax,0xf0860718
f01066d5:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f01066db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066de:	89 d0                	mov    %edx,%eax
f01066e0:	01 c0                	add    %eax,%eax
f01066e2:	01 d0                	add    %edx,%eax
f01066e4:	c1 e0 03             	shl    $0x3,%eax
f01066e7:	01 c8                	add    %ecx,%eax
f01066e9:	a3 14 07 86 f0       	mov    %eax,0xf0860714
f01066ee:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f01066f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066f7:	89 d0                	mov    %edx,%eax
f01066f9:	01 c0                	add    %eax,%eax
f01066fb:	01 d0                	add    %edx,%eax
f01066fd:	c1 e0 03             	shl    $0x3,%eax
f0106700:	01 c8                	add    %ecx,%eax
f0106702:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106709:	a1 20 07 86 f0       	mov    0xf0860720,%eax
f010670e:	40                   	inc    %eax
f010670f:	a3 20 07 86 f0       	mov    %eax,0xf0860720
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106714:	ff 45 f4             	incl   -0xc(%ebp)
f0106717:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010671a:	85 c0                	test   %eax,%eax
f010671c:	79 05                	jns    f0106723 <initialize_paging+0x1d4>
f010671e:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106723:	c1 f8 0c             	sar    $0xc,%eax
f0106726:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106729:	0f 8f 00 ff ff ff    	jg     f010662f <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010672f:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106736:	eb 1d                	jmp    f0106755 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f0106738:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f010673e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106741:	89 d0                	mov    %edx,%eax
f0106743:	01 c0                	add    %eax,%eax
f0106745:	01 d0                	add    %edx,%eax
f0106747:	c1 e0 03             	shl    $0x3,%eax
f010674a:	01 c8                	add    %ecx,%eax
f010674c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106752:	ff 45 f4             	incl   -0xc(%ebp)
f0106755:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010675c:	7e da                	jle    f0106738 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f010675e:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106765:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f010676a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010676d:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106774:	77 14                	ja     f010678a <initialize_paging+0x23b>
f0106776:	ff 75 e0             	pushl  -0x20(%ebp)
f0106779:	68 60 63 13 f0       	push   $0xf0136360
f010677e:	6a 64                	push   $0x64
f0106780:	68 43 63 13 f0       	push   $0xf0136343
f0106785:	e8 7b 9a ff ff       	call   f0100205 <_panic>
f010678a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010678d:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106793:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106796:	01 d0                	add    %edx,%eax
f0106798:	48                   	dec    %eax
f0106799:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010679c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010679f:	ba 00 00 00 00       	mov    $0x0,%edx
f01067a4:	f7 75 e4             	divl   -0x1c(%ebp)
f01067a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01067aa:	29 d0                	sub    %edx,%eax
f01067ac:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067af:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f01067b6:	eb 1d                	jmp    f01067d5 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f01067b8:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f01067be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067c1:	89 d0                	mov    %edx,%eax
f01067c3:	01 c0                	add    %eax,%eax
f01067c5:	01 d0                	add    %edx,%eax
f01067c7:	c1 e0 03             	shl    $0x3,%eax
f01067ca:	01 c8                	add    %ecx,%eax
f01067cc:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067d2:	ff 45 f4             	incl   -0xc(%ebp)
f01067d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067d8:	85 c0                	test   %eax,%eax
f01067da:	79 05                	jns    f01067e1 <initialize_paging+0x292>
f01067dc:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067e1:	c1 f8 0c             	sar    $0xc,%eax
f01067e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067e7:	7f cf                	jg     f01067b8 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ec:	85 c0                	test   %eax,%eax
f01067ee:	79 05                	jns    f01067f5 <initialize_paging+0x2a6>
f01067f0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067f5:	c1 f8 0c             	sar    $0xc,%eax
f01067f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067fb:	e9 e8 00 00 00       	jmp    f01068e8 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f0106800:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f0106806:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106809:	89 d0                	mov    %edx,%eax
f010680b:	01 c0                	add    %eax,%eax
f010680d:	01 d0                	add    %edx,%eax
f010680f:	c1 e0 03             	shl    $0x3,%eax
f0106812:	01 c8                	add    %ecx,%eax
f0106814:	83 ec 0c             	sub    $0xc,%esp
f0106817:	50                   	push   %eax
f0106818:	e8 e6 00 00 00       	call   f0106903 <initialize_frame_info>
f010681d:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106820:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	85 c0                	test   %eax,%eax
f0106836:	75 14                	jne    f010684c <initialize_paging+0x2fd>
f0106838:	83 ec 04             	sub    $0x4,%esp
f010683b:	68 20 63 13 f0       	push   $0xf0136320
f0106840:	6a 70                	push   $0x70
f0106842:	68 43 63 13 f0       	push   $0xf0136343
f0106847:	e8 b9 99 ff ff       	call   f0100205 <_panic>
f010684c:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f0106852:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106855:	89 d0                	mov    %edx,%eax
f0106857:	01 c0                	add    %eax,%eax
f0106859:	01 d0                	add    %edx,%eax
f010685b:	c1 e0 03             	shl    $0x3,%eax
f010685e:	01 c8                	add    %ecx,%eax
f0106860:	8b 15 14 07 86 f0    	mov    0xf0860714,%edx
f0106866:	89 10                	mov    %edx,(%eax)
f0106868:	8b 00                	mov    (%eax),%eax
f010686a:	85 c0                	test   %eax,%eax
f010686c:	74 1f                	je     f010688d <initialize_paging+0x33e>
f010686e:	8b 15 14 07 86 f0    	mov    0xf0860714,%edx
f0106874:	8b 1d 50 07 86 f0    	mov    0xf0860750,%ebx
f010687a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010687d:	89 c8                	mov    %ecx,%eax
f010687f:	01 c0                	add    %eax,%eax
f0106881:	01 c8                	add    %ecx,%eax
f0106883:	c1 e0 03             	shl    $0x3,%eax
f0106886:	01 d8                	add    %ebx,%eax
f0106888:	89 42 04             	mov    %eax,0x4(%edx)
f010688b:	eb 19                	jmp    f01068a6 <initialize_paging+0x357>
f010688d:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f0106893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106896:	89 d0                	mov    %edx,%eax
f0106898:	01 c0                	add    %eax,%eax
f010689a:	01 d0                	add    %edx,%eax
f010689c:	c1 e0 03             	shl    $0x3,%eax
f010689f:	01 c8                	add    %ecx,%eax
f01068a1:	a3 18 07 86 f0       	mov    %eax,0xf0860718
f01068a6:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f01068ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068af:	89 d0                	mov    %edx,%eax
f01068b1:	01 c0                	add    %eax,%eax
f01068b3:	01 d0                	add    %edx,%eax
f01068b5:	c1 e0 03             	shl    $0x3,%eax
f01068b8:	01 c8                	add    %ecx,%eax
f01068ba:	a3 14 07 86 f0       	mov    %eax,0xf0860714
f01068bf:	8b 0d 50 07 86 f0    	mov    0xf0860750,%ecx
f01068c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068c8:	89 d0                	mov    %edx,%eax
f01068ca:	01 c0                	add    %eax,%eax
f01068cc:	01 d0                	add    %edx,%eax
f01068ce:	c1 e0 03             	shl    $0x3,%eax
f01068d1:	01 c8                	add    %ecx,%eax
f01068d3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068da:	a1 20 07 86 f0       	mov    0xf0860720,%eax
f01068df:	40                   	inc    %eax
f01068e0:	a3 20 07 86 f0       	mov    %eax,0xf0860720
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068e5:	ff 45 f4             	incl   -0xc(%ebp)
f01068e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068eb:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f01068f0:	39 c2                	cmp    %eax,%edx
f01068f2:	0f 82 08 ff ff ff    	jb     f0106800 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068f8:	e8 eb c8 ff ff       	call   f01031e8 <initialize_disk_page_file>
}
f01068fd:	90                   	nop
f01068fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106901:	c9                   	leave  
f0106902:	c3                   	ret    

f0106903 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106903:	55                   	push   %ebp
f0106904:	89 e5                	mov    %esp,%ebp
f0106906:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106909:	83 ec 04             	sub    $0x4,%esp
f010690c:	6a 18                	push   $0x18
f010690e:	6a 00                	push   $0x0
f0106910:	ff 75 08             	pushl  0x8(%ebp)
f0106913:	e8 c6 b2 02 00       	call   f0131bde <memset>
f0106918:	83 c4 10             	add    $0x10,%esp
}
f010691b:	90                   	nop
f010691c:	c9                   	leave  
f010691d:	c3                   	ret    

f010691e <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f010691e:	55                   	push   %ebp
f010691f:	89 e5                	mov    %esp,%ebp
f0106921:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106924:	8b 15 14 07 86 f0    	mov    0xf0860714,%edx
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010692f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106936:	8b 45 08             	mov    0x8(%ebp),%eax
f0106939:	8b 00                	mov    (%eax),%eax
f010693b:	85 c0                	test   %eax,%eax
f010693d:	75 17                	jne    f0106956 <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010693f:	83 ec 04             	sub    $0x4,%esp
f0106942:	68 94 63 13 f0       	push   $0xf0136394
f0106947:	68 99 00 00 00       	push   $0x99
f010694c:	68 43 63 13 f0       	push   $0xf0136343
f0106951:	e8 af 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106956:	8b 45 08             	mov    0x8(%ebp),%eax
f0106959:	8b 00                	mov    (%eax),%eax
f010695b:	85 c0                	test   %eax,%eax
f010695d:	75 17                	jne    f0106976 <allocate_frame+0x58>
f010695f:	83 ec 04             	sub    $0x4,%esp
f0106962:	68 e1 63 13 f0       	push   $0xf01363e1
f0106967:	68 9c 00 00 00       	push   $0x9c
f010696c:	68 43 63 13 f0       	push   $0xf0136343
f0106971:	e8 8f 98 ff ff       	call   f0100205 <_panic>
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 00                	mov    (%eax),%eax
f010697d:	85 c0                	test   %eax,%eax
f010697f:	74 14                	je     f0106995 <allocate_frame+0x77>
f0106981:	8b 45 08             	mov    0x8(%ebp),%eax
f0106984:	8b 00                	mov    (%eax),%eax
f0106986:	8b 00                	mov    (%eax),%eax
f0106988:	8b 55 08             	mov    0x8(%ebp),%edx
f010698b:	8b 12                	mov    (%edx),%edx
f010698d:	8b 52 04             	mov    0x4(%edx),%edx
f0106990:	89 50 04             	mov    %edx,0x4(%eax)
f0106993:	eb 0d                	jmp    f01069a2 <allocate_frame+0x84>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 40 04             	mov    0x4(%eax),%eax
f010699d:	a3 18 07 86 f0       	mov    %eax,0xf0860718
f01069a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a5:	8b 00                	mov    (%eax),%eax
f01069a7:	8b 40 04             	mov    0x4(%eax),%eax
f01069aa:	85 c0                	test   %eax,%eax
f01069ac:	74 13                	je     f01069c1 <allocate_frame+0xa3>
f01069ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b1:	8b 00                	mov    (%eax),%eax
f01069b3:	8b 40 04             	mov    0x4(%eax),%eax
f01069b6:	8b 55 08             	mov    0x8(%ebp),%edx
f01069b9:	8b 12                	mov    (%edx),%edx
f01069bb:	8b 12                	mov    (%edx),%edx
f01069bd:	89 10                	mov    %edx,(%eax)
f01069bf:	eb 0c                	jmp    f01069cd <allocate_frame+0xaf>
f01069c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c4:	8b 00                	mov    (%eax),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	a3 14 07 86 f0       	mov    %eax,0xf0860714
f01069cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d0:	8b 00                	mov    (%eax),%eax
f01069d2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01069db:	8b 00                	mov    (%eax),%eax
f01069dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069e4:	a1 20 07 86 f0       	mov    0xf0860720,%eax
f01069e9:	48                   	dec    %eax
f01069ea:	a3 20 07 86 f0       	mov    %eax,0xf0860720

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	8a 40 14             	mov    0x14(%eax),%al
f01069f7:	84 c0                	test   %al,%al
f01069f9:	74 20                	je     f0106a1b <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01069fe:	8b 00                	mov    (%eax),%eax
f0106a00:	8b 50 0c             	mov    0xc(%eax),%edx
f0106a03:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a06:	8b 00                	mov    (%eax),%eax
f0106a08:	8b 40 10             	mov    0x10(%eax),%eax
f0106a0b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106a0e:	83 ec 08             	sub    $0x8,%esp
f0106a11:	52                   	push   %edx
f0106a12:	50                   	push   %eax
f0106a13:	e8 15 14 00 00       	call   f0107e2d <pt_clear_page_table_entry>
f0106a18:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0106a1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a1e:	8b 00                	mov    (%eax),%eax
f0106a20:	83 ec 0c             	sub    $0xc,%esp
f0106a23:	50                   	push   %eax
f0106a24:	e8 da fe ff ff       	call   f0106903 <initialize_frame_info>
f0106a29:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a31:	c9                   	leave  
f0106a32:	c3                   	ret    

f0106a33 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a33:	55                   	push   %ebp
f0106a34:	89 e5                	mov    %esp,%ebp
f0106a36:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a39:	83 ec 0c             	sub    $0xc,%esp
f0106a3c:	ff 75 08             	pushl  0x8(%ebp)
f0106a3f:	e8 bf fe ff ff       	call   f0106903 <initialize_frame_info>
f0106a44:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a4b:	75 17                	jne    f0106a64 <free_frame+0x31>
f0106a4d:	83 ec 04             	sub    $0x4,%esp
f0106a50:	68 20 63 13 f0       	push   $0xf0136320
f0106a55:	68 b9 00 00 00       	push   $0xb9
f0106a5a:	68 43 63 13 f0       	push   $0xf0136343
f0106a5f:	e8 a1 97 ff ff       	call   f0100205 <_panic>
f0106a64:	8b 15 14 07 86 f0    	mov    0xf0860714,%edx
f0106a6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6d:	89 10                	mov    %edx,(%eax)
f0106a6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a72:	8b 00                	mov    (%eax),%eax
f0106a74:	85 c0                	test   %eax,%eax
f0106a76:	74 0d                	je     f0106a85 <free_frame+0x52>
f0106a78:	a1 14 07 86 f0       	mov    0xf0860714,%eax
f0106a7d:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a80:	89 50 04             	mov    %edx,0x4(%eax)
f0106a83:	eb 08                	jmp    f0106a8d <free_frame+0x5a>
f0106a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a88:	a3 18 07 86 f0       	mov    %eax,0xf0860718
f0106a8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a90:	a3 14 07 86 f0       	mov    %eax,0xf0860714
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a9f:	a1 20 07 86 f0       	mov    0xf0860720,%eax
f0106aa4:	40                   	inc    %eax
f0106aa5:	a3 20 07 86 f0       	mov    %eax,0xf0860720
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106aaa:	90                   	nop
f0106aab:	c9                   	leave  
f0106aac:	c3                   	ret    

f0106aad <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106aad:	55                   	push   %ebp
f0106aae:	89 e5                	mov    %esp,%ebp
f0106ab0:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106ab3:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ab6:	8b 40 08             	mov    0x8(%eax),%eax
f0106ab9:	48                   	dec    %eax
f0106aba:	8b 55 08             	mov    0x8(%ebp),%edx
f0106abd:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106ac1:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac4:	8b 40 08             	mov    0x8(%eax),%eax
f0106ac7:	66 85 c0             	test   %ax,%ax
f0106aca:	75 0e                	jne    f0106ada <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106acc:	83 ec 0c             	sub    $0xc,%esp
f0106acf:	ff 75 08             	pushl  0x8(%ebp)
f0106ad2:	e8 5c ff ff ff       	call   f0106a33 <free_frame>
f0106ad7:	83 c4 10             	add    $0x10,%esp
}
f0106ada:	90                   	nop
f0106adb:	c9                   	leave  
f0106adc:	c3                   	ret    

f0106add <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106add:	55                   	push   %ebp
f0106ade:	89 e5                	mov    %esp,%ebp
f0106ae0:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ae6:	c1 e8 16             	shr    $0x16,%eax
f0106ae9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106af0:	8b 45 08             	mov    0x8(%ebp),%eax
f0106af3:	01 d0                	add    %edx,%eax
f0106af5:	8b 00                	mov    (%eax),%eax
f0106af7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106afd:	83 e0 01             	and    $0x1,%eax
f0106b00:	85 c0                	test   %eax,%eax
f0106b02:	74 74                	je     f0106b78 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b04:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b0b:	77 1d                	ja     f0106b2a <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b10:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b15:	83 ec 0c             	sub    $0xc,%esp
f0106b18:	50                   	push   %eax
f0106b19:	e8 2f 11 00 00       	call   f0107c4d <kheap_virtual_address>
f0106b1e:	83 c4 10             	add    $0x10,%esp
f0106b21:	89 c2                	mov    %eax,%edx
f0106b23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b26:	89 10                	mov    %edx,(%eax)
f0106b28:	eb 44                	jmp    f0106b6e <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b2d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b32:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b38:	c1 e8 0c             	shr    $0xc,%eax
f0106b3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b3e:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0106b43:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b46:	72 17                	jb     f0106b5f <get_page_table+0x82>
f0106b48:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b4b:	68 00 64 13 f0       	push   $0xf0136400
f0106b50:	68 e2 00 00 00       	push   $0xe2
f0106b55:	68 43 63 13 f0       	push   $0xf0136343
f0106b5a:	e8 a6 96 ff ff       	call   f0100205 <_panic>
f0106b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b62:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b67:	89 c2                	mov    %eax,%edx
f0106b69:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b6c:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b73:	e9 b9 00 00 00       	jmp    f0106c31 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b7c:	0f 84 a1 00 00 00    	je     f0106c23 <get_page_table+0x146>
f0106b82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b85:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b88:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b8b:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b8e:	83 ec 0c             	sub    $0xc,%esp
f0106b91:	6a 00                	push   $0x0
f0106b93:	e8 e8 60 00 00       	call   f010cc80 <fault_handler>
f0106b98:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b9e:	c1 e8 16             	shr    $0x16,%eax
f0106ba1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ba8:	8b 45 08             	mov    0x8(%ebp),%eax
f0106bab:	01 d0                	add    %edx,%eax
f0106bad:	8b 00                	mov    (%eax),%eax
f0106baf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106bb2:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106bb9:	77 1d                	ja     f0106bd8 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bbe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bc3:	83 ec 0c             	sub    $0xc,%esp
f0106bc6:	50                   	push   %eax
f0106bc7:	e8 81 10 00 00       	call   f0107c4d <kheap_virtual_address>
f0106bcc:	83 c4 10             	add    $0x10,%esp
f0106bcf:	89 c2                	mov    %eax,%edx
f0106bd1:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bd4:	89 10                	mov    %edx,(%eax)
f0106bd6:	eb 44                	jmp    f0106c1c <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bdb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106be0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106be3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be6:	c1 e8 0c             	shr    $0xc,%eax
f0106be9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bec:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0106bf1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bf4:	72 17                	jb     f0106c0d <get_page_table+0x130>
f0106bf6:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bf9:	68 00 64 13 f0       	push   $0xf0136400
f0106bfe:	68 fa 00 00 00       	push   $0xfa
f0106c03:	68 43 63 13 f0       	push   $0xf0136343
f0106c08:	e8 f8 95 ff ff       	call   f0100205 <_panic>
f0106c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c10:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106c15:	89 c2                	mov    %eax,%edx
f0106c17:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c1a:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106c1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c21:	eb 0e                	jmp    f0106c31 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106c23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c2c:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c31:	c9                   	leave  
f0106c32:	c3                   	ret    

f0106c33 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c33:	55                   	push   %ebp
f0106c34:	89 e5                	mov    %esp,%ebp
f0106c36:	53                   	push   %ebx
f0106c37:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c3a:	83 ec 0c             	sub    $0xc,%esp
f0106c3d:	68 00 10 00 00       	push   $0x1000
f0106c42:	e8 1f 0e 00 00       	call   f0107a66 <kmalloc>
f0106c47:	83 c4 10             	add    $0x10,%esp
f0106c4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c51:	75 17                	jne    f0106c6a <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c53:	83 ec 04             	sub    $0x4,%esp
f0106c56:	68 2f 64 13 f0       	push   $0xf013642f
f0106c5b:	68 18 01 00 00       	push   $0x118
f0106c60:	68 43 63 13 f0       	push   $0xf0136343
f0106c65:	e8 9b 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c6d:	c1 e8 16             	shr    $0x16,%eax
f0106c70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c7a:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c80:	83 ec 0c             	sub    $0xc,%esp
f0106c83:	50                   	push   %eax
f0106c84:	e8 e3 0f 00 00       	call   f0107c6c <kheap_physical_address>
f0106c89:	83 c4 10             	add    $0x10,%esp
f0106c8c:	83 c8 07             	or     $0x7,%eax
f0106c8f:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c91:	83 ec 04             	sub    $0x4,%esp
f0106c94:	68 00 10 00 00       	push   $0x1000
f0106c99:	6a 00                	push   $0x0
f0106c9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c9e:	e8 3b af 02 00       	call   f0131bde <memset>
f0106ca3:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106ca6:	0f 20 d8             	mov    %cr3,%eax
f0106ca9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106cac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106caf:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106cb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106cb5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106cb8:	c9                   	leave  
f0106cb9:	c3                   	ret    

f0106cba <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106cba:	55                   	push   %ebp
f0106cbb:	89 e5                	mov    %esp,%ebp
f0106cbd:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106cc0:	83 ec 0c             	sub    $0xc,%esp
f0106cc3:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106cc6:	50                   	push   %eax
f0106cc7:	e8 52 fc ff ff       	call   f010691e <allocate_frame>
f0106ccc:	83 c4 10             	add    $0x10,%esp
f0106ccf:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106cd2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cd5:	83 ec 0c             	sub    $0xc,%esp
f0106cd8:	50                   	push   %eax
f0106cd9:	e8 03 f8 ff ff       	call   f01064e1 <to_physical_address>
f0106cde:	83 c4 10             	add    $0x10,%esp
f0106ce1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106ce4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ce7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ced:	c1 e8 0c             	shr    $0xc,%eax
f0106cf0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cf3:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0106cf8:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106cfb:	72 17                	jb     f0106d14 <__static_cpt+0x5a>
f0106cfd:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d00:	68 00 64 13 f0       	push   $0xf0136400
f0106d05:	68 30 01 00 00       	push   $0x130
f0106d0a:	68 43 63 13 f0       	push   $0xf0136343
f0106d0f:	e8 f1 94 ff ff       	call   f0100205 <_panic>
f0106d14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d17:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d1c:	89 c2                	mov    %eax,%edx
f0106d1e:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d21:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106d23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d26:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d2f:	c1 e8 16             	shr    $0x16,%eax
f0106d32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d3c:	01 d0                	add    %edx,%eax
f0106d3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d41:	83 ca 07             	or     $0x7,%edx
f0106d44:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d46:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d49:	8b 00                	mov    (%eax),%eax
f0106d4b:	83 ec 04             	sub    $0x4,%esp
f0106d4e:	68 00 10 00 00       	push   $0x1000
f0106d53:	6a 00                	push   $0x0
f0106d55:	50                   	push   %eax
f0106d56:	e8 83 ae 02 00       	call   f0131bde <memset>
f0106d5b:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d5e:	0f 20 d8             	mov    %cr3,%eax
f0106d61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d67:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d6a:	90                   	nop
f0106d6b:	c9                   	leave  
f0106d6c:	c3                   	ret    

f0106d6d <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d6d:	55                   	push   %ebp
f0106d6e:	89 e5                	mov    %esp,%ebp
f0106d70:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d73:	ff 75 0c             	pushl  0xc(%ebp)
f0106d76:	e8 66 f7 ff ff       	call   f01064e1 <to_physical_address>
f0106d7b:	83 c4 04             	add    $0x4,%esp
f0106d7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d81:	83 ec 04             	sub    $0x4,%esp
f0106d84:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d87:	50                   	push   %eax
f0106d88:	ff 75 10             	pushl  0x10(%ebp)
f0106d8b:	ff 75 08             	pushl  0x8(%ebp)
f0106d8e:	e8 4a fd ff ff       	call   f0106add <get_page_table>
f0106d93:	83 c4 10             	add    $0x10,%esp
f0106d96:	83 f8 01             	cmp    $0x1,%eax
f0106d99:	75 1b                	jne    f0106db6 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d9b:	83 ec 08             	sub    $0x8,%esp
f0106d9e:	ff 75 10             	pushl  0x10(%ebp)
f0106da1:	ff 75 08             	pushl  0x8(%ebp)
f0106da4:	e8 8a fe ff ff       	call   f0106c33 <create_page_table>
f0106da9:	83 c4 10             	add    $0x10,%esp
f0106dac:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106daf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106db6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106db9:	8b 55 10             	mov    0x10(%ebp),%edx
f0106dbc:	c1 ea 0c             	shr    $0xc,%edx
f0106dbf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106dc5:	c1 e2 02             	shl    $0x2,%edx
f0106dc8:	01 d0                	add    %edx,%eax
f0106dca:	8b 00                	mov    (%eax),%eax
f0106dcc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106dd2:	83 e0 01             	and    $0x1,%eax
f0106dd5:	85 c0                	test   %eax,%eax
f0106dd7:	74 25                	je     f0106dfe <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ddc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106de1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106de4:	75 07                	jne    f0106ded <map_frame+0x80>
			return 0;
f0106de6:	b8 00 00 00 00       	mov    $0x0,%eax
f0106deb:	eb 43                	jmp    f0106e30 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106ded:	83 ec 08             	sub    $0x8,%esp
f0106df0:	ff 75 10             	pushl  0x10(%ebp)
f0106df3:	ff 75 08             	pushl  0x8(%ebp)
f0106df6:	e8 a7 00 00 00       	call   f0106ea2 <unmap_frame>
f0106dfb:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e01:	8b 40 08             	mov    0x8(%eax),%eax
f0106e04:	40                   	inc    %eax
f0106e05:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106e08:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106e0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e0f:	8b 55 10             	mov    0x10(%ebp),%edx
f0106e12:	c1 ea 0c             	shr    $0xc,%edx
f0106e15:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106e1b:	c1 e2 02             	shl    $0x2,%edx
f0106e1e:	01 c2                	add    %eax,%edx
f0106e20:	8b 45 14             	mov    0x14(%ebp),%eax
f0106e23:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106e26:	83 c8 01             	or     $0x1,%eax
f0106e29:	89 02                	mov    %eax,(%edx)

	return 0;
f0106e2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e30:	c9                   	leave  
f0106e31:	c3                   	ret    

f0106e32 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e32:	55                   	push   %ebp
f0106e33:	89 e5                	mov    %esp,%ebp
f0106e35:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e38:	83 ec 04             	sub    $0x4,%esp
f0106e3b:	ff 75 10             	pushl  0x10(%ebp)
f0106e3e:	ff 75 0c             	pushl  0xc(%ebp)
f0106e41:	ff 75 08             	pushl  0x8(%ebp)
f0106e44:	e8 94 fc ff ff       	call   f0106add <get_page_table>
f0106e49:	83 c4 10             	add    $0x10,%esp
f0106e4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e4f:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e52:	8b 00                	mov    (%eax),%eax
f0106e54:	85 c0                	test   %eax,%eax
f0106e56:	74 43                	je     f0106e9b <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e5b:	c1 e8 0c             	shr    $0xc,%eax
f0106e5e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e63:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e66:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e69:	8b 00                	mov    (%eax),%eax
f0106e6b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e6e:	c1 e2 02             	shl    $0x2,%edx
f0106e71:	01 d0                	add    %edx,%eax
f0106e73:	8b 00                	mov    (%eax),%eax
f0106e75:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e7c:	74 16                	je     f0106e94 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e86:	83 ec 0c             	sub    $0xc,%esp
f0106e89:	50                   	push   %eax
f0106e8a:	e8 65 f6 ff ff       	call   f01064f4 <to_frame_info>
f0106e8f:	83 c4 10             	add    $0x10,%esp
f0106e92:	eb 0c                	jmp    f0106ea0 <get_frame_info+0x6e>
		}
		return 0;
f0106e94:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e99:	eb 05                	jmp    f0106ea0 <get_frame_info+0x6e>
	}
	return 0;
f0106e9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106ea0:	c9                   	leave  
f0106ea1:	c3                   	ret    

f0106ea2 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106ea2:	55                   	push   %ebp
f0106ea3:	89 e5                	mov    %esp,%ebp
f0106ea5:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106ea8:	83 ec 04             	sub    $0x4,%esp
f0106eab:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106eae:	50                   	push   %eax
f0106eaf:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb2:	ff 75 08             	pushl  0x8(%ebp)
f0106eb5:	e8 78 ff ff ff       	call   f0106e32 <get_frame_info>
f0106eba:	83 c4 10             	add    $0x10,%esp
f0106ebd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106ec0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106ec4:	74 60                	je     f0106f26 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ec9:	8a 40 14             	mov    0x14(%eax),%al
f0106ecc:	84 c0                	test   %al,%al
f0106ece:	74 1c                	je     f0106eec <unmap_frame+0x4a>
f0106ed0:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ed7:	77 13                	ja     f0106eec <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ed9:	83 ec 08             	sub    $0x8,%esp
f0106edc:	ff 75 0c             	pushl  0xc(%ebp)
f0106edf:	68 4c 64 13 f0       	push   $0xf013644c
f0106ee4:	e8 25 9e ff ff       	call   f0100d0e <cprintf>
f0106ee9:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106eec:	83 ec 0c             	sub    $0xc,%esp
f0106eef:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ef2:	e8 b6 fb ff ff       	call   f0106aad <decrement_references>
f0106ef7:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106efa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106efd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106f00:	c1 ea 0c             	shr    $0xc,%edx
f0106f03:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106f09:	c1 e2 02             	shl    $0x2,%edx
f0106f0c:	01 d0                	add    %edx,%eax
f0106f0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106f14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106f17:	83 ec 08             	sub    $0x8,%esp
f0106f1a:	50                   	push   %eax
f0106f1b:	ff 75 08             	pushl  0x8(%ebp)
f0106f1e:	e8 17 f6 ff ff       	call   f010653a <tlb_invalidate>
f0106f23:	83 c4 10             	add    $0x10,%esp
	}
}
f0106f26:	90                   	nop
f0106f27:	c9                   	leave  
f0106f28:	c3                   	ret    

f0106f29 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106f29:	55                   	push   %ebp
f0106f2a:	89 e5                	mov    %esp,%ebp
f0106f2c:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f2f:	ff 75 0c             	pushl  0xc(%ebp)
f0106f32:	e8 aa f5 ff ff       	call   f01064e1 <to_physical_address>
f0106f37:	83 c4 04             	add    $0x4,%esp
f0106f3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f40:	c1 e8 16             	shr    $0x16,%eax
f0106f43:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f4d:	01 d0                	add    %edx,%eax
f0106f4f:	8b 00                	mov    (%eax),%eax
f0106f51:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f54:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f5b:	77 19                	ja     f0106f76 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f65:	83 ec 0c             	sub    $0xc,%esp
f0106f68:	50                   	push   %eax
f0106f69:	e8 df 0c 00 00       	call   f0107c4d <kheap_virtual_address>
f0106f6e:	83 c4 10             	add    $0x10,%esp
f0106f71:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f74:	eb 40                	jmp    f0106fb6 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f81:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f84:	c1 e8 0c             	shr    $0xc,%eax
f0106f87:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f8a:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0106f8f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f92:	72 17                	jb     f0106fab <loadtime_map_frame+0x82>
f0106f94:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f97:	68 00 64 13 f0       	push   $0xf0136400
f0106f9c:	68 e6 01 00 00       	push   $0x1e6
f0106fa1:	68 43 63 13 f0       	push   $0xf0136343
f0106fa6:	e8 5a 92 ff ff       	call   f0100205 <_panic>
f0106fab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106fae:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106fb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106fb6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106fba:	75 14                	jne    f0106fd0 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106fbc:	83 ec 08             	sub    $0x8,%esp
f0106fbf:	ff 75 10             	pushl  0x10(%ebp)
f0106fc2:	ff 75 08             	pushl  0x8(%ebp)
f0106fc5:	e8 69 fc ff ff       	call   f0106c33 <create_page_table>
f0106fca:	83 c4 10             	add    $0x10,%esp
f0106fcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fd3:	8b 40 08             	mov    0x8(%eax),%eax
f0106fd6:	40                   	inc    %eax
f0106fd7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fda:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fde:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fe1:	c1 e8 0c             	shr    $0xc,%eax
f0106fe4:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fe9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ff3:	01 c2                	add    %eax,%edx
f0106ff5:	8b 45 14             	mov    0x14(%ebp),%eax
f0106ff8:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106ffb:	83 c8 01             	or     $0x1,%eax
f0106ffe:	89 02                	mov    %eax,(%edx)

	return 0;
f0107000:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107005:	c9                   	leave  
f0107006:	c3                   	ret    

f0107007 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107007:	55                   	push   %ebp
f0107008:	89 e5                	mov    %esp,%ebp
f010700a:	57                   	push   %edi
f010700b:	56                   	push   %esi
f010700c:	53                   	push   %ebx
f010700d:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0107010:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107017:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f010701e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0107025:	a1 14 07 86 f0       	mov    0xf0860714,%eax
f010702a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010702d:	eb 1a                	jmp    f0107049 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f010702f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107032:	8a 40 14             	mov    0x14(%eax),%al
f0107035:	84 c0                	test   %al,%al
f0107037:	74 05                	je     f010703e <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107039:	ff 45 e8             	incl   -0x18(%ebp)
f010703c:	eb 03                	jmp    f0107041 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f010703e:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107041:	a1 1c 07 86 f0       	mov    0xf086071c,%eax
f0107046:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107049:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010704d:	74 07                	je     f0107056 <calculate_available_frames+0x4f>
f010704f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107052:	8b 00                	mov    (%eax),%eax
f0107054:	eb 05                	jmp    f010705b <calculate_available_frames+0x54>
f0107056:	b8 00 00 00 00       	mov    $0x0,%eax
f010705b:	a3 1c 07 86 f0       	mov    %eax,0xf086071c
f0107060:	a1 1c 07 86 f0       	mov    0xf086071c,%eax
f0107065:	85 c0                	test   %eax,%eax
f0107067:	75 c6                	jne    f010702f <calculate_available_frames+0x28>
f0107069:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010706d:	75 c0                	jne    f010702f <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010706f:	a1 b4 06 86 f0       	mov    0xf08606b4,%eax
f0107074:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107077:	eb 0b                	jmp    f0107084 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0107079:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010707c:	a1 bc 06 86 f0       	mov    0xf08606bc,%eax
f0107081:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107084:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107088:	74 07                	je     f0107091 <calculate_available_frames+0x8a>
f010708a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010708d:	8b 00                	mov    (%eax),%eax
f010708f:	eb 05                	jmp    f0107096 <calculate_available_frames+0x8f>
f0107091:	b8 00 00 00 00       	mov    $0x0,%eax
f0107096:	a3 bc 06 86 f0       	mov    %eax,0xf08606bc
f010709b:	a1 bc 06 86 f0       	mov    0xf08606bc,%eax
f01070a0:	85 c0                	test   %eax,%eax
f01070a2:	75 d5                	jne    f0107079 <calculate_available_frames+0x72>
f01070a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01070a8:	75 cf                	jne    f0107079 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01070aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01070ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01070b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01070b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01070b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01070b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01070bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01070bf:	89 c3                	mov    %eax,%ebx
f01070c1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01070c4:	ba 03 00 00 00       	mov    $0x3,%edx
f01070c9:	89 df                	mov    %ebx,%edi
f01070cb:	89 c6                	mov    %eax,%esi
f01070cd:	89 d1                	mov    %edx,%ecx
f01070cf:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01070d4:	83 c4 20             	add    $0x20,%esp
f01070d7:	5b                   	pop    %ebx
f01070d8:	5e                   	pop    %esi
f01070d9:	5f                   	pop    %edi
f01070da:	5d                   	pop    %ebp
f01070db:	c2 04 00             	ret    $0x4

f01070de <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070de:	55                   	push   %ebp
f01070df:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01070e4:	8b 15 50 07 86 f0    	mov    0xf0860750,%edx
f01070ea:	29 d0                	sub    %edx,%eax
f01070ec:	c1 f8 03             	sar    $0x3,%eax
f01070ef:	89 c2                	mov    %eax,%edx
f01070f1:	89 d0                	mov    %edx,%eax
f01070f3:	c1 e0 02             	shl    $0x2,%eax
f01070f6:	01 d0                	add    %edx,%eax
f01070f8:	c1 e0 02             	shl    $0x2,%eax
f01070fb:	01 d0                	add    %edx,%eax
f01070fd:	c1 e0 02             	shl    $0x2,%eax
f0107100:	01 d0                	add    %edx,%eax
f0107102:	89 c1                	mov    %eax,%ecx
f0107104:	c1 e1 08             	shl    $0x8,%ecx
f0107107:	01 c8                	add    %ecx,%eax
f0107109:	89 c1                	mov    %eax,%ecx
f010710b:	c1 e1 10             	shl    $0x10,%ecx
f010710e:	01 c8                	add    %ecx,%eax
f0107110:	01 c0                	add    %eax,%eax
f0107112:	01 d0                	add    %edx,%eax
}
f0107114:	5d                   	pop    %ebp
f0107115:	c3                   	ret    

f0107116 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107116:	55                   	push   %ebp
f0107117:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107119:	ff 75 08             	pushl  0x8(%ebp)
f010711c:	e8 bd ff ff ff       	call   f01070de <to_frame_number>
f0107121:	83 c4 04             	add    $0x4,%esp
f0107124:	c1 e0 0c             	shl    $0xc,%eax
}
f0107127:	c9                   	leave  
f0107128:	c3                   	ret    

f0107129 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107129:	55                   	push   %ebp
f010712a:	89 e5                	mov    %esp,%ebp
f010712c:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f010712f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107132:	a3 24 07 86 f0       	mov    %eax,0xf0860724
	shares = kmalloc(numOfElements*sizeof(struct Share));
f0107137:	8b 55 08             	mov    0x8(%ebp),%edx
f010713a:	89 d0                	mov    %edx,%eax
f010713c:	c1 e0 02             	shl    $0x2,%eax
f010713f:	01 d0                	add    %edx,%eax
f0107141:	c1 e0 02             	shl    $0x2,%eax
f0107144:	01 d0                	add    %edx,%eax
f0107146:	c1 e0 02             	shl    $0x2,%eax
f0107149:	83 ec 0c             	sub    $0xc,%esp
f010714c:	50                   	push   %eax
f010714d:	e8 14 09 00 00       	call   f0107a66 <kmalloc>
f0107152:	83 c4 10             	add    $0x10,%esp
f0107155:	a3 e8 06 86 f0       	mov    %eax,0xf08606e8
	if (shares == NULL)
f010715a:	a1 e8 06 86 f0       	mov    0xf08606e8,%eax
f010715f:	85 c0                	test   %eax,%eax
f0107161:	75 14                	jne    f0107177 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107163:	83 ec 04             	sub    $0x4,%esp
f0107166:	68 70 64 13 f0       	push   $0xf0136470
f010716b:	6a 21                	push   $0x21
f010716d:	68 b4 64 13 f0       	push   $0xf01364b4
f0107172:	e8 8e 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107177:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010717e:	eb 4b                	jmp    f01071cb <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107180:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f0107186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107189:	89 d0                	mov    %edx,%eax
f010718b:	c1 e0 02             	shl    $0x2,%eax
f010718e:	01 d0                	add    %edx,%eax
f0107190:	c1 e0 02             	shl    $0x2,%eax
f0107193:	01 d0                	add    %edx,%eax
f0107195:	c1 e0 02             	shl    $0x2,%eax
f0107198:	01 c8                	add    %ecx,%eax
f010719a:	83 ec 04             	sub    $0x4,%esp
f010719d:	6a 54                	push   $0x54
f010719f:	6a 00                	push   $0x0
f01071a1:	50                   	push   %eax
f01071a2:	e8 37 aa 02 00       	call   f0131bde <memset>
f01071a7:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f01071aa:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01071b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071b3:	89 d0                	mov    %edx,%eax
f01071b5:	c1 e0 02             	shl    $0x2,%eax
f01071b8:	01 d0                	add    %edx,%eax
f01071ba:	c1 e0 02             	shl    $0x2,%eax
f01071bd:	01 d0                	add    %edx,%eax
f01071bf:	c1 e0 02             	shl    $0x2,%eax
f01071c2:	01 c8                	add    %ecx,%eax
f01071c4:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01071c8:	ff 45 f4             	incl   -0xc(%ebp)
f01071cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071ce:	a1 24 07 86 f0       	mov    0xf0860724,%eax
f01071d3:	39 c2                	cmp    %eax,%edx
f01071d5:	72 a9                	jb     f0107180 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071d7:	90                   	nop
f01071d8:	c9                   	leave  
f01071d9:	c3                   	ret    

f01071da <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071da:	55                   	push   %ebp
f01071db:	89 e5                	mov    %esp,%ebp
f01071dd:	53                   	push   %ebx
f01071de:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071e1:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071ef:	eb 2c                	jmp    f010721d <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071f1:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01071f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071fa:	89 d0                	mov    %edx,%eax
f01071fc:	c1 e0 02             	shl    $0x2,%eax
f01071ff:	01 d0                	add    %edx,%eax
f0107201:	c1 e0 02             	shl    $0x2,%eax
f0107204:	01 d0                	add    %edx,%eax
f0107206:	c1 e0 02             	shl    $0x2,%eax
f0107209:	01 c8                	add    %ecx,%eax
f010720b:	8a 40 4d             	mov    0x4d(%eax),%al
f010720e:	84 c0                	test   %al,%al
f0107210:	74 08                	je     f010721a <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f0107212:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107215:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107218:	eb 0f                	jmp    f0107229 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f010721a:	ff 45 f0             	incl   -0x10(%ebp)
f010721d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107220:	a1 24 07 86 f0       	mov    0xf0860724,%eax
f0107225:	39 c2                	cmp    %eax,%edx
f0107227:	72 c8                	jb     f01071f1 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107229:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010722d:	75 0a                	jne    f0107239 <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f010722f:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107234:	e9 94 00 00 00       	jmp    f01072cd <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107239:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f010723f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107242:	89 d0                	mov    %edx,%eax
f0107244:	c1 e0 02             	shl    $0x2,%eax
f0107247:	01 d0                	add    %edx,%eax
f0107249:	c1 e0 02             	shl    $0x2,%eax
f010724c:	01 d0                	add    %edx,%eax
f010724e:	c1 e0 02             	shl    $0x2,%eax
f0107251:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107254:	8b 45 08             	mov    0x8(%ebp),%eax
f0107257:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107259:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f010725f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107262:	89 d0                	mov    %edx,%eax
f0107264:	c1 e0 02             	shl    $0x2,%eax
f0107267:	01 d0                	add    %edx,%eax
f0107269:	c1 e0 02             	shl    $0x2,%eax
f010726c:	01 d0                	add    %edx,%eax
f010726e:	c1 e0 02             	shl    $0x2,%eax
f0107271:	01 c8                	add    %ecx,%eax
f0107273:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f0107277:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f010727d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107280:	89 d0                	mov    %edx,%eax
f0107282:	c1 e0 02             	shl    $0x2,%eax
f0107285:	01 d0                	add    %edx,%eax
f0107287:	c1 e0 02             	shl    $0x2,%eax
f010728a:	01 d0                	add    %edx,%eax
f010728c:	c1 e0 02             	shl    $0x2,%eax
f010728f:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107292:	e8 97 01 00 00       	call   f010742e <create_frames_storage>
f0107297:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010729a:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01072a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a3:	89 d0                	mov    %edx,%eax
f01072a5:	c1 e0 02             	shl    $0x2,%eax
f01072a8:	01 d0                	add    %edx,%eax
f01072aa:	c1 e0 02             	shl    $0x2,%eax
f01072ad:	01 d0                	add    %edx,%eax
f01072af:	c1 e0 02             	shl    $0x2,%eax
f01072b2:	01 c8                	add    %ecx,%eax
f01072b4:	8b 40 50             	mov    0x50(%eax),%eax
f01072b7:	83 ec 04             	sub    $0x4,%esp
f01072ba:	68 00 10 00 00       	push   $0x1000
f01072bf:	6a 00                	push   $0x0
f01072c1:	50                   	push   %eax
f01072c2:	e8 17 a9 02 00       	call   f0131bde <memset>
f01072c7:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f01072ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072d0:	c9                   	leave  
f01072d1:	c3                   	ret    

f01072d2 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072d2:	55                   	push   %ebp
f01072d3:	89 e5                	mov    %esp,%ebp
f01072d5:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072df:	eb 7b                	jmp    f010735c <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072e1:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01072e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072ea:	89 d0                	mov    %edx,%eax
f01072ec:	c1 e0 02             	shl    $0x2,%eax
f01072ef:	01 d0                	add    %edx,%eax
f01072f1:	c1 e0 02             	shl    $0x2,%eax
f01072f4:	01 d0                	add    %edx,%eax
f01072f6:	c1 e0 02             	shl    $0x2,%eax
f01072f9:	01 c8                	add    %ecx,%eax
f01072fb:	8a 40 4d             	mov    0x4d(%eax),%al
f01072fe:	84 c0                	test   %al,%al
f0107300:	75 56                	jne    f0107358 <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107302:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f0107308:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010730b:	89 d0                	mov    %edx,%eax
f010730d:	c1 e0 02             	shl    $0x2,%eax
f0107310:	01 d0                	add    %edx,%eax
f0107312:	c1 e0 02             	shl    $0x2,%eax
f0107315:	01 d0                	add    %edx,%eax
f0107317:	c1 e0 02             	shl    $0x2,%eax
f010731a:	01 c8                	add    %ecx,%eax
f010731c:	8b 00                	mov    (%eax),%eax
f010731e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107321:	75 36                	jne    f0107359 <get_share_object_ID+0x87>
f0107323:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f0107329:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010732c:	89 d0                	mov    %edx,%eax
f010732e:	c1 e0 02             	shl    $0x2,%eax
f0107331:	01 d0                	add    %edx,%eax
f0107333:	c1 e0 02             	shl    $0x2,%eax
f0107336:	01 d0                	add    %edx,%eax
f0107338:	c1 e0 02             	shl    $0x2,%eax
f010733b:	01 c8                	add    %ecx,%eax
f010733d:	83 c0 04             	add    $0x4,%eax
f0107340:	83 ec 08             	sub    $0x8,%esp
f0107343:	50                   	push   %eax
f0107344:	ff 75 0c             	pushl  0xc(%ebp)
f0107347:	e8 b0 a7 02 00       	call   f0131afc <strcmp>
f010734c:	83 c4 10             	add    $0x10,%esp
f010734f:	85 c0                	test   %eax,%eax
f0107351:	75 06                	jne    f0107359 <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107353:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107356:	eb 19                	jmp    f0107371 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107358:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107359:	ff 45 f4             	incl   -0xc(%ebp)
f010735c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010735f:	a1 24 07 86 f0       	mov    0xf0860724,%eax
f0107364:	39 c2                	cmp    %eax,%edx
f0107366:	0f 82 75 ff ff ff    	jb     f01072e1 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f010736c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107371:	c9                   	leave  
f0107372:	c3                   	ret    

f0107373 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107373:	55                   	push   %ebp
f0107374:	89 e5                	mov    %esp,%ebp
f0107376:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107379:	a1 24 07 86 f0       	mov    0xf0860724,%eax
f010737e:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107381:	72 0a                	jb     f010738d <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107383:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107388:	e9 9f 00 00 00       	jmp    f010742c <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010738d:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f0107393:	8b 55 08             	mov    0x8(%ebp),%edx
f0107396:	89 d0                	mov    %edx,%eax
f0107398:	c1 e0 02             	shl    $0x2,%eax
f010739b:	01 d0                	add    %edx,%eax
f010739d:	c1 e0 02             	shl    $0x2,%eax
f01073a0:	01 d0                	add    %edx,%eax
f01073a2:	c1 e0 02             	shl    $0x2,%eax
f01073a5:	01 c8                	add    %ecx,%eax
f01073a7:	8b 40 50             	mov    0x50(%eax),%eax
f01073aa:	83 ec 0c             	sub    $0xc,%esp
f01073ad:	50                   	push   %eax
f01073ae:	e8 52 01 00 00       	call   f0107505 <clear_frames_storage>
f01073b3:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f01073b6:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01073bc:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bf:	89 d0                	mov    %edx,%eax
f01073c1:	c1 e0 02             	shl    $0x2,%eax
f01073c4:	01 d0                	add    %edx,%eax
f01073c6:	c1 e0 02             	shl    $0x2,%eax
f01073c9:	01 d0                	add    %edx,%eax
f01073cb:	c1 e0 02             	shl    $0x2,%eax
f01073ce:	01 c8                	add    %ecx,%eax
f01073d0:	8b 40 50             	mov    0x50(%eax),%eax
f01073d3:	83 ec 0c             	sub    $0xc,%esp
f01073d6:	50                   	push   %eax
f01073d7:	e8 4a 07 00 00       	call   f0107b26 <kfree>
f01073dc:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073df:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01073e5:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e8:	89 d0                	mov    %edx,%eax
f01073ea:	c1 e0 02             	shl    $0x2,%eax
f01073ed:	01 d0                	add    %edx,%eax
f01073ef:	c1 e0 02             	shl    $0x2,%eax
f01073f2:	01 d0                	add    %edx,%eax
f01073f4:	c1 e0 02             	shl    $0x2,%eax
f01073f7:	01 c8                	add    %ecx,%eax
f01073f9:	83 ec 04             	sub    $0x4,%esp
f01073fc:	6a 54                	push   $0x54
f01073fe:	6a 00                	push   $0x0
f0107400:	50                   	push   %eax
f0107401:	e8 d8 a7 02 00       	call   f0131bde <memset>
f0107406:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107409:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f010740f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107412:	89 d0                	mov    %edx,%eax
f0107414:	c1 e0 02             	shl    $0x2,%eax
f0107417:	01 d0                	add    %edx,%eax
f0107419:	c1 e0 02             	shl    $0x2,%eax
f010741c:	01 d0                	add    %edx,%eax
f010741e:	c1 e0 02             	shl    $0x2,%eax
f0107421:	01 c8                	add    %ecx,%eax
f0107423:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f0107427:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010742c:	c9                   	leave  
f010742d:	c3                   	ret    

f010742e <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f010742e:	55                   	push   %ebp
f010742f:	89 e5                	mov    %esp,%ebp
f0107431:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107434:	83 ec 0c             	sub    $0xc,%esp
f0107437:	68 00 10 00 00       	push   $0x1000
f010743c:	e8 25 06 00 00       	call   f0107a66 <kmalloc>
f0107441:	83 c4 10             	add    $0x10,%esp
f0107444:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107447:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010744b:	75 17                	jne    f0107464 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	68 d5 64 13 f0       	push   $0xf01364d5
f0107455:	68 a5 00 00 00       	push   $0xa5
f010745a:	68 b4 64 13 f0       	push   $0xf01364b4
f010745f:	e8 a1 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107464:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107467:	c9                   	leave  
f0107468:	c3                   	ret    

f0107469 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107469:	55                   	push   %ebp
f010746a:	89 e5                	mov    %esp,%ebp
f010746c:	53                   	push   %ebx
f010746d:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107470:	8b 45 10             	mov    0x10(%ebp),%eax
f0107473:	c1 e0 0c             	shl    $0xc,%eax
f0107476:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107479:	83 ec 04             	sub    $0x4,%esp
f010747c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010747f:	50                   	push   %eax
f0107480:	ff 75 f4             	pushl  -0xc(%ebp)
f0107483:	ff 75 08             	pushl  0x8(%ebp)
f0107486:	e8 52 f6 ff ff       	call   f0106add <get_page_table>
f010748b:	83 c4 10             	add    $0x10,%esp
f010748e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107491:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107495:	75 14                	jne    f01074ab <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f0107497:	83 ec 08             	sub    $0x8,%esp
f010749a:	ff 75 f4             	pushl  -0xc(%ebp)
f010749d:	ff 75 08             	pushl  0x8(%ebp)
f01074a0:	e8 8e f7 ff ff       	call   f0106c33 <create_page_table>
f01074a5:	83 c4 10             	add    $0x10,%esp
f01074a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f01074ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01074ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01074b1:	c1 ea 0c             	shr    $0xc,%edx
f01074b4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01074ba:	c1 e2 02             	shl    $0x2,%edx
f01074bd:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f01074c0:	83 ec 0c             	sub    $0xc,%esp
f01074c3:	ff 75 0c             	pushl  0xc(%ebp)
f01074c6:	e8 4b fc ff ff       	call   f0107116 <to_physical_address>
f01074cb:	83 c4 10             	add    $0x10,%esp
f01074ce:	83 c8 01             	or     $0x1,%eax
f01074d1:	89 03                	mov    %eax,(%ebx)
}
f01074d3:	90                   	nop
f01074d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074e2:	c1 e0 0c             	shl    $0xc,%eax
f01074e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074e8:	83 ec 04             	sub    $0x4,%esp
f01074eb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074ee:	50                   	push   %eax
f01074ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01074f2:	ff 75 08             	pushl  0x8(%ebp)
f01074f5:	e8 38 f9 ff ff       	call   f0106e32 <get_frame_info>
f01074fa:	83 c4 10             	add    $0x10,%esp
f01074fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107500:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107503:	c9                   	leave  
f0107504:	c3                   	ret    

f0107505 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107505:	55                   	push   %ebp
f0107506:	89 e5                	mov    %esp,%ebp
f0107508:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f010750b:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107519:	eb 5b                	jmp    f0107576 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f010751b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010751e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107525:	8b 45 08             	mov    0x8(%ebp),%eax
f0107528:	01 d0                	add    %edx,%eax
f010752a:	8b 00                	mov    (%eax),%eax
f010752c:	85 c0                	test   %eax,%eax
f010752e:	74 43                	je     f0107573 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107530:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107533:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753a:	8b 45 08             	mov    0x8(%ebp),%eax
f010753d:	01 d0                	add    %edx,%eax
f010753f:	8b 00                	mov    (%eax),%eax
f0107541:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107546:	83 ec 0c             	sub    $0xc,%esp
f0107549:	50                   	push   %eax
f010754a:	e8 fe 06 00 00       	call   f0107c4d <kheap_virtual_address>
f010754f:	83 c4 10             	add    $0x10,%esp
f0107552:	83 ec 0c             	sub    $0xc,%esp
f0107555:	50                   	push   %eax
f0107556:	e8 cb 05 00 00       	call   f0107b26 <kfree>
f010755b:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f010755e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107561:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107568:	8b 45 08             	mov    0x8(%ebp),%eax
f010756b:	01 d0                	add    %edx,%eax
f010756d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107573:	ff 45 f4             	incl   -0xc(%ebp)
f0107576:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010757d:	7e 9c                	jle    f010751b <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010757f:	90                   	nop
f0107580:	c9                   	leave  
f0107581:	c3                   	ret    

f0107582 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107582:	55                   	push   %ebp
f0107583:	89 e5                	mov    %esp,%ebp
f0107585:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f0107588:	83 ec 08             	sub    $0x8,%esp
f010758b:	ff 75 0c             	pushl  0xc(%ebp)
f010758e:	ff 75 08             	pushl  0x8(%ebp)
f0107591:	e8 3c fd ff ff       	call   f01072d2 <get_share_object_ID>
f0107596:	83 c4 10             	add    $0x10,%esp
f0107599:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f010759c:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f01075a0:	75 07                	jne    f01075a9 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f01075a2:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f01075a7:	eb 1d                	jmp    f01075c6 <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f01075a9:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01075af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01075b2:	89 d0                	mov    %edx,%eax
f01075b4:	c1 e0 02             	shl    $0x2,%eax
f01075b7:	01 d0                	add    %edx,%eax
f01075b9:	c1 e0 02             	shl    $0x2,%eax
f01075bc:	01 d0                	add    %edx,%eax
f01075be:	c1 e0 02             	shl    $0x2,%eax
f01075c1:	01 c8                	add    %ecx,%eax
f01075c3:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f01075c6:	c9                   	leave  
f01075c7:	c3                   	ret    

f01075c8 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f01075c8:	55                   	push   %ebp
f01075c9:	89 e5                	mov    %esp,%ebp
f01075cb:	83 ec 48             	sub    $0x48,%esp
f01075ce:	8b 45 14             	mov    0x14(%ebp),%eax
f01075d1:	88 45 c4             	mov    %al,-0x3c(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	//panic("createSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f01075d4:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f01075d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (get_share_object_ID(ownerID, shareName) != E_SHARED_MEM_NOT_EXISTS)
f01075dc:	83 ec 08             	sub    $0x8,%esp
f01075df:	ff 75 0c             	pushl  0xc(%ebp)
f01075e2:	ff 75 08             	pushl  0x8(%ebp)
f01075e5:	e8 e8 fc ff ff       	call   f01072d2 <get_share_object_ID>
f01075ea:	83 c4 10             	add    $0x10,%esp
f01075ed:	83 f8 f0             	cmp    $0xfffffff0,%eax
f01075f0:	74 0a                	je     f01075fc <createSharedObject+0x34>
			return E_SHARED_MEM_EXISTS;
f01075f2:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075f7:	e9 10 01 00 00       	jmp    f010770c <createSharedObject+0x144>

	struct Share *shareObj = NULL;
f01075fc:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	int objId=allocate_share_object(&shareObj);
f0107603:	83 ec 0c             	sub    $0xc,%esp
f0107606:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0107609:	50                   	push   %eax
f010760a:	e8 cb fb ff ff       	call   f01071da <allocate_share_object>
f010760f:	83 c4 10             	add    $0x10,%esp
f0107612:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(objId==E_NO_SHARE)
f0107615:	83 7d ec f2          	cmpl   $0xfffffff2,-0x14(%ebp)
f0107619:	75 0a                	jne    f0107625 <createSharedObject+0x5d>
		return E_NO_SHARE;
f010761b:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107620:	e9 e7 00 00 00       	jmp    f010770c <createSharedObject+0x144>
	else
	{

			int n=ROUNDUP(size,PAGE_SIZE)/PAGE_SIZE;// number of pages
f0107625:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010762c:	8b 55 10             	mov    0x10(%ebp),%edx
f010762f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107632:	01 d0                	add    %edx,%eax
f0107634:	48                   	dec    %eax
f0107635:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107638:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010763b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107640:	f7 75 e8             	divl   -0x18(%ebp)
f0107643:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107646:	29 d0                	sub    %edx,%eax
f0107648:	c1 e8 0c             	shr    $0xc,%eax
f010764b:	89 45 e0             	mov    %eax,-0x20(%ebp)
			uint32 va=ROUNDDOWN((uint32)virtual_address,PAGE_SIZE);
f010764e:	8b 45 18             	mov    0x18(%ebp),%eax
f0107651:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107654:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107657:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010765c:	89 45 d8             	mov    %eax,-0x28(%ebp)
			for (int i=0;i<n;i++)//loop on them
f010765f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107666:	eb 5a                	jmp    f01076c2 <createSharedObject+0xfa>
			{
				struct FrameInfo* frameInfo = NULL;
f0107668:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
				int ret = allocate_frame(&frameInfo);
f010766f:	83 ec 0c             	sub    $0xc,%esp
f0107672:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0107675:	50                   	push   %eax
f0107676:	e8 a3 f2 ff ff       	call   f010691e <allocate_frame>
f010767b:	83 c4 10             	add    $0x10,%esp
f010767e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

				map_frame(myenv->env_page_directory, frameInfo,
					va + (i * PAGE_SIZE), PERM_USER|PERM_PRESENT|PERM_WRITEABLE);
f0107681:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107684:	c1 e0 0c             	shl    $0xc,%eax
			for (int i=0;i<n;i++)//loop on them
			{
				struct FrameInfo* frameInfo = NULL;
				int ret = allocate_frame(&frameInfo);

				map_frame(myenv->env_page_directory, frameInfo,
f0107687:	89 c2                	mov    %eax,%edx
f0107689:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010768c:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f010768f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107692:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107695:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107698:	6a 07                	push   $0x7
f010769a:	51                   	push   %ecx
f010769b:	52                   	push   %edx
f010769c:	50                   	push   %eax
f010769d:	e8 cb f6 ff ff       	call   f0106d6d <map_frame>
f01076a2:	83 c4 10             	add    $0x10,%esp
					va + (i * PAGE_SIZE), PERM_USER|PERM_PRESENT|PERM_WRITEABLE);
				add_frame_to_storage(shareObj->framesStorage, frameInfo, i);
f01076a5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01076a8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01076ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01076ae:	8b 40 50             	mov    0x50(%eax),%eax
f01076b1:	83 ec 04             	sub    $0x4,%esp
f01076b4:	51                   	push   %ecx
f01076b5:	52                   	push   %edx
f01076b6:	50                   	push   %eax
f01076b7:	e8 ad fd ff ff       	call   f0107469 <add_frame_to_storage>
f01076bc:	83 c4 10             	add    $0x10,%esp
	else
	{

			int n=ROUNDUP(size,PAGE_SIZE)/PAGE_SIZE;// number of pages
			uint32 va=ROUNDDOWN((uint32)virtual_address,PAGE_SIZE);
			for (int i=0;i<n;i++)//loop on them
f01076bf:	ff 45 f4             	incl   -0xc(%ebp)
f01076c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076c5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01076c8:	7c 9e                	jl     f0107668 <createSharedObject+0xa0>
					va + (i * PAGE_SIZE), PERM_USER|PERM_PRESENT|PERM_WRITEABLE);
				add_frame_to_storage(shareObj->framesStorage, frameInfo, i);
			}


		            shareObj->ownerID = ownerID;
f01076ca:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01076cd:	8b 55 08             	mov    0x8(%ebp),%edx
f01076d0:	89 10                	mov    %edx,(%eax)
					shareObj->isWritable = isWritable;
f01076d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01076d5:	8a 55 c4             	mov    -0x3c(%ebp),%dl
f01076d8:	88 50 4c             	mov    %dl,0x4c(%eax)
					shareObj->references = 1;
f01076db:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01076de:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
					shareObj->size = size;
f01076e5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01076e8:	8b 55 10             	mov    0x10(%ebp),%edx
f01076eb:	89 50 44             	mov    %edx,0x44(%eax)
					strcpy(shareObj->name, shareName);
f01076ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01076f1:	83 c0 04             	add    $0x4,%eax
f01076f4:	83 ec 08             	sub    $0x8,%esp
f01076f7:	ff 75 0c             	pushl  0xc(%ebp)
f01076fa:	50                   	push   %eax
f01076fb:	e8 3f a3 02 00       	call   f0131a3f <strcpy>
f0107700:	83 c4 10             	add    $0x10,%esp

                    uint8 newIsWritable=isWritable;
f0107703:	8a 45 c4             	mov    -0x3c(%ebp),%al
f0107706:	88 45 d3             	mov    %al,-0x2d(%ebp)
					return objId;
f0107709:	8b 45 ec             	mov    -0x14(%ebp),%eax
	// and return the ShareObjectID
	// RETURN:
	//	a) ShareObjectID (its index in "shares" array) if success
	//	b) E_SHARED_MEM_EXISTS if the shared object already exists
	//	c) E_NO_SHARE if the number of shared objects reaches max "MAX_SHARES"
}
f010770c:	c9                   	leave  
f010770d:	c3                   	ret    

f010770e <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010770e:	55                   	push   %ebp
f010770f:	89 e5                	mov    %esp,%ebp
f0107711:	53                   	push   %ebx
f0107712:	83 ec 24             	sub    $0x24,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
//	panic("getSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f0107715:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010771a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		int objID=get_share_object_ID(ownerID,shareName);
f010771d:	83 ec 08             	sub    $0x8,%esp
f0107720:	ff 75 0c             	pushl  0xc(%ebp)
f0107723:	ff 75 08             	pushl  0x8(%ebp)
f0107726:	e8 a7 fb ff ff       	call   f01072d2 <get_share_object_ID>
f010772b:	83 c4 10             	add    $0x10,%esp
f010772e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(objID==E_SHARED_MEM_NOT_EXISTS)
f0107731:	83 7d ec f0          	cmpl   $0xfffffff0,-0x14(%ebp)
f0107735:	75 0a                	jne    f0107741 <getSharedObject+0x33>
			return E_SHARED_MEM_NOT_EXISTS;
f0107737:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010773c:	e9 24 01 00 00       	jmp    f0107865 <getSharedObject+0x157>
		else
		{
			//struct Share *curruntObj=&shares[objID];
			//get number of frames in storage
			int numOfFrames=ROUNDUP(shares[objID].size,PAGE_SIZE)/PAGE_SIZE;
f0107741:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0107748:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f010774e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107751:	89 d0                	mov    %edx,%eax
f0107753:	c1 e0 02             	shl    $0x2,%eax
f0107756:	01 d0                	add    %edx,%eax
f0107758:	c1 e0 02             	shl    $0x2,%eax
f010775b:	01 d0                	add    %edx,%eax
f010775d:	c1 e0 02             	shl    $0x2,%eax
f0107760:	01 c8                	add    %ecx,%eax
f0107762:	8b 40 44             	mov    0x44(%eax),%eax
f0107765:	89 c2                	mov    %eax,%edx
f0107767:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010776a:	01 d0                	add    %edx,%eax
f010776c:	48                   	dec    %eax
f010776d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107770:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107773:	ba 00 00 00 00       	mov    $0x0,%edx
f0107778:	f7 75 e8             	divl   -0x18(%ebp)
f010777b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010777e:	29 d0                	sub    %edx,%eax
f0107780:	85 c0                	test   %eax,%eax
f0107782:	79 05                	jns    f0107789 <getSharedObject+0x7b>
f0107784:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107789:	c1 f8 0c             	sar    $0xc,%eax
f010778c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			for (int i=0;i<numOfFrames;i++)
f010778f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107796:	e9 9a 00 00 00       	jmp    f0107835 <getSharedObject+0x127>
			{
				struct FrameInfo *frame_ptr=get_frame_from_storage(shares[objID].framesStorage,i);
f010779b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010779e:	8b 1d e8 06 86 f0    	mov    0xf08606e8,%ebx
f01077a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01077a7:	89 d0                	mov    %edx,%eax
f01077a9:	c1 e0 02             	shl    $0x2,%eax
f01077ac:	01 d0                	add    %edx,%eax
f01077ae:	c1 e0 02             	shl    $0x2,%eax
f01077b1:	01 d0                	add    %edx,%eax
f01077b3:	c1 e0 02             	shl    $0x2,%eax
f01077b6:	01 d8                	add    %ebx,%eax
f01077b8:	8b 40 50             	mov    0x50(%eax),%eax
f01077bb:	83 ec 08             	sub    $0x8,%esp
f01077be:	51                   	push   %ecx
f01077bf:	50                   	push   %eax
f01077c0:	e8 14 fd ff ff       	call   f01074d9 <get_frame_from_storage>
f01077c5:	83 c4 10             	add    $0x10,%esp
f01077c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
				if(shares[objID].isWritable==1)
f01077cb:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f01077d1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01077d4:	89 d0                	mov    %edx,%eax
f01077d6:	c1 e0 02             	shl    $0x2,%eax
f01077d9:	01 d0                	add    %edx,%eax
f01077db:	c1 e0 02             	shl    $0x2,%eax
f01077de:	01 d0                	add    %edx,%eax
f01077e0:	c1 e0 02             	shl    $0x2,%eax
f01077e3:	01 c8                	add    %ecx,%eax
f01077e5:	8a 40 4c             	mov    0x4c(%eax),%al
f01077e8:	3c 01                	cmp    $0x1,%al
f01077ea:	75 24                	jne    f0107810 <getSharedObject+0x102>
				{
					map_frame(myenv->env_page_directory,frame_ptr,(uint32)virtual_address + (i * PAGE_SIZE),PERM_WRITEABLE|PERM_USER|PERM_PRESENT);
f01077ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077ef:	c1 e0 0c             	shl    $0xc,%eax
f01077f2:	89 c2                	mov    %eax,%edx
f01077f4:	8b 45 10             	mov    0x10(%ebp),%eax
f01077f7:	01 c2                	add    %eax,%edx
f01077f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01077fc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01077ff:	6a 07                	push   $0x7
f0107801:	52                   	push   %edx
f0107802:	ff 75 dc             	pushl  -0x24(%ebp)
f0107805:	50                   	push   %eax
f0107806:	e8 62 f5 ff ff       	call   f0106d6d <map_frame>
f010780b:	83 c4 10             	add    $0x10,%esp
f010780e:	eb 22                	jmp    f0107832 <getSharedObject+0x124>
				}
				else
				{
					map_frame(myenv->env_page_directory,frame_ptr,(uint32)virtual_address + (i * PAGE_SIZE),PERM_USER|PERM_PRESENT);
f0107810:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107813:	c1 e0 0c             	shl    $0xc,%eax
f0107816:	89 c2                	mov    %eax,%edx
f0107818:	8b 45 10             	mov    0x10(%ebp),%eax
f010781b:	01 c2                	add    %eax,%edx
f010781d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107820:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107823:	6a 05                	push   $0x5
f0107825:	52                   	push   %edx
f0107826:	ff 75 dc             	pushl  -0x24(%ebp)
f0107829:	50                   	push   %eax
f010782a:	e8 3e f5 ff ff       	call   f0106d6d <map_frame>
f010782f:	83 c4 10             	add    $0x10,%esp
		else
		{
			//struct Share *curruntObj=&shares[objID];
			//get number of frames in storage
			int numOfFrames=ROUNDUP(shares[objID].size,PAGE_SIZE)/PAGE_SIZE;
			for (int i=0;i<numOfFrames;i++)
f0107832:	ff 45 f4             	incl   -0xc(%ebp)
f0107835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107838:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010783b:	0f 8c 5a ff ff ff    	jl     f010779b <getSharedObject+0x8d>
					map_frame(myenv->env_page_directory,frame_ptr,(uint32)virtual_address + (i * PAGE_SIZE),PERM_USER|PERM_PRESENT);

				}

			}
			shares[objID].references++;
f0107841:	8b 0d e8 06 86 f0    	mov    0xf08606e8,%ecx
f0107847:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010784a:	89 d0                	mov    %edx,%eax
f010784c:	c1 e0 02             	shl    $0x2,%eax
f010784f:	01 d0                	add    %edx,%eax
f0107851:	c1 e0 02             	shl    $0x2,%eax
f0107854:	01 d0                	add    %edx,%eax
f0107856:	c1 e0 02             	shl    $0x2,%eax
f0107859:	01 c8                	add    %ecx,%eax
f010785b:	8b 50 48             	mov    0x48(%eax),%edx
f010785e:	42                   	inc    %edx
f010785f:	89 50 48             	mov    %edx,0x48(%eax)
			return objID;
f0107862:	8b 45 ec             	mov    -0x14(%ebp),%eax
	//	starting from the given virtual_address with the specified permissions of the object: read_only/writable
	// 	and return the ShareObjectID
	// RETURN:
	//	a) sharedObjectID (its index in the array) if success
	//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
}
f0107865:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107868:	c9                   	leave  
f0107869:	c3                   	ret    

f010786a <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010786a:	55                   	push   %ebp
f010786b:	89 e5                	mov    %esp,%ebp
f010786d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f0107870:	83 ec 04             	sub    $0x4,%esp
f0107873:	68 f4 64 13 f0       	push   $0xf01364f4
f0107878:	68 74 01 00 00       	push   $0x174
f010787d:	68 b4 64 13 f0       	push   $0xf01364b4
f0107882:	e8 7e 89 ff ff       	call   f0100205 <_panic>

f0107887 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107887:	55                   	push   %ebp
f0107888:	89 e5                	mov    %esp,%ebp
f010788a:	a1 58 07 86 f0       	mov    0xf0860758,%eax
f010788f:	83 f8 01             	cmp    $0x1,%eax
f0107892:	75 04                	jne    f0107898 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107894:	b0 01                	mov    $0x1,%al
f0107896:	eb 02                	jmp    f010789a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107898:	b0 00                	mov    $0x0,%al
f010789a:	5d                   	pop    %ebp
f010789b:	c3                   	ret    

f010789c <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010789c:	55                   	push   %ebp
f010789d:	89 e5                	mov    %esp,%ebp
f010789f:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01078a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01078a5:	c1 e8 0c             	shr    $0xc,%eax
f01078a8:	89 c2                	mov    %eax,%edx
f01078aa:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f01078af:	39 c2                	cmp    %eax,%edx
f01078b1:	72 14                	jb     f01078c7 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01078b3:	83 ec 04             	sub    $0x4,%esp
f01078b6:	68 24 65 13 f0       	push   $0xf0136524
f01078bb:	6a 55                	push   $0x55
f01078bd:	68 49 65 13 f0       	push   $0xf0136549
f01078c2:	e8 3e 89 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01078c7:	8b 15 50 07 86 f0    	mov    0xf0860750,%edx
f01078cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01078d0:	c1 e8 0c             	shr    $0xc,%eax
f01078d3:	89 c1                	mov    %eax,%ecx
f01078d5:	89 c8                	mov    %ecx,%eax
f01078d7:	01 c0                	add    %eax,%eax
f01078d9:	01 c8                	add    %ecx,%eax
f01078db:	c1 e0 03             	shl    $0x3,%eax
f01078de:	01 d0                	add    %edx,%eax
}
f01078e0:	c9                   	leave  
f01078e1:	c3                   	ret    

f01078e2 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01078e2:	55                   	push   %ebp
f01078e3:	89 e5                	mov    %esp,%ebp
f01078e5:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
		// your code is here, remove the panic and write your code
		//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

		//[1] Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
		LIST_INIT(&AllocMemBlocksList);
f01078e8:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f01078ef:	00 00 00 
f01078f2:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f01078f9:	00 00 00 
f01078fc:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f0107903:	00 00 00 
		LIST_INIT(&FreeMemBlocksList);
f0107906:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f010790d:	00 00 00 
f0107910:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f0107917:	00 00 00 
f010791a:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f0107921:	00 00 00 
		 * 	remember to:
		 * 		1. set MAX_MEM_BLOCK_CNT with the chosen size of the array
		 * 		2. allocation should be aligned on PAGE boundary
		 * 	HINT: can use alloc_chunk(...) function
		 */
		MAX_MEM_BLOCK_CNT=NUM_OF_KHEAP_PAGES;
f0107924:	c7 05 00 07 86 f0 ff 	movl   $0x9fff,0xf0860700
f010792b:	9f 00 00 

		uint32 requiredSpace=sizeof(struct MemBlock)*NUM_OF_KHEAP_PAGES;// array space in heap
f010792e:	c7 45 f4 f0 ff 09 00 	movl   $0x9fff0,-0xc(%ebp)
		MemBlockNodes=(struct MemBlock*)KERNEL_HEAP_START;//casting to point to the heap
f0107935:	c7 05 d4 06 86 f0 00 	movl   $0xf6000000,0xf08606d4
f010793c:	00 00 f6 


		allocate_chunk(ptr_page_directory,KERNEL_HEAP_START,requiredSpace,PERM_WRITEABLE);
f010793f:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0107944:	6a 02                	push   $0x2
f0107946:	ff 75 f4             	pushl  -0xc(%ebp)
f0107949:	68 00 00 00 f6       	push   $0xf6000000
f010794e:	50                   	push   %eax
f010794f:	e8 38 15 00 00       	call   f0108e8c <allocate_chunk>
f0107954:	83 c4 10             	add    $0x10,%esp

	#endif
		initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107957:	a1 00 07 86 f0       	mov    0xf0860700,%eax
f010795c:	83 ec 0c             	sub    $0xc,%esp
f010795f:	50                   	push   %eax
f0107960:	e8 f5 ab 02 00       	call   f013255a <initialize_MemBlocksList>
f0107965:	83 c4 10             	add    $0x10,%esp
	struct MemBlock *freeSva=AvailableMemBlocksList.lh_last;
f0107968:	a1 98 07 86 f0       	mov    0xf0860798,%eax
f010796d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeSva->size=(KERNEL_HEAP_MAX-KERNEL_HEAP_START)-requiredSpace;
f0107970:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107975:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107978:	89 c2                	mov    %eax,%edx
f010797a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010797d:	89 50 0c             	mov    %edx,0xc(%eax)
	freeSva->size=ROUNDDOWN(freeSva->size,PAGE_SIZE);
f0107980:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107983:	8b 40 0c             	mov    0xc(%eax),%eax
f0107986:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107989:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010798c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107991:	89 c2                	mov    %eax,%edx
f0107993:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107996:	89 50 0c             	mov    %edx,0xc(%eax)

	freeSva->sva=KERNEL_HEAP_START+requiredSpace;
f0107999:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010799c:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f01079a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079a5:	89 50 08             	mov    %edx,0x8(%eax)
	freeSva->sva=ROUNDUP(freeSva->sva,PAGE_SIZE);
f01079a8:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01079af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b2:	8b 50 08             	mov    0x8(%eax),%edx
f01079b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079b8:	01 d0                	add    %edx,%eax
f01079ba:	48                   	dec    %eax
f01079bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01079be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01079c6:	f7 75 e8             	divl   -0x18(%ebp)
f01079c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079cc:	29 d0                	sub    %edx,%eax
f01079ce:	89 c2                	mov    %eax,%edx
f01079d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079d3:	89 50 08             	mov    %edx,0x8(%eax)




	LIST_REMOVE(&AvailableMemBlocksList,freeSva);
f01079d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079da:	75 14                	jne    f01079f0 <initialize_dyn_block_system+0x10e>
f01079dc:	83 ec 04             	sub    $0x4,%esp
f01079df:	68 63 65 13 f0       	push   $0xf0136563
f01079e4:	6a 34                	push   $0x34
f01079e6:	68 81 65 13 f0       	push   $0xf0136581
f01079eb:	e8 15 88 ff ff       	call   f0100205 <_panic>
f01079f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079f3:	8b 00                	mov    (%eax),%eax
f01079f5:	85 c0                	test   %eax,%eax
f01079f7:	74 10                	je     f0107a09 <initialize_dyn_block_system+0x127>
f01079f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079fc:	8b 00                	mov    (%eax),%eax
f01079fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107a01:	8b 52 04             	mov    0x4(%edx),%edx
f0107a04:	89 50 04             	mov    %edx,0x4(%eax)
f0107a07:	eb 0b                	jmp    f0107a14 <initialize_dyn_block_system+0x132>
f0107a09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a0c:	8b 40 04             	mov    0x4(%eax),%eax
f0107a0f:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f0107a14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a17:	8b 40 04             	mov    0x4(%eax),%eax
f0107a1a:	85 c0                	test   %eax,%eax
f0107a1c:	74 0f                	je     f0107a2d <initialize_dyn_block_system+0x14b>
f0107a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a21:	8b 40 04             	mov    0x4(%eax),%eax
f0107a24:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107a27:	8b 12                	mov    (%edx),%edx
f0107a29:	89 10                	mov    %edx,(%eax)
f0107a2b:	eb 0a                	jmp    f0107a37 <initialize_dyn_block_system+0x155>
f0107a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a30:	8b 00                	mov    (%eax),%eax
f0107a32:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f0107a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107a40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a43:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107a4a:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0107a4f:	48                   	dec    %eax
f0107a50:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
	insert_sorted_with_merge_freeList(freeSva);
f0107a55:	83 ec 0c             	sub    $0xc,%esp
f0107a58:	ff 75 f0             	pushl  -0x10(%ebp)
f0107a5b:	e8 4b b3 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f0107a60:	83 c4 10             	add    $0x10,%esp


		//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
		//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
}
f0107a63:	90                   	nop
f0107a64:	c9                   	leave  
f0107a65:	c3                   	ret    

f0107a66 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107a66:	55                   	push   %ebp
f0107a67:	89 e5                	mov    %esp,%ebp
f0107a69:	83 ec 18             	sub    $0x18,%esp
	{
		//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
			// your code is here, remove the panic and write your code
			//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
		if(size>KERNEL_HEAP_MAX-KERNEL_HEAP_START)// boundries of heap
f0107a6c:	81 7d 08 00 f0 ff 09 	cmpl   $0x9fff000,0x8(%ebp)
f0107a73:	76 0a                	jbe    f0107a7f <kmalloc+0x19>
						return NULL;
f0107a75:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a7a:	e9 a5 00 00 00       	jmp    f0107b24 <kmalloc+0xbe>
			struct MemBlock *ret=NULL;
f0107a7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			size=ROUNDUP(size,PAGE_SIZE);
f0107a86:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107a8d:	8b 55 08             	mov    0x8(%ebp),%edx
f0107a90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a93:	01 d0                	add    %edx,%eax
f0107a95:	48                   	dec    %eax
f0107a96:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a99:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0107aa1:	f7 75 f0             	divl   -0x10(%ebp)
f0107aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107aa7:	29 d0                	sub    %edx,%eax
f0107aa9:	89 45 08             	mov    %eax,0x8(%ebp)

//check the strategy
		if(isKHeapPlacementStrategyFIRSTFIT())
f0107aac:	e8 d6 fd ff ff       	call   f0107887 <isKHeapPlacementStrategyFIRSTFIT>
f0107ab1:	84 c0                	test   %al,%al
f0107ab3:	74 13                	je     f0107ac8 <kmalloc+0x62>
		{

			ret=alloc_block_FF(size);
f0107ab5:	83 ec 0c             	sub    $0xc,%esp
f0107ab8:	ff 75 08             	pushl  0x8(%ebp)
f0107abb:	e8 61 ad 02 00       	call   f0132821 <alloc_block_FF>
f0107ac0:	83 c4 10             	add    $0x10,%esp
f0107ac3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107ac6:	eb 11                	jmp    f0107ad9 <kmalloc+0x73>

		}
		else
		{

			ret=alloc_block_BF(size);
f0107ac8:	83 ec 0c             	sub    $0xc,%esp
f0107acb:	ff 75 08             	pushl  0x8(%ebp)
f0107ace:	e8 e6 ae 02 00       	call   f01329b9 <alloc_block_BF>
f0107ad3:	83 c4 10             	add    $0x10,%esp
f0107ad6:	89 45 f4             	mov    %eax,-0xc(%ebp)
			//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)
			//refer to the project presentation and documentation for details

		// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy
		int allocated_chunk;
		if(ret!=NULL){
f0107ad9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107add:	74 40                	je     f0107b1f <kmalloc+0xb9>
			 allocated_chunk=allocate_chunk(ptr_page_directory,ret->sva,size,PERM_WRITEABLE);
f0107adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ae2:	8b 50 08             	mov    0x8(%eax),%edx
f0107ae5:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0107aea:	6a 02                	push   $0x2
f0107aec:	ff 75 08             	pushl  0x8(%ebp)
f0107aef:	52                   	push   %edx
f0107af0:	50                   	push   %eax
f0107af1:	e8 96 13 00 00       	call   f0108e8c <allocate_chunk>
f0107af6:	83 c4 10             	add    $0x10,%esp
f0107af9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(allocated_chunk!=0)
f0107afc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107b00:	74 07                	je     f0107b09 <kmalloc+0xa3>
			return NULL;
f0107b02:	b8 00 00 00 00       	mov    $0x0,%eax
f0107b07:	eb 1b                	jmp    f0107b24 <kmalloc+0xbe>
		else
		{
		insert_sorted_allocList(ret);
f0107b09:	83 ec 0c             	sub    $0xc,%esp
f0107b0c:	ff 75 f4             	pushl  -0xc(%ebp)
f0107b0f:	e8 5e ab 02 00       	call   f0132672 <insert_sorted_allocList>
f0107b14:	83 c4 10             	add    $0x10,%esp
		return (void *)ret->sva;
f0107b17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b1a:	8b 40 08             	mov    0x8(%eax),%eax
f0107b1d:	eb 05                	jmp    f0107b24 <kmalloc+0xbe>
		}
		}
		else{
			return NULL;
f0107b1f:	b8 00 00 00 00       	mov    $0x0,%eax
		}

			//change this "return" according to your answer
	}
}
f0107b24:	c9                   	leave  
f0107b25:	c3                   	ret    

f0107b26 <kfree>:

	//change this "return" according to your answer


void kfree(void* virtual_address)
{
f0107b26:	55                   	push   %ebp
f0107b27:	89 e5                	mov    %esp,%ebp
f0107b29:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");

	struct MemBlock * returnBlock=find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107b2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b2f:	83 ec 08             	sub    $0x8,%esp
f0107b32:	50                   	push   %eax
f0107b33:	68 c4 06 86 f0       	push   $0xf08606c4
f0107b38:	e8 02 ab 02 00       	call   f013263f <find_block>
f0107b3d:	83 c4 10             	add    $0x10,%esp
f0107b40:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(returnBlock!=NULL)
f0107b43:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b47:	0f 84 fd 00 00 00    	je     f0107c4a <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,returnBlock);
f0107b4d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b51:	75 14                	jne    f0107b67 <kfree+0x41>
f0107b53:	83 ec 04             	sub    $0x4,%esp
f0107b56:	68 63 65 13 f0       	push   $0xf0136563
f0107b5b:	6a 78                	push   $0x78
f0107b5d:	68 81 65 13 f0       	push   $0xf0136581
f0107b62:	e8 9e 86 ff ff       	call   f0100205 <_panic>
f0107b67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b6a:	8b 00                	mov    (%eax),%eax
f0107b6c:	85 c0                	test   %eax,%eax
f0107b6e:	74 10                	je     f0107b80 <kfree+0x5a>
f0107b70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b73:	8b 00                	mov    (%eax),%eax
f0107b75:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b78:	8b 52 04             	mov    0x4(%edx),%edx
f0107b7b:	89 50 04             	mov    %edx,0x4(%eax)
f0107b7e:	eb 0b                	jmp    f0107b8b <kfree+0x65>
f0107b80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b83:	8b 40 04             	mov    0x4(%eax),%eax
f0107b86:	a3 c8 06 86 f0       	mov    %eax,0xf08606c8
f0107b8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b8e:	8b 40 04             	mov    0x4(%eax),%eax
f0107b91:	85 c0                	test   %eax,%eax
f0107b93:	74 0f                	je     f0107ba4 <kfree+0x7e>
f0107b95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b98:	8b 40 04             	mov    0x4(%eax),%eax
f0107b9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b9e:	8b 12                	mov    (%edx),%edx
f0107ba0:	89 10                	mov    %edx,(%eax)
f0107ba2:	eb 0a                	jmp    f0107bae <kfree+0x88>
f0107ba4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ba7:	8b 00                	mov    (%eax),%eax
f0107ba9:	a3 c4 06 86 f0       	mov    %eax,0xf08606c4
f0107bae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bb1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107bb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107bc1:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0107bc6:	48                   	dec    %eax
f0107bc7:	a3 d0 06 86 f0       	mov    %eax,0xf08606d0
uint32 x=ROUNDDOWN(returnBlock->sva,PAGE_SIZE);
f0107bcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bcf:	8b 40 08             	mov    0x8(%eax),%eax
f0107bd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107bdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
uint32 y=ROUNDUP(returnBlock->sva+returnBlock->size,PAGE_SIZE);
f0107be0:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107be7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bea:	8b 50 08             	mov    0x8(%eax),%edx
f0107bed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bf0:	8b 40 0c             	mov    0xc(%eax),%eax
f0107bf3:	01 c2                	add    %eax,%edx
f0107bf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107bf8:	01 d0                	add    %edx,%eax
f0107bfa:	48                   	dec    %eax
f0107bfb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107bfe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107c01:	ba 00 00 00 00       	mov    $0x0,%edx
f0107c06:	f7 75 e4             	divl   -0x1c(%ebp)
f0107c09:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107c0c:	29 d0                	sub    %edx,%eax
f0107c0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
for (uint32 i=x;i<y;i+=PAGE_SIZE)
f0107c11:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107c14:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107c17:	eb 1b                	jmp    f0107c34 <kfree+0x10e>
	unmap_frame(ptr_page_directory,i);
f0107c19:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0107c1e:	83 ec 08             	sub    $0x8,%esp
f0107c21:	ff 75 f4             	pushl  -0xc(%ebp)
f0107c24:	50                   	push   %eax
f0107c25:	e8 78 f2 ff ff       	call   f0106ea2 <unmap_frame>
f0107c2a:	83 c4 10             	add    $0x10,%esp
	if(returnBlock!=NULL)
	{
		LIST_REMOVE(&AllocMemBlocksList,returnBlock);
uint32 x=ROUNDDOWN(returnBlock->sva,PAGE_SIZE);
uint32 y=ROUNDUP(returnBlock->sva+returnBlock->size,PAGE_SIZE);
for (uint32 i=x;i<y;i+=PAGE_SIZE)
f0107c2d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107c34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c37:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107c3a:	72 dd                	jb     f0107c19 <kfree+0xf3>
	unmap_frame(ptr_page_directory,i);
insert_sorted_with_merge_freeList( returnBlock); //add block to right place in freelist
f0107c3c:	83 ec 0c             	sub    $0xc,%esp
f0107c3f:	ff 75 f0             	pushl  -0x10(%ebp)
f0107c42:	e8 64 b1 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f0107c47:	83 c4 10             	add    $0x10,%esp





}
f0107c4a:	90                   	nop
f0107c4b:	c9                   	leave  
f0107c4c:	c3                   	ret    

f0107c4d <kheap_virtual_address>:
unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107c4d:	55                   	push   %ebp
f0107c4e:	89 e5                	mov    %esp,%ebp
f0107c50:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_virtual_address() is not implemented yet...!!");
struct FrameInfo *info =to_frame_info(physical_address);
f0107c53:	83 ec 0c             	sub    $0xc,%esp
f0107c56:	ff 75 08             	pushl  0x8(%ebp)
f0107c59:	e8 3e fc ff ff       	call   f010789c <to_frame_info>
f0107c5e:	83 c4 10             	add    $0x10,%esp
f0107c61:	89 45 f4             	mov    %eax,-0xc(%ebp)
return info->va;
f0107c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c67:	8b 40 0c             	mov    0xc(%eax),%eax


	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107c6a:	c9                   	leave  
f0107c6b:	c3                   	ret    

f0107c6c <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107c6c:	55                   	push   %ebp
f0107c6d:	89 e5                	mov    %esp,%ebp
f0107c6f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
		uint32* ptr_page_table = NULL;
f0107c72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		get_page_table(ptr_page_directory, virtual_address, &ptr_page_table);
f0107c79:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0107c7e:	83 ec 04             	sub    $0x4,%esp
f0107c81:	8d 55 f4             	lea    -0xc(%ebp),%edx
f0107c84:	52                   	push   %edx
f0107c85:	ff 75 08             	pushl  0x8(%ebp)
f0107c88:	50                   	push   %eax
f0107c89:	e8 4f ee ff ff       	call   f0106add <get_page_table>
f0107c8e:	83 c4 10             	add    $0x10,%esp

		return (ptr_page_table[PTX(virtual_address)]>>12) * PAGE_SIZE;
f0107c91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c94:	8b 55 08             	mov    0x8(%ebp),%edx
f0107c97:	c1 ea 0c             	shr    $0xc,%edx
f0107c9a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ca0:	c1 e2 02             	shl    $0x2,%edx
f0107ca3:	01 d0                	add    %edx,%eax
f0107ca5:	8b 00                	mov    (%eax),%eax
f0107ca7:	c1 e8 0c             	shr    $0xc,%eax
f0107caa:	c1 e0 0c             	shl    $0xc,%eax

// or we just call the function virtual to physical
	//virtual_to_physical(ptr_page_directory,virtual_address);


}
f0107cad:	c9                   	leave  
f0107cae:	c3                   	ret    

f0107caf <kfreeall>:




void kfreeall()
{
f0107caf:	55                   	push   %ebp
f0107cb0:	89 e5                	mov    %esp,%ebp
f0107cb2:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107cb5:	83 ec 04             	sub    $0x4,%esp
f0107cb8:	68 92 65 13 f0       	push   $0xf0136592
f0107cbd:	68 a8 00 00 00       	push   $0xa8
f0107cc2:	68 81 65 13 f0       	push   $0xf0136581
f0107cc7:	e8 39 85 ff ff       	call   f0100205 <_panic>

f0107ccc <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107ccc:	55                   	push   %ebp
f0107ccd:	89 e5                	mov    %esp,%ebp
f0107ccf:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107cd2:	83 ec 04             	sub    $0x4,%esp
f0107cd5:	68 92 65 13 f0       	push   $0xf0136592
f0107cda:	68 ae 00 00 00       	push   $0xae
f0107cdf:	68 81 65 13 f0       	push   $0xf0136581
f0107ce4:	e8 1c 85 ff ff       	call   f0100205 <_panic>

f0107ce9 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107ce9:	55                   	push   %ebp
f0107cea:	89 e5                	mov    %esp,%ebp
f0107cec:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107cef:	83 ec 04             	sub    $0x4,%esp
f0107cf2:	68 92 65 13 f0       	push   $0xf0136592
f0107cf7:	68 b3 00 00 00       	push   $0xb3
f0107cfc:	68 81 65 13 f0       	push   $0xf0136581
f0107d01:	e8 ff 84 ff ff       	call   f0100205 <_panic>

f0107d06 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107d06:	55                   	push   %ebp
f0107d07:	89 e5                	mov    %esp,%ebp
f0107d09:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107d0c:	83 ec 04             	sub    $0x4,%esp
f0107d0f:	68 a4 65 13 f0       	push   $0xf01365a4
f0107d14:	68 ca 00 00 00       	push   $0xca
f0107d19:	68 81 65 13 f0       	push   $0xf0136581
f0107d1e:	e8 e2 84 ff ff       	call   f0100205 <_panic>

f0107d23 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107d23:	55                   	push   %ebp
f0107d24:	89 e5                	mov    %esp,%ebp
f0107d26:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	//panic("pt_set_page_permissions() is not implemented yet...!!");
	uint32 *ptr_page_table =NULL;
f0107d29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107d30:	83 ec 04             	sub    $0x4,%esp
f0107d33:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107d36:	50                   	push   %eax
f0107d37:	ff 75 0c             	pushl  0xc(%ebp)
f0107d3a:	ff 75 08             	pushl  0x8(%ebp)
f0107d3d:	e8 9b ed ff ff       	call   f0106add <get_page_table>
f0107d42:	83 c4 10             	add    $0x10,%esp
f0107d45:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret!=TABLE_IN_MEMORY)
f0107d48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d4c:	74 14                	je     f0107d62 <pt_set_page_permissions+0x3f>
			panic("wrong virtual address");
f0107d4e:	83 ec 04             	sub    $0x4,%esp
f0107d51:	68 cb 65 13 f0       	push   $0xf01365cb
f0107d56:	6a 12                	push   $0x12
f0107d58:	68 e1 65 13 f0       	push   $0xf01365e1
f0107d5d:	e8 a3 84 ff ff       	call   f0100205 <_panic>
		else
		{
			ptr_page_table[PTX(virtual_address)]=ptr_page_table[PTX(virtual_address)]|permissions_to_set;
f0107d62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d68:	c1 ea 0c             	shr    $0xc,%edx
f0107d6b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107d71:	c1 e2 02             	shl    $0x2,%edx
f0107d74:	01 c2                	add    %eax,%edx
f0107d76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d79:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107d7c:	c1 e9 0c             	shr    $0xc,%ecx
f0107d7f:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107d85:	c1 e1 02             	shl    $0x2,%ecx
f0107d88:	01 c8                	add    %ecx,%eax
f0107d8a:	8b 00                	mov    (%eax),%eax
f0107d8c:	0b 45 10             	or     0x10(%ebp),%eax
f0107d8f:	89 02                	mov    %eax,(%edx)
			ptr_page_table[PTX(virtual_address)]=ptr_page_table[PTX(virtual_address)]&(~permissions_to_clear);
f0107d91:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d94:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d97:	c1 ea 0c             	shr    $0xc,%edx
f0107d9a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107da0:	c1 e2 02             	shl    $0x2,%edx
f0107da3:	01 d0                	add    %edx,%eax
f0107da5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107da8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107dab:	c1 e9 0c             	shr    $0xc,%ecx
f0107dae:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107db4:	c1 e1 02             	shl    $0x2,%ecx
f0107db7:	01 ca                	add    %ecx,%edx
f0107db9:	8b 12                	mov    (%edx),%edx
f0107dbb:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107dbe:	f7 d1                	not    %ecx
f0107dc0:	21 ca                	and    %ecx,%edx
f0107dc2:	89 10                	mov    %edx,(%eax)

			tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107dc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dc7:	83 ec 08             	sub    $0x8,%esp
f0107dca:	50                   	push   %eax
f0107dcb:	6a 00                	push   $0x0
f0107dcd:	e8 68 e7 ff ff       	call   f010653a <tlb_invalidate>
f0107dd2:	83 c4 10             	add    $0x10,%esp
		}
}
f0107dd5:	90                   	nop
f0107dd6:	c9                   	leave  
f0107dd7:	c3                   	ret    

f0107dd8 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107dd8:	55                   	push   %ebp
f0107dd9:	89 e5                	mov    %esp,%ebp
f0107ddb:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code
	//panic("pt_get_page_permissions() is not implemented yet...!!");
	uint32 *ptr_page_table =NULL;
f0107dde:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107de5:	83 ec 04             	sub    $0x4,%esp
f0107de8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107deb:	50                   	push   %eax
f0107dec:	ff 75 0c             	pushl  0xc(%ebp)
f0107def:	ff 75 08             	pushl  0x8(%ebp)
f0107df2:	e8 e6 ec ff ff       	call   f0106add <get_page_table>
f0107df7:	83 c4 10             	add    $0x10,%esp
f0107dfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret==TABLE_IN_MEMORY)
f0107dfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107e01:	75 23                	jne    f0107e26 <pt_get_page_permissions+0x4e>
		{
			uint32 per=ptr_page_table[PTX(virtual_address)]&4095;// and operation between 12 bits in the page and the 12 ones in  4095
f0107e03:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e06:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e09:	c1 ea 0c             	shr    $0xc,%edx
f0107e0c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107e12:	c1 e2 02             	shl    $0x2,%edx
f0107e15:	01 d0                	add    %edx,%eax
f0107e17:	8b 00                	mov    (%eax),%eax
f0107e19:	25 ff 0f 00 00       	and    $0xfff,%eax
f0107e1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			return per;
f0107e21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e24:	eb 05                	jmp    f0107e2b <pt_get_page_permissions+0x53>




		else
			return -1;
f0107e26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107e2b:	c9                   	leave  
f0107e2c:	c3                   	ret    

f0107e2d <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107e2d:	55                   	push   %ebp
f0107e2e:	89 e5                	mov    %esp,%ebp
f0107e30:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	//panic("pt_clear_page_table_entry() is not implemented yet...!!");
	uint32 *ptr_page_table =NULL;
f0107e33:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107e3a:	83 ec 04             	sub    $0x4,%esp
f0107e3d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107e40:	50                   	push   %eax
f0107e41:	ff 75 0c             	pushl  0xc(%ebp)
f0107e44:	ff 75 08             	pushl  0x8(%ebp)
f0107e47:	e8 91 ec ff ff       	call   f0106add <get_page_table>
f0107e4c:	83 c4 10             	add    $0x10,%esp
f0107e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ret!=TABLE_IN_MEMORY)
f0107e52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107e56:	74 14                	je     f0107e6c <pt_clear_page_table_entry+0x3f>
		panic("wrong virtual address");
f0107e58:	83 ec 04             	sub    $0x4,%esp
f0107e5b:	68 cb 65 13 f0       	push   $0xf01365cb
f0107e60:	6a 38                	push   $0x38
f0107e62:	68 e1 65 13 f0       	push   $0xf01365e1
f0107e67:	e8 99 83 ff ff       	call   f0100205 <_panic>
	else
	{
		ptr_page_table [PTX(virtual_address)]=0;
f0107e6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e6f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e72:	c1 ea 0c             	shr    $0xc,%edx
f0107e75:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107e7b:	c1 e2 02             	shl    $0x2,%edx
f0107e7e:	01 d0                	add    %edx,%eax
f0107e80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		 tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107e86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e89:	83 ec 08             	sub    $0x8,%esp
f0107e8c:	50                   	push   %eax
f0107e8d:	6a 00                	push   $0x0
f0107e8f:	e8 a6 e6 ff ff       	call   f010653a <tlb_invalidate>
f0107e94:	83 c4 10             	add    $0x10,%esp


	}

}
f0107e97:	90                   	nop
f0107e98:	c9                   	leave  
f0107e99:	c3                   	ret    

f0107e9a <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107e9a:	55                   	push   %ebp
f0107e9b:	89 e5                	mov    %esp,%ebp
f0107e9d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	//panic("virtual_to_physical() is not implemented yet...!!");
	uint32 *ptr_page_table =NULL;
f0107ea0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107ea7:	83 ec 04             	sub    $0x4,%esp
f0107eaa:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107ead:	50                   	push   %eax
f0107eae:	ff 75 0c             	pushl  0xc(%ebp)
f0107eb1:	ff 75 08             	pushl  0x8(%ebp)
f0107eb4:	e8 24 ec ff ff       	call   f0106add <get_page_table>
f0107eb9:	83 c4 10             	add    $0x10,%esp
f0107ebc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ret==TABLE_IN_MEMORY)
f0107ebf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107ec3:	75 24                	jne    f0107ee9 <virtual_to_physical+0x4f>
	{

		uint32 frameNumber=ptr_page_table[PTX(virtual_address)]>>12;
f0107ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ec8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ecb:	c1 ea 0c             	shr    $0xc,%edx
f0107ece:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ed4:	c1 e2 02             	shl    $0x2,%edx
f0107ed7:	01 d0                	add    %edx,%eax
f0107ed9:	8b 00                	mov    (%eax),%eax
f0107edb:	c1 e8 0c             	shr    $0xc,%eax
f0107ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
		return (frameNumber<<12);
f0107ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ee4:	c1 e0 0c             	shl    $0xc,%eax
f0107ee7:	eb 05                	jmp    f0107eee <virtual_to_physical+0x54>

	}

	else
		return -1;
f0107ee9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107eee:	c9                   	leave  
f0107eef:	c3                   	ret    

f0107ef0 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107ef0:	55                   	push   %ebp
f0107ef1:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107ef3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ef6:	c1 e8 16             	shr    $0x16,%eax
f0107ef9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f03:	01 d0                	add    %edx,%eax
f0107f05:	8b 00                	mov    (%eax),%eax
f0107f07:	83 e0 20             	and    $0x20,%eax
f0107f0a:	85 c0                	test   %eax,%eax
f0107f0c:	0f 95 c0             	setne  %al
f0107f0f:	0f b6 c0             	movzbl %al,%eax
}
f0107f12:	5d                   	pop    %ebp
f0107f13:	c3                   	ret    

f0107f14 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107f14:	55                   	push   %ebp
f0107f15:	89 e5                	mov    %esp,%ebp
f0107f17:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f1d:	c1 e8 16             	shr    $0x16,%eax
f0107f20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f27:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f2a:	01 d0                	add    %edx,%eax
f0107f2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f2f:	c1 ea 16             	shr    $0x16,%edx
f0107f32:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107f39:	8b 55 08             	mov    0x8(%ebp),%edx
f0107f3c:	01 ca                	add    %ecx,%edx
f0107f3e:	8b 12                	mov    (%edx),%edx
f0107f40:	83 e2 df             	and    $0xffffffdf,%edx
f0107f43:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107f45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f48:	83 ec 08             	sub    $0x8,%esp
f0107f4b:	50                   	push   %eax
f0107f4c:	6a 00                	push   $0x0
f0107f4e:	e8 e7 e5 ff ff       	call   f010653a <tlb_invalidate>
f0107f53:	83 c4 10             	add    $0x10,%esp
}
f0107f56:	90                   	nop
f0107f57:	c9                   	leave  
f0107f58:	c3                   	ret    

f0107f59 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107f59:	55                   	push   %ebp
f0107f5a:	89 e5                	mov    %esp,%ebp
f0107f5c:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107f5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f62:	c1 e8 16             	shr    $0x16,%eax
f0107f65:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f6f:	01 d0                	add    %edx,%eax
f0107f71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107f77:	0f 20 d8             	mov    %cr3,%eax
f0107f7a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107f7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107f80:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107f83:	90                   	nop
f0107f84:	c9                   	leave  
f0107f85:	c3                   	ret    

f0107f86 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107f86:	55                   	push   %ebp
f0107f87:	89 e5                	mov    %esp,%ebp
f0107f89:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107f8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107f93:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107f9a:	eb 21                	jmp    f0107fbd <env_page_ws_get_size+0x37>
f0107f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f9f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fa2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107fa5:	89 d0                	mov    %edx,%eax
f0107fa7:	01 c0                	add    %eax,%eax
f0107fa9:	01 d0                	add    %edx,%eax
f0107fab:	c1 e0 03             	shl    $0x3,%eax
f0107fae:	01 c8                	add    %ecx,%eax
f0107fb0:	8a 40 04             	mov    0x4(%eax),%al
f0107fb3:	84 c0                	test   %al,%al
f0107fb5:	75 03                	jne    f0107fba <env_page_ws_get_size+0x34>
f0107fb7:	ff 45 f8             	incl   -0x8(%ebp)
f0107fba:	ff 45 fc             	incl   -0x4(%ebp)
f0107fbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc0:	8b 50 74             	mov    0x74(%eax),%edx
f0107fc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107fc6:	39 c2                	cmp    %eax,%edx
f0107fc8:	77 d2                	ja     f0107f9c <env_page_ws_get_size+0x16>
	return counter;
f0107fca:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107fcd:	c9                   	leave  
f0107fce:	c3                   	ret    

f0107fcf <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107fcf:	55                   	push   %ebp
f0107fd0:	89 e5                	mov    %esp,%ebp
f0107fd2:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107fd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107fdc:	eb 4c                	jmp    f010802a <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fe1:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fe4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107fe7:	89 d0                	mov    %edx,%eax
f0107fe9:	01 c0                	add    %eax,%eax
f0107feb:	01 d0                	add    %edx,%eax
f0107fed:	c1 e0 03             	shl    $0x3,%eax
f0107ff0:	01 c8                	add    %ecx,%eax
f0107ff2:	8b 00                	mov    (%eax),%eax
f0107ff4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107ff7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ffa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107fff:	89 c2                	mov    %eax,%edx
f0108001:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108004:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108007:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010800a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010800f:	39 c2                	cmp    %eax,%edx
f0108011:	75 14                	jne    f0108027 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0108013:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108016:	83 ec 08             	sub    $0x8,%esp
f0108019:	50                   	push   %eax
f010801a:	ff 75 08             	pushl  0x8(%ebp)
f010801d:	e8 b9 00 00 00       	call   f01080db <env_page_ws_clear_entry>
f0108022:	83 c4 10             	add    $0x10,%esp
			break;
f0108025:	eb 10                	jmp    f0108037 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108027:	ff 45 f4             	incl   -0xc(%ebp)
f010802a:	8b 45 08             	mov    0x8(%ebp),%eax
f010802d:	8b 50 74             	mov    0x74(%eax),%edx
f0108030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108033:	39 c2                	cmp    %eax,%edx
f0108035:	77 a7                	ja     f0107fde <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108037:	90                   	nop
f0108038:	c9                   	leave  
f0108039:	c3                   	ret    

f010803a <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010803a:	55                   	push   %ebp
f010803b:	89 e5                	mov    %esp,%ebp
f010803d:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108040:	8b 45 08             	mov    0x8(%ebp),%eax
f0108043:	8b 40 74             	mov    0x74(%eax),%eax
f0108046:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108049:	77 16                	ja     f0108061 <env_page_ws_set_entry+0x27>
f010804b:	68 fc 65 13 f0       	push   $0xf01365fc
f0108050:	68 32 66 13 f0       	push   $0xf0136632
f0108055:	6a 26                	push   $0x26
f0108057:	68 48 66 13 f0       	push   $0xf0136648
f010805c:	e8 a4 81 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108061:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108068:	76 16                	jbe    f0108080 <env_page_ws_set_entry+0x46>
f010806a:	68 68 66 13 f0       	push   $0xf0136668
f010806f:	68 32 66 13 f0       	push   $0xf0136632
f0108074:	6a 27                	push   $0x27
f0108076:	68 48 66 13 f0       	push   $0xf0136648
f010807b:	e8 85 81 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108080:	8b 45 08             	mov    0x8(%ebp),%eax
f0108083:	8b 48 78             	mov    0x78(%eax),%ecx
f0108086:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108089:	89 d0                	mov    %edx,%eax
f010808b:	01 c0                	add    %eax,%eax
f010808d:	01 d0                	add    %edx,%eax
f010808f:	c1 e0 03             	shl    $0x3,%eax
f0108092:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0108095:	8b 45 10             	mov    0x10(%ebp),%eax
f0108098:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010809b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010809e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01080a3:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01080a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01080a8:	8b 48 78             	mov    0x78(%eax),%ecx
f01080ab:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080ae:	89 d0                	mov    %edx,%eax
f01080b0:	01 c0                	add    %eax,%eax
f01080b2:	01 d0                	add    %edx,%eax
f01080b4:	c1 e0 03             	shl    $0x3,%eax
f01080b7:	01 c8                	add    %ecx,%eax
f01080b9:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f01080bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c0:	8b 48 78             	mov    0x78(%eax),%ecx
f01080c3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080c6:	89 d0                	mov    %edx,%eax
f01080c8:	01 c0                	add    %eax,%eax
f01080ca:	01 d0                	add    %edx,%eax
f01080cc:	c1 e0 03             	shl    $0x3,%eax
f01080cf:	01 c8                	add    %ecx,%eax
f01080d1:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f01080d8:	90                   	nop
}
f01080d9:	c9                   	leave  
f01080da:	c3                   	ret    

f01080db <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01080db:	55                   	push   %ebp
f01080dc:	89 e5                	mov    %esp,%ebp
f01080de:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01080e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01080e4:	8b 40 74             	mov    0x74(%eax),%eax
f01080e7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01080ea:	77 16                	ja     f0108102 <env_page_ws_clear_entry+0x27>
f01080ec:	68 9c 66 13 f0       	push   $0xf013669c
f01080f1:	68 32 66 13 f0       	push   $0xf0136632
f01080f6:	6a 32                	push   $0x32
f01080f8:	68 48 66 13 f0       	push   $0xf0136648
f01080fd:	e8 03 81 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108102:	8b 45 08             	mov    0x8(%ebp),%eax
f0108105:	8b 48 78             	mov    0x78(%eax),%ecx
f0108108:	8b 55 0c             	mov    0xc(%ebp),%edx
f010810b:	89 d0                	mov    %edx,%eax
f010810d:	01 c0                	add    %eax,%eax
f010810f:	01 d0                	add    %edx,%eax
f0108111:	c1 e0 03             	shl    $0x3,%eax
f0108114:	01 c8                	add    %ecx,%eax
f0108116:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f010811c:	8b 45 08             	mov    0x8(%ebp),%eax
f010811f:	8b 48 78             	mov    0x78(%eax),%ecx
f0108122:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108125:	89 d0                	mov    %edx,%eax
f0108127:	01 c0                	add    %eax,%eax
f0108129:	01 d0                	add    %edx,%eax
f010812b:	c1 e0 03             	shl    $0x3,%eax
f010812e:	01 c8                	add    %ecx,%eax
f0108130:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108134:	8b 45 08             	mov    0x8(%ebp),%eax
f0108137:	8b 48 78             	mov    0x78(%eax),%ecx
f010813a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010813d:	89 d0                	mov    %edx,%eax
f010813f:	01 c0                	add    %eax,%eax
f0108141:	01 d0                	add    %edx,%eax
f0108143:	c1 e0 03             	shl    $0x3,%eax
f0108146:	01 c8                	add    %ecx,%eax
f0108148:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f010814f:	90                   	nop
f0108150:	c9                   	leave  
f0108151:	c3                   	ret    

f0108152 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108152:	55                   	push   %ebp
f0108153:	89 e5                	mov    %esp,%ebp
f0108155:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108158:	8b 45 08             	mov    0x8(%ebp),%eax
f010815b:	8b 40 74             	mov    0x74(%eax),%eax
f010815e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108161:	77 16                	ja     f0108179 <env_page_ws_get_virtual_address+0x27>
f0108163:	68 9c 66 13 f0       	push   $0xf013669c
f0108168:	68 32 66 13 f0       	push   $0xf0136632
f010816d:	6a 3a                	push   $0x3a
f010816f:	68 48 66 13 f0       	push   $0xf0136648
f0108174:	e8 8c 80 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108179:	8b 45 08             	mov    0x8(%ebp),%eax
f010817c:	8b 48 78             	mov    0x78(%eax),%ecx
f010817f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108182:	89 d0                	mov    %edx,%eax
f0108184:	01 c0                	add    %eax,%eax
f0108186:	01 d0                	add    %edx,%eax
f0108188:	c1 e0 03             	shl    $0x3,%eax
f010818b:	01 c8                	add    %ecx,%eax
f010818d:	8b 00                	mov    (%eax),%eax
f010818f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108192:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108195:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010819a:	c9                   	leave  
f010819b:	c3                   	ret    

f010819c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010819c:	55                   	push   %ebp
f010819d:	89 e5                	mov    %esp,%ebp
f010819f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01081a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01081a5:	8b 40 74             	mov    0x74(%eax),%eax
f01081a8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081ab:	77 16                	ja     f01081c3 <env_page_ws_get_time_stamp+0x27>
f01081ad:	68 9c 66 13 f0       	push   $0xf013669c
f01081b2:	68 32 66 13 f0       	push   $0xf0136632
f01081b7:	6a 40                	push   $0x40
f01081b9:	68 48 66 13 f0       	push   $0xf0136648
f01081be:	e8 42 80 ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01081c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c6:	8b 48 78             	mov    0x78(%eax),%ecx
f01081c9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081cc:	89 d0                	mov    %edx,%eax
f01081ce:	01 c0                	add    %eax,%eax
f01081d0:	01 d0                	add    %edx,%eax
f01081d2:	c1 e0 03             	shl    $0x3,%eax
f01081d5:	01 c8                	add    %ecx,%eax
f01081d7:	8b 40 08             	mov    0x8(%eax),%eax
}
f01081da:	c9                   	leave  
f01081db:	c3                   	ret    

f01081dc <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01081dc:	55                   	push   %ebp
f01081dd:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f01081df:	8b 45 08             	mov    0x8(%ebp),%eax
f01081e2:	8b 48 78             	mov    0x78(%eax),%ecx
f01081e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081e8:	89 d0                	mov    %edx,%eax
f01081ea:	01 c0                	add    %eax,%eax
f01081ec:	01 d0                	add    %edx,%eax
f01081ee:	c1 e0 03             	shl    $0x3,%eax
f01081f1:	01 c8                	add    %ecx,%eax
f01081f3:	8a 40 04             	mov    0x4(%eax),%al
f01081f6:	0f b6 c0             	movzbl %al,%eax
}
f01081f9:	5d                   	pop    %ebp
f01081fa:	c3                   	ret    

f01081fb <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f01081fb:	55                   	push   %ebp
f01081fc:	89 e5                	mov    %esp,%ebp
f01081fe:	53                   	push   %ebx
f01081ff:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108202:	83 ec 0c             	sub    $0xc,%esp
f0108205:	6a 02                	push   $0x2
f0108207:	e8 07 61 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f010820c:	83 c4 10             	add    $0x10,%esp
f010820f:	85 c0                	test   %eax,%eax
f0108211:	0f 84 fe 00 00 00    	je     f0108315 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108217:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010821e:	83 ec 0c             	sub    $0xc,%esp
f0108221:	68 d4 66 13 f0       	push   $0xf01366d4
f0108226:	e8 e3 8a ff ff       	call   f0100d0e <cprintf>
f010822b:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010822e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108231:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108237:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010823a:	eb 2c                	jmp    f0108268 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010823c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010823f:	8b 10                	mov    (%eax),%edx
f0108241:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108244:	8d 48 01             	lea    0x1(%eax),%ecx
f0108247:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010824a:	83 ec 04             	sub    $0x4,%esp
f010824d:	52                   	push   %edx
f010824e:	50                   	push   %eax
f010824f:	68 ee 66 13 f0       	push   $0xf01366ee
f0108254:	e8 b5 8a ff ff       	call   f0100d0e <cprintf>
f0108259:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010825c:	8b 45 08             	mov    0x8(%ebp),%eax
f010825f:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108265:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108268:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010826c:	74 08                	je     f0108276 <env_page_ws_print+0x7b>
f010826e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108271:	8b 40 10             	mov    0x10(%eax),%eax
f0108274:	eb 05                	jmp    f010827b <env_page_ws_print+0x80>
f0108276:	b8 00 00 00 00       	mov    $0x0,%eax
f010827b:	8b 55 08             	mov    0x8(%ebp),%edx
f010827e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108284:	8b 45 08             	mov    0x8(%ebp),%eax
f0108287:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010828d:	85 c0                	test   %eax,%eax
f010828f:	75 ab                	jne    f010823c <env_page_ws_print+0x41>
f0108291:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108295:	75 a5                	jne    f010823c <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108297:	83 ec 0c             	sub    $0xc,%esp
f010829a:	68 f6 66 13 f0       	push   $0xf01366f6
f010829f:	e8 6a 8a ff ff       	call   f0100d0e <cprintf>
f01082a4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01082a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01082aa:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01082b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082b3:	eb 2c                	jmp    f01082e1 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01082b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082b8:	8b 10                	mov    (%eax),%edx
f01082ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082bd:	8d 48 01             	lea    0x1(%eax),%ecx
f01082c0:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01082c3:	83 ec 04             	sub    $0x4,%esp
f01082c6:	52                   	push   %edx
f01082c7:	50                   	push   %eax
f01082c8:	68 ee 66 13 f0       	push   $0xf01366ee
f01082cd:	e8 3c 8a ff ff       	call   f0100d0e <cprintf>
f01082d2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01082d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01082de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01082e5:	74 08                	je     f01082ef <env_page_ws_print+0xf4>
f01082e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082ea:	8b 40 10             	mov    0x10(%eax),%eax
f01082ed:	eb 05                	jmp    f01082f4 <env_page_ws_print+0xf9>
f01082ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01082f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01082f7:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f01082fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108300:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108306:	85 c0                	test   %eax,%eax
f0108308:	75 ab                	jne    f01082b5 <env_page_ws_print+0xba>
f010830a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010830e:	75 a5                	jne    f01082b5 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108310:	e9 95 01 00 00       	jmp    f01084aa <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108315:	83 ec 0c             	sub    $0xc,%esp
f0108318:	68 11 67 13 f0       	push   $0xf0136711
f010831d:	e8 ec 89 ff ff       	call   f0100d0e <cprintf>
f0108322:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108325:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010832c:	e9 6a 01 00 00       	jmp    f010849b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108331:	8b 45 08             	mov    0x8(%ebp),%eax
f0108334:	8b 48 78             	mov    0x78(%eax),%ecx
f0108337:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010833a:	89 d0                	mov    %edx,%eax
f010833c:	01 c0                	add    %eax,%eax
f010833e:	01 d0                	add    %edx,%eax
f0108340:	c1 e0 03             	shl    $0x3,%eax
f0108343:	01 c8                	add    %ecx,%eax
f0108345:	8a 40 04             	mov    0x4(%eax),%al
f0108348:	84 c0                	test   %al,%al
f010834a:	74 43                	je     f010838f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f010834c:	83 ec 0c             	sub    $0xc,%esp
f010834f:	68 1b 67 13 f0       	push   $0xf013671b
f0108354:	e8 b5 89 ff ff       	call   f0100d0e <cprintf>
f0108359:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010835c:	8b 45 08             	mov    0x8(%ebp),%eax
f010835f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108365:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108368:	75 10                	jne    f010837a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f010836a:	83 ec 0c             	sub    $0xc,%esp
f010836d:	68 2a 67 13 f0       	push   $0xf013672a
f0108372:	e8 97 89 ff ff       	call   f0100d0e <cprintf>
f0108377:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010837a:	83 ec 0c             	sub    $0xc,%esp
f010837d:	68 30 67 13 f0       	push   $0xf0136730
f0108382:	e8 87 89 ff ff       	call   f0100d0e <cprintf>
f0108387:	83 c4 10             	add    $0x10,%esp
				continue;
f010838a:	e9 09 01 00 00       	jmp    f0108498 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010838f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108392:	8b 48 78             	mov    0x78(%eax),%ecx
f0108395:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108398:	89 d0                	mov    %edx,%eax
f010839a:	01 c0                	add    %eax,%eax
f010839c:	01 d0                	add    %edx,%eax
f010839e:	c1 e0 03             	shl    $0x3,%eax
f01083a1:	01 c8                	add    %ecx,%eax
f01083a3:	8b 00                	mov    (%eax),%eax
f01083a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01083a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01083ab:	8b 48 78             	mov    0x78(%eax),%ecx
f01083ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083b1:	89 d0                	mov    %edx,%eax
f01083b3:	01 c0                	add    %eax,%eax
f01083b5:	01 d0                	add    %edx,%eax
f01083b7:	c1 e0 03             	shl    $0x3,%eax
f01083ba:	01 c8                	add    %ecx,%eax
f01083bc:	8b 40 08             	mov    0x8(%eax),%eax
f01083bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01083c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01083c8:	83 ec 08             	sub    $0x8,%esp
f01083cb:	ff 75 e8             	pushl  -0x18(%ebp)
f01083ce:	50                   	push   %eax
f01083cf:	e8 04 fa ff ff       	call   f0107dd8 <pt_get_page_permissions>
f01083d4:	83 c4 10             	add    $0x10,%esp
f01083d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01083da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01083dd:	83 e0 40             	and    $0x40,%eax
f01083e0:	85 c0                	test   %eax,%eax
f01083e2:	0f 95 c0             	setne  %al
f01083e5:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01083e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01083eb:	83 e0 20             	and    $0x20,%eax
f01083ee:	85 c0                	test   %eax,%eax
f01083f0:	0f 95 c0             	setne  %al
f01083f3:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01083f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01083f9:	25 00 02 00 00       	and    $0x200,%eax
f01083fe:	85 c0                	test   %eax,%eax
f0108400:	0f 95 c0             	setne  %al
f0108403:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108406:	8b 45 08             	mov    0x8(%ebp),%eax
f0108409:	8b 48 78             	mov    0x78(%eax),%ecx
f010840c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010840f:	89 d0                	mov    %edx,%eax
f0108411:	01 c0                	add    %eax,%eax
f0108413:	01 d0                	add    %edx,%eax
f0108415:	c1 e0 03             	shl    $0x3,%eax
f0108418:	01 c8                	add    %ecx,%eax
f010841a:	8b 00                	mov    (%eax),%eax
f010841c:	83 ec 04             	sub    $0x4,%esp
f010841f:	50                   	push   %eax
f0108420:	ff 75 ec             	pushl  -0x14(%ebp)
f0108423:	68 32 67 13 f0       	push   $0xf0136732
f0108428:	e8 e1 88 ff ff       	call   f0100d0e <cprintf>
f010842d:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108430:	8b 45 08             	mov    0x8(%ebp),%eax
f0108433:	8b 48 78             	mov    0x78(%eax),%ecx
f0108436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108439:	89 d0                	mov    %edx,%eax
f010843b:	01 c0                	add    %eax,%eax
f010843d:	01 d0                	add    %edx,%eax
f010843f:	c1 e0 03             	shl    $0x3,%eax
f0108442:	01 c8                	add    %ecx,%eax
f0108444:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108447:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010844b:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010844f:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0108453:	83 ec 08             	sub    $0x8,%esp
f0108456:	53                   	push   %ebx
f0108457:	ff 75 e4             	pushl  -0x1c(%ebp)
f010845a:	51                   	push   %ecx
f010845b:	52                   	push   %edx
f010845c:	50                   	push   %eax
f010845d:	68 44 67 13 f0       	push   $0xf0136744
f0108462:	e8 a7 88 ff ff       	call   f0100d0e <cprintf>
f0108467:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010846a:	8b 45 08             	mov    0x8(%ebp),%eax
f010846d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108473:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108476:	75 10                	jne    f0108488 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108478:	83 ec 0c             	sub    $0xc,%esp
f010847b:	68 8b 67 13 f0       	push   $0xf013678b
f0108480:	e8 89 88 ff ff       	call   f0100d0e <cprintf>
f0108485:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108488:	83 ec 0c             	sub    $0xc,%esp
f010848b:	68 30 67 13 f0       	push   $0xf0136730
f0108490:	e8 79 88 ff ff       	call   f0100d0e <cprintf>
f0108495:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108498:	ff 45 ec             	incl   -0x14(%ebp)
f010849b:	8b 45 08             	mov    0x8(%ebp),%eax
f010849e:	8b 40 74             	mov    0x74(%eax),%eax
f01084a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084a4:	0f 87 87 fe ff ff    	ja     f0108331 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01084aa:	90                   	nop
f01084ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01084ae:	c9                   	leave  
f01084af:	c3                   	ret    

f01084b0 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01084b0:	55                   	push   %ebp
f01084b1:	89 e5                	mov    %esp,%ebp
f01084b3:	53                   	push   %ebx
f01084b4:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01084b7:	83 ec 0c             	sub    $0xc,%esp
f01084ba:	68 90 67 13 f0       	push   $0xf0136790
f01084bf:	e8 4a 88 ff ff       	call   f0100d0e <cprintf>
f01084c4:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01084c7:	83 ec 0c             	sub    $0xc,%esp
f01084ca:	68 c5 67 13 f0       	push   $0xf01367c5
f01084cf:	e8 3a 88 ff ff       	call   f0100d0e <cprintf>
f01084d4:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01084d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01084de:	e9 10 01 00 00       	jmp    f01085f3 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f01084e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01084e9:	89 d0                	mov    %edx,%eax
f01084eb:	01 c0                	add    %eax,%eax
f01084ed:	01 d0                	add    %edx,%eax
f01084ef:	c1 e0 03             	shl    $0x3,%eax
f01084f2:	01 c8                	add    %ecx,%eax
f01084f4:	83 e8 80             	sub    $0xffffff80,%eax
f01084f7:	8a 00                	mov    (%eax),%al
f01084f9:	84 c0                	test   %al,%al
f01084fb:	74 43                	je     f0108540 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f01084fd:	83 ec 0c             	sub    $0xc,%esp
f0108500:	68 1b 67 13 f0       	push   $0xf013671b
f0108505:	e8 04 88 ff ff       	call   f0100d0e <cprintf>
f010850a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010850d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108510:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108516:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108519:	75 10                	jne    f010852b <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f010851b:	83 ec 0c             	sub    $0xc,%esp
f010851e:	68 2a 67 13 f0       	push   $0xf013672a
f0108523:	e8 e6 87 ff ff       	call   f0100d0e <cprintf>
f0108528:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010852b:	83 ec 0c             	sub    $0xc,%esp
f010852e:	68 30 67 13 f0       	push   $0xf0136730
f0108533:	e8 d6 87 ff ff       	call   f0100d0e <cprintf>
f0108538:	83 c4 10             	add    $0x10,%esp
			continue;
f010853b:	e9 b0 00 00 00       	jmp    f01085f0 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0108540:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108543:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108546:	89 d0                	mov    %edx,%eax
f0108548:	01 c0                	add    %eax,%eax
f010854a:	01 d0                	add    %edx,%eax
f010854c:	c1 e0 03             	shl    $0x3,%eax
f010854f:	01 c8                	add    %ecx,%eax
f0108551:	83 c0 7c             	add    $0x7c,%eax
f0108554:	8b 00                	mov    (%eax),%eax
f0108556:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108559:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010855c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010855f:	89 d0                	mov    %edx,%eax
f0108561:	01 c0                	add    %eax,%eax
f0108563:	01 d0                	add    %edx,%eax
f0108565:	c1 e0 03             	shl    $0x3,%eax
f0108568:	01 c8                	add    %ecx,%eax
f010856a:	83 c0 7c             	add    $0x7c,%eax
f010856d:	8b 00                	mov    (%eax),%eax
f010856f:	83 ec 04             	sub    $0x4,%esp
f0108572:	50                   	push   %eax
f0108573:	ff 75 f4             	pushl  -0xc(%ebp)
f0108576:	68 d0 67 13 f0       	push   $0xf01367d0
f010857b:	e8 8e 87 ff ff       	call   f0100d0e <cprintf>
f0108580:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108583:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108586:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108589:	89 d0                	mov    %edx,%eax
f010858b:	01 c0                	add    %eax,%eax
f010858d:	01 d0                	add    %edx,%eax
f010858f:	c1 e0 03             	shl    $0x3,%eax
f0108592:	01 c8                	add    %ecx,%eax
f0108594:	05 84 00 00 00       	add    $0x84,%eax
f0108599:	8b 18                	mov    (%eax),%ebx
f010859b:	8b 45 08             	mov    0x8(%ebp),%eax
f010859e:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085a1:	83 ec 08             	sub    $0x8,%esp
f01085a4:	ff 75 f0             	pushl  -0x10(%ebp)
f01085a7:	50                   	push   %eax
f01085a8:	e8 43 f9 ff ff       	call   f0107ef0 <pd_is_table_used>
f01085ad:	83 c4 10             	add    $0x10,%esp
f01085b0:	83 ec 04             	sub    $0x4,%esp
f01085b3:	53                   	push   %ebx
f01085b4:	50                   	push   %eax
f01085b5:	68 e8 67 13 f0       	push   $0xf01367e8
f01085ba:	e8 4f 87 ff ff       	call   f0100d0e <cprintf>
f01085bf:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01085c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01085c5:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01085cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01085ce:	75 10                	jne    f01085e0 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f01085d0:	83 ec 0c             	sub    $0xc,%esp
f01085d3:	68 8b 67 13 f0       	push   $0xf013678b
f01085d8:	e8 31 87 ff ff       	call   f0100d0e <cprintf>
f01085dd:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01085e0:	83 ec 0c             	sub    $0xc,%esp
f01085e3:	68 30 67 13 f0       	push   $0xf0136730
f01085e8:	e8 21 87 ff ff       	call   f0100d0e <cprintf>
f01085ed:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01085f0:	ff 45 f4             	incl   -0xc(%ebp)
f01085f3:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01085f7:	0f 86 e6 fe ff ff    	jbe    f01084e3 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01085fd:	90                   	nop
f01085fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108601:	c9                   	leave  
f0108602:	c3                   	ret    

f0108603 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108603:	55                   	push   %ebp
f0108604:	89 e5                	mov    %esp,%ebp
f0108606:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108609:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108610:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108617:	eb 20                	jmp    f0108639 <env_table_ws_get_size+0x36>
f0108619:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010861c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010861f:	89 d0                	mov    %edx,%eax
f0108621:	01 c0                	add    %eax,%eax
f0108623:	01 d0                	add    %edx,%eax
f0108625:	c1 e0 03             	shl    $0x3,%eax
f0108628:	01 c8                	add    %ecx,%eax
f010862a:	83 e8 80             	sub    $0xffffff80,%eax
f010862d:	8a 00                	mov    (%eax),%al
f010862f:	84 c0                	test   %al,%al
f0108631:	75 03                	jne    f0108636 <env_table_ws_get_size+0x33>
f0108633:	ff 45 f8             	incl   -0x8(%ebp)
f0108636:	ff 45 fc             	incl   -0x4(%ebp)
f0108639:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010863d:	7e da                	jle    f0108619 <env_table_ws_get_size+0x16>
	return counter;
f010863f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108642:	c9                   	leave  
f0108643:	c3                   	ret    

f0108644 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108644:	55                   	push   %ebp
f0108645:	89 e5                	mov    %esp,%ebp
f0108647:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010864a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108651:	eb 4c                	jmp    f010869f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108653:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108656:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108659:	89 d0                	mov    %edx,%eax
f010865b:	01 c0                	add    %eax,%eax
f010865d:	01 d0                	add    %edx,%eax
f010865f:	c1 e0 03             	shl    $0x3,%eax
f0108662:	01 c8                	add    %ecx,%eax
f0108664:	83 c0 7c             	add    $0x7c,%eax
f0108667:	8b 00                	mov    (%eax),%eax
f0108669:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010866c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010866f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108674:	89 c2                	mov    %eax,%edx
f0108676:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108679:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010867c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010867f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108684:	39 c2                	cmp    %eax,%edx
f0108686:	75 14                	jne    f010869c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108688:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010868b:	83 ec 08             	sub    $0x8,%esp
f010868e:	50                   	push   %eax
f010868f:	ff 75 08             	pushl  0x8(%ebp)
f0108692:	e8 b8 00 00 00       	call   f010874f <env_table_ws_clear_entry>
f0108697:	83 c4 10             	add    $0x10,%esp
			break;
f010869a:	eb 09                	jmp    f01086a5 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010869c:	ff 45 f4             	incl   -0xc(%ebp)
f010869f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01086a3:	7e ae                	jle    f0108653 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01086a5:	90                   	nop
f01086a6:	c9                   	leave  
f01086a7:	c3                   	ret    

f01086a8 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01086a8:	55                   	push   %ebp
f01086a9:	89 e5                	mov    %esp,%ebp
f01086ab:	53                   	push   %ebx
f01086ac:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086af:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086b3:	76 19                	jbe    f01086ce <env_table_ws_set_entry+0x26>
f01086b5:	68 0c 68 13 f0       	push   $0xf013680c
f01086ba:	68 32 66 13 f0       	push   $0xf0136632
f01086bf:	68 b6 00 00 00       	push   $0xb6
f01086c4:	68 48 66 13 f0       	push   $0xf0136648
f01086c9:	e8 37 7b ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01086ce:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01086d5:	76 19                	jbe    f01086f0 <env_table_ws_set_entry+0x48>
f01086d7:	68 68 66 13 f0       	push   $0xf0136668
f01086dc:	68 32 66 13 f0       	push   $0xf0136632
f01086e1:	68 b7 00 00 00       	push   $0xb7
f01086e6:	68 48 66 13 f0       	push   $0xf0136648
f01086eb:	e8 15 7b ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01086f0:	8b 45 10             	mov    0x10(%ebp),%eax
f01086f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01086f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086f9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01086fe:	89 c1                	mov    %eax,%ecx
f0108700:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108703:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108706:	89 d0                	mov    %edx,%eax
f0108708:	01 c0                	add    %eax,%eax
f010870a:	01 d0                	add    %edx,%eax
f010870c:	c1 e0 03             	shl    $0x3,%eax
f010870f:	01 d8                	add    %ebx,%eax
f0108711:	83 c0 7c             	add    $0x7c,%eax
f0108714:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108716:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108719:	8b 55 0c             	mov    0xc(%ebp),%edx
f010871c:	89 d0                	mov    %edx,%eax
f010871e:	01 c0                	add    %eax,%eax
f0108720:	01 d0                	add    %edx,%eax
f0108722:	c1 e0 03             	shl    $0x3,%eax
f0108725:	01 c8                	add    %ecx,%eax
f0108727:	83 e8 80             	sub    $0xffffff80,%eax
f010872a:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010872d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108730:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108733:	89 d0                	mov    %edx,%eax
f0108735:	01 c0                	add    %eax,%eax
f0108737:	01 d0                	add    %edx,%eax
f0108739:	c1 e0 03             	shl    $0x3,%eax
f010873c:	01 c8                	add    %ecx,%eax
f010873e:	05 84 00 00 00       	add    $0x84,%eax
f0108743:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108749:	90                   	nop
}
f010874a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010874d:	c9                   	leave  
f010874e:	c3                   	ret    

f010874f <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010874f:	55                   	push   %ebp
f0108750:	89 e5                	mov    %esp,%ebp
f0108752:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108755:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108759:	76 19                	jbe    f0108774 <env_table_ws_clear_entry+0x25>
f010875b:	68 0c 68 13 f0       	push   $0xf013680c
f0108760:	68 32 66 13 f0       	push   $0xf0136632
f0108765:	68 c2 00 00 00       	push   $0xc2
f010876a:	68 48 66 13 f0       	push   $0xf0136648
f010876f:	e8 91 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108774:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108777:	8b 55 0c             	mov    0xc(%ebp),%edx
f010877a:	89 d0                	mov    %edx,%eax
f010877c:	01 c0                	add    %eax,%eax
f010877e:	01 d0                	add    %edx,%eax
f0108780:	c1 e0 03             	shl    $0x3,%eax
f0108783:	01 c8                	add    %ecx,%eax
f0108785:	83 c0 7c             	add    $0x7c,%eax
f0108788:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010878e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108791:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108794:	89 d0                	mov    %edx,%eax
f0108796:	01 c0                	add    %eax,%eax
f0108798:	01 d0                	add    %edx,%eax
f010879a:	c1 e0 03             	shl    $0x3,%eax
f010879d:	01 c8                	add    %ecx,%eax
f010879f:	83 e8 80             	sub    $0xffffff80,%eax
f01087a2:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01087a5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087ab:	89 d0                	mov    %edx,%eax
f01087ad:	01 c0                	add    %eax,%eax
f01087af:	01 d0                	add    %edx,%eax
f01087b1:	c1 e0 03             	shl    $0x3,%eax
f01087b4:	01 c8                	add    %ecx,%eax
f01087b6:	05 84 00 00 00       	add    $0x84,%eax
f01087bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01087c1:	90                   	nop
f01087c2:	c9                   	leave  
f01087c3:	c3                   	ret    

f01087c4 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01087c4:	55                   	push   %ebp
f01087c5:	89 e5                	mov    %esp,%ebp
f01087c7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01087ca:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01087ce:	76 19                	jbe    f01087e9 <env_table_ws_get_virtual_address+0x25>
f01087d0:	68 0c 68 13 f0       	push   $0xf013680c
f01087d5:	68 32 66 13 f0       	push   $0xf0136632
f01087da:	68 ca 00 00 00       	push   $0xca
f01087df:	68 48 66 13 f0       	push   $0xf0136648
f01087e4:	e8 1c 7a ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f01087e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087ec:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087ef:	89 d0                	mov    %edx,%eax
f01087f1:	01 c0                	add    %eax,%eax
f01087f3:	01 d0                	add    %edx,%eax
f01087f5:	c1 e0 03             	shl    $0x3,%eax
f01087f8:	01 c8                	add    %ecx,%eax
f01087fa:	83 c0 7c             	add    $0x7c,%eax
f01087fd:	8b 00                	mov    (%eax),%eax
f01087ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108802:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108805:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010880a:	c9                   	leave  
f010880b:	c3                   	ret    

f010880c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010880c:	55                   	push   %ebp
f010880d:	89 e5                	mov    %esp,%ebp
f010880f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108812:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108816:	76 19                	jbe    f0108831 <env_table_ws_get_time_stamp+0x25>
f0108818:	68 0c 68 13 f0       	push   $0xf013680c
f010881d:	68 32 66 13 f0       	push   $0xf0136632
f0108822:	68 d1 00 00 00       	push   $0xd1
f0108827:	68 48 66 13 f0       	push   $0xf0136648
f010882c:	e8 d4 79 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108831:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108834:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108837:	89 d0                	mov    %edx,%eax
f0108839:	01 c0                	add    %eax,%eax
f010883b:	01 d0                	add    %edx,%eax
f010883d:	c1 e0 03             	shl    $0x3,%eax
f0108840:	01 c8                	add    %ecx,%eax
f0108842:	05 84 00 00 00       	add    $0x84,%eax
f0108847:	8b 00                	mov    (%eax),%eax
}
f0108849:	c9                   	leave  
f010884a:	c3                   	ret    

f010884b <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010884b:	55                   	push   %ebp
f010884c:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010884e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108851:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108854:	89 d0                	mov    %edx,%eax
f0108856:	01 c0                	add    %eax,%eax
f0108858:	01 d0                	add    %edx,%eax
f010885a:	c1 e0 03             	shl    $0x3,%eax
f010885d:	01 c8                	add    %ecx,%eax
f010885f:	83 e8 80             	sub    $0xffffff80,%eax
f0108862:	8a 00                	mov    (%eax),%al
f0108864:	0f b6 c0             	movzbl %al,%eax
}
f0108867:	5d                   	pop    %ebp
f0108868:	c3                   	ret    

f0108869 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108869:	55                   	push   %ebp
f010886a:	89 e5                	mov    %esp,%ebp
f010886c:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f010886f:	83 ec 04             	sub    $0x4,%esp
f0108872:	68 40 68 13 f0       	push   $0xf0136840
f0108877:	68 e5 00 00 00       	push   $0xe5
f010887c:	68 48 66 13 f0       	push   $0xf0136648
f0108881:	e8 7f 79 ff ff       	call   f0100205 <_panic>

f0108886 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108886:	55                   	push   %ebp
f0108887:	89 e5                	mov    %esp,%ebp
f0108889:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010888c:	83 ec 04             	sub    $0x4,%esp
f010888f:	68 6c 68 13 f0       	push   $0xf013686c
f0108894:	68 ec 00 00 00       	push   $0xec
f0108899:	68 48 66 13 f0       	push   $0xf0136648
f010889e:	e8 62 79 ff ff       	call   f0100205 <_panic>

f01088a3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01088a3:	55                   	push   %ebp
f01088a4:	89 e5                	mov    %esp,%ebp
f01088a6:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01088a9:	83 ec 04             	sub    $0x4,%esp
f01088ac:	68 9c 68 13 f0       	push   $0xf013689c
f01088b1:	68 f3 00 00 00       	push   $0xf3
f01088b6:	68 48 66 13 f0       	push   $0xf0136648
f01088bb:	e8 45 79 ff ff       	call   f0100205 <_panic>

f01088c0 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01088c0:	55                   	push   %ebp
f01088c1:	89 e5                	mov    %esp,%ebp
f01088c3:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	//panic("cut_paste_pages() is not implemented yet...!!");
	ROUNDDOWN(source_va,4);
f01088c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01088c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	ROUNDUP(dest_va,4);
f01088cc:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
f01088d3:	8b 55 10             	mov    0x10(%ebp),%edx
f01088d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01088d9:	01 d0                	add    %edx,%eax
f01088db:	48                   	dec    %eax
f01088dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 j=0,*ptr_page_table3=NULL;
f01088df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01088e6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	for(uint32 i=0;i<num_of_pages;i++)
f01088ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01088f4:	eb 56                	jmp    f010894c <cut_paste_pages+0x8c>
	{
		int ret=get_page_table(page_directory,dest_va+j,&ptr_page_table3);
f01088f6:	8b 55 10             	mov    0x10(%ebp),%edx
f01088f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01088fc:	01 c2                	add    %eax,%edx
f01088fe:	83 ec 04             	sub    $0x4,%esp
f0108901:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108904:	50                   	push   %eax
f0108905:	52                   	push   %edx
f0108906:	ff 75 08             	pushl  0x8(%ebp)
f0108909:	e8 cf e1 ff ff       	call   f0106add <get_page_table>
f010890e:	83 c4 10             	add    $0x10,%esp
f0108911:	89 45 dc             	mov    %eax,-0x24(%ebp)
		struct FrameInfo*info1 =get_frame_info(page_directory,dest_va+j,&ptr_page_table3);
f0108914:	8b 55 10             	mov    0x10(%ebp),%edx
f0108917:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010891a:	01 c2                	add    %eax,%edx
f010891c:	83 ec 04             	sub    $0x4,%esp
f010891f:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108922:	50                   	push   %eax
f0108923:	52                   	push   %edx
f0108924:	ff 75 08             	pushl  0x8(%ebp)
f0108927:	e8 06 e5 ff ff       	call   f0106e32 <get_frame_info>
f010892c:	83 c4 10             	add    $0x10,%esp
f010892f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if(info1!=0)
f0108932:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108936:	74 0a                	je     f0108942 <cut_paste_pages+0x82>
			return -1;
f0108938:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010893d:	e9 6c 01 00 00       	jmp    f0108aae <cut_paste_pages+0x1ee>
		j+=(4*1024);
f0108942:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("cut_paste_pages() is not implemented yet...!!");
	ROUNDDOWN(source_va,4);
	ROUNDUP(dest_va,4);
	uint32 j=0,*ptr_page_table3=NULL;
	for(uint32 i=0;i<num_of_pages;i++)
f0108949:	ff 45 f0             	incl   -0x10(%ebp)
f010894c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010894f:	3b 45 14             	cmp    0x14(%ebp),%eax
f0108952:	72 a2                	jb     f01088f6 <cut_paste_pages+0x36>
		if(info1!=0)
			return -1;
		j+=(4*1024);

	}
	j=0;
f0108954:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

for (uint32 i=0;i<num_of_pages;i++)
f010895b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0108962:	e9 36 01 00 00       	jmp    f0108a9d <cut_paste_pages+0x1dd>
{
	uint32 *ptr_page_table1=NULL,*ptr_page_table2=NULL;
f0108967:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f010896e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	int ret1=get_page_table(page_directory,source_va+j,&ptr_page_table1);
f0108975:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108978:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010897b:	01 c2                	add    %eax,%edx
f010897d:	83 ec 04             	sub    $0x4,%esp
f0108980:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108983:	50                   	push   %eax
f0108984:	52                   	push   %edx
f0108985:	ff 75 08             	pushl  0x8(%ebp)
f0108988:	e8 50 e1 ff ff       	call   f0106add <get_page_table>
f010898d:	83 c4 10             	add    $0x10,%esp
f0108990:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	int ret2=get_page_table(page_directory,dest_va+j,&ptr_page_table2);
f0108993:	8b 55 10             	mov    0x10(%ebp),%edx
f0108996:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108999:	01 c2                	add    %eax,%edx
f010899b:	83 ec 04             	sub    $0x4,%esp
f010899e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01089a1:	50                   	push   %eax
f01089a2:	52                   	push   %edx
f01089a3:	ff 75 08             	pushl  0x8(%ebp)
f01089a6:	e8 32 e1 ff ff       	call   f0106add <get_page_table>
f01089ab:	83 c4 10             	add    $0x10,%esp
f01089ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
	struct FrameInfo*info2 =get_frame_info(page_directory,source_va+j,&ptr_page_table1);
f01089b1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089b7:	01 c2                	add    %eax,%edx
f01089b9:	83 ec 04             	sub    $0x4,%esp
f01089bc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f01089bf:	50                   	push   %eax
f01089c0:	52                   	push   %edx
f01089c1:	ff 75 08             	pushl  0x8(%ebp)
f01089c4:	e8 69 e4 ff ff       	call   f0106e32 <get_frame_info>
f01089c9:	83 c4 10             	add    $0x10,%esp
f01089cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
if(ret2==TABLE_IN_MEMORY)
f01089cf:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01089d3:	75 53                	jne    f0108a28 <cut_paste_pages+0x168>
{

		map_frame(page_directory,info2,dest_va+j,ptr_page_table1[PTX(source_va+j)]&4095);
f01089d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01089d8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01089db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01089de:	01 ca                	add    %ecx,%edx
f01089e0:	c1 ea 0c             	shr    $0xc,%edx
f01089e3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01089e9:	c1 e2 02             	shl    $0x2,%edx
f01089ec:	01 d0                	add    %edx,%eax
f01089ee:	8b 00                	mov    (%eax),%eax
f01089f0:	25 ff 0f 00 00       	and    $0xfff,%eax
f01089f5:	89 c2                	mov    %eax,%edx
f01089f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
f01089fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089fd:	01 c8                	add    %ecx,%eax
f01089ff:	52                   	push   %edx
f0108a00:	50                   	push   %eax
f0108a01:	ff 75 cc             	pushl  -0x34(%ebp)
f0108a04:	ff 75 08             	pushl  0x8(%ebp)
f0108a07:	e8 61 e3 ff ff       	call   f0106d6d <map_frame>
f0108a0c:	83 c4 10             	add    $0x10,%esp
		unmap_frame(page_directory,source_va+j);
f0108a0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a15:	01 d0                	add    %edx,%eax
f0108a17:	83 ec 08             	sub    $0x8,%esp
f0108a1a:	50                   	push   %eax
f0108a1b:	ff 75 08             	pushl  0x8(%ebp)
f0108a1e:	e8 7f e4 ff ff       	call   f0106ea2 <unmap_frame>
f0108a23:	83 c4 10             	add    $0x10,%esp
f0108a26:	eb 6b                	jmp    f0108a93 <cut_paste_pages+0x1d3>


}
else
{
	ptr_page_table2=create_page_table(page_directory,dest_va+j);
f0108a28:	8b 55 10             	mov    0x10(%ebp),%edx
f0108a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a2e:	01 d0                	add    %edx,%eax
f0108a30:	83 ec 08             	sub    $0x8,%esp
f0108a33:	50                   	push   %eax
f0108a34:	ff 75 08             	pushl  0x8(%ebp)
f0108a37:	e8 f7 e1 ff ff       	call   f0106c33 <create_page_table>
f0108a3c:	83 c4 10             	add    $0x10,%esp
f0108a3f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	map_frame(page_directory,info2,dest_va+j,ptr_page_table1[PTX(source_va+j)]&4095);
f0108a42:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108a45:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108a48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108a4b:	01 ca                	add    %ecx,%edx
f0108a4d:	c1 ea 0c             	shr    $0xc,%edx
f0108a50:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108a56:	c1 e2 02             	shl    $0x2,%edx
f0108a59:	01 d0                	add    %edx,%eax
f0108a5b:	8b 00                	mov    (%eax),%eax
f0108a5d:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a62:	89 c2                	mov    %eax,%edx
f0108a64:	8b 4d 10             	mov    0x10(%ebp),%ecx
f0108a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a6a:	01 c8                	add    %ecx,%eax
f0108a6c:	52                   	push   %edx
f0108a6d:	50                   	push   %eax
f0108a6e:	ff 75 cc             	pushl  -0x34(%ebp)
f0108a71:	ff 75 08             	pushl  0x8(%ebp)
f0108a74:	e8 f4 e2 ff ff       	call   f0106d6d <map_frame>
f0108a79:	83 c4 10             	add    $0x10,%esp
			unmap_frame(page_directory,source_va+j);
f0108a7c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a82:	01 d0                	add    %edx,%eax
f0108a84:	83 ec 08             	sub    $0x8,%esp
f0108a87:	50                   	push   %eax
f0108a88:	ff 75 08             	pushl  0x8(%ebp)
f0108a8b:	e8 12 e4 ff ff       	call   f0106ea2 <unmap_frame>
f0108a90:	83 c4 10             	add    $0x10,%esp

}
j+=(4*1024);
f0108a93:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		j+=(4*1024);

	}
	j=0;

for (uint32 i=0;i<num_of_pages;i++)
f0108a9a:	ff 45 ec             	incl   -0x14(%ebp)
f0108a9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108aa0:	3b 45 14             	cmp    0x14(%ebp),%eax
f0108aa3:	0f 82 be fe ff ff    	jb     f0108967 <cut_paste_pages+0xa7>
			unmap_frame(page_directory,source_va+j);

}
j+=(4*1024);
}
return 0;
f0108aa9:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0108aae:	c9                   	leave  
f0108aaf:	c3                   	ret    

f0108ab0 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108ab0:	55                   	push   %ebp
f0108ab1:	89 e5                	mov    %esp,%ebp
f0108ab3:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");

	    uint32 tmp=source_va;
f0108ab6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ab9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32 dest=dest_va;
f0108abc:	8b 45 10             	mov    0x10(%ebp),%eax
f0108abf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 endAdress=dest+size;
f0108ac2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108ac5:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ac8:	01 d0                	add    %edx,%eax
f0108aca:	89 45 e8             	mov    %eax,-0x18(%ebp)
uint32 sourceEnd=tmp+size;
f0108acd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108ad0:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ad3:	01 d0                	add    %edx,%eax
f0108ad5:	89 45 e4             	mov    %eax,-0x1c(%ebp)


		while(dest<endAdress)// with read only pages
f0108ad8:	eb 66                	jmp    f0108b40 <copy_paste_chunk+0x90>
		{

			uint32 *ptr_page_table3=NULL;
f0108ada:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
			int ret=get_page_table(page_directory,dest,&ptr_page_table3);
f0108ae1:	83 ec 04             	sub    $0x4,%esp
f0108ae4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108ae7:	50                   	push   %eax
f0108ae8:	ff 75 f0             	pushl  -0x10(%ebp)
f0108aeb:	ff 75 08             	pushl  0x8(%ebp)
f0108aee:	e8 ea df ff ff       	call   f0106add <get_page_table>
f0108af3:	83 c4 10             	add    $0x10,%esp
f0108af6:	89 45 e0             	mov    %eax,-0x20(%ebp)
struct FrameInfo *info=get_frame_info(page_directory,dest,&ptr_page_table3);
f0108af9:	83 ec 04             	sub    $0x4,%esp
f0108afc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108aff:	50                   	push   %eax
f0108b00:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b03:	ff 75 08             	pushl  0x8(%ebp)
f0108b06:	e8 27 e3 ff ff       	call   f0106e32 <get_frame_info>
f0108b0b:	83 c4 10             	add    $0x10,%esp
f0108b0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
if(info!=0)
f0108b11:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108b15:	74 22                	je     f0108b39 <copy_paste_chunk+0x89>
			{
	if((pt_get_page_permissions(page_directory,dest)&PERM_WRITEABLE)==0)
f0108b17:	83 ec 08             	sub    $0x8,%esp
f0108b1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b1d:	ff 75 08             	pushl  0x8(%ebp)
f0108b20:	e8 b3 f2 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0108b25:	83 c4 10             	add    $0x10,%esp
f0108b28:	83 e0 02             	and    $0x2,%eax
f0108b2b:	85 c0                	test   %eax,%eax
f0108b2d:	75 0a                	jne    f0108b39 <copy_paste_chunk+0x89>
				return -1;
f0108b2f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108b34:	e9 a8 01 00 00       	jmp    f0108ce1 <copy_paste_chunk+0x231>
			}
dest+=PAGE_SIZE;
f0108b39:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		uint32 dest=dest_va;
		uint32 endAdress=dest+size;
uint32 sourceEnd=tmp+size;


		while(dest<endAdress)// with read only pages
f0108b40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b43:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108b46:	72 92                	jb     f0108ada <copy_paste_chunk+0x2a>
			}
dest+=PAGE_SIZE;

		}

dest=dest_va;
f0108b48:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b4b:	89 45 f0             	mov    %eax,-0x10(%ebp)

		while(tmp<sourceEnd)// loop for  writable  pages
f0108b4e:	e9 7d 01 00 00       	jmp    f0108cd0 <copy_paste_chunk+0x220>
				{
			uint32 *ptr_page_table1=NULL;
f0108b53:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
			int ret1=get_page_table(page_directory,dest,&ptr_page_table1);//destination
f0108b5a:	83 ec 04             	sub    $0x4,%esp
f0108b5d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108b60:	50                   	push   %eax
f0108b61:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b64:	ff 75 08             	pushl  0x8(%ebp)
f0108b67:	e8 71 df ff ff       	call   f0106add <get_page_table>
f0108b6c:	83 c4 10             	add    $0x10,%esp
f0108b6f:	89 45 d8             	mov    %eax,-0x28(%ebp)
char *s,*d;

			if(ret1!=TABLE_IN_MEMORY)
f0108b72:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108b76:	74 7b                	je     f0108bf3 <copy_paste_chunk+0x143>

			{


				ptr_page_table1=create_page_table(page_directory,dest);
f0108b78:	83 ec 08             	sub    $0x8,%esp
f0108b7b:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b7e:	ff 75 08             	pushl  0x8(%ebp)
f0108b81:	e8 ad e0 ff ff       	call   f0106c33 <create_page_table>
f0108b86:	83 c4 10             	add    $0x10,%esp
f0108b89:	89 45 c0             	mov    %eax,-0x40(%ebp)
				struct FrameInfo* newFrame=NULL;
f0108b8c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
				allocate_frame(&newFrame);
f0108b93:	83 ec 0c             	sub    $0xc,%esp
f0108b96:	8d 45 bc             	lea    -0x44(%ebp),%eax
f0108b99:	50                   	push   %eax
f0108b9a:	e8 7f dd ff ff       	call   f010691e <allocate_frame>
f0108b9f:	83 c4 10             	add    $0x10,%esp

				int prm1=pt_get_page_permissions(page_directory,tmp);
f0108ba2:	83 ec 08             	sub    $0x8,%esp
f0108ba5:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ba8:	ff 75 08             	pushl  0x8(%ebp)
f0108bab:	e8 28 f2 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0108bb0:	83 c4 10             	add    $0x10,%esp
f0108bb3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
				pt_set_page_permissions(page_directory,dest,(prm1&PERM_USER)|PERM_WRITEABLE,0);
f0108bb6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108bb9:	83 e0 04             	and    $0x4,%eax
f0108bbc:	83 c8 02             	or     $0x2,%eax
f0108bbf:	6a 00                	push   $0x0
f0108bc1:	50                   	push   %eax
f0108bc2:	ff 75 f0             	pushl  -0x10(%ebp)
f0108bc5:	ff 75 08             	pushl  0x8(%ebp)
f0108bc8:	e8 56 f1 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0108bcd:	83 c4 10             	add    $0x10,%esp
				map_frame(page_directory,newFrame,dest,(prm1&PERM_USER)|PERM_WRITEABLE);
f0108bd0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108bd3:	83 e0 04             	and    $0x4,%eax
f0108bd6:	83 c8 02             	or     $0x2,%eax
f0108bd9:	89 c2                	mov    %eax,%edx
f0108bdb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108bde:	52                   	push   %edx
f0108bdf:	ff 75 f0             	pushl  -0x10(%ebp)
f0108be2:	50                   	push   %eax
f0108be3:	ff 75 08             	pushl  0x8(%ebp)
f0108be6:	e8 82 e1 ff ff       	call   f0106d6d <map_frame>
f0108beb:	83 c4 10             	add    $0x10,%esp
f0108bee:	e9 82 00 00 00       	jmp    f0108c75 <copy_paste_chunk+0x1c5>

			}
			else if(ret1==TABLE_IN_MEMORY&&ptr_page_table1[PTX(dest)]==0)
f0108bf3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108bf7:	75 7c                	jne    f0108c75 <copy_paste_chunk+0x1c5>
f0108bf9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108bfc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108bff:	c1 ea 0c             	shr    $0xc,%edx
f0108c02:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c08:	c1 e2 02             	shl    $0x2,%edx
f0108c0b:	01 d0                	add    %edx,%eax
f0108c0d:	8b 00                	mov    (%eax),%eax
f0108c0f:	85 c0                	test   %eax,%eax
f0108c11:	75 62                	jne    f0108c75 <copy_paste_chunk+0x1c5>
			{
				struct FrameInfo* newFrame1=NULL;
f0108c13:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
								allocate_frame(&newFrame1);
f0108c1a:	83 ec 0c             	sub    $0xc,%esp
f0108c1d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0108c20:	50                   	push   %eax
f0108c21:	e8 f8 dc ff ff       	call   f010691e <allocate_frame>
f0108c26:	83 c4 10             	add    $0x10,%esp

								int prm2=pt_get_page_permissions(page_directory,tmp);
f0108c29:	83 ec 08             	sub    $0x8,%esp
f0108c2c:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c2f:	ff 75 08             	pushl  0x8(%ebp)
f0108c32:	e8 a1 f1 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0108c37:	83 c4 10             	add    $0x10,%esp
f0108c3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
								pt_set_page_permissions(page_directory,dest,(prm2&PERM_USER)|PERM_WRITEABLE,0);
f0108c3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c40:	83 e0 04             	and    $0x4,%eax
f0108c43:	83 c8 02             	or     $0x2,%eax
f0108c46:	6a 00                	push   $0x0
f0108c48:	50                   	push   %eax
f0108c49:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c4c:	ff 75 08             	pushl  0x8(%ebp)
f0108c4f:	e8 cf f0 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0108c54:	83 c4 10             	add    $0x10,%esp
								map_frame(page_directory,newFrame1,dest,(prm2&PERM_USER)|PERM_WRITEABLE);
f0108c57:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108c5a:	83 e0 04             	and    $0x4,%eax
f0108c5d:	83 c8 02             	or     $0x2,%eax
f0108c60:	89 c2                	mov    %eax,%edx
f0108c62:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0108c65:	52                   	push   %edx
f0108c66:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c69:	50                   	push   %eax
f0108c6a:	ff 75 08             	pushl  0x8(%ebp)
f0108c6d:	e8 fb e0 ff ff       	call   f0106d6d <map_frame>
f0108c72:	83 c4 10             	add    $0x10,%esp

			}
					 s=(char *)tmp;
f0108c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c78:	89 45 cc             	mov    %eax,-0x34(%ebp)
					 d=(char *)dest;
f0108c7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c7e:	89 45 c8             	mov    %eax,-0x38(%ebp)


			for (uint32 i=0x0;i<PAGE_SIZE;i++)
f0108c81:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0108c88:	eb 2c                	jmp    f0108cb6 <copy_paste_chunk+0x206>
									{
				if(dest_va+size==i+(uint32)d)
f0108c8a:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c8d:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c90:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f0108c93:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0108c96:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108c99:	01 d0                	add    %edx,%eax
f0108c9b:	39 c1                	cmp    %eax,%ecx
f0108c9d:	74 22                	je     f0108cc1 <copy_paste_chunk+0x211>
					break;
									d[i]=s[i];
f0108c9f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0108ca2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108ca5:	01 c2                	add    %eax,%edx
f0108ca7:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0108caa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108cad:	01 c8                	add    %ecx,%eax
f0108caf:	8a 00                	mov    (%eax),%al
f0108cb1:	88 02                	mov    %al,(%edx)
			}
					 s=(char *)tmp;
					 d=(char *)dest;


			for (uint32 i=0x0;i<PAGE_SIZE;i++)
f0108cb3:	ff 45 ec             	incl   -0x14(%ebp)
f0108cb6:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%ebp)
f0108cbd:	76 cb                	jbe    f0108c8a <copy_paste_chunk+0x1da>
f0108cbf:	eb 01                	jmp    f0108cc2 <copy_paste_chunk+0x212>
									{
				if(dest_va+size==i+(uint32)d)
					break;
f0108cc1:	90                   	nop
									d[i]=s[i];
							}

								tmp+=PAGE_SIZE;
f0108cc2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
								dest+=PAGE_SIZE;
f0108cc9:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)

		}

dest=dest_va;

		while(tmp<sourceEnd)// loop for  writable  pages
f0108cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cd3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108cd6:	0f 82 77 fe ff ff    	jb     f0108b53 <copy_paste_chunk+0xa3>
								tmp+=PAGE_SIZE;
								dest+=PAGE_SIZE;

							}

		return 0;
f0108cdc:	b8 00 00 00 00       	mov    $0x0,%eax
		}
f0108ce1:	c9                   	leave  
f0108ce2:	c3                   	ret    

f0108ce3 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108ce3:	55                   	push   %ebp
f0108ce4:	89 e5                	mov    %esp,%ebp
f0108ce6:	83 ec 58             	sub    $0x58,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	//panic("share_chunk() is not implemented yet...!!");
	uint32 source=ROUNDDOWN( source_va,PAGE_SIZE);
f0108ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cec:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108cef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108cf2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108cf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108cfa:	8b 45 10             	mov    0x10(%ebp),%eax
f0108cfd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108d00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d08:	89 45 f0             	mov    %eax,-0x10(%ebp)

	uint32 endSource=ROUNDUP(source_va+size,PAGE_SIZE);
f0108d0b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108d12:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d15:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d18:	01 c2                	add    %eax,%edx
f0108d1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d1d:	01 d0                	add    %edx,%eax
f0108d1f:	48                   	dec    %eax
f0108d20:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108d23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d26:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d2b:	f7 75 e4             	divl   -0x1c(%ebp)
f0108d2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d31:	29 d0                	sub    %edx,%eax
f0108d33:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 endAddress=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108d36:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0108d3d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108d40:	8b 45 14             	mov    0x14(%ebp),%eax
f0108d43:	01 c2                	add    %eax,%edx
f0108d45:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108d48:	01 d0                	add    %edx,%eax
f0108d4a:	48                   	dec    %eax
f0108d4b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0108d4e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d51:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d56:	f7 75 d8             	divl   -0x28(%ebp)
f0108d59:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d5c:	29 d0                	sub    %edx,%eax
f0108d5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	while(dest<endAddress)
f0108d61:	eb 4e                	jmp    f0108db1 <share_chunk+0xce>
	{
		uint32 *ptr_page_table=NULL;
f0108d63:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
		int ret=get_page_table(page_directory,dest,&ptr_page_table);
f0108d6a:	83 ec 04             	sub    $0x4,%esp
f0108d6d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0108d70:	50                   	push   %eax
f0108d71:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d74:	ff 75 08             	pushl  0x8(%ebp)
f0108d77:	e8 61 dd ff ff       	call   f0106add <get_page_table>
f0108d7c:	83 c4 10             	add    $0x10,%esp
f0108d7f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		struct FrameInfo*info1 =get_frame_info(page_directory,dest,&ptr_page_table);
f0108d82:	83 ec 04             	sub    $0x4,%esp
f0108d85:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0108d88:	50                   	push   %eax
f0108d89:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d8c:	ff 75 08             	pushl  0x8(%ebp)
f0108d8f:	e8 9e e0 ff ff       	call   f0106e32 <get_frame_info>
f0108d94:	83 c4 10             	add    $0x10,%esp
f0108d97:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if(info1!=0)
f0108d9a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0108d9e:	74 0a                	je     f0108daa <share_chunk+0xc7>
			return -1;
f0108da0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108da5:	e9 e0 00 00 00       	jmp    f0108e8a <share_chunk+0x1a7>
		dest+=PAGE_SIZE;
f0108daa:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	uint32 source=ROUNDDOWN( source_va,PAGE_SIZE);
	uint32 dest=ROUNDDOWN(dest_va,PAGE_SIZE);

	uint32 endSource=ROUNDUP(source_va+size,PAGE_SIZE);
	uint32 endAddress=ROUNDUP(dest_va+size,PAGE_SIZE);
	while(dest<endAddress)
f0108db1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108db4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0108db7:	72 aa                	jb     f0108d63 <share_chunk+0x80>
		if(info1!=0)
			return -1;
		dest+=PAGE_SIZE;

	}
	dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108db9:	8b 45 10             	mov    0x10(%ebp),%eax
f0108dbc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0108dbf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108dc2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108dc7:	89 45 f0             	mov    %eax,-0x10(%ebp)


while(source<endSource)
f0108dca:	e9 aa 00 00 00       	jmp    f0108e79 <share_chunk+0x196>
{
	uint32 *ptr_page_table1=NULL,*ptr_page_table2=NULL;
f0108dcf:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f0108dd6:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	int ret1=get_page_table(page_directory,source,&ptr_page_table1);//page table of source
f0108ddd:	83 ec 04             	sub    $0x4,%esp
f0108de0:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108de3:	50                   	push   %eax
f0108de4:	ff 75 f4             	pushl  -0xc(%ebp)
f0108de7:	ff 75 08             	pushl  0x8(%ebp)
f0108dea:	e8 ee dc ff ff       	call   f0106add <get_page_table>
f0108def:	83 c4 10             	add    $0x10,%esp
f0108df2:	89 45 c0             	mov    %eax,-0x40(%ebp)
	int ret2=get_page_table(page_directory,dest,&ptr_page_table2);//page table of destination
f0108df5:	83 ec 04             	sub    $0x4,%esp
f0108df8:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0108dfb:	50                   	push   %eax
f0108dfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0108dff:	ff 75 08             	pushl  0x8(%ebp)
f0108e02:	e8 d6 dc ff ff       	call   f0106add <get_page_table>
f0108e07:	83 c4 10             	add    $0x10,%esp
f0108e0a:	89 45 bc             	mov    %eax,-0x44(%ebp)
	struct FrameInfo*info2 =get_frame_info(page_directory,source,&ptr_page_table1);
f0108e0d:	83 ec 04             	sub    $0x4,%esp
f0108e10:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108e13:	50                   	push   %eax
f0108e14:	ff 75 f4             	pushl  -0xc(%ebp)
f0108e17:	ff 75 08             	pushl  0x8(%ebp)
f0108e1a:	e8 13 e0 ff ff       	call   f0106e32 <get_frame_info>
f0108e1f:	83 c4 10             	add    $0x10,%esp
f0108e22:	89 45 b8             	mov    %eax,-0x48(%ebp)
if(ret2==TABLE_IN_MEMORY)
f0108e25:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108e29:	75 17                	jne    f0108e42 <share_chunk+0x15f>
{
	map_frame(page_directory,info2,dest,perms);
f0108e2b:	8b 45 18             	mov    0x18(%ebp),%eax
f0108e2e:	50                   	push   %eax
f0108e2f:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e32:	ff 75 b8             	pushl  -0x48(%ebp)
f0108e35:	ff 75 08             	pushl  0x8(%ebp)
f0108e38:	e8 30 df ff ff       	call   f0106d6d <map_frame>
f0108e3d:	83 c4 10             	add    $0x10,%esp
f0108e40:	eb 29                	jmp    f0108e6b <share_chunk+0x188>
}
else
{
	ptr_page_table2=create_page_table(page_directory,dest);
f0108e42:	83 ec 08             	sub    $0x8,%esp
f0108e45:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e48:	ff 75 08             	pushl  0x8(%ebp)
f0108e4b:	e8 e3 dd ff ff       	call   f0106c33 <create_page_table>
f0108e50:	83 c4 10             	add    $0x10,%esp
f0108e53:	89 45 ac             	mov    %eax,-0x54(%ebp)
	map_frame(page_directory,info2,dest,perms);
f0108e56:	8b 45 18             	mov    0x18(%ebp),%eax
f0108e59:	50                   	push   %eax
f0108e5a:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e5d:	ff 75 b8             	pushl  -0x48(%ebp)
f0108e60:	ff 75 08             	pushl  0x8(%ebp)
f0108e63:	e8 05 df ff ff       	call   f0106d6d <map_frame>
f0108e68:	83 c4 10             	add    $0x10,%esp


}
source+=PAGE_SIZE;
f0108e6b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
dest+=PAGE_SIZE;
f0108e72:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)

	}
	dest=ROUNDDOWN(dest_va,PAGE_SIZE);


while(source<endSource)
f0108e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e7c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108e7f:	0f 82 4a ff ff ff    	jb     f0108dcf <share_chunk+0xec>

}
source+=PAGE_SIZE;
dest+=PAGE_SIZE;
}
return 0;
f0108e85:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108e8a:	c9                   	leave  
f0108e8b:	c3                   	ret    

f0108e8c <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108e8c:	55                   	push   %ebp
f0108e8d:	89 e5                	mov    %esp,%ebp
f0108e8f:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	//panic("allocate_chunk() is not implemented yet...!!");
	  uint32 tmp=ROUNDDOWN(va,PAGE_SIZE);
f0108e92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e95:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108e98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e9b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	  uint32 endAdress=va+size;
f0108ea3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ea6:	8b 45 10             	mov    0x10(%ebp),%eax
f0108ea9:	01 d0                	add    %edx,%eax
f0108eab:	89 45 ec             	mov    %eax,-0x14(%ebp)
	  uint32 sourceEnd=tmp+size;
f0108eae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108eb1:	8b 45 10             	mov    0x10(%ebp),%eax
f0108eb4:	01 d0                	add    %edx,%eax
f0108eb6:	89 45 e8             	mov    %eax,-0x18(%ebp)


			while(tmp<endAdress)// with read only pages
f0108eb9:	eb 4e                	jmp    f0108f09 <allocate_chunk+0x7d>
			{

				uint32 *ptr_page_table=NULL;
f0108ebb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				int ret=get_page_table(page_directory,tmp,&ptr_page_table);
f0108ec2:	83 ec 04             	sub    $0x4,%esp
f0108ec5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108ec8:	50                   	push   %eax
f0108ec9:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ecc:	ff 75 08             	pushl  0x8(%ebp)
f0108ecf:	e8 09 dc ff ff       	call   f0106add <get_page_table>
f0108ed4:	83 c4 10             	add    $0x10,%esp
f0108ed7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct FrameInfo *info=get_frame_info(page_directory,tmp,&ptr_page_table);
f0108eda:	83 ec 04             	sub    $0x4,%esp
f0108edd:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108ee0:	50                   	push   %eax
f0108ee1:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ee4:	ff 75 08             	pushl  0x8(%ebp)
f0108ee7:	e8 46 df ff ff       	call   f0106e32 <get_frame_info>
f0108eec:	83 c4 10             	add    $0x10,%esp
f0108eef:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(info!=0)
f0108ef2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0108ef6:	74 0a                	je     f0108f02 <allocate_chunk+0x76>
				{
					return -1;
f0108ef8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108efd:	e9 e2 00 00 00       	jmp    f0108fe4 <allocate_chunk+0x158>
				}
	tmp+=PAGE_SIZE;
f0108f02:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	  uint32 tmp=ROUNDDOWN(va,PAGE_SIZE);
	  uint32 endAdress=va+size;
	  uint32 sourceEnd=tmp+size;


			while(tmp<endAdress)// with read only pages
f0108f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f0c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108f0f:	72 aa                	jb     f0108ebb <allocate_chunk+0x2f>
					return -1;
				}
	tmp+=PAGE_SIZE;

			}
			tmp=ROUNDDOWN(va,PAGE_SIZE);
f0108f11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f14:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108f17:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108f1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			while(tmp<endAdress)
f0108f22:	e9 ac 00 00 00       	jmp    f0108fd3 <allocate_chunk+0x147>
			{
				uint32 *ptr_page_table1=NULL;
f0108f27:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				int ret1=get_page_table(page_directory,tmp,&ptr_page_table1);
f0108f2e:	83 ec 04             	sub    $0x4,%esp
f0108f31:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108f34:	50                   	push   %eax
f0108f35:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f38:	ff 75 08             	pushl  0x8(%ebp)
f0108f3b:	e8 9d db ff ff       	call   f0106add <get_page_table>
f0108f40:	83 c4 10             	add    $0x10,%esp
f0108f43:	89 45 d8             	mov    %eax,-0x28(%ebp)
if(ret1!=TABLE_IN_MEMORY)
f0108f46:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108f4a:	74 4b                	je     f0108f97 <allocate_chunk+0x10b>
{
	ptr_page_table1=create_page_table(page_directory,tmp);
f0108f4c:	83 ec 08             	sub    $0x8,%esp
f0108f4f:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f52:	ff 75 08             	pushl  0x8(%ebp)
f0108f55:	e8 d9 dc ff ff       	call   f0106c33 <create_page_table>
f0108f5a:	83 c4 10             	add    $0x10,%esp
f0108f5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
					struct FrameInfo* newFrame=NULL;
f0108f60:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
					allocate_frame(&newFrame);
f0108f67:	83 ec 0c             	sub    $0xc,%esp
f0108f6a:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108f6d:	50                   	push   %eax
f0108f6e:	e8 ab d9 ff ff       	call   f010691e <allocate_frame>
f0108f73:	83 c4 10             	add    $0x10,%esp
        map_frame(page_directory,newFrame,tmp,perms);
f0108f76:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f79:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108f7c:	52                   	push   %edx
f0108f7d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f80:	50                   	push   %eax
f0108f81:	ff 75 08             	pushl  0x8(%ebp)
f0108f84:	e8 e4 dd ff ff       	call   f0106d6d <map_frame>
f0108f89:	83 c4 10             	add    $0x10,%esp
        newFrame->va=tmp;
f0108f8c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108f8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108f92:	89 50 0c             	mov    %edx,0xc(%eax)
f0108f95:	eb 35                	jmp    f0108fcc <allocate_chunk+0x140>
}
else
{
	struct FrameInfo* newFrame1=NULL;
f0108f97:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
					allocate_frame(&newFrame1);
f0108f9e:	83 ec 0c             	sub    $0xc,%esp
f0108fa1:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108fa4:	50                   	push   %eax
f0108fa5:	e8 74 d9 ff ff       	call   f010691e <allocate_frame>
f0108faa:	83 c4 10             	add    $0x10,%esp
        map_frame(page_directory,newFrame1,tmp,perms);
f0108fad:	8b 55 14             	mov    0x14(%ebp),%edx
f0108fb0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108fb3:	52                   	push   %edx
f0108fb4:	ff 75 f4             	pushl  -0xc(%ebp)
f0108fb7:	50                   	push   %eax
f0108fb8:	ff 75 08             	pushl  0x8(%ebp)
f0108fbb:	e8 ad dd ff ff       	call   f0106d6d <map_frame>
f0108fc0:	83 c4 10             	add    $0x10,%esp
        newFrame1->va=tmp;
f0108fc3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108fc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108fc9:	89 50 0c             	mov    %edx,0xc(%eax)
}
tmp+=PAGE_SIZE;
f0108fcc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
				}
	tmp+=PAGE_SIZE;

			}
			tmp=ROUNDDOWN(va,PAGE_SIZE);
			while(tmp<endAdress)
f0108fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108fd6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108fd9:	0f 82 48 ff ff ff    	jb     f0108f27 <allocate_chunk+0x9b>
        map_frame(page_directory,newFrame1,tmp,perms);
        newFrame1->va=tmp;
}
tmp+=PAGE_SIZE;
			}
			return 0;
f0108fdf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108fe4:	c9                   	leave  
f0108fe5:	c3                   	ret    

f0108fe6 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108fe6:	55                   	push   %ebp
f0108fe7:	89 e5                	mov    %esp,%ebp
f0108fe9:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 source= ROUNDDOWN(sva,PAGE_SIZE);
f0108fec:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108fef:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ff5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ffa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 dest=ROUNDUP(eva,PAGE_SIZE);
f0108ffd:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0109004:	8b 55 10             	mov    0x10(%ebp),%edx
f0109007:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010900a:	01 d0                	add    %edx,%eax
f010900c:	48                   	dec    %eax
f010900d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0109010:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109013:	ba 00 00 00 00       	mov    $0x0,%edx
f0109018:	f7 75 ec             	divl   -0x14(%ebp)
f010901b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010901e:	29 d0                	sub    %edx,%eax
f0109020:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	*num_pages=0;
f0109023:	8b 45 18             	mov    0x18(%ebp),%eax
f0109026:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	*num_pages=0;
f010902c:	8b 45 18             	mov    0x18(%ebp),%eax
f010902f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while(source<=dest)
f0109035:	e9 dd 00 00 00       	jmp    f0109117 <calculate_allocated_space+0x131>
	{
		uint32 *ptr_page_table1=NULL,*ptr_page_table2=NULL;
f010903a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0109041:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		int ret1 =get_page_table(page_directory,source,&ptr_page_table1);
f0109048:	83 ec 04             	sub    $0x4,%esp
f010904b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010904e:	50                   	push   %eax
f010904f:	ff 75 f4             	pushl  -0xc(%ebp)
f0109052:	ff 75 08             	pushl  0x8(%ebp)
f0109055:	e8 83 da ff ff       	call   f0106add <get_page_table>
f010905a:	83 c4 10             	add    $0x10,%esp
f010905d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		int ret2 =get_page_table(page_directory,source+PAGE_SIZE,&ptr_page_table2);
f0109060:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109063:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
f0109069:	83 ec 04             	sub    $0x4,%esp
f010906c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010906f:	50                   	push   %eax
f0109070:	52                   	push   %edx
f0109071:	ff 75 08             	pushl  0x8(%ebp)
f0109074:	e8 64 da ff ff       	call   f0106add <get_page_table>
f0109079:	83 c4 10             	add    $0x10,%esp
f010907c:	89 45 dc             	mov    %eax,-0x24(%ebp)

		struct FrameInfo *info=get_frame_info(page_directory,source,&ptr_page_table1);
f010907f:	83 ec 04             	sub    $0x4,%esp
f0109082:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0109085:	50                   	push   %eax
f0109086:	ff 75 f4             	pushl  -0xc(%ebp)
f0109089:	ff 75 08             	pushl  0x8(%ebp)
f010908c:	e8 a1 dd ff ff       	call   f0106e32 <get_frame_info>
f0109091:	83 c4 10             	add    $0x10,%esp
f0109094:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if(info!=0)
f0109097:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010909b:	74 0d                	je     f01090aa <calculate_allocated_space+0xc4>
			{
			(*num_pages)++;
f010909d:	8b 45 18             	mov    0x18(%ebp),%eax
f01090a0:	8b 00                	mov    (%eax),%eax
f01090a2:	8d 50 01             	lea    0x1(%eax),%edx
f01090a5:	8b 45 18             	mov    0x18(%ebp),%eax
f01090a8:	89 10                	mov    %edx,(%eax)
			}

		if(ret1==TABLE_IN_MEMORY&&ret2==TABLE_IN_MEMORY&&PDX(source)!=PDX(source+PAGE_SIZE))
f01090aa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01090ae:	75 2c                	jne    f01090dc <calculate_allocated_space+0xf6>
f01090b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01090b4:	75 26                	jne    f01090dc <calculate_allocated_space+0xf6>
f01090b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090b9:	c1 e8 16             	shr    $0x16,%eax
f01090bc:	89 c2                	mov    %eax,%edx
f01090be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090c1:	05 00 10 00 00       	add    $0x1000,%eax
f01090c6:	c1 e8 16             	shr    $0x16,%eax
f01090c9:	39 c2                	cmp    %eax,%edx
f01090cb:	74 0f                	je     f01090dc <calculate_allocated_space+0xf6>
			(*num_tables)+=2;
f01090cd:	8b 45 14             	mov    0x14(%ebp),%eax
f01090d0:	8b 00                	mov    (%eax),%eax
f01090d2:	8d 50 02             	lea    0x2(%eax),%edx
f01090d5:	8b 45 14             	mov    0x14(%ebp),%eax
f01090d8:	89 10                	mov    %edx,(%eax)
f01090da:	eb 19                	jmp    f01090f5 <calculate_allocated_space+0x10f>
		else if(ret1==TABLE_IN_MEMORY&&ret2!=TABLE_IN_MEMORY)
f01090dc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01090e0:	75 13                	jne    f01090f5 <calculate_allocated_space+0x10f>
f01090e2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01090e6:	74 0d                	je     f01090f5 <calculate_allocated_space+0x10f>
		{
			(*num_tables)++;
f01090e8:	8b 45 14             	mov    0x14(%ebp),%eax
f01090eb:	8b 00                	mov    (%eax),%eax
f01090ed:	8d 50 01             	lea    0x1(%eax),%edx
f01090f0:	8b 45 14             	mov    0x14(%ebp),%eax
f01090f3:	89 10                	mov    %edx,(%eax)
		}


	source+=PAGE_SIZE;
f01090f5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	if(source==dest&&ret1==TABLE_IN_MEMORY)
f01090fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090ff:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0109102:	75 13                	jne    f0109117 <calculate_allocated_space+0x131>
f0109104:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0109108:	75 0d                	jne    f0109117 <calculate_allocated_space+0x131>
		(*num_tables)++;
f010910a:	8b 45 14             	mov    0x14(%ebp),%eax
f010910d:	8b 00                	mov    (%eax),%eax
f010910f:	8d 50 01             	lea    0x1(%eax),%edx
f0109112:	8b 45 14             	mov    0x14(%ebp),%eax
f0109115:	89 10                	mov    %edx,(%eax)
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 source= ROUNDDOWN(sva,PAGE_SIZE);
	uint32 dest=ROUNDUP(eva,PAGE_SIZE);
	*num_pages=0;
	*num_pages=0;
	while(source<=dest)
f0109117:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010911a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010911d:	0f 86 17 ff ff ff    	jbe    f010903a <calculate_allocated_space+0x54>
	source+=PAGE_SIZE;
	if(source==dest&&ret1==TABLE_IN_MEMORY)
		(*num_tables)++;

	}
}
f0109123:	90                   	nop
f0109124:	c9                   	leave  
f0109125:	c3                   	ret    

f0109126 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109126:	55                   	push   %ebp
f0109127:	89 e5                	mov    %esp,%ebp
f0109129:	83 ec 38             	sub    $0x38,%esp
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");


	uint32 *ptr_page_table1;
	const uint32  TABLE_SIZE = PAGE_SIZE * 1024;
f010912c:	c7 45 e4 00 00 40 00 	movl   $0x400000,-0x1c(%ebp)
	uint32 current_virtual_address_tables = ROUNDDOWN(sva,TABLE_SIZE);
f0109133:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109136:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0109139:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010913c:	ba 00 00 00 00       	mov    $0x0,%edx
f0109141:	f7 75 e4             	divl   -0x1c(%ebp)
f0109144:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109147:	29 d0                	sub    %edx,%eax
f0109149:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32 n=sva+size;
f010914c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010914f:	8b 45 10             	mov    0x10(%ebp),%eax
f0109152:	01 d0                	add    %edx,%eax
f0109154:	89 45 dc             	mov    %eax,-0x24(%ebp)


uint32 requiredTables=0;
f0109157:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		while(current_virtual_address_tables<n){
f010915e:	eb 23                	jmp    f0109183 <calculate_required_frames+0x5d>



			if(get_page_table(page_directory,  current_virtual_address_tables, &ptr_page_table1)==TABLE_NOT_EXIST)
f0109160:	83 ec 04             	sub    $0x4,%esp
f0109163:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0109166:	50                   	push   %eax
f0109167:	ff 75 f4             	pushl  -0xc(%ebp)
f010916a:	ff 75 08             	pushl  0x8(%ebp)
f010916d:	e8 6b d9 ff ff       	call   f0106add <get_page_table>
f0109172:	83 c4 10             	add    $0x10,%esp
f0109175:	83 f8 01             	cmp    $0x1,%eax
f0109178:	75 03                	jne    f010917d <calculate_required_frames+0x57>
			{
				(requiredTables)++;
f010917a:	ff 45 f0             	incl   -0x10(%ebp)
			}
			current_virtual_address_tables+=TABLE_SIZE;
f010917d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109180:	01 45 f4             	add    %eax,-0xc(%ebp)
	uint32 current_virtual_address_tables = ROUNDDOWN(sva,TABLE_SIZE);
    uint32 n=sva+size;


uint32 requiredTables=0;
		while(current_virtual_address_tables<n){
f0109183:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109186:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0109189:	72 d5                	jb     f0109160 <calculate_required_frames+0x3a>
			{
				(requiredTables)++;
			}
			current_virtual_address_tables+=TABLE_SIZE;
		}
		uint32  current_virtual_address_pages = ROUNDDOWN(sva, PAGE_SIZE);
f010918b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010918e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109191:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109194:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109199:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 requiredPages=0;
f010919c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while(current_virtual_address_pages<n){
f01091a3:	eb 23                	jmp    f01091c8 <calculate_required_frames+0xa2>

			if ((get_frame_info(page_directory,current_virtual_address_pages,&ptr_page_table1)) == NULL)
f01091a5:	83 ec 04             	sub    $0x4,%esp
f01091a8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f01091ab:	50                   	push   %eax
f01091ac:	ff 75 ec             	pushl  -0x14(%ebp)
f01091af:	ff 75 08             	pushl  0x8(%ebp)
f01091b2:	e8 7b dc ff ff       	call   f0106e32 <get_frame_info>
f01091b7:	83 c4 10             	add    $0x10,%esp
f01091ba:	85 c0                	test   %eax,%eax
f01091bc:	75 03                	jne    f01091c1 <calculate_required_frames+0x9b>
			{
				(requiredPages)++;
f01091be:	ff 45 e8             	incl   -0x18(%ebp)
			}
			current_virtual_address_pages+=PAGE_SIZE;
f01091c1:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
			current_virtual_address_tables+=TABLE_SIZE;
		}
		uint32  current_virtual_address_pages = ROUNDDOWN(sva, PAGE_SIZE);

		uint32 requiredPages=0;
		while(current_virtual_address_pages<n){
f01091c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01091cb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01091ce:	72 d5                	jb     f01091a5 <calculate_required_frames+0x7f>
	//calc the required page frames


	//return total number of frames

	return (requiredTables+requiredPages);
f01091d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01091d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01091d6:	01 d0                	add    %edx,%eax
}
f01091d8:	c9                   	leave  
f01091d9:	c3                   	ret    

f01091da <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01091da:	55                   	push   %ebp
f01091db:	89 e5                	mov    %esp,%ebp
f01091dd:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01091e0:	83 ec 04             	sub    $0x4,%esp
f01091e3:	68 c8 68 13 f0       	push   $0xf01368c8
f01091e8:	68 7b 01 00 00       	push   $0x17b
f01091ed:	68 f8 68 13 f0       	push   $0xf01368f8
f01091f2:	e8 0e 70 ff ff       	call   f0100205 <_panic>

f01091f7 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01091f7:	55                   	push   %ebp
f01091f8:	89 e5                	mov    %esp,%ebp
f01091fa:	83 ec 68             	sub    $0x68,%esp
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");

	//This function should:
	//1. Free ALL pages of the given range from the Page File
	uint32 n=ROUNDUP(size,PAGE_SIZE)/PAGE_SIZE;//number of pages
f01091fd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109204:	8b 55 10             	mov    0x10(%ebp),%edx
f0109207:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010920a:	01 d0                	add    %edx,%eax
f010920c:	48                   	dec    %eax
f010920d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109210:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109213:	ba 00 00 00 00       	mov    $0x0,%edx
f0109218:	f7 75 dc             	divl   -0x24(%ebp)
f010921b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010921e:	29 d0                	sub    %edx,%eax
f0109220:	c1 e8 0c             	shr    $0xc,%eax
f0109223:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 	va=ROUNDDOWN(virtual_address,PAGE_SIZE);
f0109226:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109229:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010922c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010922f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109234:	89 45 f4             	mov    %eax,-0xc(%ebp)

	for(uint32 i=0;i<n;i++)
f0109237:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010923e:	eb 1b                	jmp    f010925b <free_user_mem+0x64>
	{

		pf_remove_env_page(e,va);
f0109240:	83 ec 08             	sub    $0x8,%esp
f0109243:	ff 75 f4             	pushl  -0xc(%ebp)
f0109246:	ff 75 08             	pushl  0x8(%ebp)
f0109249:	e8 d5 a8 ff ff       	call   f0103b23 <pf_remove_env_page>
f010924e:	83 c4 10             	add    $0x10,%esp
		va+=PAGE_SIZE;
f0109251:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	//This function should:
	//1. Free ALL pages of the given range from the Page File
	uint32 n=ROUNDUP(size,PAGE_SIZE)/PAGE_SIZE;//number of pages
	uint32 	va=ROUNDDOWN(virtual_address,PAGE_SIZE);

	for(uint32 i=0;i<n;i++)
f0109258:	ff 45 f0             	incl   -0x10(%ebp)
f010925b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010925e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0109261:	72 dd                	jb     f0109240 <free_user_mem+0x49>

		pf_remove_env_page(e,va);
		va+=PAGE_SIZE;
	}
	//2. Free ONLY pages that are resident in the working set from the memory
	va=ROUNDDOWN(virtual_address,PAGE_SIZE);
f0109263:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109266:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109269:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010926c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109271:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 wsSize=e->page_WS_max_size;
f0109274:	8b 45 08             	mov    0x8(%ebp),%eax
f0109277:	8b 40 74             	mov    0x74(%eax),%eax
f010927a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	for (uint32 i=0;i<wsSize;i++)
f010927d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109284:	e9 9a 00 00 00       	jmp    f0109323 <free_user_mem+0x12c>
	{
		uint32 currentVa=env_page_ws_get_virtual_address(e,i);
f0109289:	83 ec 08             	sub    $0x8,%esp
f010928c:	ff 75 ec             	pushl  -0x14(%ebp)
f010928f:	ff 75 08             	pushl  0x8(%ebp)
f0109292:	e8 bb ee ff ff       	call   f0108152 <env_page_ws_get_virtual_address>
f0109297:	83 c4 10             	add    $0x10,%esp
f010929a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		uint32 sizeOfva=va+ROUNDUP(size,PAGE_SIZE);
f010929d:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01092a4:	8b 55 10             	mov    0x10(%ebp),%edx
f01092a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01092aa:	01 d0                	add    %edx,%eax
f01092ac:	48                   	dec    %eax
f01092ad:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01092b0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01092b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01092b8:	f7 75 c0             	divl   -0x40(%ebp)
f01092bb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01092be:	29 d0                	sub    %edx,%eax
f01092c0:	89 c2                	mov    %eax,%edx
f01092c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092c5:	01 d0                	add    %edx,%eax
f01092c7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		uint32 * ptr_page_table=NULL;
f01092ca:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
		get_page_table(e->env_page_directory,currentVa,&ptr_page_table);
f01092d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01092d4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01092d7:	83 ec 04             	sub    $0x4,%esp
f01092da:	8d 55 a4             	lea    -0x5c(%ebp),%edx
f01092dd:	52                   	push   %edx
f01092de:	ff 75 c4             	pushl  -0x3c(%ebp)
f01092e1:	50                   	push   %eax
f01092e2:	e8 f6 d7 ff ff       	call   f0106add <get_page_table>
f01092e7:	83 c4 10             	add    $0x10,%esp
		if(currentVa>=va&&currentVa<sizeOfva)
f01092ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01092ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01092f0:	72 2e                	jb     f0109320 <free_user_mem+0x129>
f01092f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01092f5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01092f8:	73 26                	jae    f0109320 <free_user_mem+0x129>
		{
			env_page_ws_clear_entry(e,i);
f01092fa:	83 ec 08             	sub    $0x8,%esp
f01092fd:	ff 75 ec             	pushl  -0x14(%ebp)
f0109300:	ff 75 08             	pushl  0x8(%ebp)
f0109303:	e8 d3 ed ff ff       	call   f01080db <env_page_ws_clear_entry>
f0109308:	83 c4 10             	add    $0x10,%esp
			unmap_frame(e->env_page_directory,currentVa);
f010930b:	8b 45 08             	mov    0x8(%ebp),%eax
f010930e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109311:	83 ec 08             	sub    $0x8,%esp
f0109314:	ff 75 c4             	pushl  -0x3c(%ebp)
f0109317:	50                   	push   %eax
f0109318:	e8 85 db ff ff       	call   f0106ea2 <unmap_frame>
f010931d:	83 c4 10             	add    $0x10,%esp
		va+=PAGE_SIZE;
	}
	//2. Free ONLY pages that are resident in the working set from the memory
	va=ROUNDDOWN(virtual_address,PAGE_SIZE);
	uint32 wsSize=e->page_WS_max_size;
	for (uint32 i=0;i<wsSize;i++)
f0109320:	ff 45 ec             	incl   -0x14(%ebp)
f0109323:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109326:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0109329:	0f 82 5a ff ff ff    	jb     f0109289 <free_user_mem+0x92>
			unmap_frame(e->env_page_directory,currentVa);

		}
	}
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
	va=ROUNDDOWN(virtual_address,PAGE_SIZE);
f010932f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109332:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0109335:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109338:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010933d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 uint32 *ptr_page_table;
	for(int i=0; i<n; i++)
f0109340:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0109347:	e9 93 00 00 00       	jmp    f01093df <free_user_mem+0x1e8>
	{
	    ptr_page_table=NULL;
f010934c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
		int ret =get_page_table(e->env_page_directory,va,&ptr_page_table);
f0109353:	8b 45 08             	mov    0x8(%ebp),%eax
f0109356:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109359:	83 ec 04             	sub    $0x4,%esp
f010935c:	8d 55 a8             	lea    -0x58(%ebp),%edx
f010935f:	52                   	push   %edx
f0109360:	ff 75 f4             	pushl  -0xc(%ebp)
f0109363:	50                   	push   %eax
f0109364:	e8 74 d7 ff ff       	call   f0106add <get_page_table>
f0109369:	83 c4 10             	add    $0x10,%esp
f010936c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		int check=1;
f010936f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
		if(ret==TABLE_IN_MEMORY)
f0109376:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
f010937a:	75 2f                	jne    f01093ab <free_user_mem+0x1b4>
		{
		for(int j=0;j<1024;j++)//loop on entries of page table
f010937c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0109383:	eb 1d                	jmp    f01093a2 <free_user_mem+0x1ab>
		{
			if(ptr_page_table[j]!=0)
f0109385:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109388:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010938b:	c1 e2 02             	shl    $0x2,%edx
f010938e:	01 d0                	add    %edx,%eax
f0109390:	8b 00                	mov    (%eax),%eax
f0109392:	85 c0                	test   %eax,%eax
f0109394:	74 09                	je     f010939f <free_user_mem+0x1a8>
			{
				check =0;
f0109396:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				break;
f010939d:	eb 0c                	jmp    f01093ab <free_user_mem+0x1b4>
	    ptr_page_table=NULL;
		int ret =get_page_table(e->env_page_directory,va,&ptr_page_table);
		int check=1;
		if(ret==TABLE_IN_MEMORY)
		{
		for(int j=0;j<1024;j++)//loop on entries of page table
f010939f:	ff 45 e0             	incl   -0x20(%ebp)
f01093a2:	81 7d e0 ff 03 00 00 	cmpl   $0x3ff,-0x20(%ebp)
f01093a9:	7e da                	jle    f0109385 <free_user_mem+0x18e>
				break;
			}
		}

		}
		if(check)
f01093ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01093af:	74 24                	je     f01093d5 <free_user_mem+0x1de>
				{
					kfree((void*)ptr_page_table);
f01093b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01093b4:	83 ec 0c             	sub    $0xc,%esp
f01093b7:	50                   	push   %eax
f01093b8:	e8 69 e7 ff ff       	call   f0107b26 <kfree>
f01093bd:	83 c4 10             	add    $0x10,%esp
					pd_clear_page_dir_entry(e->env_page_directory,va);
f01093c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01093c3:	8b 40 5c             	mov    0x5c(%eax),%eax
f01093c6:	83 ec 08             	sub    $0x8,%esp
f01093c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01093cc:	50                   	push   %eax
f01093cd:	e8 87 eb ff ff       	call   f0107f59 <pd_clear_page_dir_entry>
f01093d2:	83 c4 10             	add    $0x10,%esp
				}
		va+=PAGE_SIZE;
f01093d5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		}
	}
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
	va=ROUNDDOWN(virtual_address,PAGE_SIZE);
	 uint32 *ptr_page_table;
	for(int i=0; i<n; i++)
f01093dc:	ff 45 e8             	incl   -0x18(%ebp)
f01093df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01093e2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01093e5:	0f 82 61 ff ff ff    	jb     f010934c <free_user_mem+0x155>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01093eb:	0f 20 d8             	mov    %cr3,%eax
f01093ee:	89 45 ac             	mov    %eax,-0x54(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01093f1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01093f4:	0f 22 d8             	mov    %eax,%cr3
					pd_clear_page_dir_entry(e->env_page_directory,va);
				}
		va+=PAGE_SIZE;
	}
	tlbflush();
}
f01093f7:	90                   	nop
f01093f8:	c9                   	leave  
f01093f9:	c3                   	ret    

f01093fa <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01093fa:	55                   	push   %ebp
f01093fb:	89 e5                	mov    %esp,%ebp
f01093fd:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109400:	83 ec 04             	sub    $0x4,%esp
f0109403:	68 14 69 13 f0       	push   $0xf0136914
f0109408:	68 c6 01 00 00       	push   $0x1c6
f010940d:	68 f8 68 13 f0       	push   $0xf01368f8
f0109412:	e8 ee 6d ff ff       	call   f0100205 <_panic>

f0109417 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0109417:	55                   	push   %ebp
f0109418:	89 e5                	mov    %esp,%ebp
f010941a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f010941d:	83 ec 04             	sub    $0x4,%esp
f0109420:	68 54 69 13 f0       	push   $0xf0136954
f0109425:	68 d6 01 00 00       	push   $0x1d6
f010942a:	68 f8 68 13 f0       	push   $0xf01368f8
f010942f:	e8 d1 6d ff ff       	call   f0100205 <_panic>

f0109434 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109434:	55                   	push   %ebp
f0109435:	89 e5                	mov    %esp,%ebp
f0109437:	57                   	push   %edi
f0109438:	56                   	push   %esi
f0109439:	53                   	push   %ebx
f010943a:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109440:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109447:	83 ec 0c             	sub    $0xc,%esp
f010944a:	ff 75 08             	pushl  0x8(%ebp)
f010944d:	e8 0b 22 00 00       	call   f010b65d <get_user_program_info>
f0109452:	83 c4 10             	add    $0x10,%esp
f0109455:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0109458:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f010945c:	75 0a                	jne    f0109468 <env_create+0x34>
f010945e:	b8 00 00 00 00       	mov    $0x0,%eax
f0109463:	e9 cd 0b 00 00       	jmp    f010a035 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109468:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010946b:	8b 40 08             	mov    0x8(%eax),%eax
f010946e:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0109471:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0109478:	00 00 00 
	if(allocate_environment(&e) < 0)
f010947b:	83 ec 0c             	sub    $0xc,%esp
f010947e:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0109484:	50                   	push   %eax
f0109485:	e8 d3 0e 00 00       	call   f010a35d <allocate_environment>
f010948a:	83 c4 10             	add    $0x10,%esp
f010948d:	85 c0                	test   %eax,%eax
f010948f:	79 0a                	jns    f010949b <env_create+0x67>
	{
		return 0;
f0109491:	b8 00 00 00 00       	mov    $0x0,%eax
f0109496:	e9 9a 0b 00 00       	jmp    f010a035 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f010949b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010949e:	8b 00                	mov    (%eax),%eax
f01094a0:	83 ec 0c             	sub    $0xc,%esp
f01094a3:	50                   	push   %eax
f01094a4:	e8 47 85 02 00       	call   f01319f0 <strlen>
f01094a9:	83 c4 10             	add    $0x10,%esp
f01094ac:	83 f8 3f             	cmp    $0x3f,%eax
f01094af:	7f 20                	jg     f01094d1 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01094b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094b4:	8b 00                	mov    (%eax),%eax
f01094b6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094bc:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01094c2:	83 ec 08             	sub    $0x8,%esp
f01094c5:	50                   	push   %eax
f01094c6:	52                   	push   %edx
f01094c7:	e8 73 85 02 00       	call   f0131a3f <strcpy>
f01094cc:	83 c4 10             	add    $0x10,%esp
f01094cf:	eb 20                	jmp    f01094f1 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01094d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094d4:	8b 00                	mov    (%eax),%eax
f01094d6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094dc:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01094e2:	83 ec 04             	sub    $0x4,%esp
f01094e5:	6a 3f                	push   $0x3f
f01094e7:	50                   	push   %eax
f01094e8:	52                   	push   %edx
f01094e9:	e8 7f 85 02 00       	call   f0131a6d <strncpy>
f01094ee:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f01094f1:	e8 6d 0f 00 00       	call   f010a463 <create_user_directory>
f01094f6:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f01094f9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01094fc:	83 ec 0c             	sub    $0xc,%esp
f01094ff:	50                   	push   %eax
f0109500:	e8 67 e7 ff ff       	call   f0107c6c <kheap_physical_address>
f0109505:	83 c4 10             	add    $0x10,%esp
f0109508:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f010950b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109511:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109514:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109517:	83 ec 0c             	sub    $0xc,%esp
f010951a:	6a 02                	push   $0x2
f010951c:	e8 f2 4d 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0109521:	83 c4 10             	add    $0x10,%esp
f0109524:	85 c0                	test   %eax,%eax
f0109526:	74 21                	je     f0109549 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0109528:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010952e:	8b 55 10             	mov    0x10(%ebp),%edx
f0109531:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109537:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010953d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109540:	2b 55 10             	sub    0x10(%ebp),%edx
f0109543:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109549:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f010954d:	75 12                	jne    f0109561 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f010954f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109555:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f010955c:	00 00 00 
f010955f:	eb 0f                	jmp    f0109570 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109561:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109567:	8b 55 14             	mov    0x14(%ebp),%edx
f010956a:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109570:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109576:	83 ec 04             	sub    $0x4,%esp
f0109579:	ff 75 ac             	pushl  -0x54(%ebp)
f010957c:	ff 75 b0             	pushl  -0x50(%ebp)
f010957f:	50                   	push   %eax
f0109580:	e8 fa 15 00 00       	call   f010ab7f <initialize_environment>
f0109585:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109588:	0f 20 d8             	mov    %cr3,%eax
f010958b:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f010958e:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0109591:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0109594:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010959a:	8b 40 60             	mov    0x60(%eax),%eax
f010959d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01095a3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01095a9:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f01095ac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f01095b3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01095ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095c0:	8b 40 74             	mov    0x74(%eax),%eax
f01095c3:	48                   	dec    %eax
f01095c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f01095c7:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f01095ce:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01095d1:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f01095d7:	83 ec 08             	sub    $0x8,%esp
f01095da:	ff 75 b8             	pushl  -0x48(%ebp)
f01095dd:	50                   	push   %eax
f01095de:	e8 af 1d 00 00       	call   f010b392 <PROGRAM_SEGMENT_FIRST>
f01095e3:	83 c4 0c             	add    $0xc,%esp
f01095e6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01095ec:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f01095f2:	b9 05 00 00 00       	mov    $0x5,%ecx
f01095f7:	89 c7                	mov    %eax,%edi
f01095f9:	89 d6                	mov    %edx,%esi
f01095fb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01095fd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109603:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109606:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109609:	8b 40 10             	mov    0x10(%eax),%eax
f010960c:	83 f8 ff             	cmp    $0xffffffff,%eax
f010960f:	75 07                	jne    f0109618 <env_create+0x1e4>
f0109611:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109618:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010961b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010961e:	e9 15 03 00 00       	jmp    f0109938 <env_create+0x504>
	{
		segment_counter++;
f0109623:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109626:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f010962d:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109630:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109636:	83 ec 0c             	sub    $0xc,%esp
f0109639:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f010963f:	52                   	push   %edx
f0109640:	ff 75 dc             	pushl  -0x24(%ebp)
f0109643:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109649:	52                   	push   %edx
f010964a:	ff 75 e4             	pushl  -0x1c(%ebp)
f010964d:	50                   	push   %eax
f010964e:	e8 4b 0e 00 00       	call   f010a49e <program_segment_alloc_map_copy_workingset>
f0109653:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109656:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010965c:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010965f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109662:	8b 00                	mov    (%eax),%eax
f0109664:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109667:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010966a:	8b 40 0c             	mov    0xc(%eax),%eax
f010966d:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109670:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109673:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0109676:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109679:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010967e:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0109681:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0109688:	8b 55 98             	mov    -0x68(%ebp),%edx
f010968b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010968e:	01 d0                	add    %edx,%eax
f0109690:	48                   	dec    %eax
f0109691:	89 45 88             	mov    %eax,-0x78(%ebp)
f0109694:	8b 45 88             	mov    -0x78(%ebp),%eax
f0109697:	ba 00 00 00 00       	mov    $0x0,%edx
f010969c:	f7 75 8c             	divl   -0x74(%ebp)
f010969f:	8b 45 88             	mov    -0x78(%ebp),%eax
f01096a2:	29 d0                	sub    %edx,%eax
f01096a4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01096a7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01096aa:	2b 45 90             	sub    -0x70(%ebp),%eax
f01096ad:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01096b0:	a1 80 07 86 f0       	mov    0xf0860780,%eax
f01096b5:	83 ec 04             	sub    $0x4,%esp
f01096b8:	68 00 10 00 00       	push   $0x1000
f01096bd:	6a 00                	push   $0x0
f01096bf:	50                   	push   %eax
f01096c0:	e8 19 85 02 00       	call   f0131bde <memset>
f01096c5:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01096c8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01096cb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01096ce:	8b 15 80 07 86 f0    	mov    0xf0860780,%edx
f01096d4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01096d7:	01 d0                	add    %edx,%eax
f01096d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01096dc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01096df:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01096e2:	eb 13                	jmp    f01096f7 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f01096e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01096e7:	8a 10                	mov    (%eax),%dl
f01096e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01096ec:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01096ee:	ff 45 cc             	incl   -0x34(%ebp)
f01096f1:	ff 45 d4             	incl   -0x2c(%ebp)
f01096f4:	ff 45 d0             	incl   -0x30(%ebp)
f01096f7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01096fa:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01096fd:	72 e5                	jb     f01096e4 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01096ff:	8b 15 80 07 86 f0    	mov    0xf0860780,%edx
f0109705:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010970b:	83 ec 04             	sub    $0x4,%esp
f010970e:	52                   	push   %edx
f010970f:	ff 75 90             	pushl  -0x70(%ebp)
f0109712:	50                   	push   %eax
f0109713:	e8 29 a0 ff ff       	call   f0103741 <pf_add_env_page>
f0109718:	83 c4 10             	add    $0x10,%esp
f010971b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010971e:	75 17                	jne    f0109737 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109720:	83 ec 04             	sub    $0x4,%esp
f0109723:	68 80 69 13 f0       	push   $0xf0136980
f0109728:	68 e1 00 00 00       	push   $0xe1
f010972d:	68 c5 69 13 f0       	push   $0xf01369c5
f0109732:	e8 ce 6a ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010973a:	8b 50 04             	mov    0x4(%eax),%edx
f010973d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109740:	01 d0                	add    %edx,%eax
f0109742:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109748:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010974e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109753:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109759:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010975c:	8b 50 04             	mov    0x4(%eax),%edx
f010975f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109762:	01 d0                	add    %edx,%eax
f0109764:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010976a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010976d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109770:	eb 43                	jmp    f01097b5 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109772:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109775:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977b:	83 ec 04             	sub    $0x4,%esp
f010977e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109781:	52                   	push   %edx
f0109782:	50                   	push   %eax
f0109783:	e8 b9 9f ff ff       	call   f0103741 <pf_add_env_page>
f0109788:	83 c4 10             	add    $0x10,%esp
f010978b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010978e:	75 17                	jne    f01097a7 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109790:	83 ec 04             	sub    $0x4,%esp
f0109793:	68 80 69 13 f0       	push   $0xf0136980
f0109798:	68 ee 00 00 00       	push   $0xee
f010979d:	68 c5 69 13 f0       	push   $0xf01369c5
f01097a2:	e8 5e 6a ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01097a7:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01097ae:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01097b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01097b8:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01097be:	72 b2                	jb     f0109772 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01097c0:	a1 80 07 86 f0       	mov    0xf0860780,%eax
f01097c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01097c8:	83 ec 04             	sub    $0x4,%esp
f01097cb:	68 00 10 00 00       	push   $0x1000
f01097d0:	6a 00                	push   $0x0
f01097d2:	ff 75 d0             	pushl  -0x30(%ebp)
f01097d5:	e8 04 84 02 00       	call   f0131bde <memset>
f01097da:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01097dd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01097e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01097e6:	eb 13                	jmp    f01097fb <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f01097e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01097eb:	8a 10                	mov    (%eax),%dl
f01097ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01097f0:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01097f2:	ff 45 cc             	incl   -0x34(%ebp)
f01097f5:	ff 45 d4             	incl   -0x2c(%ebp)
f01097f8:	ff 45 d0             	incl   -0x30(%ebp)
f01097fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01097fe:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109804:	72 e2                	jb     f01097e8 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109806:	8b 15 80 07 86 f0    	mov    0xf0860780,%edx
f010980c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109812:	83 ec 04             	sub    $0x4,%esp
f0109815:	52                   	push   %edx
f0109816:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f010981c:	50                   	push   %eax
f010981d:	e8 1f 9f ff ff       	call   f0103741 <pf_add_env_page>
f0109822:	83 c4 10             	add    $0x10,%esp
f0109825:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109828:	75 17                	jne    f0109841 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010982a:	83 ec 04             	sub    $0x4,%esp
f010982d:	68 80 69 13 f0       	push   $0xf0136980
f0109832:	68 fd 00 00 00       	push   $0xfd
f0109837:	68 c5 69 13 f0       	push   $0xf01369c5
f010983c:	e8 c4 69 ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109841:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109848:	10 00 00 
f010984b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010984e:	8b 50 04             	mov    0x4(%eax),%edx
f0109851:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109854:	01 c2                	add    %eax,%edx
f0109856:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010985c:	01 d0                	add    %edx,%eax
f010985e:	48                   	dec    %eax
f010985f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109865:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010986b:	ba 00 00 00 00       	mov    $0x0,%edx
f0109870:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0109876:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010987c:	29 d0                	sub    %edx,%eax
f010987e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109881:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109884:	8b 50 08             	mov    0x8(%eax),%edx
f0109887:	8b 45 98             	mov    -0x68(%ebp),%eax
f010988a:	01 d0                	add    %edx,%eax
f010988c:	2b 45 c8             	sub    -0x38(%ebp),%eax
f010988f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109895:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010989c:	eb 41                	jmp    f01098df <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f010989e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098a4:	83 ec 04             	sub    $0x4,%esp
f01098a7:	6a 01                	push   $0x1
f01098a9:	ff 75 c8             	pushl  -0x38(%ebp)
f01098ac:	50                   	push   %eax
f01098ad:	e8 5e 9d ff ff       	call   f0103610 <pf_add_empty_env_page>
f01098b2:	83 c4 10             	add    $0x10,%esp
f01098b5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01098b8:	75 17                	jne    f01098d1 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01098ba:	83 ec 04             	sub    $0x4,%esp
f01098bd:	68 80 69 13 f0       	push   $0xf0136980
f01098c2:	68 0a 01 00 00       	push   $0x10a
f01098c7:	68 c5 69 13 f0       	push   $0xf01369c5
f01098cc:	e8 34 69 ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01098d1:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01098d8:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01098df:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01098e6:	10 00 00 
f01098e9:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f01098ef:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01098f5:	01 d0                	add    %edx,%eax
f01098f7:	48                   	dec    %eax
f01098f8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01098fe:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109904:	ba 00 00 00 00       	mov    $0x0,%edx
f0109909:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010990f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109915:	29 d0                	sub    %edx,%eax
f0109917:	89 c2                	mov    %eax,%edx
f0109919:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010991c:	39 c2                	cmp    %eax,%edx
f010991e:	0f 87 7a ff ff ff    	ja     f010989e <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109924:	83 ec 08             	sub    $0x8,%esp
f0109927:	ff 75 b8             	pushl  -0x48(%ebp)
f010992a:	ff 75 e4             	pushl  -0x1c(%ebp)
f010992d:	e8 55 19 00 00       	call   f010b287 <PROGRAM_SEGMENT_NEXT>
f0109932:	83 c4 10             	add    $0x10,%esp
f0109935:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109938:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010993c:	0f 85 e1 fc ff ff    	jne    f0109623 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109942:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109949:	e9 9d 00 00 00       	jmp    f01099eb <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010994e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109954:	8b 48 78             	mov    0x78(%eax),%ecx
f0109957:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010995a:	89 d0                	mov    %edx,%eax
f010995c:	01 c0                	add    %eax,%eax
f010995e:	01 d0                	add    %edx,%eax
f0109960:	c1 e0 03             	shl    $0x3,%eax
f0109963:	01 c8                	add    %ecx,%eax
f0109965:	8a 40 04             	mov    0x4(%eax),%al
f0109968:	84 c0                	test   %al,%al
f010996a:	75 7c                	jne    f01099e8 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010996c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109972:	8b 48 78             	mov    0x78(%eax),%ecx
f0109975:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109978:	89 d0                	mov    %edx,%eax
f010997a:	01 c0                	add    %eax,%eax
f010997c:	01 d0                	add    %edx,%eax
f010997e:	c1 e0 03             	shl    $0x3,%eax
f0109981:	01 c8                	add    %ecx,%eax
f0109983:	8b 00                	mov    (%eax),%eax
f0109985:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010998b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109991:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109994:	83 ec 04             	sub    $0x4,%esp
f0109997:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010999d:	52                   	push   %edx
f010999e:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01099a4:	50                   	push   %eax
f01099a5:	e8 33 d1 ff ff       	call   f0106add <get_page_table>
f01099aa:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01099ad:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01099b3:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01099b9:	c1 ea 0c             	shr    $0xc,%edx
f01099bc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01099c2:	c1 e2 02             	shl    $0x2,%edx
f01099c5:	01 d0                	add    %edx,%eax
f01099c7:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01099cd:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f01099d3:	c1 e9 0c             	shr    $0xc,%ecx
f01099d6:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01099dc:	c1 e1 02             	shl    $0x2,%ecx
f01099df:	01 ca                	add    %ecx,%edx
f01099e1:	8b 12                	mov    (%edx),%edx
f01099e3:	83 e2 bf             	and    $0xffffffbf,%edx
f01099e6:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01099e8:	ff 45 c4             	incl   -0x3c(%ebp)
f01099eb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099f1:	8b 50 74             	mov    0x74(%eax),%edx
f01099f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01099f7:	39 c2                	cmp    %eax,%edx
f01099f9:	0f 87 4f ff ff ff    	ja     f010994e <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01099ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109a02:	8b 50 08             	mov    0x8(%eax),%edx
f0109a05:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a0b:	83 ec 08             	sub    $0x8,%esp
f0109a0e:	52                   	push   %edx
f0109a0f:	50                   	push   %eax
f0109a10:	e8 bc 16 00 00       	call   f010b0d1 <set_environment_entry_point>
f0109a15:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109a18:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a1e:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109a25:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109a28:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109a2f:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109a32:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109a39:	e9 53 05 00 00       	jmp    f0109f91 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109a3e:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109a45:	00 00 00 
		allocate_frame(&pp);
f0109a48:	83 ec 0c             	sub    $0xc,%esp
f0109a4b:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109a51:	50                   	push   %eax
f0109a52:	e8 c7 ce ff ff       	call   f010691e <allocate_frame>
f0109a57:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109a5a:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109a60:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a66:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109a69:	6a 06                	push   $0x6
f0109a6b:	ff 75 c0             	pushl  -0x40(%ebp)
f0109a6e:	52                   	push   %edx
f0109a6f:	50                   	push   %eax
f0109a70:	e8 b4 d4 ff ff       	call   f0106f29 <loadtime_map_frame>
f0109a75:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109a78:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109a7b:	83 ec 04             	sub    $0x4,%esp
f0109a7e:	68 00 10 00 00       	push   $0x1000
f0109a83:	6a 00                	push   $0x0
f0109a85:	50                   	push   %eax
f0109a86:	e8 53 81 02 00       	call   f0131bde <memset>
f0109a8b:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109a8e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a94:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a9a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aa0:	83 ec 04             	sub    $0x4,%esp
f0109aa3:	ff 75 c0             	pushl  -0x40(%ebp)
f0109aa6:	52                   	push   %edx
f0109aa7:	50                   	push   %eax
f0109aa8:	e8 8d e5 ff ff       	call   f010803a <env_page_ws_set_entry>
f0109aad:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109ab0:	83 ec 0c             	sub    $0xc,%esp
f0109ab3:	6a 02                	push   $0x2
f0109ab5:	e8 59 48 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0109aba:	83 c4 10             	add    $0x10,%esp
f0109abd:	85 c0                	test   %eax,%eax
f0109abf:	0f 84 6b 04 00 00    	je     f0109f30 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ac5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109acb:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ace:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ad4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ada:	89 d0                	mov    %edx,%eax
f0109adc:	01 c0                	add    %eax,%eax
f0109ade:	01 d0                	add    %edx,%eax
f0109ae0:	c1 e0 03             	shl    $0x3,%eax
f0109ae3:	01 c8                	add    %ecx,%eax
f0109ae5:	85 c0                	test   %eax,%eax
f0109ae7:	75 17                	jne    f0109b00 <env_create+0x6cc>
f0109ae9:	83 ec 04             	sub    $0x4,%esp
f0109aec:	68 e2 69 13 f0       	push   $0xf01369e2
f0109af1:	68 41 01 00 00       	push   $0x141
f0109af6:	68 c5 69 13 f0       	push   $0xf01369c5
f0109afb:	e8 05 67 ff ff       	call   f0100205 <_panic>
f0109b00:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b06:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b09:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b0f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b15:	89 d0                	mov    %edx,%eax
f0109b17:	01 c0                	add    %eax,%eax
f0109b19:	01 d0                	add    %edx,%eax
f0109b1b:	c1 e0 03             	shl    $0x3,%eax
f0109b1e:	01 c8                	add    %ecx,%eax
f0109b20:	8b 40 10             	mov    0x10(%eax),%eax
f0109b23:	85 c0                	test   %eax,%eax
f0109b25:	74 4b                	je     f0109b72 <env_create+0x73e>
f0109b27:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b2d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b30:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b36:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b3c:	89 d0                	mov    %edx,%eax
f0109b3e:	01 c0                	add    %eax,%eax
f0109b40:	01 d0                	add    %edx,%eax
f0109b42:	c1 e0 03             	shl    $0x3,%eax
f0109b45:	01 c8                	add    %ecx,%eax
f0109b47:	8b 50 10             	mov    0x10(%eax),%edx
f0109b4a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b50:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b53:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b59:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b5f:	89 c8                	mov    %ecx,%eax
f0109b61:	01 c0                	add    %eax,%eax
f0109b63:	01 c8                	add    %ecx,%eax
f0109b65:	c1 e0 03             	shl    $0x3,%eax
f0109b68:	01 d8                	add    %ebx,%eax
f0109b6a:	8b 40 14             	mov    0x14(%eax),%eax
f0109b6d:	89 42 14             	mov    %eax,0x14(%edx)
f0109b70:	eb 2f                	jmp    f0109ba1 <env_create+0x76d>
f0109b72:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b78:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b7e:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b81:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b87:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b8d:	89 c8                	mov    %ecx,%eax
f0109b8f:	01 c0                	add    %eax,%eax
f0109b91:	01 c8                	add    %ecx,%eax
f0109b93:	c1 e0 03             	shl    $0x3,%eax
f0109b96:	01 d8                	add    %ebx,%eax
f0109b98:	8b 40 14             	mov    0x14(%eax),%eax
f0109b9b:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f0109ba1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ba7:	8b 48 78             	mov    0x78(%eax),%ecx
f0109baa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bb0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bb6:	89 d0                	mov    %edx,%eax
f0109bb8:	01 c0                	add    %eax,%eax
f0109bba:	01 d0                	add    %edx,%eax
f0109bbc:	c1 e0 03             	shl    $0x3,%eax
f0109bbf:	01 c8                	add    %ecx,%eax
f0109bc1:	8b 40 14             	mov    0x14(%eax),%eax
f0109bc4:	85 c0                	test   %eax,%eax
f0109bc6:	74 4b                	je     f0109c13 <env_create+0x7df>
f0109bc8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bce:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bd1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bd7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bdd:	89 d0                	mov    %edx,%eax
f0109bdf:	01 c0                	add    %eax,%eax
f0109be1:	01 d0                	add    %edx,%eax
f0109be3:	c1 e0 03             	shl    $0x3,%eax
f0109be6:	01 c8                	add    %ecx,%eax
f0109be8:	8b 50 14             	mov    0x14(%eax),%edx
f0109beb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bf1:	8b 58 78             	mov    0x78(%eax),%ebx
f0109bf4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bfa:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c00:	89 c8                	mov    %ecx,%eax
f0109c02:	01 c0                	add    %eax,%eax
f0109c04:	01 c8                	add    %ecx,%eax
f0109c06:	c1 e0 03             	shl    $0x3,%eax
f0109c09:	01 d8                	add    %ebx,%eax
f0109c0b:	8b 40 10             	mov    0x10(%eax),%eax
f0109c0e:	89 42 10             	mov    %eax,0x10(%edx)
f0109c11:	eb 2f                	jmp    f0109c42 <env_create+0x80e>
f0109c13:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c19:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c1f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c22:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c28:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c2e:	89 c8                	mov    %ecx,%eax
f0109c30:	01 c0                	add    %eax,%eax
f0109c32:	01 c8                	add    %ecx,%eax
f0109c34:	c1 e0 03             	shl    $0x3,%eax
f0109c37:	01 d8                	add    %ebx,%eax
f0109c39:	8b 40 10             	mov    0x10(%eax),%eax
f0109c3c:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109c42:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c48:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c4b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c51:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c57:	89 d0                	mov    %edx,%eax
f0109c59:	01 c0                	add    %eax,%eax
f0109c5b:	01 d0                	add    %edx,%eax
f0109c5d:	c1 e0 03             	shl    $0x3,%eax
f0109c60:	01 c8                	add    %ecx,%eax
f0109c62:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109c69:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c6f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c72:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c78:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c7e:	89 d0                	mov    %edx,%eax
f0109c80:	01 c0                	add    %eax,%eax
f0109c82:	01 d0                	add    %edx,%eax
f0109c84:	c1 e0 03             	shl    $0x3,%eax
f0109c87:	01 c8                	add    %ecx,%eax
f0109c89:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109c90:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c96:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109c9c:	4a                   	dec    %edx
f0109c9d:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109ca3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ca9:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109caf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cb5:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109cbb:	39 c2                	cmp    %eax,%edx
f0109cbd:	0f 83 39 01 00 00    	jae    f0109dfc <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109cc3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cc9:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ccc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cd2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109cd8:	89 d0                	mov    %edx,%eax
f0109cda:	01 c0                	add    %eax,%eax
f0109cdc:	01 d0                	add    %edx,%eax
f0109cde:	c1 e0 03             	shl    $0x3,%eax
f0109ce1:	01 c8                	add    %ecx,%eax
f0109ce3:	85 c0                	test   %eax,%eax
f0109ce5:	75 17                	jne    f0109cfe <env_create+0x8ca>
f0109ce7:	83 ec 04             	sub    $0x4,%esp
f0109cea:	68 00 6a 13 f0       	push   $0xf0136a00
f0109cef:	68 46 01 00 00       	push   $0x146
f0109cf4:	68 c5 69 13 f0       	push   $0xf01369c5
f0109cf9:	e8 07 65 ff ff       	call   f0100205 <_panic>
f0109cfe:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d04:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d07:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d0d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d13:	89 d0                	mov    %edx,%eax
f0109d15:	01 c0                	add    %eax,%eax
f0109d17:	01 d0                	add    %edx,%eax
f0109d19:	c1 e0 03             	shl    $0x3,%eax
f0109d1c:	01 c8                	add    %ecx,%eax
f0109d1e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d24:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109d2a:	89 50 10             	mov    %edx,0x10(%eax)
f0109d2d:	8b 40 10             	mov    0x10(%eax),%eax
f0109d30:	85 c0                	test   %eax,%eax
f0109d32:	74 31                	je     f0109d65 <env_create+0x931>
f0109d34:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d3a:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109d40:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d46:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d49:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d4f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109d55:	89 c8                	mov    %ecx,%eax
f0109d57:	01 c0                	add    %eax,%eax
f0109d59:	01 c8                	add    %ecx,%eax
f0109d5b:	c1 e0 03             	shl    $0x3,%eax
f0109d5e:	01 d8                	add    %ebx,%eax
f0109d60:	89 42 14             	mov    %eax,0x14(%edx)
f0109d63:	eb 2c                	jmp    f0109d91 <env_create+0x95d>
f0109d65:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d6b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d71:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d74:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d7a:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109d80:	89 c8                	mov    %ecx,%eax
f0109d82:	01 c0                	add    %eax,%eax
f0109d84:	01 c8                	add    %ecx,%eax
f0109d86:	c1 e0 03             	shl    $0x3,%eax
f0109d89:	01 d8                	add    %ebx,%eax
f0109d8b:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109d91:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d97:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d9d:	8b 58 78             	mov    0x78(%eax),%ebx
f0109da0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109da6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109dac:	89 c8                	mov    %ecx,%eax
f0109dae:	01 c0                	add    %eax,%eax
f0109db0:	01 c8                	add    %ecx,%eax
f0109db2:	c1 e0 03             	shl    $0x3,%eax
f0109db5:	01 d8                	add    %ebx,%eax
f0109db7:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109dbd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dc3:	8b 48 78             	mov    0x78(%eax),%ecx
f0109dc6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dcc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109dd2:	89 d0                	mov    %edx,%eax
f0109dd4:	01 c0                	add    %eax,%eax
f0109dd6:	01 d0                	add    %edx,%eax
f0109dd8:	c1 e0 03             	shl    $0x3,%eax
f0109ddb:	01 c8                	add    %ecx,%eax
f0109ddd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109de4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dea:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109df0:	42                   	inc    %edx
f0109df1:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109df7:	e9 34 01 00 00       	jmp    f0109f30 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109dfc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e02:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e05:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e0b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e11:	89 d0                	mov    %edx,%eax
f0109e13:	01 c0                	add    %eax,%eax
f0109e15:	01 d0                	add    %edx,%eax
f0109e17:	c1 e0 03             	shl    $0x3,%eax
f0109e1a:	01 c8                	add    %ecx,%eax
f0109e1c:	85 c0                	test   %eax,%eax
f0109e1e:	75 17                	jne    f0109e37 <env_create+0xa03>
f0109e20:	83 ec 04             	sub    $0x4,%esp
f0109e23:	68 00 6a 13 f0       	push   $0xf0136a00
f0109e28:	68 4a 01 00 00       	push   $0x14a
f0109e2d:	68 c5 69 13 f0       	push   $0xf01369c5
f0109e32:	e8 ce 63 ff ff       	call   f0100205 <_panic>
f0109e37:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e3d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e40:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e46:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e4c:	89 d0                	mov    %edx,%eax
f0109e4e:	01 c0                	add    %eax,%eax
f0109e50:	01 d0                	add    %edx,%eax
f0109e52:	c1 e0 03             	shl    $0x3,%eax
f0109e55:	01 c8                	add    %ecx,%eax
f0109e57:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109e5d:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109e63:	89 50 10             	mov    %edx,0x10(%eax)
f0109e66:	8b 40 10             	mov    0x10(%eax),%eax
f0109e69:	85 c0                	test   %eax,%eax
f0109e6b:	74 31                	je     f0109e9e <env_create+0xa6a>
f0109e6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e73:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109e79:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e7f:	8b 58 78             	mov    0x78(%eax),%ebx
f0109e82:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e88:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109e8e:	89 c8                	mov    %ecx,%eax
f0109e90:	01 c0                	add    %eax,%eax
f0109e92:	01 c8                	add    %ecx,%eax
f0109e94:	c1 e0 03             	shl    $0x3,%eax
f0109e97:	01 d8                	add    %ebx,%eax
f0109e99:	89 42 14             	mov    %eax,0x14(%edx)
f0109e9c:	eb 2c                	jmp    f0109eca <env_create+0xa96>
f0109e9e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ea4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109eaa:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ead:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109eb3:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109eb9:	89 c8                	mov    %ecx,%eax
f0109ebb:	01 c0                	add    %eax,%eax
f0109ebd:	01 c8                	add    %ecx,%eax
f0109ebf:	c1 e0 03             	shl    $0x3,%eax
f0109ec2:	01 d8                	add    %ebx,%eax
f0109ec4:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109eca:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ed0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ed6:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ed9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109edf:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ee5:	89 c8                	mov    %ecx,%eax
f0109ee7:	01 c0                	add    %eax,%eax
f0109ee9:	01 c8                	add    %ecx,%eax
f0109eeb:	c1 e0 03             	shl    $0x3,%eax
f0109eee:	01 d8                	add    %ebx,%eax
f0109ef0:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109ef6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109efc:	8b 48 78             	mov    0x78(%eax),%ecx
f0109eff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f05:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f0b:	89 d0                	mov    %edx,%eax
f0109f0d:	01 c0                	add    %eax,%eax
f0109f0f:	01 d0                	add    %edx,%eax
f0109f11:	c1 e0 03             	shl    $0x3,%eax
f0109f14:	01 c8                	add    %ecx,%eax
f0109f16:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109f1d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f23:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109f29:	42                   	inc    %edx
f0109f2a:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109f30:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f36:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f3c:	42                   	inc    %edx
f0109f3d:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109f43:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109f49:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f4f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109f55:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109f5b:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109f5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f63:	f7 f3                	div    %ebx
f0109f65:	89 d0                	mov    %edx,%eax
f0109f67:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109f6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f73:	83 ec 04             	sub    $0x4,%esp
f0109f76:	6a 01                	push   $0x1
f0109f78:	ff 75 c0             	pushl  -0x40(%ebp)
f0109f7b:	50                   	push   %eax
f0109f7c:	e8 8f 96 ff ff       	call   f0103610 <pf_add_empty_env_page>
f0109f81:	83 c4 10             	add    $0x10,%esp
f0109f84:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109f8a:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109f91:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109f94:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109f9a:	0f 83 9e fa ff ff    	jae    f0109a3e <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109fa0:	83 ec 0c             	sub    $0xc,%esp
f0109fa3:	6a 02                	push   $0x2
f0109fa5:	e8 69 43 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f0109faa:	83 c4 10             	add    $0x10,%esp
f0109fad:	85 c0                	test   %eax,%eax
f0109faf:	74 72                	je     f010a023 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109fb1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109fb8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109fbe:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109fc4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109fc7:	eb 2b                	jmp    f0109ff4 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109fc9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109fcc:	8b 10                	mov    (%eax),%edx
f0109fce:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109fd4:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109fd7:	6a 01                	push   $0x1
f0109fd9:	6a 00                	push   $0x0
f0109fdb:	52                   	push   %edx
f0109fdc:	50                   	push   %eax
f0109fdd:	e8 41 dd ff ff       	call   f0107d23 <pt_set_page_permissions>
f0109fe2:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109fe5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109feb:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109ff1:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109ff4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ffa:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109ffe:	74 08                	je     f010a008 <env_create+0xbd4>
f010a000:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010a003:	8b 52 10             	mov    0x10(%edx),%edx
f010a006:	eb 05                	jmp    f010a00d <env_create+0xbd9>
f010a008:	ba 00 00 00 00       	mov    $0x0,%edx
f010a00d:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f010a013:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010a019:	85 c0                	test   %eax,%eax
f010a01b:	75 ac                	jne    f0109fc9 <env_create+0xb95>
f010a01d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a021:	75 a6                	jne    f0109fc9 <env_create+0xb95>
f010a023:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010a026:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010a029:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010a02c:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010a02f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f010a035:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a038:	5b                   	pop    %ebx
f010a039:	5e                   	pop    %esi
f010a03a:	5f                   	pop    %edi
f010a03b:	5d                   	pop    %ebp
f010a03c:	c3                   	ret    

f010a03d <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010a03d:	55                   	push   %ebp
f010a03e:	89 e5                	mov    %esp,%ebp
f010a040:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010a043:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a048:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a04b:	74 25                	je     f010a072 <env_run+0x35>
	{
		curenv = e ;
f010a04d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a050:	a3 f4 fd 85 f0       	mov    %eax,0xf085fdf4
		curenv->env_runs++ ;
f010a055:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a05a:	8b 50 58             	mov    0x58(%eax),%edx
f010a05d:	42                   	inc    %edx
f010a05e:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f010a061:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a066:	8b 40 60             	mov    0x60(%eax),%eax
f010a069:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a06c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a06f:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010a072:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a077:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f010a07e:	e8 68 a1 ff ff       	call   f01041eb <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010a083:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a088:	83 ec 0c             	sub    $0xc,%esp
f010a08b:	50                   	push   %eax
f010a08c:	e8 0f 01 00 00       	call   f010a1a0 <env_pop_tf>

f010a091 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a091:	55                   	push   %ebp
f010a092:	89 e5                	mov    %esp,%ebp
f010a094:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f010a097:	83 ec 0c             	sub    $0xc,%esp
f010a09a:	ff 75 08             	pushl  0x8(%ebp)
f010a09d:	e8 3e 11 00 00       	call   f010b1e0 <unshare_pws_at_user_space>
f010a0a2:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f010a0a5:	83 ec 04             	sub    $0x4,%esp
f010a0a8:	68 24 6a 13 f0       	push   $0xf0136a24
f010a0ad:	68 9d 01 00 00       	push   $0x19d
f010a0b2:	68 c5 69 13 f0       	push   $0xf01369c5
f010a0b7:	e8 49 61 ff ff       	call   f0100205 <_panic>

f010a0bc <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f010a0bc:	55                   	push   %ebp
f010a0bd:	89 e5                	mov    %esp,%ebp
f010a0bf:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f010a0c2:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a0c7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a0ca:	83 ec 0c             	sub    $0xc,%esp
f010a0cd:	50                   	push   %eax
f010a0ce:	e8 fb b1 ff ff       	call   f01052ce <sched_exit_env>
f010a0d3:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010a0d6:	e8 77 a6 ff ff       	call   f0104752 <fos_scheduler>

f010a0db <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a0db:	55                   	push   %ebp
f010a0dc:	89 e5                	mov    %esp,%ebp
f010a0de:	53                   	push   %ebx
f010a0df:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a0e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a0e6:	75 15                	jne    f010a0fd <envid2env+0x22>
		*env_store = curenv;
f010a0e8:	8b 15 f4 fd 85 f0    	mov    0xf085fdf4,%edx
f010a0ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0f1:	89 10                	mov    %edx,(%eax)
		return 0;
f010a0f3:	b8 00 00 00 00       	mov    $0x0,%eax
f010a0f8:	e9 9e 00 00 00       	jmp    f010a19b <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a0fd:	8b 1d f0 fd 85 f0    	mov    0xf085fdf0,%ebx
f010a103:	83 ec 0c             	sub    $0xc,%esp
f010a106:	68 b1 02 00 00       	push   $0x2b1
f010a10b:	e8 52 66 02 00       	call   f0130762 <nearest_pow2_ceil>
f010a110:	83 c4 10             	add    $0x10,%esp
f010a113:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	21 c2                	and    %eax,%edx
f010a11b:	89 d0                	mov    %edx,%eax
f010a11d:	c1 e0 03             	shl    $0x3,%eax
f010a120:	01 d0                	add    %edx,%eax
f010a122:	01 c0                	add    %eax,%eax
f010a124:	01 d0                	add    %edx,%eax
f010a126:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a12d:	01 d0                	add    %edx,%eax
f010a12f:	c1 e0 04             	shl    $0x4,%eax
f010a132:	01 d8                	add    %ebx,%eax
f010a134:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a137:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a13a:	8b 40 54             	mov    0x54(%eax),%eax
f010a13d:	85 c0                	test   %eax,%eax
f010a13f:	74 0b                	je     f010a14c <envid2env+0x71>
f010a141:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a144:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a147:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a14a:	74 10                	je     f010a15c <envid2env+0x81>
		*env_store = 0;
f010a14c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a14f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a155:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a15a:	eb 3f                	jmp    f010a19b <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010a15c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a160:	74 2c                	je     f010a18e <envid2env+0xb3>
f010a162:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a167:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a16a:	74 22                	je     f010a18e <envid2env+0xb3>
f010a16c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a16f:	8b 50 50             	mov    0x50(%eax),%edx
f010a172:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010a177:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a17a:	39 c2                	cmp    %eax,%edx
f010a17c:	74 10                	je     f010a18e <envid2env+0xb3>
		*env_store = 0;
f010a17e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a181:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a187:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a18c:	eb 0d                	jmp    f010a19b <envid2env+0xc0>
	}

	*env_store = e;
f010a18e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a191:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a194:	89 10                	mov    %edx,(%eax)
	return 0;
f010a196:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a19b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a19e:	c9                   	leave  
f010a19f:	c3                   	ret    

f010a1a0 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f010a1a0:	55                   	push   %ebp
f010a1a1:	89 e5                	mov    %esp,%ebp
f010a1a3:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010a1a6:	8b 65 08             	mov    0x8(%ebp),%esp
f010a1a9:	61                   	popa   
f010a1aa:	07                   	pop    %es
f010a1ab:	1f                   	pop    %ds
f010a1ac:	83 c4 08             	add    $0x8,%esp
f010a1af:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f010a1b0:	83 ec 04             	sub    $0x4,%esp
f010a1b3:	68 4b 6a 13 f0       	push   $0xf0136a4b
f010a1b8:	68 fd 01 00 00       	push   $0x1fd
f010a1bd:	68 c5 69 13 f0       	push   $0xf01369c5
f010a1c2:	e8 3e 60 ff ff       	call   f0100205 <_panic>

f010a1c7 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010a1c7:	55                   	push   %ebp
f010a1c8:	89 e5                	mov    %esp,%ebp
f010a1ca:	53                   	push   %ebx
f010a1cb:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f010a1ce:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010a1d5:	e9 73 01 00 00       	jmp    f010a34d <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f010a1da:	8b 0d f0 fd 85 f0    	mov    0xf085fdf0,%ecx
f010a1e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1e3:	89 d0                	mov    %edx,%eax
f010a1e5:	c1 e0 03             	shl    $0x3,%eax
f010a1e8:	01 d0                	add    %edx,%eax
f010a1ea:	01 c0                	add    %eax,%eax
f010a1ec:	01 d0                	add    %edx,%eax
f010a1ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a1f5:	01 d0                	add    %edx,%eax
f010a1f7:	c1 e0 04             	shl    $0x4,%eax
f010a1fa:	01 c8                	add    %ecx,%eax
f010a1fc:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010a203:	8b 0d f0 fd 85 f0    	mov    0xf085fdf0,%ecx
f010a209:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a20c:	89 d0                	mov    %edx,%eax
f010a20e:	c1 e0 03             	shl    $0x3,%eax
f010a211:	01 d0                	add    %edx,%eax
f010a213:	01 c0                	add    %eax,%eax
f010a215:	01 d0                	add    %edx,%eax
f010a217:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a21e:	01 d0                	add    %edx,%eax
f010a220:	c1 e0 04             	shl    $0x4,%eax
f010a223:	01 c8                	add    %ecx,%eax
f010a225:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010a22c:	8b 0d f0 fd 85 f0    	mov    0xf085fdf0,%ecx
f010a232:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a235:	89 d0                	mov    %edx,%eax
f010a237:	c1 e0 03             	shl    $0x3,%eax
f010a23a:	01 d0                	add    %edx,%eax
f010a23c:	01 c0                	add    %eax,%eax
f010a23e:	01 d0                	add    %edx,%eax
f010a240:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a247:	01 d0                	add    %edx,%eax
f010a249:	c1 e0 04             	shl    $0x4,%eax
f010a24c:	01 c8                	add    %ecx,%eax
f010a24e:	85 c0                	test   %eax,%eax
f010a250:	75 17                	jne    f010a269 <env_init+0xa2>
f010a252:	83 ec 04             	sub    $0x4,%esp
f010a255:	68 00 6a 13 f0       	push   $0xf0136a00
f010a25a:	68 19 02 00 00       	push   $0x219
f010a25f:	68 c5 69 13 f0       	push   $0xf01369c5
f010a264:	e8 9c 5f ff ff       	call   f0100205 <_panic>
f010a269:	8b 0d f0 fd 85 f0    	mov    0xf085fdf0,%ecx
f010a26f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a272:	89 d0                	mov    %edx,%eax
f010a274:	c1 e0 03             	shl    $0x3,%eax
f010a277:	01 d0                	add    %edx,%eax
f010a279:	01 c0                	add    %eax,%eax
f010a27b:	01 d0                	add    %edx,%eax
f010a27d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a284:	01 d0                	add    %edx,%eax
f010a286:	c1 e0 04             	shl    $0x4,%eax
f010a289:	01 c8                	add    %ecx,%eax
f010a28b:	8b 15 f8 fd 85 f0    	mov    0xf085fdf8,%edx
f010a291:	89 50 44             	mov    %edx,0x44(%eax)
f010a294:	8b 40 44             	mov    0x44(%eax),%eax
f010a297:	85 c0                	test   %eax,%eax
f010a299:	74 2d                	je     f010a2c8 <env_init+0x101>
f010a29b:	8b 0d f8 fd 85 f0    	mov    0xf085fdf8,%ecx
f010a2a1:	8b 1d f0 fd 85 f0    	mov    0xf085fdf0,%ebx
f010a2a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2aa:	89 d0                	mov    %edx,%eax
f010a2ac:	c1 e0 03             	shl    $0x3,%eax
f010a2af:	01 d0                	add    %edx,%eax
f010a2b1:	01 c0                	add    %eax,%eax
f010a2b3:	01 d0                	add    %edx,%eax
f010a2b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a2bc:	01 d0                	add    %edx,%eax
f010a2be:	c1 e0 04             	shl    $0x4,%eax
f010a2c1:	01 d8                	add    %ebx,%eax
f010a2c3:	89 41 48             	mov    %eax,0x48(%ecx)
f010a2c6:	eb 27                	jmp    f010a2ef <env_init+0x128>
f010a2c8:	8b 0d f0 fd 85 f0    	mov    0xf085fdf0,%ecx
f010a2ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2d1:	89 d0                	mov    %edx,%eax
f010a2d3:	c1 e0 03             	shl    $0x3,%eax
f010a2d6:	01 d0                	add    %edx,%eax
f010a2d8:	01 c0                	add    %eax,%eax
f010a2da:	01 d0                	add    %edx,%eax
f010a2dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a2e3:	01 d0                	add    %edx,%eax
f010a2e5:	c1 e0 04             	shl    $0x4,%eax
f010a2e8:	01 c8                	add    %ecx,%eax
f010a2ea:	a3 fc fd 85 f0       	mov    %eax,0xf085fdfc
f010a2ef:	8b 0d f0 fd 85 f0    	mov    0xf085fdf0,%ecx
f010a2f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2f8:	89 d0                	mov    %edx,%eax
f010a2fa:	c1 e0 03             	shl    $0x3,%eax
f010a2fd:	01 d0                	add    %edx,%eax
f010a2ff:	01 c0                	add    %eax,%eax
f010a301:	01 d0                	add    %edx,%eax
f010a303:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a30a:	01 d0                	add    %edx,%eax
f010a30c:	c1 e0 04             	shl    $0x4,%eax
f010a30f:	01 c8                	add    %ecx,%eax
f010a311:	a3 f8 fd 85 f0       	mov    %eax,0xf085fdf8
f010a316:	8b 0d f0 fd 85 f0    	mov    0xf085fdf0,%ecx
f010a31c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a31f:	89 d0                	mov    %edx,%eax
f010a321:	c1 e0 03             	shl    $0x3,%eax
f010a324:	01 d0                	add    %edx,%eax
f010a326:	01 c0                	add    %eax,%eax
f010a328:	01 d0                	add    %edx,%eax
f010a32a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a331:	01 d0                	add    %edx,%eax
f010a333:	c1 e0 04             	shl    $0x4,%eax
f010a336:	01 c8                	add    %ecx,%eax
f010a338:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a33f:	a1 04 fe 85 f0       	mov    0xf085fe04,%eax
f010a344:	40                   	inc    %eax
f010a345:	a3 04 fe 85 f0       	mov    %eax,0xf085fe04
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a34a:	ff 4d f4             	decl   -0xc(%ebp)
f010a34d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a351:	0f 89 83 fe ff ff    	jns    f010a1da <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a357:	90                   	nop
f010a358:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a35b:	c9                   	leave  
f010a35c:	c3                   	ret    

f010a35d <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a35d:	55                   	push   %ebp
f010a35e:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a360:	8b 15 f8 fd 85 f0    	mov    0xf085fdf8,%edx
f010a366:	8b 45 08             	mov    0x8(%ebp),%eax
f010a369:	89 10                	mov    %edx,(%eax)
f010a36b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36e:	8b 00                	mov    (%eax),%eax
f010a370:	85 c0                	test   %eax,%eax
f010a372:	75 07                	jne    f010a37b <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a374:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a379:	eb 11                	jmp    f010a38c <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a37b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37e:	8b 00                	mov    (%eax),%eax
f010a380:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a387:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a38c:	5d                   	pop    %ebp
f010a38d:	c3                   	ret    

f010a38e <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a38e:	55                   	push   %ebp
f010a38f:	89 e5                	mov    %esp,%ebp
f010a391:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a394:	83 ec 04             	sub    $0x4,%esp
f010a397:	68 f0 05 00 00       	push   $0x5f0
f010a39c:	6a 00                	push   $0x0
f010a39e:	ff 75 08             	pushl  0x8(%ebp)
f010a3a1:	e8 38 78 02 00       	call   f0131bde <memset>
f010a3a6:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ac:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a3b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a3b7:	75 17                	jne    f010a3d0 <free_environment+0x42>
f010a3b9:	83 ec 04             	sub    $0x4,%esp
f010a3bc:	68 00 6a 13 f0       	push   $0xf0136a00
f010a3c1:	68 36 02 00 00       	push   $0x236
f010a3c6:	68 c5 69 13 f0       	push   $0xf01369c5
f010a3cb:	e8 35 5e ff ff       	call   f0100205 <_panic>
f010a3d0:	8b 15 f8 fd 85 f0    	mov    0xf085fdf8,%edx
f010a3d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d9:	89 50 44             	mov    %edx,0x44(%eax)
f010a3dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3df:	8b 40 44             	mov    0x44(%eax),%eax
f010a3e2:	85 c0                	test   %eax,%eax
f010a3e4:	74 0d                	je     f010a3f3 <free_environment+0x65>
f010a3e6:	a1 f8 fd 85 f0       	mov    0xf085fdf8,%eax
f010a3eb:	8b 55 08             	mov    0x8(%ebp),%edx
f010a3ee:	89 50 48             	mov    %edx,0x48(%eax)
f010a3f1:	eb 08                	jmp    f010a3fb <free_environment+0x6d>
f010a3f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f6:	a3 fc fd 85 f0       	mov    %eax,0xf085fdfc
f010a3fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3fe:	a3 f8 fd 85 f0       	mov    %eax,0xf085fdf8
f010a403:	8b 45 08             	mov    0x8(%ebp),%eax
f010a406:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a40d:	a1 04 fe 85 f0       	mov    0xf085fe04,%eax
f010a412:	40                   	inc    %eax
f010a413:	a3 04 fe 85 f0       	mov    %eax,0xf085fe04
}
f010a418:	90                   	nop
f010a419:	c9                   	leave  
f010a41a:	c3                   	ret    

f010a41b <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a41b:	55                   	push   %ebp
f010a41c:	89 e5                	mov    %esp,%ebp
f010a41e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a421:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a424:	89 d0                	mov    %edx,%eax
f010a426:	01 c0                	add    %eax,%eax
f010a428:	01 d0                	add    %edx,%eax
f010a42a:	c1 e0 03             	shl    $0x3,%eax
f010a42d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a430:	83 ec 0c             	sub    $0xc,%esp
f010a433:	ff 75 f4             	pushl  -0xc(%ebp)
f010a436:	e8 2b d6 ff ff       	call   f0107a66 <kmalloc>
f010a43b:	83 c4 10             	add    $0x10,%esp
f010a43e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a441:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a445:	75 17                	jne    f010a45e <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a447:	83 ec 04             	sub    $0x4,%esp
f010a44a:	68 57 6a 13 f0       	push   $0xf0136a57
f010a44f:	68 44 02 00 00       	push   $0x244
f010a454:	68 c5 69 13 f0       	push   $0xf01369c5
f010a459:	e8 a7 5d ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a45e:	8b 45 f0             	mov    -0x10(%ebp),%eax

	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a461:	c9                   	leave  
f010a462:	c3                   	ret    

f010a463 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a463:	55                   	push   %ebp
f010a464:	89 e5                	mov    %esp,%ebp
f010a466:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a469:	83 ec 0c             	sub    $0xc,%esp
f010a46c:	68 00 10 00 00       	push   $0x1000
f010a471:	e8 f0 d5 ff ff       	call   f0107a66 <kmalloc>
f010a476:	83 c4 10             	add    $0x10,%esp
f010a479:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a47c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a480:	75 17                	jne    f010a499 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a482:	83 ec 04             	sub    $0x4,%esp
f010a485:	68 57 6a 13 f0       	push   $0xf0136a57
f010a48a:	68 54 02 00 00       	push   $0x254
f010a48f:	68 c5 69 13 f0       	push   $0xf01369c5
f010a494:	e8 6c 5d ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a499:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//Use kmalloc() to allocate a new directory
}
f010a49c:	c9                   	leave  
f010a49d:	c3                   	ret    

f010a49e <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a49e:	55                   	push   %ebp
f010a49f:	89 e5                	mov    %esp,%ebp
f010a4a1:	53                   	push   %ebx
f010a4a2:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a4a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4a8:	8b 40 0c             	mov    0xc(%eax),%eax
f010a4ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a4ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4b1:	8b 40 08             	mov    0x8(%eax),%eax
f010a4b4:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a4b7:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a4be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a4c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a4c4:	01 c2                	add    %eax,%edx
f010a4c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a4c9:	01 d0                	add    %edx,%eax
f010a4cb:	48                   	dec    %eax
f010a4cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a4cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a4d2:	ba 00 00 00 00       	mov    $0x0,%edx
f010a4d7:	f7 75 dc             	divl   -0x24(%ebp)
f010a4da:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a4dd:	29 d0                	sub    %edx,%eax
f010a4df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a4e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a4e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a4e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a4eb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a4f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a4fa:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a501:	8b 45 10             	mov    0x10(%ebp),%eax
f010a504:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a50a:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a511:	0f 85 c8 05 00 00    	jne    f010aadf <program_segment_alloc_map_copy_workingset+0x641>
f010a517:	8b 45 08             	mov    0x8(%ebp),%eax
f010a51a:	05 5c 05 00 00       	add    $0x55c,%eax
f010a51f:	83 ec 08             	sub    $0x8,%esp
f010a522:	68 74 6a 13 f0       	push   $0xf0136a74
f010a527:	50                   	push   %eax
f010a528:	e8 cf 75 02 00       	call   f0131afc <strcmp>
f010a52d:	83 c4 10             	add    $0x10,%esp
f010a530:	85 c0                	test   %eax,%eax
f010a532:	0f 84 a7 05 00 00    	je     f010aadf <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a538:	8b 45 14             	mov    0x14(%ebp),%eax
f010a53b:	83 f8 06             	cmp    $0x6,%eax
f010a53e:	76 05                	jbe    f010a545 <program_segment_alloc_map_copy_workingset+0xa7>
f010a540:	b8 06 00 00 00       	mov    $0x6,%eax
f010a545:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a548:	e9 92 05 00 00       	jmp    f010aadf <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a54d:	83 ec 0c             	sub    $0xc,%esp
f010a550:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a553:	50                   	push   %eax
f010a554:	e8 c5 c3 ff ff       	call   f010691e <allocate_frame>
f010a559:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a55c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a55f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a562:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a565:	6a 06                	push   $0x6
f010a567:	ff 75 f4             	pushl  -0xc(%ebp)
f010a56a:	52                   	push   %edx
f010a56b:	50                   	push   %eax
f010a56c:	e8 b8 c9 ff ff       	call   f0106f29 <loadtime_map_frame>
f010a571:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a574:	8b 45 08             	mov    0x8(%ebp),%eax
f010a577:	8b 48 78             	mov    0x78(%eax),%ecx
f010a57a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a57d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a583:	89 d0                	mov    %edx,%eax
f010a585:	01 c0                	add    %eax,%eax
f010a587:	01 d0                	add    %edx,%eax
f010a589:	c1 e0 03             	shl    $0x3,%eax
f010a58c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a58f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a592:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a594:	8b 45 08             	mov    0x8(%ebp),%eax
f010a597:	8b 48 78             	mov    0x78(%eax),%ecx
f010a59a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a59d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5a3:	89 d0                	mov    %edx,%eax
f010a5a5:	01 c0                	add    %eax,%eax
f010a5a7:	01 d0                	add    %edx,%eax
f010a5a9:	c1 e0 03             	shl    $0x3,%eax
f010a5ac:	01 c8                	add    %ecx,%eax
f010a5ae:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a5b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5bb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5c1:	89 d0                	mov    %edx,%eax
f010a5c3:	01 c0                	add    %eax,%eax
f010a5c5:	01 d0                	add    %edx,%eax
f010a5c7:	c1 e0 03             	shl    $0x3,%eax
f010a5ca:	01 c8                	add    %ecx,%eax
f010a5cc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a5d3:	83 ec 0c             	sub    $0xc,%esp
f010a5d6:	6a 02                	push   $0x2
f010a5d8:	e8 36 3d 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f010a5dd:	83 c4 10             	add    $0x10,%esp
f010a5e0:	85 c0                	test   %eax,%eax
f010a5e2:	0f 84 c8 03 00 00    	je     f010a9b0 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a5e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5eb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5f7:	89 d0                	mov    %edx,%eax
f010a5f9:	01 c0                	add    %eax,%eax
f010a5fb:	01 d0                	add    %edx,%eax
f010a5fd:	c1 e0 03             	shl    $0x3,%eax
f010a600:	01 c8                	add    %ecx,%eax
f010a602:	85 c0                	test   %eax,%eax
f010a604:	75 17                	jne    f010a61d <program_segment_alloc_map_copy_workingset+0x17f>
f010a606:	83 ec 04             	sub    $0x4,%esp
f010a609:	68 e2 69 13 f0       	push   $0xf01369e2
f010a60e:	68 87 02 00 00       	push   $0x287
f010a613:	68 c5 69 13 f0       	push   $0xf01369c5
f010a618:	e8 e8 5b ff ff       	call   f0100205 <_panic>
f010a61d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a620:	8b 48 78             	mov    0x78(%eax),%ecx
f010a623:	8b 45 08             	mov    0x8(%ebp),%eax
f010a626:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a62c:	89 d0                	mov    %edx,%eax
f010a62e:	01 c0                	add    %eax,%eax
f010a630:	01 d0                	add    %edx,%eax
f010a632:	c1 e0 03             	shl    $0x3,%eax
f010a635:	01 c8                	add    %ecx,%eax
f010a637:	8b 40 10             	mov    0x10(%eax),%eax
f010a63a:	85 c0                	test   %eax,%eax
f010a63c:	74 3f                	je     f010a67d <program_segment_alloc_map_copy_workingset+0x1df>
f010a63e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a641:	8b 48 78             	mov    0x78(%eax),%ecx
f010a644:	8b 45 08             	mov    0x8(%ebp),%eax
f010a647:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a64d:	89 d0                	mov    %edx,%eax
f010a64f:	01 c0                	add    %eax,%eax
f010a651:	01 d0                	add    %edx,%eax
f010a653:	c1 e0 03             	shl    $0x3,%eax
f010a656:	01 c8                	add    %ecx,%eax
f010a658:	8b 50 10             	mov    0x10(%eax),%edx
f010a65b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a65e:	8b 58 78             	mov    0x78(%eax),%ebx
f010a661:	8b 45 08             	mov    0x8(%ebp),%eax
f010a664:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a66a:	89 c8                	mov    %ecx,%eax
f010a66c:	01 c0                	add    %eax,%eax
f010a66e:	01 c8                	add    %ecx,%eax
f010a670:	c1 e0 03             	shl    $0x3,%eax
f010a673:	01 d8                	add    %ebx,%eax
f010a675:	8b 40 14             	mov    0x14(%eax),%eax
f010a678:	89 42 14             	mov    %eax,0x14(%edx)
f010a67b:	eb 26                	jmp    f010a6a3 <program_segment_alloc_map_copy_workingset+0x205>
f010a67d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a680:	8b 48 78             	mov    0x78(%eax),%ecx
f010a683:	8b 45 08             	mov    0x8(%ebp),%eax
f010a686:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a68c:	89 d0                	mov    %edx,%eax
f010a68e:	01 c0                	add    %eax,%eax
f010a690:	01 d0                	add    %edx,%eax
f010a692:	c1 e0 03             	shl    $0x3,%eax
f010a695:	01 c8                	add    %ecx,%eax
f010a697:	8b 50 14             	mov    0x14(%eax),%edx
f010a69a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a69d:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a6a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ac:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6b2:	89 d0                	mov    %edx,%eax
f010a6b4:	01 c0                	add    %eax,%eax
f010a6b6:	01 d0                	add    %edx,%eax
f010a6b8:	c1 e0 03             	shl    $0x3,%eax
f010a6bb:	01 c8                	add    %ecx,%eax
f010a6bd:	8b 40 14             	mov    0x14(%eax),%eax
f010a6c0:	85 c0                	test   %eax,%eax
f010a6c2:	74 3f                	je     f010a703 <program_segment_alloc_map_copy_workingset+0x265>
f010a6c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6cd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6d3:	89 d0                	mov    %edx,%eax
f010a6d5:	01 c0                	add    %eax,%eax
f010a6d7:	01 d0                	add    %edx,%eax
f010a6d9:	c1 e0 03             	shl    $0x3,%eax
f010a6dc:	01 c8                	add    %ecx,%eax
f010a6de:	8b 50 14             	mov    0x14(%eax),%edx
f010a6e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e4:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ea:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a6f0:	89 c8                	mov    %ecx,%eax
f010a6f2:	01 c0                	add    %eax,%eax
f010a6f4:	01 c8                	add    %ecx,%eax
f010a6f6:	c1 e0 03             	shl    $0x3,%eax
f010a6f9:	01 d8                	add    %ebx,%eax
f010a6fb:	8b 40 10             	mov    0x10(%eax),%eax
f010a6fe:	89 42 10             	mov    %eax,0x10(%edx)
f010a701:	eb 26                	jmp    f010a729 <program_segment_alloc_map_copy_workingset+0x28b>
f010a703:	8b 45 08             	mov    0x8(%ebp),%eax
f010a706:	8b 48 78             	mov    0x78(%eax),%ecx
f010a709:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a712:	89 d0                	mov    %edx,%eax
f010a714:	01 c0                	add    %eax,%eax
f010a716:	01 d0                	add    %edx,%eax
f010a718:	c1 e0 03             	shl    $0x3,%eax
f010a71b:	01 c8                	add    %ecx,%eax
f010a71d:	8b 50 10             	mov    0x10(%eax),%edx
f010a720:	8b 45 08             	mov    0x8(%ebp),%eax
f010a723:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a729:	8b 45 08             	mov    0x8(%ebp),%eax
f010a72c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a72f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a732:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a738:	89 d0                	mov    %edx,%eax
f010a73a:	01 c0                	add    %eax,%eax
f010a73c:	01 d0                	add    %edx,%eax
f010a73e:	c1 e0 03             	shl    $0x3,%eax
f010a741:	01 c8                	add    %ecx,%eax
f010a743:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a74a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a750:	8b 45 08             	mov    0x8(%ebp),%eax
f010a753:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a759:	89 d0                	mov    %edx,%eax
f010a75b:	01 c0                	add    %eax,%eax
f010a75d:	01 d0                	add    %edx,%eax
f010a75f:	c1 e0 03             	shl    $0x3,%eax
f010a762:	01 c8                	add    %ecx,%eax
f010a764:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a76b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a76e:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a774:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a777:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77a:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a780:	8b 45 08             	mov    0x8(%ebp),%eax
f010a783:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a789:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78c:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a792:	48                   	dec    %eax
f010a793:	39 c2                	cmp    %eax,%edx
f010a795:	0f 83 0d 01 00 00    	jae    f010a8a8 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a79b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7aa:	89 d0                	mov    %edx,%eax
f010a7ac:	01 c0                	add    %eax,%eax
f010a7ae:	01 d0                	add    %edx,%eax
f010a7b0:	c1 e0 03             	shl    $0x3,%eax
f010a7b3:	01 c8                	add    %ecx,%eax
f010a7b5:	85 c0                	test   %eax,%eax
f010a7b7:	75 17                	jne    f010a7d0 <program_segment_alloc_map_copy_workingset+0x332>
f010a7b9:	83 ec 04             	sub    $0x4,%esp
f010a7bc:	68 00 6a 13 f0       	push   $0xf0136a00
f010a7c1:	68 8b 02 00 00       	push   $0x28b
f010a7c6:	68 c5 69 13 f0       	push   $0xf01369c5
f010a7cb:	e8 35 5a ff ff       	call   f0100205 <_panic>
f010a7d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7df:	89 d0                	mov    %edx,%eax
f010a7e1:	01 c0                	add    %eax,%eax
f010a7e3:	01 d0                	add    %edx,%eax
f010a7e5:	c1 e0 03             	shl    $0x3,%eax
f010a7e8:	01 c8                	add    %ecx,%eax
f010a7ea:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7ed:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a7f3:	89 50 10             	mov    %edx,0x10(%eax)
f010a7f6:	8b 40 10             	mov    0x10(%eax),%eax
f010a7f9:	85 c0                	test   %eax,%eax
f010a7fb:	74 28                	je     f010a825 <program_segment_alloc_map_copy_workingset+0x387>
f010a7fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a800:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a806:	8b 45 08             	mov    0x8(%ebp),%eax
f010a809:	8b 58 78             	mov    0x78(%eax),%ebx
f010a80c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a80f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a815:	89 c8                	mov    %ecx,%eax
f010a817:	01 c0                	add    %eax,%eax
f010a819:	01 c8                	add    %ecx,%eax
f010a81b:	c1 e0 03             	shl    $0x3,%eax
f010a81e:	01 d8                	add    %ebx,%eax
f010a820:	89 42 14             	mov    %eax,0x14(%edx)
f010a823:	eb 24                	jmp    f010a849 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a825:	8b 45 08             	mov    0x8(%ebp),%eax
f010a828:	8b 48 78             	mov    0x78(%eax),%ecx
f010a82b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a82e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a834:	89 d0                	mov    %edx,%eax
f010a836:	01 c0                	add    %eax,%eax
f010a838:	01 d0                	add    %edx,%eax
f010a83a:	c1 e0 03             	shl    $0x3,%eax
f010a83d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a840:	8b 45 08             	mov    0x8(%ebp),%eax
f010a843:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a849:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a84f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a852:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a858:	89 d0                	mov    %edx,%eax
f010a85a:	01 c0                	add    %eax,%eax
f010a85c:	01 d0                	add    %edx,%eax
f010a85e:	c1 e0 03             	shl    $0x3,%eax
f010a861:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a864:	8b 45 08             	mov    0x8(%ebp),%eax
f010a867:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a86d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a870:	8b 48 78             	mov    0x78(%eax),%ecx
f010a873:	8b 45 08             	mov    0x8(%ebp),%eax
f010a876:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a87c:	89 d0                	mov    %edx,%eax
f010a87e:	01 c0                	add    %eax,%eax
f010a880:	01 d0                	add    %edx,%eax
f010a882:	c1 e0 03             	shl    $0x3,%eax
f010a885:	01 c8                	add    %ecx,%eax
f010a887:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a88e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a891:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a897:	8d 50 01             	lea    0x1(%eax),%edx
f010a89a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89d:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a8a3:	e9 08 01 00 00       	jmp    f010a9b0 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a8a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ab:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a8b7:	89 d0                	mov    %edx,%eax
f010a8b9:	01 c0                	add    %eax,%eax
f010a8bb:	01 d0                	add    %edx,%eax
f010a8bd:	c1 e0 03             	shl    $0x3,%eax
f010a8c0:	01 c8                	add    %ecx,%eax
f010a8c2:	85 c0                	test   %eax,%eax
f010a8c4:	75 17                	jne    f010a8dd <program_segment_alloc_map_copy_workingset+0x43f>
f010a8c6:	83 ec 04             	sub    $0x4,%esp
f010a8c9:	68 00 6a 13 f0       	push   $0xf0136a00
f010a8ce:	68 90 02 00 00       	push   $0x290
f010a8d3:	68 c5 69 13 f0       	push   $0xf01369c5
f010a8d8:	e8 28 59 ff ff       	call   f0100205 <_panic>
f010a8dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a8ec:	89 d0                	mov    %edx,%eax
f010a8ee:	01 c0                	add    %eax,%eax
f010a8f0:	01 d0                	add    %edx,%eax
f010a8f2:	c1 e0 03             	shl    $0x3,%eax
f010a8f5:	01 c8                	add    %ecx,%eax
f010a8f7:	8b 55 08             	mov    0x8(%ebp),%edx
f010a8fa:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a900:	89 50 10             	mov    %edx,0x10(%eax)
f010a903:	8b 40 10             	mov    0x10(%eax),%eax
f010a906:	85 c0                	test   %eax,%eax
f010a908:	74 28                	je     f010a932 <program_segment_alloc_map_copy_workingset+0x494>
f010a90a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90d:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a913:	8b 45 08             	mov    0x8(%ebp),%eax
f010a916:	8b 58 78             	mov    0x78(%eax),%ebx
f010a919:	8b 45 08             	mov    0x8(%ebp),%eax
f010a91c:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a922:	89 c8                	mov    %ecx,%eax
f010a924:	01 c0                	add    %eax,%eax
f010a926:	01 c8                	add    %ecx,%eax
f010a928:	c1 e0 03             	shl    $0x3,%eax
f010a92b:	01 d8                	add    %ebx,%eax
f010a92d:	89 42 14             	mov    %eax,0x14(%edx)
f010a930:	eb 24                	jmp    f010a956 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a932:	8b 45 08             	mov    0x8(%ebp),%eax
f010a935:	8b 48 78             	mov    0x78(%eax),%ecx
f010a938:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a941:	89 d0                	mov    %edx,%eax
f010a943:	01 c0                	add    %eax,%eax
f010a945:	01 d0                	add    %edx,%eax
f010a947:	c1 e0 03             	shl    $0x3,%eax
f010a94a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a94d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a950:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a956:	8b 45 08             	mov    0x8(%ebp),%eax
f010a959:	8b 48 78             	mov    0x78(%eax),%ecx
f010a95c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a965:	89 d0                	mov    %edx,%eax
f010a967:	01 c0                	add    %eax,%eax
f010a969:	01 d0                	add    %edx,%eax
f010a96b:	c1 e0 03             	shl    $0x3,%eax
f010a96e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a971:	8b 45 08             	mov    0x8(%ebp),%eax
f010a974:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a97a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a980:	8b 45 08             	mov    0x8(%ebp),%eax
f010a983:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a989:	89 d0                	mov    %edx,%eax
f010a98b:	01 c0                	add    %eax,%eax
f010a98d:	01 d0                	add    %edx,%eax
f010a98f:	c1 e0 03             	shl    $0x3,%eax
f010a992:	01 c8                	add    %ecx,%eax
f010a994:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a99b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99e:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a9a4:	8d 50 01             	lea    0x1(%eax),%edx
f010a9a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9aa:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a9b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9b3:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a9b9:	8d 50 01             	lea    0x1(%eax),%edx
f010a9bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9bf:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a9c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c8:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a9ce:	8b 55 08             	mov    0x8(%ebp),%edx
f010a9d1:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a9d4:	ba 00 00 00 00       	mov    $0x0,%edx
f010a9d9:	f7 f1                	div    %ecx
f010a9db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9de:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a9e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9e7:	c1 e8 16             	shr    $0x16,%eax
f010a9ea:	89 c2                	mov    %eax,%edx
f010a9ec:	8b 45 18             	mov    0x18(%ebp),%eax
f010a9ef:	8b 00                	mov    (%eax),%eax
f010a9f1:	39 c2                	cmp    %eax,%edx
f010a9f3:	0f 84 cf 00 00 00    	je     f010aac8 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a9f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9fc:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa05:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010aa08:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aa0b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010aa10:	89 c1                	mov    %eax,%ecx
f010aa12:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010aa15:	89 d0                	mov    %edx,%eax
f010aa17:	01 c0                	add    %eax,%eax
f010aa19:	01 d0                	add    %edx,%eax
f010aa1b:	c1 e0 03             	shl    $0x3,%eax
f010aa1e:	01 d8                	add    %ebx,%eax
f010aa20:	83 c0 7c             	add    $0x7c,%eax
f010aa23:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010aa25:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa28:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa2e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa31:	89 d0                	mov    %edx,%eax
f010aa33:	01 c0                	add    %eax,%eax
f010aa35:	01 d0                	add    %edx,%eax
f010aa37:	c1 e0 03             	shl    $0x3,%eax
f010aa3a:	01 c8                	add    %ecx,%eax
f010aa3c:	83 e8 80             	sub    $0xffffff80,%eax
f010aa3f:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010aa42:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa45:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa4e:	89 d0                	mov    %edx,%eax
f010aa50:	01 c0                	add    %eax,%eax
f010aa52:	01 d0                	add    %edx,%eax
f010aa54:	c1 e0 03             	shl    $0x3,%eax
f010aa57:	01 c8                	add    %ecx,%eax
f010aa59:	05 84 00 00 00       	add    $0x84,%eax
f010aa5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010aa64:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa67:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aa6d:	8d 50 01             	lea    0x1(%eax),%edx
f010aa70:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa73:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010aa79:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7c:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aa82:	b9 32 00 00 00       	mov    $0x32,%ecx
f010aa87:	ba 00 00 00 00       	mov    $0x0,%edx
f010aa8c:	f7 f1                	div    %ecx
f010aa8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa91:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010aa97:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9a:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aaa0:	85 c0                	test   %eax,%eax
f010aaa2:	75 17                	jne    f010aabb <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010aaa4:	83 ec 04             	sub    $0x4,%esp
f010aaa7:	68 78 6a 13 f0       	push   $0xf0136a78
f010aaac:	68 a0 02 00 00       	push   $0x2a0
f010aab1:	68 c5 69 13 f0       	push   $0xf01369c5
f010aab6:	e8 4a 57 ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010aabb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aabe:	c1 e8 16             	shr    $0x16,%eax
f010aac1:	89 c2                	mov    %eax,%edx
f010aac3:	8b 45 18             	mov    0x18(%ebp),%eax
f010aac6:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010aac8:	8b 45 10             	mov    0x10(%ebp),%eax
f010aacb:	8b 00                	mov    (%eax),%eax
f010aacd:	8d 50 01             	lea    0x1(%eax),%edx
f010aad0:	8b 45 10             	mov    0x10(%ebp),%eax
f010aad3:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010aad5:	ff 45 f0             	incl   -0x10(%ebp)
f010aad8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010aadf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aae2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010aae5:	73 0c                	jae    f010aaf3 <program_segment_alloc_map_copy_workingset+0x655>
f010aae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aaea:	3b 45 14             	cmp    0x14(%ebp),%eax
f010aaed:	0f 82 5a fa ff ff    	jb     f010a54d <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010aaf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aaf6:	8b 00                	mov    (%eax),%eax
f010aaf8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010aafb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aafe:	8b 40 0c             	mov    0xc(%eax),%eax
f010ab01:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab04:	eb 10                	jmp    f010ab16 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010ab06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab09:	8a 10                	mov    (%eax),%dl
f010ab0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab0e:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010ab10:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010ab13:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab19:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010ab1c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ab1f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ab24:	89 c2                	mov    %eax,%edx
f010ab26:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab29:	8b 00                	mov    (%eax),%eax
f010ab2b:	c1 e0 0c             	shl    $0xc,%eax
f010ab2e:	01 c2                	add    %eax,%edx
f010ab30:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab33:	39 c2                	cmp    %eax,%edx
f010ab35:	76 1d                	jbe    f010ab54 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010ab37:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab3a:	8b 50 04             	mov    0x4(%eax),%edx
f010ab3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab40:	01 c2                	add    %eax,%edx
f010ab42:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab45:	39 c2                	cmp    %eax,%edx
f010ab47:	77 bd                	ja     f010ab06 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ab49:	eb 09                	jmp    f010ab54 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010ab4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab4e:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010ab51:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ab54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab57:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010ab5a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ab5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ab62:	89 c2                	mov    %eax,%edx
f010ab64:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab67:	8b 00                	mov    (%eax),%eax
f010ab69:	c1 e0 0c             	shl    $0xc,%eax
f010ab6c:	01 c2                	add    %eax,%edx
f010ab6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab71:	39 c2                	cmp    %eax,%edx
f010ab73:	77 d6                	ja     f010ab4b <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010ab75:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ab7a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ab7d:	c9                   	leave  
f010ab7e:	c3                   	ret    

f010ab7f <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010ab7f:	55                   	push   %ebp
f010ab80:	89 e5                	mov    %esp,%ebp
f010ab82:	53                   	push   %ebx
f010ab83:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010ab86:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab89:	8b 55 0c             	mov    0xc(%ebp),%edx
f010ab8c:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010ab8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab92:	8b 55 10             	mov    0x10(%ebp),%edx
f010ab95:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010ab98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab9f:	eb 17                	jmp    f010abb8 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010aba1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aba7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abaa:	c1 e2 02             	shl    $0x2,%edx
f010abad:	01 d0                	add    %edx,%eax
f010abaf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010abb5:	ff 45 f4             	incl   -0xc(%ebp)
f010abb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abbb:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010abc0:	76 df                	jbe    f010aba1 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010abc2:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010abc9:	eb 22                	jmp    f010abed <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010abcb:	8b 45 08             	mov    0x8(%ebp),%eax
f010abce:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abd4:	c1 e2 02             	shl    $0x2,%edx
f010abd7:	01 c2                	add    %eax,%edx
f010abd9:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f010abde:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010abe1:	c1 e1 02             	shl    $0x2,%ecx
f010abe4:	01 c8                	add    %ecx,%eax
f010abe6:	8b 00                	mov    (%eax),%eax
f010abe8:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010abea:	ff 45 f4             	incl   -0xc(%ebp)
f010abed:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010abf4:	7e d5                	jle    f010abcb <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010abf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf9:	8b 40 74             	mov    0x74(%eax),%eax
f010abfc:	83 ec 08             	sub    $0x8,%esp
f010abff:	50                   	push   %eax
f010ac00:	ff 75 08             	pushl  0x8(%ebp)
f010ac03:	e8 13 f8 ff ff       	call   f010a41b <create_user_page_WS>
f010ac08:	83 c4 10             	add    $0x10,%esp
f010ac0b:	89 c2                	mov    %eax,%edx
f010ac0d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac10:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010ac13:	83 ec 0c             	sub    $0xc,%esp
f010ac16:	ff 75 08             	pushl  0x8(%ebp)
f010ac19:	e8 f3 04 00 00       	call   f010b111 <share_pws_at_user_space>
f010ac1e:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010ac21:	83 ec 0c             	sub    $0xc,%esp
f010ac24:	6a 02                	push   $0x2
f010ac26:	e8 e8 36 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f010ac2b:	83 c4 10             	add    $0x10,%esp
f010ac2e:	85 c0                	test   %eax,%eax
f010ac30:	0f 84 04 01 00 00    	je     f010ad3a <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ac36:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ac3d:	e9 e7 00 00 00       	jmp    f010ad29 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010ac42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac45:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ac4b:	89 d0                	mov    %edx,%eax
f010ac4d:	01 c0                	add    %eax,%eax
f010ac4f:	01 d0                	add    %edx,%eax
f010ac51:	c1 e0 03             	shl    $0x3,%eax
f010ac54:	01 c8                	add    %ecx,%eax
f010ac56:	85 c0                	test   %eax,%eax
f010ac58:	75 17                	jne    f010ac71 <initialize_environment+0xf2>
f010ac5a:	83 ec 04             	sub    $0x4,%esp
f010ac5d:	68 00 6a 13 f0       	push   $0xf0136a00
f010ac62:	68 fe 02 00 00       	push   $0x2fe
f010ac67:	68 c5 69 13 f0       	push   $0xf01369c5
f010ac6c:	e8 94 55 ff ff       	call   f0100205 <_panic>
f010ac71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac74:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ac7a:	89 d0                	mov    %edx,%eax
f010ac7c:	01 c0                	add    %eax,%eax
f010ac7e:	01 d0                	add    %edx,%eax
f010ac80:	c1 e0 03             	shl    $0x3,%eax
f010ac83:	01 c8                	add    %ecx,%eax
f010ac85:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac88:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010ac8e:	89 50 10             	mov    %edx,0x10(%eax)
f010ac91:	8b 40 10             	mov    0x10(%eax),%eax
f010ac94:	85 c0                	test   %eax,%eax
f010ac96:	74 22                	je     f010acba <initialize_environment+0x13b>
f010ac98:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac9b:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010aca1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca4:	8b 58 78             	mov    0x78(%eax),%ebx
f010aca7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010acaa:	89 c8                	mov    %ecx,%eax
f010acac:	01 c0                	add    %eax,%eax
f010acae:	01 c8                	add    %ecx,%eax
f010acb0:	c1 e0 03             	shl    $0x3,%eax
f010acb3:	01 d8                	add    %ebx,%eax
f010acb5:	89 42 14             	mov    %eax,0x14(%edx)
f010acb8:	eb 1e                	jmp    f010acd8 <initialize_environment+0x159>
f010acba:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbd:	8b 48 78             	mov    0x78(%eax),%ecx
f010acc0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010acc3:	89 d0                	mov    %edx,%eax
f010acc5:	01 c0                	add    %eax,%eax
f010acc7:	01 d0                	add    %edx,%eax
f010acc9:	c1 e0 03             	shl    $0x3,%eax
f010accc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010accf:	8b 45 08             	mov    0x8(%ebp),%eax
f010acd2:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010acd8:	8b 45 08             	mov    0x8(%ebp),%eax
f010acdb:	8b 48 78             	mov    0x78(%eax),%ecx
f010acde:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ace1:	89 d0                	mov    %edx,%eax
f010ace3:	01 c0                	add    %eax,%eax
f010ace5:	01 d0                	add    %edx,%eax
f010ace7:	c1 e0 03             	shl    $0x3,%eax
f010acea:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010aced:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf0:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010acf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf9:	8b 48 78             	mov    0x78(%eax),%ecx
f010acfc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010acff:	89 d0                	mov    %edx,%eax
f010ad01:	01 c0                	add    %eax,%eax
f010ad03:	01 d0                	add    %edx,%eax
f010ad05:	c1 e0 03             	shl    $0x3,%eax
f010ad08:	01 c8                	add    %ecx,%eax
f010ad0a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ad11:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad14:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010ad1a:	8d 50 01             	lea    0x1(%eax),%edx
f010ad1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad20:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ad26:	ff 45 f0             	incl   -0x10(%ebp)
f010ad29:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2c:	8b 50 74             	mov    0x74(%eax),%edx
f010ad2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad32:	39 c2                	cmp    %eax,%edx
f010ad34:	0f 87 08 ff ff ff    	ja     f010ac42 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ad3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ad41:	eb 50                	jmp    f010ad93 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010ad43:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad46:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad4c:	89 d0                	mov    %edx,%eax
f010ad4e:	01 c0                	add    %eax,%eax
f010ad50:	01 d0                	add    %edx,%eax
f010ad52:	c1 e0 03             	shl    $0x3,%eax
f010ad55:	01 c8                	add    %ecx,%eax
f010ad57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010ad5d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad60:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad66:	89 d0                	mov    %edx,%eax
f010ad68:	01 c0                	add    %eax,%eax
f010ad6a:	01 d0                	add    %edx,%eax
f010ad6c:	c1 e0 03             	shl    $0x3,%eax
f010ad6f:	01 c8                	add    %ecx,%eax
f010ad71:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010ad75:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad78:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad7e:	89 d0                	mov    %edx,%eax
f010ad80:	01 c0                	add    %eax,%eax
f010ad82:	01 d0                	add    %edx,%eax
f010ad84:	c1 e0 03             	shl    $0x3,%eax
f010ad87:	01 c8                	add    %ecx,%eax
f010ad89:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ad90:	ff 45 f4             	incl   -0xc(%ebp)
f010ad93:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad96:	8b 50 74             	mov    0x74(%eax),%edx
f010ad99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad9c:	39 c2                	cmp    %eax,%edx
f010ad9e:	77 a3                	ja     f010ad43 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010ada0:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada3:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010adaa:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010adad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010adb4:	eb 50                	jmp    f010ae06 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010adb6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adbc:	89 d0                	mov    %edx,%eax
f010adbe:	01 c0                	add    %eax,%eax
f010adc0:	01 d0                	add    %edx,%eax
f010adc2:	c1 e0 03             	shl    $0x3,%eax
f010adc5:	01 c8                	add    %ecx,%eax
f010adc7:	83 c0 7c             	add    $0x7c,%eax
f010adca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010add0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010add3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010add6:	89 d0                	mov    %edx,%eax
f010add8:	01 c0                	add    %eax,%eax
f010adda:	01 d0                	add    %edx,%eax
f010addc:	c1 e0 03             	shl    $0x3,%eax
f010addf:	01 c8                	add    %ecx,%eax
f010ade1:	83 e8 80             	sub    $0xffffff80,%eax
f010ade4:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010ade7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aded:	89 d0                	mov    %edx,%eax
f010adef:	01 c0                	add    %eax,%eax
f010adf1:	01 d0                	add    %edx,%eax
f010adf3:	c1 e0 03             	shl    $0x3,%eax
f010adf6:	01 c8                	add    %ecx,%eax
f010adf8:	05 84 00 00 00       	add    $0x84,%eax
f010adfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ae03:	ff 45 f4             	incl   -0xc(%ebp)
f010ae06:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010ae0a:	7e aa                	jle    f010adb6 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010ae0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0f:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ae16:	00 00 00 

	e->pageFaultsCounter=0;
f010ae19:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae1c:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ae23:	00 00 00 
	e->tableFaultsCounter=0;
f010ae26:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae29:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ae30:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ae33:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae36:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ae3d:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ae40:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae43:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ae4a:	00 00 00 

	e->nModifiedPages=0;
f010ae4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae50:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ae57:	00 00 00 
	e->nNotModifiedPages=0;
f010ae5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5d:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010ae64:	00 00 00 
	e->nClocks = 0;
f010ae67:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae6a:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010ae71:	00 00 00 

	//2020
	e->nPageIn = 0;
f010ae74:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae77:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010ae7e:	00 00 00 
	e->nPageOut = 0;
f010ae81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae84:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010ae8b:	00 00 00 
	e->nNewPageAdded = 0;
f010ae8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae91:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010ae98:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010ae9b:	83 ec 0c             	sub    $0xc,%esp
f010ae9e:	ff 75 08             	pushl  0x8(%ebp)
f010aea1:	e8 09 00 00 00       	call   f010aeaf <complete_environment_initialization>
f010aea6:	83 c4 10             	add    $0x10,%esp
}
f010aea9:	90                   	nop
f010aeaa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aead:	c9                   	leave  
f010aeae:	c3                   	ret    

f010aeaf <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010aeaf:	55                   	push   %ebp
f010aeb0:	89 e5                	mov    %esp,%ebp
f010aeb2:	53                   	push   %ebx
f010aeb3:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010aeb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aebc:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010aec2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec5:	8b 40 60             	mov    0x60(%eax),%eax
f010aec8:	83 c8 03             	or     $0x3,%eax
f010aecb:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010aecd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aed3:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010aed9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedc:	8b 40 60             	mov    0x60(%eax),%eax
f010aedf:	83 c8 05             	or     $0x5,%eax
f010aee2:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010aee4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aee7:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010aeee:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef1:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010aef8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefb:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010af02:	8b 45 08             	mov    0x8(%ebp),%eax
f010af05:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010af0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af0f:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010af12:	83 ec 0c             	sub    $0xc,%esp
f010af15:	68 b1 02 00 00       	push   $0x2b1
f010af1a:	e8 78 58 02 00       	call   f0130797 <log2_ceil>
f010af1f:	83 c4 10             	add    $0x10,%esp
f010af22:	ba 01 00 00 00       	mov    $0x1,%edx
f010af27:	88 c1                	mov    %al,%cl
f010af29:	d3 e2                	shl    %cl,%edx
f010af2b:	89 d0                	mov    %edx,%eax
f010af2d:	01 d8                	add    %ebx,%eax
f010af2f:	89 c3                	mov    %eax,%ebx
f010af31:	83 ec 0c             	sub    $0xc,%esp
f010af34:	68 b1 02 00 00       	push   $0x2b1
f010af39:	e8 24 58 02 00       	call   f0130762 <nearest_pow2_ceil>
f010af3e:	83 c4 10             	add    $0x10,%esp
f010af41:	f7 d8                	neg    %eax
f010af43:	21 d8                	and    %ebx,%eax
f010af45:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010af48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af4c:	7f 1e                	jg     f010af6c <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010af4e:	83 ec 0c             	sub    $0xc,%esp
f010af51:	68 b1 02 00 00       	push   $0x2b1
f010af56:	e8 3c 58 02 00       	call   f0130797 <log2_ceil>
f010af5b:	83 c4 10             	add    $0x10,%esp
f010af5e:	ba 01 00 00 00       	mov    $0x1,%edx
f010af63:	88 c1                	mov    %al,%cl
f010af65:	d3 e2                	shl    %cl,%edx
f010af67:	89 d0                	mov    %edx,%eax
f010af69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010af6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af6f:	8b 15 f0 fd 85 f0    	mov    0xf085fdf0,%edx
f010af75:	29 d0                	sub    %edx,%eax
f010af77:	c1 f8 04             	sar    $0x4,%eax
f010af7a:	89 c2                	mov    %eax,%edx
f010af7c:	89 d0                	mov    %edx,%eax
f010af7e:	c1 e0 03             	shl    $0x3,%eax
f010af81:	01 d0                	add    %edx,%eax
f010af83:	01 c0                	add    %eax,%eax
f010af85:	01 d0                	add    %edx,%eax
f010af87:	c1 e0 03             	shl    $0x3,%eax
f010af8a:	01 d0                	add    %edx,%eax
f010af8c:	89 c1                	mov    %eax,%ecx
f010af8e:	c1 e1 08             	shl    $0x8,%ecx
f010af91:	01 c8                	add    %ecx,%eax
f010af93:	01 c0                	add    %eax,%eax
f010af95:	01 d0                	add    %edx,%eax
f010af97:	01 c0                	add    %eax,%eax
f010af99:	01 d0                	add    %edx,%eax
f010af9b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010afa2:	01 d0                	add    %edx,%eax
f010afa4:	89 c2                	mov    %eax,%edx
f010afa6:	c1 e2 09             	shl    $0x9,%edx
f010afa9:	29 c2                	sub    %eax,%edx
f010afab:	89 d0                	mov    %edx,%eax
f010afad:	f7 d8                	neg    %eax
f010afaf:	0b 45 f4             	or     -0xc(%ebp),%eax
f010afb2:	89 c2                	mov    %eax,%edx
f010afb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb7:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010afba:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010afbf:	85 c0                	test   %eax,%eax
f010afc1:	75 0c                	jne    f010afcf <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010afc3:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc6:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010afcd:	eb 0e                	jmp    f010afdd <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010afcf:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010afd4:	8b 50 4c             	mov    0x4c(%eax),%edx
f010afd7:	8b 45 08             	mov    0x8(%ebp),%eax
f010afda:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010afdd:	8b 45 08             	mov    0x8(%ebp),%eax
f010afe0:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010afe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010afea:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aff1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff4:	83 ec 04             	sub    $0x4,%esp
f010aff7:	6a 44                	push   $0x44
f010aff9:	6a 00                	push   $0x0
f010affb:	50                   	push   %eax
f010affc:	e8 dd 6b 02 00       	call   f0131bde <memset>
f010b001:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010b004:	8b 45 08             	mov    0x8(%ebp),%eax
f010b007:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010b00d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b010:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010b016:	8b 45 08             	mov    0x8(%ebp),%eax
f010b019:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010b01f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b022:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010b029:	8b 45 08             	mov    0x8(%ebp),%eax
f010b02c:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010b032:	8b 45 08             	mov    0x8(%ebp),%eax
f010b035:	8b 40 38             	mov    0x38(%eax),%eax
f010b038:	80 cc 02             	or     $0x2,%ah
f010b03b:	89 c2                	mov    %eax,%edx
f010b03d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b040:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010b043:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b047:	75 17                	jne    f010b060 <complete_environment_initialization+0x1b1>
f010b049:	83 ec 04             	sub    $0x4,%esp
f010b04c:	68 e2 69 13 f0       	push   $0xf01369e2
f010b051:	68 62 03 00 00       	push   $0x362
f010b056:	68 c5 69 13 f0       	push   $0xf01369c5
f010b05b:	e8 a5 51 ff ff       	call   f0100205 <_panic>
f010b060:	8b 45 08             	mov    0x8(%ebp),%eax
f010b063:	8b 40 44             	mov    0x44(%eax),%eax
f010b066:	85 c0                	test   %eax,%eax
f010b068:	74 11                	je     f010b07b <complete_environment_initialization+0x1cc>
f010b06a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b06d:	8b 40 44             	mov    0x44(%eax),%eax
f010b070:	8b 55 08             	mov    0x8(%ebp),%edx
f010b073:	8b 52 48             	mov    0x48(%edx),%edx
f010b076:	89 50 48             	mov    %edx,0x48(%eax)
f010b079:	eb 0b                	jmp    f010b086 <complete_environment_initialization+0x1d7>
f010b07b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07e:	8b 40 48             	mov    0x48(%eax),%eax
f010b081:	a3 fc fd 85 f0       	mov    %eax,0xf085fdfc
f010b086:	8b 45 08             	mov    0x8(%ebp),%eax
f010b089:	8b 40 48             	mov    0x48(%eax),%eax
f010b08c:	85 c0                	test   %eax,%eax
f010b08e:	74 11                	je     f010b0a1 <complete_environment_initialization+0x1f2>
f010b090:	8b 45 08             	mov    0x8(%ebp),%eax
f010b093:	8b 40 48             	mov    0x48(%eax),%eax
f010b096:	8b 55 08             	mov    0x8(%ebp),%edx
f010b099:	8b 52 44             	mov    0x44(%edx),%edx
f010b09c:	89 50 44             	mov    %edx,0x44(%eax)
f010b09f:	eb 0b                	jmp    f010b0ac <complete_environment_initialization+0x1fd>
f010b0a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a4:	8b 40 44             	mov    0x44(%eax),%eax
f010b0a7:	a3 f8 fd 85 f0       	mov    %eax,0xf085fdf8
f010b0ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0af:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010b0b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b0c0:	a1 04 fe 85 f0       	mov    0xf085fe04,%eax
f010b0c5:	48                   	dec    %eax
f010b0c6:	a3 04 fe 85 f0       	mov    %eax,0xf085fe04
	return ;
f010b0cb:	90                   	nop
}
f010b0cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b0cf:	c9                   	leave  
f010b0d0:	c3                   	ret    

f010b0d1 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010b0d1:	55                   	push   %ebp
f010b0d2:	89 e5                	mov    %esp,%ebp
f010b0d4:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b0d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b0dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0e0:	8b 00                	mov    (%eax),%eax
f010b0e2:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b0e7:	74 17                	je     f010b100 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010b0e9:	83 ec 04             	sub    $0x4,%esp
f010b0ec:	68 1b 6b 13 f0       	push   $0xf0136b1b
f010b0f1:	68 6e 03 00 00       	push   $0x36e
f010b0f6:	68 c5 69 13 f0       	push   $0xf01369c5
f010b0fb:	e8 05 51 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010b100:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b103:	8b 40 18             	mov    0x18(%eax),%eax
f010b106:	89 c2                	mov    %eax,%edx
f010b108:	8b 45 08             	mov    0x8(%ebp),%eax
f010b10b:	89 50 30             	mov    %edx,0x30(%eax)
}
f010b10e:	90                   	nop
f010b10f:	c9                   	leave  
f010b110:	c3                   	ret    

f010b111 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010b111:	55                   	push   %ebp
f010b112:	89 e5                	mov    %esp,%ebp
f010b114:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010b117:	8b 45 08             	mov    0x8(%ebp),%eax
f010b11a:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010b121:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010b124:	8b 45 08             	mov    0x8(%ebp),%eax
f010b127:	8b 40 78             	mov    0x78(%eax),%eax
f010b12a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b12d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b130:	8b 50 74             	mov    0x74(%eax),%edx
f010b133:	89 d0                	mov    %edx,%eax
f010b135:	01 c0                	add    %eax,%eax
f010b137:	01 d0                	add    %edx,%eax
f010b139:	c1 e0 03             	shl    $0x3,%eax
f010b13c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010b13f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b142:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b148:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b14b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b14e:	8b 40 78             	mov    0x78(%eax),%eax
f010b151:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b154:	eb 71                	jmp    f010b1c7 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010b156:	83 ec 0c             	sub    $0xc,%esp
f010b159:	ff 75 f4             	pushl  -0xc(%ebp)
f010b15c:	e8 0b cb ff ff       	call   f0107c6c <kheap_physical_address>
f010b161:	83 c4 10             	add    $0x10,%esp
f010b164:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010b167:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b16d:	83 ec 04             	sub    $0x4,%esp
f010b170:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010b173:	52                   	push   %edx
f010b174:	ff 75 f0             	pushl  -0x10(%ebp)
f010b177:	50                   	push   %eax
f010b178:	e8 60 b9 ff ff       	call   f0106add <get_page_table>
f010b17d:	83 c4 10             	add    $0x10,%esp
f010b180:	83 f8 01             	cmp    $0x1,%eax
f010b183:	75 18                	jne    f010b19d <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010b185:	8b 45 08             	mov    0x8(%ebp),%eax
f010b188:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b18b:	83 ec 08             	sub    $0x8,%esp
f010b18e:	ff 75 f0             	pushl  -0x10(%ebp)
f010b191:	50                   	push   %eax
f010b192:	e8 9c ba ff ff       	call   f0106c33 <create_page_table>
f010b197:	83 c4 10             	add    $0x10,%esp
f010b19a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010b19d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b1a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b1a3:	c1 ea 0c             	shr    $0xc,%edx
f010b1a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b1ac:	c1 e2 02             	shl    $0x2,%edx
f010b1af:	01 d0                	add    %edx,%eax
f010b1b1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b1b4:	83 ca 05             	or     $0x5,%edx
f010b1b7:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b1b9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b1c0:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010b1c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1ca:	8b 40 78             	mov    0x78(%eax),%eax
f010b1cd:	89 c2                	mov    %eax,%edx
f010b1cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b1d2:	01 d0                	add    %edx,%eax
f010b1d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b1d7:	0f 87 79 ff ff ff    	ja     f010b156 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010b1dd:	90                   	nop
f010b1de:	c9                   	leave  
f010b1df:	c3                   	ret    

f010b1e0 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010b1e0:	55                   	push   %ebp
f010b1e1:	89 e5                	mov    %esp,%ebp
f010b1e3:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b1e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1e9:	8b 50 74             	mov    0x74(%eax),%edx
f010b1ec:	89 d0                	mov    %edx,%eax
f010b1ee:	01 c0                	add    %eax,%eax
f010b1f0:	01 d0                	add    %edx,%eax
f010b1f2:	c1 e0 03             	shl    $0x3,%eax
f010b1f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010b1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1fb:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b201:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010b204:	8b 45 08             	mov    0x8(%ebp),%eax
f010b207:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b20d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b210:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b213:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b218:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b21b:	eb 46                	jmp    f010b263 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010b21d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b220:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b223:	83 ec 04             	sub    $0x4,%esp
f010b226:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010b229:	52                   	push   %edx
f010b22a:	ff 75 f4             	pushl  -0xc(%ebp)
f010b22d:	50                   	push   %eax
f010b22e:	e8 aa b8 ff ff       	call   f0106add <get_page_table>
f010b233:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010b236:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b239:	83 ec 0c             	sub    $0xc,%esp
f010b23c:	50                   	push   %eax
f010b23d:	e8 e4 c8 ff ff       	call   f0107b26 <kfree>
f010b242:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010b245:	8b 45 08             	mov    0x8(%ebp),%eax
f010b248:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b24b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b24e:	c1 ea 16             	shr    $0x16,%edx
f010b251:	c1 e2 02             	shl    $0x2,%edx
f010b254:	01 d0                	add    %edx,%eax
f010b256:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b25c:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010b263:	8b 45 08             	mov    0x8(%ebp),%eax
f010b266:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b26c:	89 c2                	mov    %eax,%edx
f010b26e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b271:	01 d0                	add    %edx,%eax
f010b273:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b276:	77 a5                	ja     f010b21d <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010b278:	0f 20 d8             	mov    %cr3,%eax
f010b27b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010b27e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b281:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010b284:	90                   	nop
f010b285:	c9                   	leave  
f010b286:	c3                   	ret    

f010b287 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010b287:	55                   	push   %ebp
f010b288:	89 e5                	mov    %esp,%ebp
f010b28a:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010b28d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b290:	8b 40 10             	mov    0x10(%eax),%eax
f010b293:	8d 48 01             	lea    0x1(%eax),%ecx
f010b296:	8b 55 08             	mov    0x8(%ebp),%edx
f010b299:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b29c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b29f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b2a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b2a8:	8b 00                	mov    (%eax),%eax
f010b2aa:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b2af:	74 17                	je     f010b2c8 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b2b1:	83 ec 04             	sub    $0x4,%esp
f010b2b4:	68 1b 6b 13 f0       	push   $0xf0136b1b
f010b2b9:	68 b8 03 00 00       	push   $0x3b8
f010b2be:	68 c5 69 13 f0       	push   $0xf01369c5
f010b2c3:	e8 3d 4f ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b2c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b2cb:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b2ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2d1:	01 d0                	add    %edx,%eax
f010b2d3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b2d6:	eb 0f                	jmp    f010b2e7 <PROGRAM_SEGMENT_NEXT+0x60>
f010b2d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2db:	8b 40 10             	mov    0x10(%eax),%eax
f010b2de:	8d 50 01             	lea    0x1(%eax),%edx
f010b2e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2e4:	89 50 10             	mov    %edx,0x10(%eax)
f010b2e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2ea:	8b 40 10             	mov    0x10(%eax),%eax
f010b2ed:	c1 e0 05             	shl    $0x5,%eax
f010b2f0:	89 c2                	mov    %eax,%edx
f010b2f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b2f5:	01 d0                	add    %edx,%eax
f010b2f7:	8b 00                	mov    (%eax),%eax
f010b2f9:	83 f8 01             	cmp    $0x1,%eax
f010b2fc:	74 13                	je     f010b311 <PROGRAM_SEGMENT_NEXT+0x8a>
f010b2fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010b301:	8b 50 10             	mov    0x10(%eax),%edx
f010b304:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b307:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b30a:	0f b7 c0             	movzwl %ax,%eax
f010b30d:	39 c2                	cmp    %eax,%edx
f010b30f:	72 c7                	jb     f010b2d8 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b311:	8b 45 08             	mov    0x8(%ebp),%eax
f010b314:	8b 40 10             	mov    0x10(%eax),%eax
f010b317:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b31a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b31d:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b320:	0f b7 c0             	movzwl %ax,%eax
f010b323:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b326:	7e 63                	jle    f010b38b <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b328:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b32b:	c1 e0 05             	shl    $0x5,%eax
f010b32e:	89 c2                	mov    %eax,%edx
f010b330:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b333:	01 d0                	add    %edx,%eax
f010b335:	8b 50 04             	mov    0x4(%eax),%edx
f010b338:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b33b:	01 c2                	add    %eax,%edx
f010b33d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b340:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b342:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b345:	c1 e0 05             	shl    $0x5,%eax
f010b348:	89 c2                	mov    %eax,%edx
f010b34a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b34d:	01 d0                	add    %edx,%eax
f010b34f:	8b 50 14             	mov    0x14(%eax),%edx
f010b352:	8b 45 08             	mov    0x8(%ebp),%eax
f010b355:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b35b:	c1 e0 05             	shl    $0x5,%eax
f010b35e:	89 c2                	mov    %eax,%edx
f010b360:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b363:	01 d0                	add    %edx,%eax
f010b365:	8b 50 10             	mov    0x10(%eax),%edx
f010b368:	8b 45 08             	mov    0x8(%ebp),%eax
f010b36b:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b36e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b371:	c1 e0 05             	shl    $0x5,%eax
f010b374:	89 c2                	mov    %eax,%edx
f010b376:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b379:	01 d0                	add    %edx,%eax
f010b37b:	8b 40 08             	mov    0x8(%eax),%eax
f010b37e:	89 c2                	mov    %eax,%edx
f010b380:	8b 45 08             	mov    0x8(%ebp),%eax
f010b383:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b386:	8b 45 08             	mov    0x8(%ebp),%eax
f010b389:	eb 05                	jmp    f010b390 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b38b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b390:	c9                   	leave  
f010b391:	c3                   	ret    

f010b392 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b392:	55                   	push   %ebp
f010b393:	89 e5                	mov    %esp,%ebp
f010b395:	57                   	push   %edi
f010b396:	56                   	push   %esi
f010b397:	53                   	push   %ebx
f010b398:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b39b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b3a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b3a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3ab:	8b 00                	mov    (%eax),%eax
f010b3ad:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b3b2:	74 17                	je     f010b3cb <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b3b4:	83 ec 04             	sub    $0x4,%esp
f010b3b7:	68 1b 6b 13 f0       	push   $0xf0136b1b
f010b3bc:	68 d4 03 00 00       	push   $0x3d4
f010b3c1:	68 c5 69 13 f0       	push   $0xf01369c5
f010b3c6:	e8 3a 4e ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b3cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3ce:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b3d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3d4:	01 d0                	add    %edx,%eax
f010b3d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b3d9:	eb 07                	jmp    f010b3e2 <PROGRAM_SEGMENT_FIRST+0x50>
f010b3db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b3de:	40                   	inc    %eax
f010b3df:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b3e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b3e5:	c1 e0 05             	shl    $0x5,%eax
f010b3e8:	89 c2                	mov    %eax,%edx
f010b3ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b3ed:	01 d0                	add    %edx,%eax
f010b3ef:	8b 00                	mov    (%eax),%eax
f010b3f1:	83 f8 01             	cmp    $0x1,%eax
f010b3f4:	74 10                	je     f010b406 <PROGRAM_SEGMENT_FIRST+0x74>
f010b3f6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b3f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3fc:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b3ff:	0f b7 c0             	movzwl %ax,%eax
f010b402:	39 c2                	cmp    %eax,%edx
f010b404:	72 d5                	jb     f010b3db <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b406:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b409:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b40c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b40f:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b412:	0f b7 c0             	movzwl %ax,%eax
f010b415:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b418:	7e 68                	jle    f010b482 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b41a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b41d:	c1 e0 05             	shl    $0x5,%eax
f010b420:	89 c2                	mov    %eax,%edx
f010b422:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b425:	01 d0                	add    %edx,%eax
f010b427:	8b 50 04             	mov    0x4(%eax),%edx
f010b42a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b42d:	01 d0                	add    %edx,%eax
f010b42f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b432:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b435:	c1 e0 05             	shl    $0x5,%eax
f010b438:	89 c2                	mov    %eax,%edx
f010b43a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b43d:	01 d0                	add    %edx,%eax
f010b43f:	8b 40 14             	mov    0x14(%eax),%eax
f010b442:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b445:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b448:	c1 e0 05             	shl    $0x5,%eax
f010b44b:	89 c2                	mov    %eax,%edx
f010b44d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b450:	01 d0                	add    %edx,%eax
f010b452:	8b 40 10             	mov    0x10(%eax),%eax
f010b455:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b458:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b45b:	c1 e0 05             	shl    $0x5,%eax
f010b45e:	89 c2                	mov    %eax,%edx
f010b460:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b463:	01 d0                	add    %edx,%eax
f010b465:	8b 40 08             	mov    0x8(%eax),%eax
f010b468:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b46b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b46e:	89 c3                	mov    %eax,%ebx
f010b470:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b473:	ba 05 00 00 00       	mov    $0x5,%edx
f010b478:	89 df                	mov    %ebx,%edi
f010b47a:	89 c6                	mov    %eax,%esi
f010b47c:	89 d1                	mov    %edx,%ecx
f010b47e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b480:	eb 1c                	jmp    f010b49e <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b482:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b489:	8b 45 08             	mov    0x8(%ebp),%eax
f010b48c:	89 c3                	mov    %eax,%ebx
f010b48e:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b491:	ba 05 00 00 00       	mov    $0x5,%edx
f010b496:	89 df                	mov    %ebx,%edi
f010b498:	89 c6                	mov    %eax,%esi
f010b49a:	89 d1                	mov    %edx,%ecx
f010b49c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b49e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b4a4:	5b                   	pop    %ebx
f010b4a5:	5e                   	pop    %esi
f010b4a6:	5f                   	pop    %edi
f010b4a7:	5d                   	pop    %ebp
f010b4a8:	c2 04 00             	ret    $0x4

f010b4ab <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b4ab:	55                   	push   %ebp
f010b4ac:	89 e5                	mov    %esp,%ebp
f010b4ae:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b4b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b4b8:	a1 b4 06 86 f0       	mov    0xf08606b4,%eax
f010b4bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b4c0:	e9 c3 00 00 00       	jmp    f010b588 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b4c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4c8:	8b 40 10             	mov    0x10(%eax),%eax
f010b4cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b4ce:	0f 85 ac 00 00 00    	jne    f010b580 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b4d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4d7:	8b 50 0c             	mov    0xc(%eax),%edx
f010b4da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4dd:	8b 40 10             	mov    0x10(%eax),%eax
f010b4e0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b4e3:	83 ec 08             	sub    $0x8,%esp
f010b4e6:	52                   	push   %edx
f010b4e7:	50                   	push   %eax
f010b4e8:	e8 40 c9 ff ff       	call   f0107e2d <pt_clear_page_table_entry>
f010b4ed:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b4f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b4f4:	75 17                	jne    f010b50d <cleanup_buffers+0x62>
f010b4f6:	83 ec 04             	sub    $0x4,%esp
f010b4f9:	68 e2 69 13 f0       	push   $0xf01369e2
f010b4fe:	68 fb 03 00 00       	push   $0x3fb
f010b503:	68 c5 69 13 f0       	push   $0xf01369c5
f010b508:	e8 f8 4c ff ff       	call   f0100205 <_panic>
f010b50d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b510:	8b 00                	mov    (%eax),%eax
f010b512:	85 c0                	test   %eax,%eax
f010b514:	74 10                	je     f010b526 <cleanup_buffers+0x7b>
f010b516:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b519:	8b 00                	mov    (%eax),%eax
f010b51b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b51e:	8b 52 04             	mov    0x4(%edx),%edx
f010b521:	89 50 04             	mov    %edx,0x4(%eax)
f010b524:	eb 0b                	jmp    f010b531 <cleanup_buffers+0x86>
f010b526:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b529:	8b 40 04             	mov    0x4(%eax),%eax
f010b52c:	a3 b8 06 86 f0       	mov    %eax,0xf08606b8
f010b531:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b534:	8b 40 04             	mov    0x4(%eax),%eax
f010b537:	85 c0                	test   %eax,%eax
f010b539:	74 0f                	je     f010b54a <cleanup_buffers+0x9f>
f010b53b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b53e:	8b 40 04             	mov    0x4(%eax),%eax
f010b541:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b544:	8b 12                	mov    (%edx),%edx
f010b546:	89 10                	mov    %edx,(%eax)
f010b548:	eb 0a                	jmp    f010b554 <cleanup_buffers+0xa9>
f010b54a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b54d:	8b 00                	mov    (%eax),%eax
f010b54f:	a3 b4 06 86 f0       	mov    %eax,0xf08606b4
f010b554:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b557:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b55d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b560:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b567:	a1 c0 06 86 f0       	mov    0xf08606c0,%eax
f010b56c:	48                   	dec    %eax
f010b56d:	a3 c0 06 86 f0       	mov    %eax,0xf08606c0

			free_frame(ptr_fi);
f010b572:	83 ec 0c             	sub    $0xc,%esp
f010b575:	ff 75 f4             	pushl  -0xc(%ebp)
f010b578:	e8 b6 b4 ff ff       	call   f0106a33 <free_frame>
f010b57d:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b580:	a1 bc 06 86 f0       	mov    0xf08606bc,%eax
f010b585:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b588:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b58c:	74 07                	je     f010b595 <cleanup_buffers+0xea>
f010b58e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b591:	8b 00                	mov    (%eax),%eax
f010b593:	eb 05                	jmp    f010b59a <cleanup_buffers+0xef>
f010b595:	b8 00 00 00 00       	mov    $0x0,%eax
f010b59a:	a3 bc 06 86 f0       	mov    %eax,0xf08606bc
f010b59f:	a1 bc 06 86 f0       	mov    0xf08606bc,%eax
f010b5a4:	85 c0                	test   %eax,%eax
f010b5a6:	0f 85 19 ff ff ff    	jne    f010b4c5 <cleanup_buffers+0x1a>
f010b5ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b5b0:	0f 85 0f ff ff ff    	jne    f010b4c5 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b5b6:	90                   	nop
f010b5b7:	c9                   	leave  
f010b5b8:	c3                   	ret    

f010b5b9 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b5b9:	55                   	push   %ebp
f010b5ba:	89 e5                	mov    %esp,%ebp
f010b5bc:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b5bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b5c3:	7e 06                	jle    f010b5cb <set_program_priority+0x12>
f010b5c5:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b5c9:	7e 14                	jle    f010b5df <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b5cb:	83 ec 04             	sub    $0x4,%esp
f010b5ce:	68 34 6b 13 f0       	push   $0xf0136b34
f010b5d3:	6a 10                	push   $0x10
f010b5d5:	68 58 6b 13 f0       	push   $0xf0136b58
f010b5da:	e8 26 4c ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b5df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b5e3:	74 75                	je     f010b65a <set_program_priority+0xa1>
		return;
	switch(priority)
f010b5e5:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b5e9:	77 56                	ja     f010b641 <set_program_priority+0x88>
f010b5eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b5ee:	c1 e0 02             	shl    $0x2,%eax
f010b5f1:	05 94 6b 13 f0       	add    $0xf0136b94,%eax
f010b5f6:	8b 00                	mov    (%eax),%eax
f010b5f8:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b5fa:	83 ec 08             	sub    $0x8,%esp
f010b5fd:	6a 01                	push   $0x1
f010b5ff:	ff 75 08             	pushl  0x8(%ebp)
f010b602:	e8 9c d2 ff ff       	call   f01088a3 <half_WS_Size>
f010b607:	83 c4 10             	add    $0x10,%esp
			break;
f010b60a:	eb 35                	jmp    f010b641 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b60c:	83 ec 08             	sub    $0x8,%esp
f010b60f:	6a 00                	push   $0x0
f010b611:	ff 75 08             	pushl  0x8(%ebp)
f010b614:	e8 8a d2 ff ff       	call   f01088a3 <half_WS_Size>
f010b619:	83 c4 10             	add    $0x10,%esp
			break;
f010b61c:	eb 23                	jmp    f010b641 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b61e:	83 ec 08             	sub    $0x8,%esp
f010b621:	6a 01                	push   $0x1
f010b623:	ff 75 08             	pushl  0x8(%ebp)
f010b626:	e8 5b d2 ff ff       	call   f0108886 <double_WS_Size>
f010b62b:	83 c4 10             	add    $0x10,%esp
			break;
f010b62e:	eb 11                	jmp    f010b641 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b630:	83 ec 08             	sub    $0x8,%esp
f010b633:	6a 00                	push   $0x0
f010b635:	ff 75 08             	pushl  0x8(%ebp)
f010b638:	e8 49 d2 ff ff       	call   f0108886 <double_WS_Size>
f010b63d:	83 c4 10             	add    $0x10,%esp
			break;
f010b640:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b641:	8b 45 08             	mov    0x8(%ebp),%eax
f010b644:	8b 40 74             	mov    0x74(%eax),%eax
f010b647:	83 ec 08             	sub    $0x8,%esp
f010b64a:	50                   	push   %eax
f010b64b:	68 75 6b 13 f0       	push   $0xf0136b75
f010b650:	e8 b9 56 ff ff       	call   f0100d0e <cprintf>
f010b655:	83 c4 10             	add    $0x10,%esp
f010b658:	eb 01                	jmp    f010b65b <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b65a:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b65b:	c9                   	leave  
f010b65c:	c3                   	ret    

f010b65d <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b65d:	55                   	push   %ebp
f010b65e:	89 e5                	mov    %esp,%ebp
f010b660:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b663:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b66a:	eb 29                	jmp    f010b695 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b66c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b66f:	89 d0                	mov    %edx,%eax
f010b671:	01 c0                	add    %eax,%eax
f010b673:	01 d0                	add    %edx,%eax
f010b675:	c1 e0 02             	shl    $0x2,%eax
f010b678:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b67d:	8b 00                	mov    (%eax),%eax
f010b67f:	83 ec 08             	sub    $0x8,%esp
f010b682:	50                   	push   %eax
f010b683:	ff 75 08             	pushl  0x8(%ebp)
f010b686:	e8 71 64 02 00       	call   f0131afc <strcmp>
f010b68b:	83 c4 10             	add    $0x10,%esp
f010b68e:	85 c0                	test   %eax,%eax
f010b690:	74 0f                	je     f010b6a1 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b692:	ff 45 f4             	incl   -0xc(%ebp)
f010b695:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b69a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b69d:	7c cd                	jl     f010b66c <get_user_program_info+0xf>
f010b69f:	eb 01                	jmp    f010b6a2 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b6a1:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b6a2:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b6a7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b6aa:	75 1a                	jne    f010b6c6 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b6ac:	83 ec 08             	sub    $0x8,%esp
f010b6af:	ff 75 08             	pushl  0x8(%ebp)
f010b6b2:	68 29 77 13 f0       	push   $0xf0137729
f010b6b7:	e8 52 56 ff ff       	call   f0100d0e <cprintf>
f010b6bc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b6bf:	b8 00 00 00 00       	mov    $0x0,%eax
f010b6c4:	eb 11                	jmp    f010b6d7 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b6c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b6c9:	89 d0                	mov    %edx,%eax
f010b6cb:	01 c0                	add    %eax,%eax
f010b6cd:	01 d0                	add    %edx,%eax
f010b6cf:	c1 e0 02             	shl    $0x2,%eax
f010b6d2:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b6d7:	c9                   	leave  
f010b6d8:	c3                   	ret    

f010b6d9 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b6d9:	55                   	push   %ebp
f010b6da:	89 e5                	mov    %esp,%ebp
f010b6dc:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b6df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b6e6:	eb 30                	jmp    f010b718 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b6e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b6eb:	89 d0                	mov    %edx,%eax
f010b6ed:	01 c0                	add    %eax,%eax
f010b6ef:	01 d0                	add    %edx,%eax
f010b6f1:	c1 e0 02             	shl    $0x2,%eax
f010b6f4:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b6f9:	8b 00                	mov    (%eax),%eax
f010b6fb:	8b 55 08             	mov    0x8(%ebp),%edx
f010b6fe:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b704:	83 ec 08             	sub    $0x8,%esp
f010b707:	50                   	push   %eax
f010b708:	52                   	push   %edx
f010b709:	e8 ee 63 02 00       	call   f0131afc <strcmp>
f010b70e:	83 c4 10             	add    $0x10,%esp
f010b711:	85 c0                	test   %eax,%eax
f010b713:	74 0f                	je     f010b724 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b715:	ff 45 f4             	incl   -0xc(%ebp)
f010b718:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b71d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b720:	7c c6                	jl     f010b6e8 <get_user_program_info_by_env+0xf>
f010b722:	eb 01                	jmp    f010b725 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b724:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b725:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b72a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b72d:	75 17                	jne    f010b746 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b72f:	83 ec 0c             	sub    $0xc,%esp
f010b732:	68 44 77 13 f0       	push   $0xf0137744
f010b737:	e8 d2 55 ff ff       	call   f0100d0e <cprintf>
f010b73c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b73f:	b8 00 00 00 00       	mov    $0x0,%eax
f010b744:	eb 11                	jmp    f010b757 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b746:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b749:	89 d0                	mov    %edx,%eax
f010b74b:	01 c0                	add    %eax,%eax
f010b74d:	01 d0                	add    %edx,%eax
f010b74f:	c1 e0 02             	shl    $0x2,%eax
f010b752:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b757:	c9                   	leave  
f010b758:	c3                   	ret    

f010b759 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b759:	55                   	push   %ebp
f010b75a:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b75c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b75f:	83 f8 13             	cmp    $0x13,%eax
f010b762:	77 0c                	ja     f010b770 <trapname+0x17>
		return excnames[trapno];
f010b764:	8b 45 08             	mov    0x8(%ebp),%eax
f010b767:	8b 04 85 80 7b 13 f0 	mov    -0xfec8480(,%eax,4),%eax
f010b76e:	eb 12                	jmp    f010b782 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b770:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b774:	75 07                	jne    f010b77d <trapname+0x24>
		return "System call";
f010b776:	b8 60 77 13 f0       	mov    $0xf0137760,%eax
f010b77b:	eb 05                	jmp    f010b782 <trapname+0x29>
	return "(unknown trap)";
f010b77d:	b8 6c 77 13 f0       	mov    $0xf013776c,%eax
}
f010b782:	5d                   	pop    %ebp
f010b783:	c3                   	ret    

f010b784 <idt_init>:


void
idt_init(void)
{
f010b784:	55                   	push   %ebp
f010b785:	89 e5                	mov    %esp,%ebp
f010b787:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b78a:	b8 18 ce 10 f0       	mov    $0xf010ce18,%eax
f010b78f:	66 a3 90 fe 85 f0    	mov    %ax,0xf085fe90
f010b795:	66 c7 05 92 fe 85 f0 	movw   $0x8,0xf085fe92
f010b79c:	08 00 
f010b79e:	a0 94 fe 85 f0       	mov    0xf085fe94,%al
f010b7a3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a6:	a2 94 fe 85 f0       	mov    %al,0xf085fe94
f010b7ab:	a0 94 fe 85 f0       	mov    0xf085fe94,%al
f010b7b0:	83 e0 1f             	and    $0x1f,%eax
f010b7b3:	a2 94 fe 85 f0       	mov    %al,0xf085fe94
f010b7b8:	a0 95 fe 85 f0       	mov    0xf085fe95,%al
f010b7bd:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7c0:	83 c8 0e             	or     $0xe,%eax
f010b7c3:	a2 95 fe 85 f0       	mov    %al,0xf085fe95
f010b7c8:	a0 95 fe 85 f0       	mov    0xf085fe95,%al
f010b7cd:	83 e0 ef             	and    $0xffffffef,%eax
f010b7d0:	a2 95 fe 85 f0       	mov    %al,0xf085fe95
f010b7d5:	a0 95 fe 85 f0       	mov    0xf085fe95,%al
f010b7da:	83 e0 9f             	and    $0xffffff9f,%eax
f010b7dd:	a2 95 fe 85 f0       	mov    %al,0xf085fe95
f010b7e2:	a0 95 fe 85 f0       	mov    0xf085fe95,%al
f010b7e7:	83 c8 80             	or     $0xffffff80,%eax
f010b7ea:	a2 95 fe 85 f0       	mov    %al,0xf085fe95
f010b7ef:	b8 18 ce 10 f0       	mov    $0xf010ce18,%eax
f010b7f4:	c1 e8 10             	shr    $0x10,%eax
f010b7f7:	66 a3 96 fe 85 f0    	mov    %ax,0xf085fe96
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b7fd:	b8 20 ce 10 f0       	mov    $0xf010ce20,%eax
f010b802:	66 a3 a0 ff 85 f0    	mov    %ax,0xf085ffa0
f010b808:	66 c7 05 a2 ff 85 f0 	movw   $0x8,0xf085ffa2
f010b80f:	08 00 
f010b811:	a0 a4 ff 85 f0       	mov    0xf085ffa4,%al
f010b816:	83 e0 e0             	and    $0xffffffe0,%eax
f010b819:	a2 a4 ff 85 f0       	mov    %al,0xf085ffa4
f010b81e:	a0 a4 ff 85 f0       	mov    0xf085ffa4,%al
f010b823:	83 e0 1f             	and    $0x1f,%eax
f010b826:	a2 a4 ff 85 f0       	mov    %al,0xf085ffa4
f010b82b:	a0 a5 ff 85 f0       	mov    0xf085ffa5,%al
f010b830:	83 e0 f0             	and    $0xfffffff0,%eax
f010b833:	83 c8 0e             	or     $0xe,%eax
f010b836:	a2 a5 ff 85 f0       	mov    %al,0xf085ffa5
f010b83b:	a0 a5 ff 85 f0       	mov    0xf085ffa5,%al
f010b840:	83 e0 ef             	and    $0xffffffef,%eax
f010b843:	a2 a5 ff 85 f0       	mov    %al,0xf085ffa5
f010b848:	a0 a5 ff 85 f0       	mov    0xf085ffa5,%al
f010b84d:	83 c8 60             	or     $0x60,%eax
f010b850:	a2 a5 ff 85 f0       	mov    %al,0xf085ffa5
f010b855:	a0 a5 ff 85 f0       	mov    0xf085ffa5,%al
f010b85a:	83 c8 80             	or     $0xffffff80,%eax
f010b85d:	a2 a5 ff 85 f0       	mov    %al,0xf085ffa5
f010b862:	b8 20 ce 10 f0       	mov    $0xf010ce20,%eax
f010b867:	c1 e8 10             	shr    $0x10,%eax
f010b86a:	66 a3 a6 ff 85 f0    	mov    %ax,0xf085ffa6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b870:	b8 2a ce 10 f0       	mov    $0xf010ce2a,%eax
f010b875:	66 a3 60 fe 85 f0    	mov    %ax,0xf085fe60
f010b87b:	66 c7 05 62 fe 85 f0 	movw   $0x8,0xf085fe62
f010b882:	08 00 
f010b884:	a0 64 fe 85 f0       	mov    0xf085fe64,%al
f010b889:	83 e0 e0             	and    $0xffffffe0,%eax
f010b88c:	a2 64 fe 85 f0       	mov    %al,0xf085fe64
f010b891:	a0 64 fe 85 f0       	mov    0xf085fe64,%al
f010b896:	83 e0 1f             	and    $0x1f,%eax
f010b899:	a2 64 fe 85 f0       	mov    %al,0xf085fe64
f010b89e:	a0 65 fe 85 f0       	mov    0xf085fe65,%al
f010b8a3:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a6:	83 c8 0e             	or     $0xe,%eax
f010b8a9:	a2 65 fe 85 f0       	mov    %al,0xf085fe65
f010b8ae:	a0 65 fe 85 f0       	mov    0xf085fe65,%al
f010b8b3:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b6:	a2 65 fe 85 f0       	mov    %al,0xf085fe65
f010b8bb:	a0 65 fe 85 f0       	mov    0xf085fe65,%al
f010b8c0:	83 e0 9f             	and    $0xffffff9f,%eax
f010b8c3:	a2 65 fe 85 f0       	mov    %al,0xf085fe65
f010b8c8:	a0 65 fe 85 f0       	mov    0xf085fe65,%al
f010b8cd:	83 c8 80             	or     $0xffffff80,%eax
f010b8d0:	a2 65 fe 85 f0       	mov    %al,0xf085fe65
f010b8d5:	b8 2a ce 10 f0       	mov    $0xf010ce2a,%eax
f010b8da:	c1 e8 10             	shr    $0x10,%eax
f010b8dd:	66 a3 66 fe 85 f0    	mov    %ax,0xf085fe66


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b8e3:	b8 32 ce 10 f0       	mov    $0xf010ce32,%eax
f010b8e8:	66 a3 20 fe 85 f0    	mov    %ax,0xf085fe20
f010b8ee:	66 c7 05 22 fe 85 f0 	movw   $0x8,0xf085fe22
f010b8f5:	08 00 
f010b8f7:	a0 24 fe 85 f0       	mov    0xf085fe24,%al
f010b8fc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8ff:	a2 24 fe 85 f0       	mov    %al,0xf085fe24
f010b904:	a0 24 fe 85 f0       	mov    0xf085fe24,%al
f010b909:	83 e0 1f             	and    $0x1f,%eax
f010b90c:	a2 24 fe 85 f0       	mov    %al,0xf085fe24
f010b911:	a0 25 fe 85 f0       	mov    0xf085fe25,%al
f010b916:	83 e0 f0             	and    $0xfffffff0,%eax
f010b919:	83 c8 0e             	or     $0xe,%eax
f010b91c:	a2 25 fe 85 f0       	mov    %al,0xf085fe25
f010b921:	a0 25 fe 85 f0       	mov    0xf085fe25,%al
f010b926:	83 e0 ef             	and    $0xffffffef,%eax
f010b929:	a2 25 fe 85 f0       	mov    %al,0xf085fe25
f010b92e:	a0 25 fe 85 f0       	mov    0xf085fe25,%al
f010b933:	83 c8 60             	or     $0x60,%eax
f010b936:	a2 25 fe 85 f0       	mov    %al,0xf085fe25
f010b93b:	a0 25 fe 85 f0       	mov    0xf085fe25,%al
f010b940:	83 c8 80             	or     $0xffffff80,%eax
f010b943:	a2 25 fe 85 f0       	mov    %al,0xf085fe25
f010b948:	b8 32 ce 10 f0       	mov    $0xf010ce32,%eax
f010b94d:	c1 e8 10             	shr    $0x10,%eax
f010b950:	66 a3 26 fe 85 f0    	mov    %ax,0xf085fe26
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b956:	b8 3c ce 10 f0       	mov    $0xf010ce3c,%eax
f010b95b:	66 a3 28 fe 85 f0    	mov    %ax,0xf085fe28
f010b961:	66 c7 05 2a fe 85 f0 	movw   $0x8,0xf085fe2a
f010b968:	08 00 
f010b96a:	a0 2c fe 85 f0       	mov    0xf085fe2c,%al
f010b96f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b972:	a2 2c fe 85 f0       	mov    %al,0xf085fe2c
f010b977:	a0 2c fe 85 f0       	mov    0xf085fe2c,%al
f010b97c:	83 e0 1f             	and    $0x1f,%eax
f010b97f:	a2 2c fe 85 f0       	mov    %al,0xf085fe2c
f010b984:	a0 2d fe 85 f0       	mov    0xf085fe2d,%al
f010b989:	83 c8 0f             	or     $0xf,%eax
f010b98c:	a2 2d fe 85 f0       	mov    %al,0xf085fe2d
f010b991:	a0 2d fe 85 f0       	mov    0xf085fe2d,%al
f010b996:	83 e0 ef             	and    $0xffffffef,%eax
f010b999:	a2 2d fe 85 f0       	mov    %al,0xf085fe2d
f010b99e:	a0 2d fe 85 f0       	mov    0xf085fe2d,%al
f010b9a3:	83 c8 60             	or     $0x60,%eax
f010b9a6:	a2 2d fe 85 f0       	mov    %al,0xf085fe2d
f010b9ab:	a0 2d fe 85 f0       	mov    0xf085fe2d,%al
f010b9b0:	83 c8 80             	or     $0xffffff80,%eax
f010b9b3:	a2 2d fe 85 f0       	mov    %al,0xf085fe2d
f010b9b8:	b8 3c ce 10 f0       	mov    $0xf010ce3c,%eax
f010b9bd:	c1 e8 10             	shr    $0x10,%eax
f010b9c0:	66 a3 2e fe 85 f0    	mov    %ax,0xf085fe2e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b9c6:	b8 46 ce 10 f0       	mov    $0xf010ce46,%eax
f010b9cb:	66 a3 30 fe 85 f0    	mov    %ax,0xf085fe30
f010b9d1:	66 c7 05 32 fe 85 f0 	movw   $0x8,0xf085fe32
f010b9d8:	08 00 
f010b9da:	a0 34 fe 85 f0       	mov    0xf085fe34,%al
f010b9df:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e2:	a2 34 fe 85 f0       	mov    %al,0xf085fe34
f010b9e7:	a0 34 fe 85 f0       	mov    0xf085fe34,%al
f010b9ec:	83 e0 1f             	and    $0x1f,%eax
f010b9ef:	a2 34 fe 85 f0       	mov    %al,0xf085fe34
f010b9f4:	a0 35 fe 85 f0       	mov    0xf085fe35,%al
f010b9f9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9fc:	83 c8 0e             	or     $0xe,%eax
f010b9ff:	a2 35 fe 85 f0       	mov    %al,0xf085fe35
f010ba04:	a0 35 fe 85 f0       	mov    0xf085fe35,%al
f010ba09:	83 e0 ef             	and    $0xffffffef,%eax
f010ba0c:	a2 35 fe 85 f0       	mov    %al,0xf085fe35
f010ba11:	a0 35 fe 85 f0       	mov    0xf085fe35,%al
f010ba16:	83 c8 60             	or     $0x60,%eax
f010ba19:	a2 35 fe 85 f0       	mov    %al,0xf085fe35
f010ba1e:	a0 35 fe 85 f0       	mov    0xf085fe35,%al
f010ba23:	83 c8 80             	or     $0xffffff80,%eax
f010ba26:	a2 35 fe 85 f0       	mov    %al,0xf085fe35
f010ba2b:	b8 46 ce 10 f0       	mov    $0xf010ce46,%eax
f010ba30:	c1 e8 10             	shr    $0x10,%eax
f010ba33:	66 a3 36 fe 85 f0    	mov    %ax,0xf085fe36
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010ba39:	b8 50 ce 10 f0       	mov    $0xf010ce50,%eax
f010ba3e:	66 a3 38 fe 85 f0    	mov    %ax,0xf085fe38
f010ba44:	66 c7 05 3a fe 85 f0 	movw   $0x8,0xf085fe3a
f010ba4b:	08 00 
f010ba4d:	a0 3c fe 85 f0       	mov    0xf085fe3c,%al
f010ba52:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba55:	a2 3c fe 85 f0       	mov    %al,0xf085fe3c
f010ba5a:	a0 3c fe 85 f0       	mov    0xf085fe3c,%al
f010ba5f:	83 e0 1f             	and    $0x1f,%eax
f010ba62:	a2 3c fe 85 f0       	mov    %al,0xf085fe3c
f010ba67:	a0 3d fe 85 f0       	mov    0xf085fe3d,%al
f010ba6c:	83 c8 0f             	or     $0xf,%eax
f010ba6f:	a2 3d fe 85 f0       	mov    %al,0xf085fe3d
f010ba74:	a0 3d fe 85 f0       	mov    0xf085fe3d,%al
f010ba79:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7c:	a2 3d fe 85 f0       	mov    %al,0xf085fe3d
f010ba81:	a0 3d fe 85 f0       	mov    0xf085fe3d,%al
f010ba86:	83 c8 60             	or     $0x60,%eax
f010ba89:	a2 3d fe 85 f0       	mov    %al,0xf085fe3d
f010ba8e:	a0 3d fe 85 f0       	mov    0xf085fe3d,%al
f010ba93:	83 c8 80             	or     $0xffffff80,%eax
f010ba96:	a2 3d fe 85 f0       	mov    %al,0xf085fe3d
f010ba9b:	b8 50 ce 10 f0       	mov    $0xf010ce50,%eax
f010baa0:	c1 e8 10             	shr    $0x10,%eax
f010baa3:	66 a3 3e fe 85 f0    	mov    %ax,0xf085fe3e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010baa9:	b8 5a ce 10 f0       	mov    $0xf010ce5a,%eax
f010baae:	66 a3 40 fe 85 f0    	mov    %ax,0xf085fe40
f010bab4:	66 c7 05 42 fe 85 f0 	movw   $0x8,0xf085fe42
f010babb:	08 00 
f010babd:	a0 44 fe 85 f0       	mov    0xf085fe44,%al
f010bac2:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac5:	a2 44 fe 85 f0       	mov    %al,0xf085fe44
f010baca:	a0 44 fe 85 f0       	mov    0xf085fe44,%al
f010bacf:	83 e0 1f             	and    $0x1f,%eax
f010bad2:	a2 44 fe 85 f0       	mov    %al,0xf085fe44
f010bad7:	a0 45 fe 85 f0       	mov    0xf085fe45,%al
f010badc:	83 c8 0f             	or     $0xf,%eax
f010badf:	a2 45 fe 85 f0       	mov    %al,0xf085fe45
f010bae4:	a0 45 fe 85 f0       	mov    0xf085fe45,%al
f010bae9:	83 e0 ef             	and    $0xffffffef,%eax
f010baec:	a2 45 fe 85 f0       	mov    %al,0xf085fe45
f010baf1:	a0 45 fe 85 f0       	mov    0xf085fe45,%al
f010baf6:	83 c8 60             	or     $0x60,%eax
f010baf9:	a2 45 fe 85 f0       	mov    %al,0xf085fe45
f010bafe:	a0 45 fe 85 f0       	mov    0xf085fe45,%al
f010bb03:	83 c8 80             	or     $0xffffff80,%eax
f010bb06:	a2 45 fe 85 f0       	mov    %al,0xf085fe45
f010bb0b:	b8 5a ce 10 f0       	mov    $0xf010ce5a,%eax
f010bb10:	c1 e8 10             	shr    $0x10,%eax
f010bb13:	66 a3 46 fe 85 f0    	mov    %ax,0xf085fe46
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010bb19:	b8 64 ce 10 f0       	mov    $0xf010ce64,%eax
f010bb1e:	66 a3 48 fe 85 f0    	mov    %ax,0xf085fe48
f010bb24:	66 c7 05 4a fe 85 f0 	movw   $0x8,0xf085fe4a
f010bb2b:	08 00 
f010bb2d:	a0 4c fe 85 f0       	mov    0xf085fe4c,%al
f010bb32:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb35:	a2 4c fe 85 f0       	mov    %al,0xf085fe4c
f010bb3a:	a0 4c fe 85 f0       	mov    0xf085fe4c,%al
f010bb3f:	83 e0 1f             	and    $0x1f,%eax
f010bb42:	a2 4c fe 85 f0       	mov    %al,0xf085fe4c
f010bb47:	a0 4d fe 85 f0       	mov    0xf085fe4d,%al
f010bb4c:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb4f:	83 c8 0e             	or     $0xe,%eax
f010bb52:	a2 4d fe 85 f0       	mov    %al,0xf085fe4d
f010bb57:	a0 4d fe 85 f0       	mov    0xf085fe4d,%al
f010bb5c:	83 e0 ef             	and    $0xffffffef,%eax
f010bb5f:	a2 4d fe 85 f0       	mov    %al,0xf085fe4d
f010bb64:	a0 4d fe 85 f0       	mov    0xf085fe4d,%al
f010bb69:	83 c8 60             	or     $0x60,%eax
f010bb6c:	a2 4d fe 85 f0       	mov    %al,0xf085fe4d
f010bb71:	a0 4d fe 85 f0       	mov    0xf085fe4d,%al
f010bb76:	83 c8 80             	or     $0xffffff80,%eax
f010bb79:	a2 4d fe 85 f0       	mov    %al,0xf085fe4d
f010bb7e:	b8 64 ce 10 f0       	mov    $0xf010ce64,%eax
f010bb83:	c1 e8 10             	shr    $0x10,%eax
f010bb86:	66 a3 4e fe 85 f0    	mov    %ax,0xf085fe4e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010bb8c:	b8 6e ce 10 f0       	mov    $0xf010ce6e,%eax
f010bb91:	66 a3 50 fe 85 f0    	mov    %ax,0xf085fe50
f010bb97:	66 c7 05 52 fe 85 f0 	movw   $0x8,0xf085fe52
f010bb9e:	08 00 
f010bba0:	a0 54 fe 85 f0       	mov    0xf085fe54,%al
f010bba5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bba8:	a2 54 fe 85 f0       	mov    %al,0xf085fe54
f010bbad:	a0 54 fe 85 f0       	mov    0xf085fe54,%al
f010bbb2:	83 e0 1f             	and    $0x1f,%eax
f010bbb5:	a2 54 fe 85 f0       	mov    %al,0xf085fe54
f010bbba:	a0 55 fe 85 f0       	mov    0xf085fe55,%al
f010bbbf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc2:	83 c8 0e             	or     $0xe,%eax
f010bbc5:	a2 55 fe 85 f0       	mov    %al,0xf085fe55
f010bbca:	a0 55 fe 85 f0       	mov    0xf085fe55,%al
f010bbcf:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd2:	a2 55 fe 85 f0       	mov    %al,0xf085fe55
f010bbd7:	a0 55 fe 85 f0       	mov    0xf085fe55,%al
f010bbdc:	83 c8 60             	or     $0x60,%eax
f010bbdf:	a2 55 fe 85 f0       	mov    %al,0xf085fe55
f010bbe4:	a0 55 fe 85 f0       	mov    0xf085fe55,%al
f010bbe9:	83 c8 80             	or     $0xffffff80,%eax
f010bbec:	a2 55 fe 85 f0       	mov    %al,0xf085fe55
f010bbf1:	b8 6e ce 10 f0       	mov    $0xf010ce6e,%eax
f010bbf6:	c1 e8 10             	shr    $0x10,%eax
f010bbf9:	66 a3 56 fe 85 f0    	mov    %ax,0xf085fe56
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010bbff:	b8 78 ce 10 f0       	mov    $0xf010ce78,%eax
f010bc04:	66 a3 58 fe 85 f0    	mov    %ax,0xf085fe58
f010bc0a:	66 c7 05 5a fe 85 f0 	movw   $0x8,0xf085fe5a
f010bc11:	08 00 
f010bc13:	a0 5c fe 85 f0       	mov    0xf085fe5c,%al
f010bc18:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc1b:	a2 5c fe 85 f0       	mov    %al,0xf085fe5c
f010bc20:	a0 5c fe 85 f0       	mov    0xf085fe5c,%al
f010bc25:	83 e0 1f             	and    $0x1f,%eax
f010bc28:	a2 5c fe 85 f0       	mov    %al,0xf085fe5c
f010bc2d:	a0 5d fe 85 f0       	mov    0xf085fe5d,%al
f010bc32:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc35:	83 c8 0e             	or     $0xe,%eax
f010bc38:	a2 5d fe 85 f0       	mov    %al,0xf085fe5d
f010bc3d:	a0 5d fe 85 f0       	mov    0xf085fe5d,%al
f010bc42:	83 e0 ef             	and    $0xffffffef,%eax
f010bc45:	a2 5d fe 85 f0       	mov    %al,0xf085fe5d
f010bc4a:	a0 5d fe 85 f0       	mov    0xf085fe5d,%al
f010bc4f:	83 c8 60             	or     $0x60,%eax
f010bc52:	a2 5d fe 85 f0       	mov    %al,0xf085fe5d
f010bc57:	a0 5d fe 85 f0       	mov    0xf085fe5d,%al
f010bc5c:	83 c8 80             	or     $0xffffff80,%eax
f010bc5f:	a2 5d fe 85 f0       	mov    %al,0xf085fe5d
f010bc64:	b8 78 ce 10 f0       	mov    $0xf010ce78,%eax
f010bc69:	c1 e8 10             	shr    $0x10,%eax
f010bc6c:	66 a3 5e fe 85 f0    	mov    %ax,0xf085fe5e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010bc72:	b8 82 ce 10 f0       	mov    $0xf010ce82,%eax
f010bc77:	66 a3 70 fe 85 f0    	mov    %ax,0xf085fe70
f010bc7d:	66 c7 05 72 fe 85 f0 	movw   $0x8,0xf085fe72
f010bc84:	08 00 
f010bc86:	a0 74 fe 85 f0       	mov    0xf085fe74,%al
f010bc8b:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc8e:	a2 74 fe 85 f0       	mov    %al,0xf085fe74
f010bc93:	a0 74 fe 85 f0       	mov    0xf085fe74,%al
f010bc98:	83 e0 1f             	and    $0x1f,%eax
f010bc9b:	a2 74 fe 85 f0       	mov    %al,0xf085fe74
f010bca0:	a0 75 fe 85 f0       	mov    0xf085fe75,%al
f010bca5:	83 e0 f0             	and    $0xfffffff0,%eax
f010bca8:	83 c8 0e             	or     $0xe,%eax
f010bcab:	a2 75 fe 85 f0       	mov    %al,0xf085fe75
f010bcb0:	a0 75 fe 85 f0       	mov    0xf085fe75,%al
f010bcb5:	83 e0 ef             	and    $0xffffffef,%eax
f010bcb8:	a2 75 fe 85 f0       	mov    %al,0xf085fe75
f010bcbd:	a0 75 fe 85 f0       	mov    0xf085fe75,%al
f010bcc2:	83 c8 60             	or     $0x60,%eax
f010bcc5:	a2 75 fe 85 f0       	mov    %al,0xf085fe75
f010bcca:	a0 75 fe 85 f0       	mov    0xf085fe75,%al
f010bccf:	83 c8 80             	or     $0xffffff80,%eax
f010bcd2:	a2 75 fe 85 f0       	mov    %al,0xf085fe75
f010bcd7:	b8 82 ce 10 f0       	mov    $0xf010ce82,%eax
f010bcdc:	c1 e8 10             	shr    $0x10,%eax
f010bcdf:	66 a3 76 fe 85 f0    	mov    %ax,0xf085fe76
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010bce5:	b8 8a ce 10 f0       	mov    $0xf010ce8a,%eax
f010bcea:	66 a3 78 fe 85 f0    	mov    %ax,0xf085fe78
f010bcf0:	66 c7 05 7a fe 85 f0 	movw   $0x8,0xf085fe7a
f010bcf7:	08 00 
f010bcf9:	a0 7c fe 85 f0       	mov    0xf085fe7c,%al
f010bcfe:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd01:	a2 7c fe 85 f0       	mov    %al,0xf085fe7c
f010bd06:	a0 7c fe 85 f0       	mov    0xf085fe7c,%al
f010bd0b:	83 e0 1f             	and    $0x1f,%eax
f010bd0e:	a2 7c fe 85 f0       	mov    %al,0xf085fe7c
f010bd13:	a0 7d fe 85 f0       	mov    0xf085fe7d,%al
f010bd18:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd1b:	83 c8 0e             	or     $0xe,%eax
f010bd1e:	a2 7d fe 85 f0       	mov    %al,0xf085fe7d
f010bd23:	a0 7d fe 85 f0       	mov    0xf085fe7d,%al
f010bd28:	83 e0 ef             	and    $0xffffffef,%eax
f010bd2b:	a2 7d fe 85 f0       	mov    %al,0xf085fe7d
f010bd30:	a0 7d fe 85 f0       	mov    0xf085fe7d,%al
f010bd35:	83 c8 60             	or     $0x60,%eax
f010bd38:	a2 7d fe 85 f0       	mov    %al,0xf085fe7d
f010bd3d:	a0 7d fe 85 f0       	mov    0xf085fe7d,%al
f010bd42:	83 c8 80             	or     $0xffffff80,%eax
f010bd45:	a2 7d fe 85 f0       	mov    %al,0xf085fe7d
f010bd4a:	b8 8a ce 10 f0       	mov    $0xf010ce8a,%eax
f010bd4f:	c1 e8 10             	shr    $0x10,%eax
f010bd52:	66 a3 7e fe 85 f0    	mov    %ax,0xf085fe7e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010bd58:	b8 8e ce 10 f0       	mov    $0xf010ce8e,%eax
f010bd5d:	66 a3 80 fe 85 f0    	mov    %ax,0xf085fe80
f010bd63:	66 c7 05 82 fe 85 f0 	movw   $0x8,0xf085fe82
f010bd6a:	08 00 
f010bd6c:	a0 84 fe 85 f0       	mov    0xf085fe84,%al
f010bd71:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd74:	a2 84 fe 85 f0       	mov    %al,0xf085fe84
f010bd79:	a0 84 fe 85 f0       	mov    0xf085fe84,%al
f010bd7e:	83 e0 1f             	and    $0x1f,%eax
f010bd81:	a2 84 fe 85 f0       	mov    %al,0xf085fe84
f010bd86:	a0 85 fe 85 f0       	mov    0xf085fe85,%al
f010bd8b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd8e:	83 c8 0e             	or     $0xe,%eax
f010bd91:	a2 85 fe 85 f0       	mov    %al,0xf085fe85
f010bd96:	a0 85 fe 85 f0       	mov    0xf085fe85,%al
f010bd9b:	83 e0 ef             	and    $0xffffffef,%eax
f010bd9e:	a2 85 fe 85 f0       	mov    %al,0xf085fe85
f010bda3:	a0 85 fe 85 f0       	mov    0xf085fe85,%al
f010bda8:	83 c8 60             	or     $0x60,%eax
f010bdab:	a2 85 fe 85 f0       	mov    %al,0xf085fe85
f010bdb0:	a0 85 fe 85 f0       	mov    0xf085fe85,%al
f010bdb5:	83 c8 80             	or     $0xffffff80,%eax
f010bdb8:	a2 85 fe 85 f0       	mov    %al,0xf085fe85
f010bdbd:	b8 8e ce 10 f0       	mov    $0xf010ce8e,%eax
f010bdc2:	c1 e8 10             	shr    $0x10,%eax
f010bdc5:	66 a3 86 fe 85 f0    	mov    %ax,0xf085fe86
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010bdcb:	b8 92 ce 10 f0       	mov    $0xf010ce92,%eax
f010bdd0:	66 a3 88 fe 85 f0    	mov    %ax,0xf085fe88
f010bdd6:	66 c7 05 8a fe 85 f0 	movw   $0x8,0xf085fe8a
f010bddd:	08 00 
f010bddf:	a0 8c fe 85 f0       	mov    0xf085fe8c,%al
f010bde4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bde7:	a2 8c fe 85 f0       	mov    %al,0xf085fe8c
f010bdec:	a0 8c fe 85 f0       	mov    0xf085fe8c,%al
f010bdf1:	83 e0 1f             	and    $0x1f,%eax
f010bdf4:	a2 8c fe 85 f0       	mov    %al,0xf085fe8c
f010bdf9:	a0 8d fe 85 f0       	mov    0xf085fe8d,%al
f010bdfe:	83 e0 f0             	and    $0xfffffff0,%eax
f010be01:	83 c8 0e             	or     $0xe,%eax
f010be04:	a2 8d fe 85 f0       	mov    %al,0xf085fe8d
f010be09:	a0 8d fe 85 f0       	mov    0xf085fe8d,%al
f010be0e:	83 e0 ef             	and    $0xffffffef,%eax
f010be11:	a2 8d fe 85 f0       	mov    %al,0xf085fe8d
f010be16:	a0 8d fe 85 f0       	mov    0xf085fe8d,%al
f010be1b:	83 c8 60             	or     $0x60,%eax
f010be1e:	a2 8d fe 85 f0       	mov    %al,0xf085fe8d
f010be23:	a0 8d fe 85 f0       	mov    0xf085fe8d,%al
f010be28:	83 c8 80             	or     $0xffffff80,%eax
f010be2b:	a2 8d fe 85 f0       	mov    %al,0xf085fe8d
f010be30:	b8 92 ce 10 f0       	mov    $0xf010ce92,%eax
f010be35:	c1 e8 10             	shr    $0x10,%eax
f010be38:	66 a3 8e fe 85 f0    	mov    %ax,0xf085fe8e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010be3e:	b8 96 ce 10 f0       	mov    $0xf010ce96,%eax
f010be43:	66 a3 a0 fe 85 f0    	mov    %ax,0xf085fea0
f010be49:	66 c7 05 a2 fe 85 f0 	movw   $0x8,0xf085fea2
f010be50:	08 00 
f010be52:	a0 a4 fe 85 f0       	mov    0xf085fea4,%al
f010be57:	83 e0 e0             	and    $0xffffffe0,%eax
f010be5a:	a2 a4 fe 85 f0       	mov    %al,0xf085fea4
f010be5f:	a0 a4 fe 85 f0       	mov    0xf085fea4,%al
f010be64:	83 e0 1f             	and    $0x1f,%eax
f010be67:	a2 a4 fe 85 f0       	mov    %al,0xf085fea4
f010be6c:	a0 a5 fe 85 f0       	mov    0xf085fea5,%al
f010be71:	83 e0 f0             	and    $0xfffffff0,%eax
f010be74:	83 c8 0e             	or     $0xe,%eax
f010be77:	a2 a5 fe 85 f0       	mov    %al,0xf085fea5
f010be7c:	a0 a5 fe 85 f0       	mov    0xf085fea5,%al
f010be81:	83 e0 ef             	and    $0xffffffef,%eax
f010be84:	a2 a5 fe 85 f0       	mov    %al,0xf085fea5
f010be89:	a0 a5 fe 85 f0       	mov    0xf085fea5,%al
f010be8e:	83 c8 60             	or     $0x60,%eax
f010be91:	a2 a5 fe 85 f0       	mov    %al,0xf085fea5
f010be96:	a0 a5 fe 85 f0       	mov    0xf085fea5,%al
f010be9b:	83 c8 80             	or     $0xffffff80,%eax
f010be9e:	a2 a5 fe 85 f0       	mov    %al,0xf085fea5
f010bea3:	b8 96 ce 10 f0       	mov    $0xf010ce96,%eax
f010bea8:	c1 e8 10             	shr    $0x10,%eax
f010beab:	66 a3 a6 fe 85 f0    	mov    %ax,0xf085fea6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010beb1:	b8 9c ce 10 f0       	mov    $0xf010ce9c,%eax
f010beb6:	66 a3 a8 fe 85 f0    	mov    %ax,0xf085fea8
f010bebc:	66 c7 05 aa fe 85 f0 	movw   $0x8,0xf085feaa
f010bec3:	08 00 
f010bec5:	a0 ac fe 85 f0       	mov    0xf085feac,%al
f010beca:	83 e0 e0             	and    $0xffffffe0,%eax
f010becd:	a2 ac fe 85 f0       	mov    %al,0xf085feac
f010bed2:	a0 ac fe 85 f0       	mov    0xf085feac,%al
f010bed7:	83 e0 1f             	and    $0x1f,%eax
f010beda:	a2 ac fe 85 f0       	mov    %al,0xf085feac
f010bedf:	a0 ad fe 85 f0       	mov    0xf085fead,%al
f010bee4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bee7:	83 c8 0e             	or     $0xe,%eax
f010beea:	a2 ad fe 85 f0       	mov    %al,0xf085fead
f010beef:	a0 ad fe 85 f0       	mov    0xf085fead,%al
f010bef4:	83 e0 ef             	and    $0xffffffef,%eax
f010bef7:	a2 ad fe 85 f0       	mov    %al,0xf085fead
f010befc:	a0 ad fe 85 f0       	mov    0xf085fead,%al
f010bf01:	83 c8 60             	or     $0x60,%eax
f010bf04:	a2 ad fe 85 f0       	mov    %al,0xf085fead
f010bf09:	a0 ad fe 85 f0       	mov    0xf085fead,%al
f010bf0e:	83 c8 80             	or     $0xffffff80,%eax
f010bf11:	a2 ad fe 85 f0       	mov    %al,0xf085fead
f010bf16:	b8 9c ce 10 f0       	mov    $0xf010ce9c,%eax
f010bf1b:	c1 e8 10             	shr    $0x10,%eax
f010bf1e:	66 a3 ae fe 85 f0    	mov    %ax,0xf085feae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bf24:	b8 a0 ce 10 f0       	mov    $0xf010cea0,%eax
f010bf29:	66 a3 b0 fe 85 f0    	mov    %ax,0xf085feb0
f010bf2f:	66 c7 05 b2 fe 85 f0 	movw   $0x8,0xf085feb2
f010bf36:	08 00 
f010bf38:	a0 b4 fe 85 f0       	mov    0xf085feb4,%al
f010bf3d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf40:	a2 b4 fe 85 f0       	mov    %al,0xf085feb4
f010bf45:	a0 b4 fe 85 f0       	mov    0xf085feb4,%al
f010bf4a:	83 e0 1f             	and    $0x1f,%eax
f010bf4d:	a2 b4 fe 85 f0       	mov    %al,0xf085feb4
f010bf52:	a0 b5 fe 85 f0       	mov    0xf085feb5,%al
f010bf57:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf5a:	83 c8 0e             	or     $0xe,%eax
f010bf5d:	a2 b5 fe 85 f0       	mov    %al,0xf085feb5
f010bf62:	a0 b5 fe 85 f0       	mov    0xf085feb5,%al
f010bf67:	83 e0 ef             	and    $0xffffffef,%eax
f010bf6a:	a2 b5 fe 85 f0       	mov    %al,0xf085feb5
f010bf6f:	a0 b5 fe 85 f0       	mov    0xf085feb5,%al
f010bf74:	83 c8 60             	or     $0x60,%eax
f010bf77:	a2 b5 fe 85 f0       	mov    %al,0xf085feb5
f010bf7c:	a0 b5 fe 85 f0       	mov    0xf085feb5,%al
f010bf81:	83 c8 80             	or     $0xffffff80,%eax
f010bf84:	a2 b5 fe 85 f0       	mov    %al,0xf085feb5
f010bf89:	b8 a0 ce 10 f0       	mov    $0xf010cea0,%eax
f010bf8e:	c1 e8 10             	shr    $0x10,%eax
f010bf91:	66 a3 b6 fe 85 f0    	mov    %ax,0xf085feb6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bf97:	b8 a6 ce 10 f0       	mov    $0xf010cea6,%eax
f010bf9c:	66 a3 b8 fe 85 f0    	mov    %ax,0xf085feb8
f010bfa2:	66 c7 05 ba fe 85 f0 	movw   $0x8,0xf085feba
f010bfa9:	08 00 
f010bfab:	a0 bc fe 85 f0       	mov    0xf085febc,%al
f010bfb0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfb3:	a2 bc fe 85 f0       	mov    %al,0xf085febc
f010bfb8:	a0 bc fe 85 f0       	mov    0xf085febc,%al
f010bfbd:	83 e0 1f             	and    $0x1f,%eax
f010bfc0:	a2 bc fe 85 f0       	mov    %al,0xf085febc
f010bfc5:	a0 bd fe 85 f0       	mov    0xf085febd,%al
f010bfca:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfcd:	83 c8 0e             	or     $0xe,%eax
f010bfd0:	a2 bd fe 85 f0       	mov    %al,0xf085febd
f010bfd5:	a0 bd fe 85 f0       	mov    0xf085febd,%al
f010bfda:	83 e0 ef             	and    $0xffffffef,%eax
f010bfdd:	a2 bd fe 85 f0       	mov    %al,0xf085febd
f010bfe2:	a0 bd fe 85 f0       	mov    0xf085febd,%al
f010bfe7:	83 c8 60             	or     $0x60,%eax
f010bfea:	a2 bd fe 85 f0       	mov    %al,0xf085febd
f010bfef:	a0 bd fe 85 f0       	mov    0xf085febd,%al
f010bff4:	83 c8 80             	or     $0xffffff80,%eax
f010bff7:	a2 bd fe 85 f0       	mov    %al,0xf085febd
f010bffc:	b8 a6 ce 10 f0       	mov    $0xf010cea6,%eax
f010c001:	c1 e8 10             	shr    $0x10,%eax
f010c004:	66 a3 be fe 85 f0    	mov    %ax,0xf085febe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010c00a:	b8 ac ce 10 f0       	mov    $0xf010ceac,%eax
f010c00f:	66 a3 20 ff 85 f0    	mov    %ax,0xf085ff20
f010c015:	66 c7 05 22 ff 85 f0 	movw   $0x8,0xf085ff22
f010c01c:	08 00 
f010c01e:	a0 24 ff 85 f0       	mov    0xf085ff24,%al
f010c023:	83 e0 e0             	and    $0xffffffe0,%eax
f010c026:	a2 24 ff 85 f0       	mov    %al,0xf085ff24
f010c02b:	a0 24 ff 85 f0       	mov    0xf085ff24,%al
f010c030:	83 e0 1f             	and    $0x1f,%eax
f010c033:	a2 24 ff 85 f0       	mov    %al,0xf085ff24
f010c038:	a0 25 ff 85 f0       	mov    0xf085ff25,%al
f010c03d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c040:	83 c8 0e             	or     $0xe,%eax
f010c043:	a2 25 ff 85 f0       	mov    %al,0xf085ff25
f010c048:	a0 25 ff 85 f0       	mov    0xf085ff25,%al
f010c04d:	83 e0 ef             	and    $0xffffffef,%eax
f010c050:	a2 25 ff 85 f0       	mov    %al,0xf085ff25
f010c055:	a0 25 ff 85 f0       	mov    0xf085ff25,%al
f010c05a:	83 c8 60             	or     $0x60,%eax
f010c05d:	a2 25 ff 85 f0       	mov    %al,0xf085ff25
f010c062:	a0 25 ff 85 f0       	mov    0xf085ff25,%al
f010c067:	83 c8 80             	or     $0xffffff80,%eax
f010c06a:	a2 25 ff 85 f0       	mov    %al,0xf085ff25
f010c06f:	b8 ac ce 10 f0       	mov    $0xf010ceac,%eax
f010c074:	c1 e8 10             	shr    $0x10,%eax
f010c077:	66 a3 26 ff 85 f0    	mov    %ax,0xf085ff26
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010c07d:	b8 b2 ce 10 f0       	mov    $0xf010ceb2,%eax
f010c082:	66 a3 28 ff 85 f0    	mov    %ax,0xf085ff28
f010c088:	66 c7 05 2a ff 85 f0 	movw   $0x8,0xf085ff2a
f010c08f:	08 00 
f010c091:	a0 2c ff 85 f0       	mov    0xf085ff2c,%al
f010c096:	83 e0 e0             	and    $0xffffffe0,%eax
f010c099:	a2 2c ff 85 f0       	mov    %al,0xf085ff2c
f010c09e:	a0 2c ff 85 f0       	mov    0xf085ff2c,%al
f010c0a3:	83 e0 1f             	and    $0x1f,%eax
f010c0a6:	a2 2c ff 85 f0       	mov    %al,0xf085ff2c
f010c0ab:	a0 2d ff 85 f0       	mov    0xf085ff2d,%al
f010c0b0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0b3:	83 c8 0e             	or     $0xe,%eax
f010c0b6:	a2 2d ff 85 f0       	mov    %al,0xf085ff2d
f010c0bb:	a0 2d ff 85 f0       	mov    0xf085ff2d,%al
f010c0c0:	83 e0 ef             	and    $0xffffffef,%eax
f010c0c3:	a2 2d ff 85 f0       	mov    %al,0xf085ff2d
f010c0c8:	a0 2d ff 85 f0       	mov    0xf085ff2d,%al
f010c0cd:	83 c8 60             	or     $0x60,%eax
f010c0d0:	a2 2d ff 85 f0       	mov    %al,0xf085ff2d
f010c0d5:	a0 2d ff 85 f0       	mov    0xf085ff2d,%al
f010c0da:	83 c8 80             	or     $0xffffff80,%eax
f010c0dd:	a2 2d ff 85 f0       	mov    %al,0xf085ff2d
f010c0e2:	b8 b2 ce 10 f0       	mov    $0xf010ceb2,%eax
f010c0e7:	c1 e8 10             	shr    $0x10,%eax
f010c0ea:	66 a3 2e ff 85 f0    	mov    %ax,0xf085ff2e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010c0f0:	b8 b8 ce 10 f0       	mov    $0xf010ceb8,%eax
f010c0f5:	66 a3 30 ff 85 f0    	mov    %ax,0xf085ff30
f010c0fb:	66 c7 05 32 ff 85 f0 	movw   $0x8,0xf085ff32
f010c102:	08 00 
f010c104:	a0 34 ff 85 f0       	mov    0xf085ff34,%al
f010c109:	83 e0 e0             	and    $0xffffffe0,%eax
f010c10c:	a2 34 ff 85 f0       	mov    %al,0xf085ff34
f010c111:	a0 34 ff 85 f0       	mov    0xf085ff34,%al
f010c116:	83 e0 1f             	and    $0x1f,%eax
f010c119:	a2 34 ff 85 f0       	mov    %al,0xf085ff34
f010c11e:	a0 35 ff 85 f0       	mov    0xf085ff35,%al
f010c123:	83 e0 f0             	and    $0xfffffff0,%eax
f010c126:	83 c8 0e             	or     $0xe,%eax
f010c129:	a2 35 ff 85 f0       	mov    %al,0xf085ff35
f010c12e:	a0 35 ff 85 f0       	mov    0xf085ff35,%al
f010c133:	83 e0 ef             	and    $0xffffffef,%eax
f010c136:	a2 35 ff 85 f0       	mov    %al,0xf085ff35
f010c13b:	a0 35 ff 85 f0       	mov    0xf085ff35,%al
f010c140:	83 c8 60             	or     $0x60,%eax
f010c143:	a2 35 ff 85 f0       	mov    %al,0xf085ff35
f010c148:	a0 35 ff 85 f0       	mov    0xf085ff35,%al
f010c14d:	83 c8 80             	or     $0xffffff80,%eax
f010c150:	a2 35 ff 85 f0       	mov    %al,0xf085ff35
f010c155:	b8 b8 ce 10 f0       	mov    $0xf010ceb8,%eax
f010c15a:	c1 e8 10             	shr    $0x10,%eax
f010c15d:	66 a3 36 ff 85 f0    	mov    %ax,0xf085ff36
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010c163:	b8 be ce 10 f0       	mov    $0xf010cebe,%eax
f010c168:	66 a3 38 ff 85 f0    	mov    %ax,0xf085ff38
f010c16e:	66 c7 05 3a ff 85 f0 	movw   $0x8,0xf085ff3a
f010c175:	08 00 
f010c177:	a0 3c ff 85 f0       	mov    0xf085ff3c,%al
f010c17c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c17f:	a2 3c ff 85 f0       	mov    %al,0xf085ff3c
f010c184:	a0 3c ff 85 f0       	mov    0xf085ff3c,%al
f010c189:	83 e0 1f             	and    $0x1f,%eax
f010c18c:	a2 3c ff 85 f0       	mov    %al,0xf085ff3c
f010c191:	a0 3d ff 85 f0       	mov    0xf085ff3d,%al
f010c196:	83 e0 f0             	and    $0xfffffff0,%eax
f010c199:	83 c8 0e             	or     $0xe,%eax
f010c19c:	a2 3d ff 85 f0       	mov    %al,0xf085ff3d
f010c1a1:	a0 3d ff 85 f0       	mov    0xf085ff3d,%al
f010c1a6:	83 e0 ef             	and    $0xffffffef,%eax
f010c1a9:	a2 3d ff 85 f0       	mov    %al,0xf085ff3d
f010c1ae:	a0 3d ff 85 f0       	mov    0xf085ff3d,%al
f010c1b3:	83 c8 60             	or     $0x60,%eax
f010c1b6:	a2 3d ff 85 f0       	mov    %al,0xf085ff3d
f010c1bb:	a0 3d ff 85 f0       	mov    0xf085ff3d,%al
f010c1c0:	83 c8 80             	or     $0xffffff80,%eax
f010c1c3:	a2 3d ff 85 f0       	mov    %al,0xf085ff3d
f010c1c8:	b8 be ce 10 f0       	mov    $0xf010cebe,%eax
f010c1cd:	c1 e8 10             	shr    $0x10,%eax
f010c1d0:	66 a3 3e ff 85 f0    	mov    %ax,0xf085ff3e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010c1d6:	b8 c4 ce 10 f0       	mov    $0xf010cec4,%eax
f010c1db:	66 a3 40 ff 85 f0    	mov    %ax,0xf085ff40
f010c1e1:	66 c7 05 42 ff 85 f0 	movw   $0x8,0xf085ff42
f010c1e8:	08 00 
f010c1ea:	a0 44 ff 85 f0       	mov    0xf085ff44,%al
f010c1ef:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1f2:	a2 44 ff 85 f0       	mov    %al,0xf085ff44
f010c1f7:	a0 44 ff 85 f0       	mov    0xf085ff44,%al
f010c1fc:	83 e0 1f             	and    $0x1f,%eax
f010c1ff:	a2 44 ff 85 f0       	mov    %al,0xf085ff44
f010c204:	a0 45 ff 85 f0       	mov    0xf085ff45,%al
f010c209:	83 e0 f0             	and    $0xfffffff0,%eax
f010c20c:	83 c8 0e             	or     $0xe,%eax
f010c20f:	a2 45 ff 85 f0       	mov    %al,0xf085ff45
f010c214:	a0 45 ff 85 f0       	mov    0xf085ff45,%al
f010c219:	83 e0 ef             	and    $0xffffffef,%eax
f010c21c:	a2 45 ff 85 f0       	mov    %al,0xf085ff45
f010c221:	a0 45 ff 85 f0       	mov    0xf085ff45,%al
f010c226:	83 c8 60             	or     $0x60,%eax
f010c229:	a2 45 ff 85 f0       	mov    %al,0xf085ff45
f010c22e:	a0 45 ff 85 f0       	mov    0xf085ff45,%al
f010c233:	83 c8 80             	or     $0xffffff80,%eax
f010c236:	a2 45 ff 85 f0       	mov    %al,0xf085ff45
f010c23b:	b8 c4 ce 10 f0       	mov    $0xf010cec4,%eax
f010c240:	c1 e8 10             	shr    $0x10,%eax
f010c243:	66 a3 46 ff 85 f0    	mov    %ax,0xf085ff46
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010c249:	b8 ca ce 10 f0       	mov    $0xf010ceca,%eax
f010c24e:	66 a3 48 ff 85 f0    	mov    %ax,0xf085ff48
f010c254:	66 c7 05 4a ff 85 f0 	movw   $0x8,0xf085ff4a
f010c25b:	08 00 
f010c25d:	a0 4c ff 85 f0       	mov    0xf085ff4c,%al
f010c262:	83 e0 e0             	and    $0xffffffe0,%eax
f010c265:	a2 4c ff 85 f0       	mov    %al,0xf085ff4c
f010c26a:	a0 4c ff 85 f0       	mov    0xf085ff4c,%al
f010c26f:	83 e0 1f             	and    $0x1f,%eax
f010c272:	a2 4c ff 85 f0       	mov    %al,0xf085ff4c
f010c277:	a0 4d ff 85 f0       	mov    0xf085ff4d,%al
f010c27c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c27f:	83 c8 0e             	or     $0xe,%eax
f010c282:	a2 4d ff 85 f0       	mov    %al,0xf085ff4d
f010c287:	a0 4d ff 85 f0       	mov    0xf085ff4d,%al
f010c28c:	83 e0 ef             	and    $0xffffffef,%eax
f010c28f:	a2 4d ff 85 f0       	mov    %al,0xf085ff4d
f010c294:	a0 4d ff 85 f0       	mov    0xf085ff4d,%al
f010c299:	83 c8 60             	or     $0x60,%eax
f010c29c:	a2 4d ff 85 f0       	mov    %al,0xf085ff4d
f010c2a1:	a0 4d ff 85 f0       	mov    0xf085ff4d,%al
f010c2a6:	83 c8 80             	or     $0xffffff80,%eax
f010c2a9:	a2 4d ff 85 f0       	mov    %al,0xf085ff4d
f010c2ae:	b8 ca ce 10 f0       	mov    $0xf010ceca,%eax
f010c2b3:	c1 e8 10             	shr    $0x10,%eax
f010c2b6:	66 a3 4e ff 85 f0    	mov    %ax,0xf085ff4e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010c2bc:	b8 d0 ce 10 f0       	mov    $0xf010ced0,%eax
f010c2c1:	66 a3 50 ff 85 f0    	mov    %ax,0xf085ff50
f010c2c7:	66 c7 05 52 ff 85 f0 	movw   $0x8,0xf085ff52
f010c2ce:	08 00 
f010c2d0:	a0 54 ff 85 f0       	mov    0xf085ff54,%al
f010c2d5:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2d8:	a2 54 ff 85 f0       	mov    %al,0xf085ff54
f010c2dd:	a0 54 ff 85 f0       	mov    0xf085ff54,%al
f010c2e2:	83 e0 1f             	and    $0x1f,%eax
f010c2e5:	a2 54 ff 85 f0       	mov    %al,0xf085ff54
f010c2ea:	a0 55 ff 85 f0       	mov    0xf085ff55,%al
f010c2ef:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2f2:	83 c8 0e             	or     $0xe,%eax
f010c2f5:	a2 55 ff 85 f0       	mov    %al,0xf085ff55
f010c2fa:	a0 55 ff 85 f0       	mov    0xf085ff55,%al
f010c2ff:	83 e0 ef             	and    $0xffffffef,%eax
f010c302:	a2 55 ff 85 f0       	mov    %al,0xf085ff55
f010c307:	a0 55 ff 85 f0       	mov    0xf085ff55,%al
f010c30c:	83 c8 60             	or     $0x60,%eax
f010c30f:	a2 55 ff 85 f0       	mov    %al,0xf085ff55
f010c314:	a0 55 ff 85 f0       	mov    0xf085ff55,%al
f010c319:	83 c8 80             	or     $0xffffff80,%eax
f010c31c:	a2 55 ff 85 f0       	mov    %al,0xf085ff55
f010c321:	b8 d0 ce 10 f0       	mov    $0xf010ced0,%eax
f010c326:	c1 e8 10             	shr    $0x10,%eax
f010c329:	66 a3 56 ff 85 f0    	mov    %ax,0xf085ff56
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c32f:	b8 d6 ce 10 f0       	mov    $0xf010ced6,%eax
f010c334:	66 a3 58 ff 85 f0    	mov    %ax,0xf085ff58
f010c33a:	66 c7 05 5a ff 85 f0 	movw   $0x8,0xf085ff5a
f010c341:	08 00 
f010c343:	a0 5c ff 85 f0       	mov    0xf085ff5c,%al
f010c348:	83 e0 e0             	and    $0xffffffe0,%eax
f010c34b:	a2 5c ff 85 f0       	mov    %al,0xf085ff5c
f010c350:	a0 5c ff 85 f0       	mov    0xf085ff5c,%al
f010c355:	83 e0 1f             	and    $0x1f,%eax
f010c358:	a2 5c ff 85 f0       	mov    %al,0xf085ff5c
f010c35d:	a0 5d ff 85 f0       	mov    0xf085ff5d,%al
f010c362:	83 e0 f0             	and    $0xfffffff0,%eax
f010c365:	83 c8 0e             	or     $0xe,%eax
f010c368:	a2 5d ff 85 f0       	mov    %al,0xf085ff5d
f010c36d:	a0 5d ff 85 f0       	mov    0xf085ff5d,%al
f010c372:	83 e0 ef             	and    $0xffffffef,%eax
f010c375:	a2 5d ff 85 f0       	mov    %al,0xf085ff5d
f010c37a:	a0 5d ff 85 f0       	mov    0xf085ff5d,%al
f010c37f:	83 c8 60             	or     $0x60,%eax
f010c382:	a2 5d ff 85 f0       	mov    %al,0xf085ff5d
f010c387:	a0 5d ff 85 f0       	mov    0xf085ff5d,%al
f010c38c:	83 c8 80             	or     $0xffffff80,%eax
f010c38f:	a2 5d ff 85 f0       	mov    %al,0xf085ff5d
f010c394:	b8 d6 ce 10 f0       	mov    $0xf010ced6,%eax
f010c399:	c1 e8 10             	shr    $0x10,%eax
f010c39c:	66 a3 5e ff 85 f0    	mov    %ax,0xf085ff5e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c3a2:	b8 dc ce 10 f0       	mov    $0xf010cedc,%eax
f010c3a7:	66 a3 60 ff 85 f0    	mov    %ax,0xf085ff60
f010c3ad:	66 c7 05 62 ff 85 f0 	movw   $0x8,0xf085ff62
f010c3b4:	08 00 
f010c3b6:	a0 64 ff 85 f0       	mov    0xf085ff64,%al
f010c3bb:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3be:	a2 64 ff 85 f0       	mov    %al,0xf085ff64
f010c3c3:	a0 64 ff 85 f0       	mov    0xf085ff64,%al
f010c3c8:	83 e0 1f             	and    $0x1f,%eax
f010c3cb:	a2 64 ff 85 f0       	mov    %al,0xf085ff64
f010c3d0:	a0 65 ff 85 f0       	mov    0xf085ff65,%al
f010c3d5:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3d8:	83 c8 0e             	or     $0xe,%eax
f010c3db:	a2 65 ff 85 f0       	mov    %al,0xf085ff65
f010c3e0:	a0 65 ff 85 f0       	mov    0xf085ff65,%al
f010c3e5:	83 e0 ef             	and    $0xffffffef,%eax
f010c3e8:	a2 65 ff 85 f0       	mov    %al,0xf085ff65
f010c3ed:	a0 65 ff 85 f0       	mov    0xf085ff65,%al
f010c3f2:	83 c8 60             	or     $0x60,%eax
f010c3f5:	a2 65 ff 85 f0       	mov    %al,0xf085ff65
f010c3fa:	a0 65 ff 85 f0       	mov    0xf085ff65,%al
f010c3ff:	83 c8 80             	or     $0xffffff80,%eax
f010c402:	a2 65 ff 85 f0       	mov    %al,0xf085ff65
f010c407:	b8 dc ce 10 f0       	mov    $0xf010cedc,%eax
f010c40c:	c1 e8 10             	shr    $0x10,%eax
f010c40f:	66 a3 66 ff 85 f0    	mov    %ax,0xf085ff66
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c415:	b8 e2 ce 10 f0       	mov    $0xf010cee2,%eax
f010c41a:	66 a3 68 ff 85 f0    	mov    %ax,0xf085ff68
f010c420:	66 c7 05 6a ff 85 f0 	movw   $0x8,0xf085ff6a
f010c427:	08 00 
f010c429:	a0 6c ff 85 f0       	mov    0xf085ff6c,%al
f010c42e:	83 e0 e0             	and    $0xffffffe0,%eax
f010c431:	a2 6c ff 85 f0       	mov    %al,0xf085ff6c
f010c436:	a0 6c ff 85 f0       	mov    0xf085ff6c,%al
f010c43b:	83 e0 1f             	and    $0x1f,%eax
f010c43e:	a2 6c ff 85 f0       	mov    %al,0xf085ff6c
f010c443:	a0 6d ff 85 f0       	mov    0xf085ff6d,%al
f010c448:	83 e0 f0             	and    $0xfffffff0,%eax
f010c44b:	83 c8 0e             	or     $0xe,%eax
f010c44e:	a2 6d ff 85 f0       	mov    %al,0xf085ff6d
f010c453:	a0 6d ff 85 f0       	mov    0xf085ff6d,%al
f010c458:	83 e0 ef             	and    $0xffffffef,%eax
f010c45b:	a2 6d ff 85 f0       	mov    %al,0xf085ff6d
f010c460:	a0 6d ff 85 f0       	mov    0xf085ff6d,%al
f010c465:	83 c8 60             	or     $0x60,%eax
f010c468:	a2 6d ff 85 f0       	mov    %al,0xf085ff6d
f010c46d:	a0 6d ff 85 f0       	mov    0xf085ff6d,%al
f010c472:	83 c8 80             	or     $0xffffff80,%eax
f010c475:	a2 6d ff 85 f0       	mov    %al,0xf085ff6d
f010c47a:	b8 e2 ce 10 f0       	mov    $0xf010cee2,%eax
f010c47f:	c1 e8 10             	shr    $0x10,%eax
f010c482:	66 a3 6e ff 85 f0    	mov    %ax,0xf085ff6e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c488:	b8 e8 ce 10 f0       	mov    $0xf010cee8,%eax
f010c48d:	66 a3 70 ff 85 f0    	mov    %ax,0xf085ff70
f010c493:	66 c7 05 72 ff 85 f0 	movw   $0x8,0xf085ff72
f010c49a:	08 00 
f010c49c:	a0 74 ff 85 f0       	mov    0xf085ff74,%al
f010c4a1:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4a4:	a2 74 ff 85 f0       	mov    %al,0xf085ff74
f010c4a9:	a0 74 ff 85 f0       	mov    0xf085ff74,%al
f010c4ae:	83 e0 1f             	and    $0x1f,%eax
f010c4b1:	a2 74 ff 85 f0       	mov    %al,0xf085ff74
f010c4b6:	a0 75 ff 85 f0       	mov    0xf085ff75,%al
f010c4bb:	83 e0 f0             	and    $0xfffffff0,%eax
f010c4be:	83 c8 0e             	or     $0xe,%eax
f010c4c1:	a2 75 ff 85 f0       	mov    %al,0xf085ff75
f010c4c6:	a0 75 ff 85 f0       	mov    0xf085ff75,%al
f010c4cb:	83 e0 ef             	and    $0xffffffef,%eax
f010c4ce:	a2 75 ff 85 f0       	mov    %al,0xf085ff75
f010c4d3:	a0 75 ff 85 f0       	mov    0xf085ff75,%al
f010c4d8:	83 c8 60             	or     $0x60,%eax
f010c4db:	a2 75 ff 85 f0       	mov    %al,0xf085ff75
f010c4e0:	a0 75 ff 85 f0       	mov    0xf085ff75,%al
f010c4e5:	83 c8 80             	or     $0xffffff80,%eax
f010c4e8:	a2 75 ff 85 f0       	mov    %al,0xf085ff75
f010c4ed:	b8 e8 ce 10 f0       	mov    $0xf010cee8,%eax
f010c4f2:	c1 e8 10             	shr    $0x10,%eax
f010c4f5:	66 a3 76 ff 85 f0    	mov    %ax,0xf085ff76
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c4fb:	b8 ee ce 10 f0       	mov    $0xf010ceee,%eax
f010c500:	66 a3 78 ff 85 f0    	mov    %ax,0xf085ff78
f010c506:	66 c7 05 7a ff 85 f0 	movw   $0x8,0xf085ff7a
f010c50d:	08 00 
f010c50f:	a0 7c ff 85 f0       	mov    0xf085ff7c,%al
f010c514:	83 e0 e0             	and    $0xffffffe0,%eax
f010c517:	a2 7c ff 85 f0       	mov    %al,0xf085ff7c
f010c51c:	a0 7c ff 85 f0       	mov    0xf085ff7c,%al
f010c521:	83 e0 1f             	and    $0x1f,%eax
f010c524:	a2 7c ff 85 f0       	mov    %al,0xf085ff7c
f010c529:	a0 7d ff 85 f0       	mov    0xf085ff7d,%al
f010c52e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c531:	83 c8 0e             	or     $0xe,%eax
f010c534:	a2 7d ff 85 f0       	mov    %al,0xf085ff7d
f010c539:	a0 7d ff 85 f0       	mov    0xf085ff7d,%al
f010c53e:	83 e0 ef             	and    $0xffffffef,%eax
f010c541:	a2 7d ff 85 f0       	mov    %al,0xf085ff7d
f010c546:	a0 7d ff 85 f0       	mov    0xf085ff7d,%al
f010c54b:	83 c8 60             	or     $0x60,%eax
f010c54e:	a2 7d ff 85 f0       	mov    %al,0xf085ff7d
f010c553:	a0 7d ff 85 f0       	mov    0xf085ff7d,%al
f010c558:	83 c8 80             	or     $0xffffff80,%eax
f010c55b:	a2 7d ff 85 f0       	mov    %al,0xf085ff7d
f010c560:	b8 ee ce 10 f0       	mov    $0xf010ceee,%eax
f010c565:	c1 e8 10             	shr    $0x10,%eax
f010c568:	66 a3 7e ff 85 f0    	mov    %ax,0xf085ff7e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c56e:	b8 f4 ce 10 f0       	mov    $0xf010cef4,%eax
f010c573:	66 a3 80 ff 85 f0    	mov    %ax,0xf085ff80
f010c579:	66 c7 05 82 ff 85 f0 	movw   $0x8,0xf085ff82
f010c580:	08 00 
f010c582:	a0 84 ff 85 f0       	mov    0xf085ff84,%al
f010c587:	83 e0 e0             	and    $0xffffffe0,%eax
f010c58a:	a2 84 ff 85 f0       	mov    %al,0xf085ff84
f010c58f:	a0 84 ff 85 f0       	mov    0xf085ff84,%al
f010c594:	83 e0 1f             	and    $0x1f,%eax
f010c597:	a2 84 ff 85 f0       	mov    %al,0xf085ff84
f010c59c:	a0 85 ff 85 f0       	mov    0xf085ff85,%al
f010c5a1:	83 e0 f0             	and    $0xfffffff0,%eax
f010c5a4:	83 c8 0e             	or     $0xe,%eax
f010c5a7:	a2 85 ff 85 f0       	mov    %al,0xf085ff85
f010c5ac:	a0 85 ff 85 f0       	mov    0xf085ff85,%al
f010c5b1:	83 e0 ef             	and    $0xffffffef,%eax
f010c5b4:	a2 85 ff 85 f0       	mov    %al,0xf085ff85
f010c5b9:	a0 85 ff 85 f0       	mov    0xf085ff85,%al
f010c5be:	83 c8 60             	or     $0x60,%eax
f010c5c1:	a2 85 ff 85 f0       	mov    %al,0xf085ff85
f010c5c6:	a0 85 ff 85 f0       	mov    0xf085ff85,%al
f010c5cb:	83 c8 80             	or     $0xffffff80,%eax
f010c5ce:	a2 85 ff 85 f0       	mov    %al,0xf085ff85
f010c5d3:	b8 f4 ce 10 f0       	mov    $0xf010cef4,%eax
f010c5d8:	c1 e8 10             	shr    $0x10,%eax
f010c5db:	66 a3 86 ff 85 f0    	mov    %ax,0xf085ff86
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c5e1:	b8 fa ce 10 f0       	mov    $0xf010cefa,%eax
f010c5e6:	66 a3 88 ff 85 f0    	mov    %ax,0xf085ff88
f010c5ec:	66 c7 05 8a ff 85 f0 	movw   $0x8,0xf085ff8a
f010c5f3:	08 00 
f010c5f5:	a0 8c ff 85 f0       	mov    0xf085ff8c,%al
f010c5fa:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5fd:	a2 8c ff 85 f0       	mov    %al,0xf085ff8c
f010c602:	a0 8c ff 85 f0       	mov    0xf085ff8c,%al
f010c607:	83 e0 1f             	and    $0x1f,%eax
f010c60a:	a2 8c ff 85 f0       	mov    %al,0xf085ff8c
f010c60f:	a0 8d ff 85 f0       	mov    0xf085ff8d,%al
f010c614:	83 e0 f0             	and    $0xfffffff0,%eax
f010c617:	83 c8 0e             	or     $0xe,%eax
f010c61a:	a2 8d ff 85 f0       	mov    %al,0xf085ff8d
f010c61f:	a0 8d ff 85 f0       	mov    0xf085ff8d,%al
f010c624:	83 e0 ef             	and    $0xffffffef,%eax
f010c627:	a2 8d ff 85 f0       	mov    %al,0xf085ff8d
f010c62c:	a0 8d ff 85 f0       	mov    0xf085ff8d,%al
f010c631:	83 c8 60             	or     $0x60,%eax
f010c634:	a2 8d ff 85 f0       	mov    %al,0xf085ff8d
f010c639:	a0 8d ff 85 f0       	mov    0xf085ff8d,%al
f010c63e:	83 c8 80             	or     $0xffffff80,%eax
f010c641:	a2 8d ff 85 f0       	mov    %al,0xf085ff8d
f010c646:	b8 fa ce 10 f0       	mov    $0xf010cefa,%eax
f010c64b:	c1 e8 10             	shr    $0x10,%eax
f010c64e:	66 a3 8e ff 85 f0    	mov    %ax,0xf085ff8e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c654:	b8 00 cf 10 f0       	mov    $0xf010cf00,%eax
f010c659:	66 a3 90 ff 85 f0    	mov    %ax,0xf085ff90
f010c65f:	66 c7 05 92 ff 85 f0 	movw   $0x8,0xf085ff92
f010c666:	08 00 
f010c668:	a0 94 ff 85 f0       	mov    0xf085ff94,%al
f010c66d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c670:	a2 94 ff 85 f0       	mov    %al,0xf085ff94
f010c675:	a0 94 ff 85 f0       	mov    0xf085ff94,%al
f010c67a:	83 e0 1f             	and    $0x1f,%eax
f010c67d:	a2 94 ff 85 f0       	mov    %al,0xf085ff94
f010c682:	a0 95 ff 85 f0       	mov    0xf085ff95,%al
f010c687:	83 e0 f0             	and    $0xfffffff0,%eax
f010c68a:	83 c8 0e             	or     $0xe,%eax
f010c68d:	a2 95 ff 85 f0       	mov    %al,0xf085ff95
f010c692:	a0 95 ff 85 f0       	mov    0xf085ff95,%al
f010c697:	83 e0 ef             	and    $0xffffffef,%eax
f010c69a:	a2 95 ff 85 f0       	mov    %al,0xf085ff95
f010c69f:	a0 95 ff 85 f0       	mov    0xf085ff95,%al
f010c6a4:	83 c8 60             	or     $0x60,%eax
f010c6a7:	a2 95 ff 85 f0       	mov    %al,0xf085ff95
f010c6ac:	a0 95 ff 85 f0       	mov    0xf085ff95,%al
f010c6b1:	83 c8 80             	or     $0xffffff80,%eax
f010c6b4:	a2 95 ff 85 f0       	mov    %al,0xf085ff95
f010c6b9:	b8 00 cf 10 f0       	mov    $0xf010cf00,%eax
f010c6be:	c1 e8 10             	shr    $0x10,%eax
f010c6c1:	66 a3 96 ff 85 f0    	mov    %ax,0xf085ff96
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c6c7:	b8 06 cf 10 f0       	mov    $0xf010cf06,%eax
f010c6cc:	66 a3 98 ff 85 f0    	mov    %ax,0xf085ff98
f010c6d2:	66 c7 05 9a ff 85 f0 	movw   $0x8,0xf085ff9a
f010c6d9:	08 00 
f010c6db:	a0 9c ff 85 f0       	mov    0xf085ff9c,%al
f010c6e0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c6e3:	a2 9c ff 85 f0       	mov    %al,0xf085ff9c
f010c6e8:	a0 9c ff 85 f0       	mov    0xf085ff9c,%al
f010c6ed:	83 e0 1f             	and    $0x1f,%eax
f010c6f0:	a2 9c ff 85 f0       	mov    %al,0xf085ff9c
f010c6f5:	a0 9d ff 85 f0       	mov    0xf085ff9d,%al
f010c6fa:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6fd:	83 c8 0e             	or     $0xe,%eax
f010c700:	a2 9d ff 85 f0       	mov    %al,0xf085ff9d
f010c705:	a0 9d ff 85 f0       	mov    0xf085ff9d,%al
f010c70a:	83 e0 ef             	and    $0xffffffef,%eax
f010c70d:	a2 9d ff 85 f0       	mov    %al,0xf085ff9d
f010c712:	a0 9d ff 85 f0       	mov    0xf085ff9d,%al
f010c717:	83 c8 60             	or     $0x60,%eax
f010c71a:	a2 9d ff 85 f0       	mov    %al,0xf085ff9d
f010c71f:	a0 9d ff 85 f0       	mov    0xf085ff9d,%al
f010c724:	83 c8 80             	or     $0xffffff80,%eax
f010c727:	a2 9d ff 85 f0       	mov    %al,0xf085ff9d
f010c72c:	b8 06 cf 10 f0       	mov    $0xf010cf06,%eax
f010c731:	c1 e8 10             	shr    $0x10,%eax
f010c734:	66 a3 9e ff 85 f0    	mov    %ax,0xf085ff9e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c73a:	c7 05 44 06 86 f0 00 	movl   $0xefc00000,0xf0860644
f010c741:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c744:	66 c7 05 48 06 86 f0 	movw   $0x10,0xf0860648
f010c74b:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c74d:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c754:	68 00 
f010c756:	b8 40 06 86 f0       	mov    $0xf0860640,%eax
f010c75b:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c761:	b8 40 06 86 f0       	mov    $0xf0860640,%eax
f010c766:	c1 e8 10             	shr    $0x10,%eax
f010c769:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c76e:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c773:	83 e0 f0             	and    $0xfffffff0,%eax
f010c776:	83 c8 09             	or     $0x9,%eax
f010c779:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c77e:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c783:	83 c8 10             	or     $0x10,%eax
f010c786:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c78b:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c790:	83 e0 9f             	and    $0xffffff9f,%eax
f010c793:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c798:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c79d:	83 c8 80             	or     $0xffffff80,%eax
f010c7a0:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7a5:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7aa:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7ad:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7b2:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7b7:	83 e0 ef             	and    $0xffffffef,%eax
f010c7ba:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7bf:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7c4:	83 e0 df             	and    $0xffffffdf,%eax
f010c7c7:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7cc:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7d1:	83 c8 40             	or     $0x40,%eax
f010c7d4:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7d9:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7de:	83 e0 7f             	and    $0x7f,%eax
f010c7e1:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7e6:	b8 40 06 86 f0       	mov    $0xf0860640,%eax
f010c7eb:	c1 e8 18             	shr    $0x18,%eax
f010c7ee:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c7f3:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7f8:	83 e0 ef             	and    $0xffffffef,%eax
f010c7fb:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c800:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c806:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c80a:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c80d:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c814:	90                   	nop
f010c815:	c9                   	leave  
f010c816:	c3                   	ret    

f010c817 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c817:	55                   	push   %ebp
f010c818:	89 e5                	mov    %esp,%ebp
f010c81a:	53                   	push   %ebx
f010c81b:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c81e:	83 ec 08             	sub    $0x8,%esp
f010c821:	ff 75 08             	pushl  0x8(%ebp)
f010c824:	68 7b 77 13 f0       	push   $0xf013777b
f010c829:	e8 e0 44 ff ff       	call   f0100d0e <cprintf>
f010c82e:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c831:	8b 45 08             	mov    0x8(%ebp),%eax
f010c834:	83 ec 0c             	sub    $0xc,%esp
f010c837:	50                   	push   %eax
f010c838:	e8 fd 00 00 00       	call   f010c93a <print_regs>
f010c83d:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c840:	8b 45 08             	mov    0x8(%ebp),%eax
f010c843:	8b 40 20             	mov    0x20(%eax),%eax
f010c846:	0f b7 c0             	movzwl %ax,%eax
f010c849:	83 ec 08             	sub    $0x8,%esp
f010c84c:	50                   	push   %eax
f010c84d:	68 8d 77 13 f0       	push   $0xf013778d
f010c852:	e8 b7 44 ff ff       	call   f0100d0e <cprintf>
f010c857:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c85a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c85d:	8b 40 24             	mov    0x24(%eax),%eax
f010c860:	0f b7 c0             	movzwl %ax,%eax
f010c863:	83 ec 08             	sub    $0x8,%esp
f010c866:	50                   	push   %eax
f010c867:	68 a0 77 13 f0       	push   $0xf01377a0
f010c86c:	e8 9d 44 ff ff       	call   f0100d0e <cprintf>
f010c871:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c874:	8b 45 08             	mov    0x8(%ebp),%eax
f010c877:	8b 58 28             	mov    0x28(%eax),%ebx
f010c87a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c87d:	8b 40 28             	mov    0x28(%eax),%eax
f010c880:	83 ec 0c             	sub    $0xc,%esp
f010c883:	50                   	push   %eax
f010c884:	e8 d0 ee ff ff       	call   f010b759 <trapname>
f010c889:	83 c4 10             	add    $0x10,%esp
f010c88c:	89 c2                	mov    %eax,%edx
f010c88e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c891:	8b 40 28             	mov    0x28(%eax),%eax
f010c894:	53                   	push   %ebx
f010c895:	52                   	push   %edx
f010c896:	50                   	push   %eax
f010c897:	68 b3 77 13 f0       	push   $0xf01377b3
f010c89c:	e8 6d 44 ff ff       	call   f0100d0e <cprintf>
f010c8a1:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c8a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a7:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c8aa:	83 ec 08             	sub    $0x8,%esp
f010c8ad:	50                   	push   %eax
f010c8ae:	68 ca 77 13 f0       	push   $0xf01377ca
f010c8b3:	e8 56 44 ff ff       	call   f0100d0e <cprintf>
f010c8b8:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c8bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8be:	8b 40 30             	mov    0x30(%eax),%eax
f010c8c1:	83 ec 08             	sub    $0x8,%esp
f010c8c4:	50                   	push   %eax
f010c8c5:	68 d9 77 13 f0       	push   $0xf01377d9
f010c8ca:	e8 3f 44 ff ff       	call   f0100d0e <cprintf>
f010c8cf:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c8d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8d5:	8b 40 34             	mov    0x34(%eax),%eax
f010c8d8:	0f b7 c0             	movzwl %ax,%eax
f010c8db:	83 ec 08             	sub    $0x8,%esp
f010c8de:	50                   	push   %eax
f010c8df:	68 e8 77 13 f0       	push   $0xf01377e8
f010c8e4:	e8 25 44 ff ff       	call   f0100d0e <cprintf>
f010c8e9:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c8ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ef:	8b 40 38             	mov    0x38(%eax),%eax
f010c8f2:	83 ec 08             	sub    $0x8,%esp
f010c8f5:	50                   	push   %eax
f010c8f6:	68 fb 77 13 f0       	push   $0xf01377fb
f010c8fb:	e8 0e 44 ff ff       	call   f0100d0e <cprintf>
f010c900:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c903:	8b 45 08             	mov    0x8(%ebp),%eax
f010c906:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c909:	83 ec 08             	sub    $0x8,%esp
f010c90c:	50                   	push   %eax
f010c90d:	68 0a 78 13 f0       	push   $0xf013780a
f010c912:	e8 f7 43 ff ff       	call   f0100d0e <cprintf>
f010c917:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c91a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c91d:	8b 40 40             	mov    0x40(%eax),%eax
f010c920:	0f b7 c0             	movzwl %ax,%eax
f010c923:	83 ec 08             	sub    $0x8,%esp
f010c926:	50                   	push   %eax
f010c927:	68 19 78 13 f0       	push   $0xf0137819
f010c92c:	e8 dd 43 ff ff       	call   f0100d0e <cprintf>
f010c931:	83 c4 10             	add    $0x10,%esp
}
f010c934:	90                   	nop
f010c935:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c938:	c9                   	leave  
f010c939:	c3                   	ret    

f010c93a <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c93a:	55                   	push   %ebp
f010c93b:	89 e5                	mov    %esp,%ebp
f010c93d:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c940:	8b 45 08             	mov    0x8(%ebp),%eax
f010c943:	8b 00                	mov    (%eax),%eax
f010c945:	83 ec 08             	sub    $0x8,%esp
f010c948:	50                   	push   %eax
f010c949:	68 2c 78 13 f0       	push   $0xf013782c
f010c94e:	e8 bb 43 ff ff       	call   f0100d0e <cprintf>
f010c953:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c956:	8b 45 08             	mov    0x8(%ebp),%eax
f010c959:	8b 40 04             	mov    0x4(%eax),%eax
f010c95c:	83 ec 08             	sub    $0x8,%esp
f010c95f:	50                   	push   %eax
f010c960:	68 3b 78 13 f0       	push   $0xf013783b
f010c965:	e8 a4 43 ff ff       	call   f0100d0e <cprintf>
f010c96a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c96d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c970:	8b 40 08             	mov    0x8(%eax),%eax
f010c973:	83 ec 08             	sub    $0x8,%esp
f010c976:	50                   	push   %eax
f010c977:	68 4a 78 13 f0       	push   $0xf013784a
f010c97c:	e8 8d 43 ff ff       	call   f0100d0e <cprintf>
f010c981:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c984:	8b 45 08             	mov    0x8(%ebp),%eax
f010c987:	8b 40 0c             	mov    0xc(%eax),%eax
f010c98a:	83 ec 08             	sub    $0x8,%esp
f010c98d:	50                   	push   %eax
f010c98e:	68 59 78 13 f0       	push   $0xf0137859
f010c993:	e8 76 43 ff ff       	call   f0100d0e <cprintf>
f010c998:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c99b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c99e:	8b 40 10             	mov    0x10(%eax),%eax
f010c9a1:	83 ec 08             	sub    $0x8,%esp
f010c9a4:	50                   	push   %eax
f010c9a5:	68 68 78 13 f0       	push   $0xf0137868
f010c9aa:	e8 5f 43 ff ff       	call   f0100d0e <cprintf>
f010c9af:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c9b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9b5:	8b 40 14             	mov    0x14(%eax),%eax
f010c9b8:	83 ec 08             	sub    $0x8,%esp
f010c9bb:	50                   	push   %eax
f010c9bc:	68 77 78 13 f0       	push   $0xf0137877
f010c9c1:	e8 48 43 ff ff       	call   f0100d0e <cprintf>
f010c9c6:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c9c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9cc:	8b 40 18             	mov    0x18(%eax),%eax
f010c9cf:	83 ec 08             	sub    $0x8,%esp
f010c9d2:	50                   	push   %eax
f010c9d3:	68 86 78 13 f0       	push   $0xf0137886
f010c9d8:	e8 31 43 ff ff       	call   f0100d0e <cprintf>
f010c9dd:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c9e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9e3:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c9e6:	83 ec 08             	sub    $0x8,%esp
f010c9e9:	50                   	push   %eax
f010c9ea:	68 95 78 13 f0       	push   $0xf0137895
f010c9ef:	e8 1a 43 ff ff       	call   f0100d0e <cprintf>
f010c9f4:	83 c4 10             	add    $0x10,%esp
}
f010c9f7:	90                   	nop
f010c9f8:	c9                   	leave  
f010c9f9:	c3                   	ret    

f010c9fa <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c9fa:	55                   	push   %ebp
f010c9fb:	89 e5                	mov    %esp,%ebp
f010c9fd:	57                   	push   %edi
f010c9fe:	56                   	push   %esi
f010c9ff:	53                   	push   %ebx
f010ca00:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010ca03:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca06:	8b 40 28             	mov    0x28(%eax),%eax
f010ca09:	83 f8 0e             	cmp    $0xe,%eax
f010ca0c:	75 29                	jne    f010ca37 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010ca0e:	83 ec 0c             	sub    $0xc,%esp
f010ca11:	6a 01                	push   $0x1
f010ca13:	e8 fb 18 00 00       	call   f010e313 <isPageReplacmentAlgorithmLRU>
f010ca18:	83 c4 10             	add    $0x10,%esp
f010ca1b:	85 c0                	test   %eax,%eax
f010ca1d:	74 05                	je     f010ca24 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010ca1f:	e8 34 90 ff ff       	call   f0105a58 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010ca24:	83 ec 0c             	sub    $0xc,%esp
f010ca27:	ff 75 08             	pushl  0x8(%ebp)
f010ca2a:	e8 51 02 00 00       	call   f010cc80 <fault_handler>
f010ca2f:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010ca32:	e9 bb 00 00 00       	jmp    f010caf2 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010ca37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca3a:	8b 40 28             	mov    0x28(%eax),%eax
f010ca3d:	83 f8 30             	cmp    $0x30,%eax
f010ca40:	75 42                	jne    f010ca84 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010ca42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca45:	8b 78 04             	mov    0x4(%eax),%edi
f010ca48:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca4b:	8b 30                	mov    (%eax),%esi
f010ca4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca50:	8b 58 10             	mov    0x10(%eax),%ebx
f010ca53:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca56:	8b 48 18             	mov    0x18(%eax),%ecx
f010ca59:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca5c:	8b 50 14             	mov    0x14(%eax),%edx
f010ca5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca62:	8b 40 1c             	mov    0x1c(%eax),%eax
f010ca65:	83 ec 08             	sub    $0x8,%esp
f010ca68:	57                   	push   %edi
f010ca69:	56                   	push   %esi
f010ca6a:	53                   	push   %ebx
f010ca6b:	51                   	push   %ecx
f010ca6c:	52                   	push   %edx
f010ca6d:	50                   	push   %eax
f010ca6e:	e8 eb 0f 00 00       	call   f010da5e <syscall>
f010ca73:	83 c4 20             	add    $0x20,%esp
f010ca76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010ca79:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca7c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ca7f:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010ca82:	eb 6e                	jmp    f010caf2 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010ca84:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca87:	8b 40 28             	mov    0x28(%eax),%eax
f010ca8a:	83 f8 08             	cmp    $0x8,%eax
f010ca8d:	75 17                	jne    f010caa6 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010ca8f:	83 ec 04             	sub    $0x4,%esp
f010ca92:	68 a4 78 13 f0       	push   $0xf01378a4
f010ca97:	68 e7 00 00 00       	push   $0xe7
f010ca9c:	68 b3 78 13 f0       	push   $0xf01378b3
f010caa1:	e8 5f 37 ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010caa6:	8b 45 08             	mov    0x8(%ebp),%eax
f010caa9:	8b 40 28             	mov    0x28(%eax),%eax
f010caac:	83 f8 20             	cmp    $0x20,%eax
f010caaf:	75 07                	jne    f010cab8 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010cab1:	e8 81 8f ff ff       	call   f0105a37 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010cab6:	eb 3a                	jmp    f010caf2 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010cab8:	8b 45 08             	mov    0x8(%ebp),%eax
f010cabb:	8b 40 34             	mov    0x34(%eax),%eax
f010cabe:	66 83 f8 08          	cmp    $0x8,%ax
f010cac2:	75 17                	jne    f010cadb <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010cac4:	83 ec 04             	sub    $0x4,%esp
f010cac7:	68 c4 78 13 f0       	push   $0xf01378c4
f010cacc:	68 f4 00 00 00       	push   $0xf4
f010cad1:	68 b3 78 13 f0       	push   $0xf01378b3
f010cad6:	e8 2a 37 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010cadb:	83 ec 04             	sub    $0x4,%esp
f010cade:	68 e0 78 13 f0       	push   $0xf01378e0
f010cae3:	68 f8 00 00 00       	push   $0xf8
f010cae8:	68 b3 78 13 f0       	push   $0xf01378b3
f010caed:	e8 13 37 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010caf2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010caf5:	5b                   	pop    %ebx
f010caf6:	5e                   	pop    %esi
f010caf7:	5f                   	pop    %edi
f010caf8:	5d                   	pop    %ebp
f010caf9:	c3                   	ret    

f010cafa <trap>:

void trap(struct Trapframe *tf)
{
f010cafa:	55                   	push   %ebp
f010cafb:	89 e5                	mov    %esp,%ebp
f010cafd:	57                   	push   %edi
f010cafe:	56                   	push   %esi
f010caff:	53                   	push   %ebx
f010cb00:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010cb03:	e8 b8 76 ff ff       	call   f01041c0 <kclock_stop>

	int userTrap = 0;
f010cb08:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cb0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb12:	8b 40 34             	mov    0x34(%eax),%eax
f010cb15:	0f b7 c0             	movzwl %ax,%eax
f010cb18:	83 e0 03             	and    $0x3,%eax
f010cb1b:	83 f8 03             	cmp    $0x3,%eax
f010cb1e:	75 49                	jne    f010cb69 <trap+0x6f>
		assert(curenv);
f010cb20:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cb25:	85 c0                	test   %eax,%eax
f010cb27:	75 19                	jne    f010cb42 <trap+0x48>
f010cb29:	68 ff 78 13 f0       	push   $0xf01378ff
f010cb2e:	68 06 79 13 f0       	push   $0xf0137906
f010cb33:	68 06 01 00 00       	push   $0x106
f010cb38:	68 b3 78 13 f0       	push   $0xf01378b3
f010cb3d:	e8 c3 36 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010cb42:	8b 15 f4 fd 85 f0    	mov    0xf085fdf4,%edx
f010cb48:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb4b:	89 c3                	mov    %eax,%ebx
f010cb4d:	b8 11 00 00 00       	mov    $0x11,%eax
f010cb52:	89 d7                	mov    %edx,%edi
f010cb54:	89 de                	mov    %ebx,%esi
f010cb56:	89 c1                	mov    %eax,%ecx
f010cb58:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010cb5a:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cb5f:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010cb62:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010cb69:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb6c:	8b 40 28             	mov    0x28(%eax),%eax
f010cb6f:	83 f8 20             	cmp    $0x20,%eax
f010cb72:	75 40                	jne    f010cbb4 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010cb74:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cb78:	0f 84 a6 00 00 00    	je     f010cc24 <trap+0x12a>
		{
			assert(curenv);
f010cb7e:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cb83:	85 c0                	test   %eax,%eax
f010cb85:	75 19                	jne    f010cba0 <trap+0xa6>
f010cb87:	68 ff 78 13 f0       	push   $0xf01378ff
f010cb8c:	68 06 79 13 f0       	push   $0xf0137906
f010cb91:	68 12 01 00 00       	push   $0x112
f010cb96:	68 b3 78 13 f0       	push   $0xf01378b3
f010cb9b:	e8 65 36 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010cba0:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cba5:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010cbab:	42                   	inc    %edx
f010cbac:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010cbb2:	eb 70                	jmp    f010cc24 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010cbb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbb7:	8b 40 28             	mov    0x28(%eax),%eax
f010cbba:	83 f8 0e             	cmp    $0xe,%eax
f010cbbd:	75 65                	jne    f010cc24 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010cbbf:	a0 a8 06 86 f0       	mov    0xf08606a8,%al
f010cbc4:	84 c0                	test   %al,%al
f010cbc6:	74 5c                	je     f010cc24 <trap+0x12a>
			if (userTrap){
f010cbc8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cbcc:	74 2c                	je     f010cbfa <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010cbce:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cbd3:	8b 15 f4 fd 85 f0    	mov    0xf085fdf4,%edx
f010cbd9:	8b 52 30             	mov    0x30(%edx),%edx
f010cbdc:	89 d1                	mov    %edx,%ecx
f010cbde:	8a 15 a8 06 86 f0    	mov    0xf08606a8,%dl
f010cbe4:	0f b6 d2             	movzbl %dl,%edx
f010cbe7:	01 ca                	add    %ecx,%edx
f010cbe9:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010cbec:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cbf1:	83 ec 0c             	sub    $0xc,%esp
f010cbf4:	50                   	push   %eax
f010cbf5:	e8 43 d4 ff ff       	call   f010a03d <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010cbfa:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbfd:	8b 40 30             	mov    0x30(%eax),%eax
f010cc00:	89 c2                	mov    %eax,%edx
f010cc02:	a0 a8 06 86 f0       	mov    0xf08606a8,%al
f010cc07:	0f b6 c0             	movzbl %al,%eax
f010cc0a:	01 d0                	add    %edx,%eax
f010cc0c:	89 c2                	mov    %eax,%edx
f010cc0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc11:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010cc14:	e8 d2 75 ff ff       	call   f01041eb <kclock_resume>
				env_pop_tf(tf);
f010cc19:	83 ec 0c             	sub    $0xc,%esp
f010cc1c:	ff 75 08             	pushl  0x8(%ebp)
f010cc1f:	e8 7c d5 ff ff       	call   f010a1a0 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010cc24:	83 ec 0c             	sub    $0xc,%esp
f010cc27:	ff 75 08             	pushl  0x8(%ebp)
f010cc2a:	e8 cb fd ff ff       	call   f010c9fa <trap_dispatch>
f010cc2f:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010cc32:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cc36:	74 3d                	je     f010cc75 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010cc38:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cc3d:	85 c0                	test   %eax,%eax
f010cc3f:	74 0d                	je     f010cc4e <trap+0x154>
f010cc41:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cc46:	8b 40 54             	mov    0x54(%eax),%eax
f010cc49:	83 f8 02             	cmp    $0x2,%eax
f010cc4c:	74 19                	je     f010cc67 <trap+0x16d>
f010cc4e:	68 1c 79 13 f0       	push   $0xf013791c
f010cc53:	68 06 79 13 f0       	push   $0xf0137906
f010cc58:	68 27 01 00 00       	push   $0x127
f010cc5d:	68 b3 78 13 f0       	push   $0xf01378b3
f010cc62:	e8 9e 35 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010cc67:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cc6c:	83 ec 0c             	sub    $0xc,%esp
f010cc6f:	50                   	push   %eax
f010cc70:	e8 c8 d3 ff ff       	call   f010a03d <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010cc75:	83 ec 0c             	sub    $0xc,%esp
f010cc78:	ff 75 08             	pushl  0x8(%ebp)
f010cc7b:	e8 20 d5 ff ff       	call   f010a1a0 <env_pop_tf>

f010cc80 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010cc80:	55                   	push   %ebp
f010cc81:	89 e5                	mov    %esp,%ebp
f010cc83:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010cc86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cc8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc90:	8b 40 34             	mov    0x34(%eax),%eax
f010cc93:	0f b7 c0             	movzwl %ax,%eax
f010cc96:	83 e0 03             	and    $0x3,%eax
f010cc99:	83 f8 03             	cmp    $0x3,%eax
f010cc9c:	75 07                	jne    f010cca5 <fault_handler+0x25>
		userTrap = 1;
f010cc9e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cca5:	0f 20 d0             	mov    %cr2,%eax
f010cca8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010ccab:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010ccae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010ccb1:	a1 20 06 86 f0       	mov    0xf0860620,%eax
f010ccb6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ccb9:	75 2b                	jne    f010cce6 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010ccbb:	a0 24 06 86 f0       	mov    0xf0860624,%al
f010ccc0:	40                   	inc    %eax
f010ccc1:	a2 24 06 86 f0       	mov    %al,0xf0860624
		if (num_repeated_fault == 3)
f010ccc6:	a0 24 06 86 f0       	mov    0xf0860624,%al
f010cccb:	3c 03                	cmp    $0x3,%al
f010cccd:	75 1e                	jne    f010cced <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010cccf:	ff 75 ec             	pushl  -0x14(%ebp)
f010ccd2:	68 4c 79 13 f0       	push   $0xf013794c
f010ccd7:	68 47 01 00 00       	push   $0x147
f010ccdc:	68 b3 78 13 f0       	push   $0xf01378b3
f010cce1:	e8 1f 35 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010cce6:	c6 05 24 06 86 f0 00 	movb   $0x0,0xf0860624
	}
	last_fault_va = fault_va ;
f010cced:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ccf0:	a3 20 06 86 f0       	mov    %eax,0xf0860620
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010ccf5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ccf9:	75 29                	jne    f010cd24 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010ccfb:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010cd02:	77 40                	ja     f010cd44 <fault_handler+0xc4>
f010cd04:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010cd0b:	76 37                	jbe    f010cd44 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010cd0d:	83 ec 04             	sub    $0x4,%esp
f010cd10:	68 98 79 13 f0       	push   $0xf0137998
f010cd15:	68 53 01 00 00       	push   $0x153
f010cd1a:	68 b3 78 13 f0       	push   $0xf01378b3
f010cd1f:	e8 e1 34 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010cd24:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010cd2b:	76 17                	jbe    f010cd44 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010cd2d:	83 ec 04             	sub    $0x4,%esp
f010cd30:	68 bc 79 13 f0       	push   $0xf01379bc
f010cd35:	68 59 01 00 00       	push   $0x159
f010cd3a:	68 b3 78 13 f0       	push   $0xf01378b3
f010cd3f:	e8 c1 34 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010cd44:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cd49:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010cd4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd4f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd52:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cd55:	c1 ea 16             	shr    $0x16,%edx
f010cd58:	c1 e2 02             	shl    $0x2,%edx
f010cd5b:	01 d0                	add    %edx,%eax
f010cd5d:	8b 00                	mov    (%eax),%eax
f010cd5f:	83 e0 01             	and    $0x1,%eax
f010cd62:	85 c0                	test   %eax,%eax
f010cd64:	75 28                	jne    f010cd8e <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010cd66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd69:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010cd6f:	8d 50 01             	lea    0x1(%eax),%edx
f010cd72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd75:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cd7b:	83 ec 08             	sub    $0x8,%esp
f010cd7e:	ff 75 ec             	pushl  -0x14(%ebp)
f010cd81:	ff 75 e8             	pushl  -0x18(%ebp)
f010cd84:	e8 6f 16 00 00       	call   f010e3f8 <table_fault_handler>
f010cd89:	83 c4 10             	add    $0x10,%esp
f010cd8c:	eb 7b                	jmp    f010ce09 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cd8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd91:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd94:	83 ec 08             	sub    $0x8,%esp
f010cd97:	ff 75 ec             	pushl  -0x14(%ebp)
f010cd9a:	50                   	push   %eax
f010cd9b:	e8 38 b0 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f010cda0:	83 c4 10             	add    $0x10,%esp
f010cda3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cda6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cda9:	83 e0 01             	and    $0x1,%eax
f010cdac:	85 c0                	test   %eax,%eax
f010cdae:	74 17                	je     f010cdc7 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cdb0:	ff 75 ec             	pushl  -0x14(%ebp)
f010cdb3:	68 e0 79 13 f0       	push   $0xf01379e0
f010cdb8:	68 6e 01 00 00       	push   $0x16e
f010cdbd:	68 b3 78 13 f0       	push   $0xf01378b3
f010cdc2:	e8 3e 34 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010cdc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdca:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010cdd0:	8d 50 01             	lea    0x1(%eax),%edx
f010cdd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdd6:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010cddc:	e8 f5 15 00 00       	call   f010e3d6 <isBufferingEnabled>
f010cde1:	84 c0                	test   %al,%al
f010cde3:	74 13                	je     f010cdf8 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010cde5:	83 ec 08             	sub    $0x8,%esp
f010cde8:	ff 75 ec             	pushl  -0x14(%ebp)
f010cdeb:	ff 75 e8             	pushl  -0x18(%ebp)
f010cdee:	e8 9d 19 00 00       	call   f010e790 <__page_fault_handler_with_buffering>
f010cdf3:	83 c4 10             	add    $0x10,%esp
f010cdf6:	eb 11                	jmp    f010ce09 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cdf8:	83 ec 08             	sub    $0x8,%esp
f010cdfb:	ff 75 ec             	pushl  -0x14(%ebp)
f010cdfe:	ff 75 e8             	pushl  -0x18(%ebp)
f010ce01:	e8 13 16 00 00       	call   f010e419 <page_fault_handler>
f010ce06:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ce09:	0f 20 d8             	mov    %cr3,%eax
f010ce0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ce0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce12:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010ce15:	90                   	nop
f010ce16:	c9                   	leave  
f010ce17:	c3                   	ret    

f010ce18 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010ce18:	6a 0e                	push   $0xe
f010ce1a:	e9 ed 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce1f:	90                   	nop

f010ce20 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010ce20:	6a 00                	push   $0x0
f010ce22:	6a 30                	push   $0x30
f010ce24:	e9 e3 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce29:	90                   	nop

f010ce2a <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010ce2a:	6a 08                	push   $0x8
f010ce2c:	e9 db 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce31:	90                   	nop

f010ce32 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010ce32:	6a 00                	push   $0x0
f010ce34:	6a 00                	push   $0x0
f010ce36:	e9 d1 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce3b:	90                   	nop

f010ce3c <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010ce3c:	6a 00                	push   $0x0
f010ce3e:	6a 01                	push   $0x1
f010ce40:	e9 c7 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce45:	90                   	nop

f010ce46 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010ce46:	6a 00                	push   $0x0
f010ce48:	6a 02                	push   $0x2
f010ce4a:	e9 bd 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce4f:	90                   	nop

f010ce50 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010ce50:	6a 00                	push   $0x0
f010ce52:	6a 03                	push   $0x3
f010ce54:	e9 b3 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce59:	90                   	nop

f010ce5a <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010ce5a:	6a 00                	push   $0x0
f010ce5c:	6a 04                	push   $0x4
f010ce5e:	e9 a9 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce63:	90                   	nop

f010ce64 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010ce64:	6a 00                	push   $0x0
f010ce66:	6a 05                	push   $0x5
f010ce68:	e9 9f 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce6d:	90                   	nop

f010ce6e <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010ce6e:	6a 00                	push   $0x0
f010ce70:	6a 06                	push   $0x6
f010ce72:	e9 95 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce77:	90                   	nop

f010ce78 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010ce78:	6a 00                	push   $0x0
f010ce7a:	6a 07                	push   $0x7
f010ce7c:	e9 8b 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce81:	90                   	nop

f010ce82 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010ce82:	6a 0a                	push   $0xa
f010ce84:	e9 83 00 00 00       	jmp    f010cf0c <_alltraps>
f010ce89:	90                   	nop

f010ce8a <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010ce8a:	6a 0b                	push   $0xb
f010ce8c:	eb 7e                	jmp    f010cf0c <_alltraps>

f010ce8e <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010ce8e:	6a 0c                	push   $0xc
f010ce90:	eb 7a                	jmp    f010cf0c <_alltraps>

f010ce92 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010ce92:	6a 0d                	push   $0xd
f010ce94:	eb 76                	jmp    f010cf0c <_alltraps>

f010ce96 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010ce96:	6a 00                	push   $0x0
f010ce98:	6a 10                	push   $0x10
f010ce9a:	eb 70                	jmp    f010cf0c <_alltraps>

f010ce9c <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010ce9c:	6a 11                	push   $0x11
f010ce9e:	eb 6c                	jmp    f010cf0c <_alltraps>

f010cea0 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cea0:	6a 00                	push   $0x0
f010cea2:	6a 12                	push   $0x12
f010cea4:	eb 66                	jmp    f010cf0c <_alltraps>

f010cea6 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cea6:	6a 00                	push   $0x0
f010cea8:	6a 13                	push   $0x13
f010ceaa:	eb 60                	jmp    f010cf0c <_alltraps>

f010ceac <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010ceac:	6a 00                	push   $0x0
f010ceae:	6a 20                	push   $0x20
f010ceb0:	eb 5a                	jmp    f010cf0c <_alltraps>

f010ceb2 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010ceb2:	6a 00                	push   $0x0
f010ceb4:	6a 21                	push   $0x21
f010ceb6:	eb 54                	jmp    f010cf0c <_alltraps>

f010ceb8 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010ceb8:	6a 00                	push   $0x0
f010ceba:	6a 22                	push   $0x22
f010cebc:	eb 4e                	jmp    f010cf0c <_alltraps>

f010cebe <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cebe:	6a 00                	push   $0x0
f010cec0:	6a 23                	push   $0x23
f010cec2:	eb 48                	jmp    f010cf0c <_alltraps>

f010cec4 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cec4:	6a 00                	push   $0x0
f010cec6:	6a 24                	push   $0x24
f010cec8:	eb 42                	jmp    f010cf0c <_alltraps>

f010ceca <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010ceca:	6a 00                	push   $0x0
f010cecc:	6a 25                	push   $0x25
f010cece:	eb 3c                	jmp    f010cf0c <_alltraps>

f010ced0 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010ced0:	6a 00                	push   $0x0
f010ced2:	6a 26                	push   $0x26
f010ced4:	eb 36                	jmp    f010cf0c <_alltraps>

f010ced6 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010ced6:	6a 00                	push   $0x0
f010ced8:	6a 27                	push   $0x27
f010ceda:	eb 30                	jmp    f010cf0c <_alltraps>

f010cedc <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cedc:	6a 00                	push   $0x0
f010cede:	6a 28                	push   $0x28
f010cee0:	eb 2a                	jmp    f010cf0c <_alltraps>

f010cee2 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cee2:	6a 00                	push   $0x0
f010cee4:	6a 29                	push   $0x29
f010cee6:	eb 24                	jmp    f010cf0c <_alltraps>

f010cee8 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cee8:	6a 00                	push   $0x0
f010ceea:	6a 2a                	push   $0x2a
f010ceec:	eb 1e                	jmp    f010cf0c <_alltraps>

f010ceee <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010ceee:	6a 00                	push   $0x0
f010cef0:	6a 2b                	push   $0x2b
f010cef2:	eb 18                	jmp    f010cf0c <_alltraps>

f010cef4 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cef4:	6a 00                	push   $0x0
f010cef6:	6a 2c                	push   $0x2c
f010cef8:	eb 12                	jmp    f010cf0c <_alltraps>

f010cefa <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cefa:	6a 00                	push   $0x0
f010cefc:	6a 2d                	push   $0x2d
f010cefe:	eb 0c                	jmp    f010cf0c <_alltraps>

f010cf00 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cf00:	6a 00                	push   $0x0
f010cf02:	6a 2e                	push   $0x2e
f010cf04:	eb 06                	jmp    f010cf0c <_alltraps>

f010cf06 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cf06:	6a 00                	push   $0x0
f010cf08:	6a 2f                	push   $0x2f
f010cf0a:	eb 00                	jmp    f010cf0c <_alltraps>

f010cf0c <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cf0c:	1e                   	push   %ds
push %es
f010cf0d:	06                   	push   %es
pushal
f010cf0e:	60                   	pusha  

mov $(GD_KD), %ax
f010cf0f:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cf13:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cf15:	8e c0                	mov    %eax,%es

push %esp
f010cf17:	54                   	push   %esp

call trap
f010cf18:	e8 dd fb ff ff       	call   f010cafa <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cf1d:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cf1e:	61                   	popa   
pop %es
f010cf1f:	07                   	pop    %es
pop %ds
f010cf20:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cf21:	83 c4 08             	add    $0x8,%esp

iret
f010cf24:	cf                   	iret   

f010cf25 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cf25:	55                   	push   %ebp
f010cf26:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cf28:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf2b:	8b 15 50 07 86 f0    	mov    0xf0860750,%edx
f010cf31:	29 d0                	sub    %edx,%eax
f010cf33:	c1 f8 03             	sar    $0x3,%eax
f010cf36:	89 c2                	mov    %eax,%edx
f010cf38:	89 d0                	mov    %edx,%eax
f010cf3a:	c1 e0 02             	shl    $0x2,%eax
f010cf3d:	01 d0                	add    %edx,%eax
f010cf3f:	c1 e0 02             	shl    $0x2,%eax
f010cf42:	01 d0                	add    %edx,%eax
f010cf44:	c1 e0 02             	shl    $0x2,%eax
f010cf47:	01 d0                	add    %edx,%eax
f010cf49:	89 c1                	mov    %eax,%ecx
f010cf4b:	c1 e1 08             	shl    $0x8,%ecx
f010cf4e:	01 c8                	add    %ecx,%eax
f010cf50:	89 c1                	mov    %eax,%ecx
f010cf52:	c1 e1 10             	shl    $0x10,%ecx
f010cf55:	01 c8                	add    %ecx,%eax
f010cf57:	01 c0                	add    %eax,%eax
f010cf59:	01 d0                	add    %edx,%eax
}
f010cf5b:	5d                   	pop    %ebp
f010cf5c:	c3                   	ret    

f010cf5d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cf5d:	55                   	push   %ebp
f010cf5e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cf60:	ff 75 08             	pushl  0x8(%ebp)
f010cf63:	e8 bd ff ff ff       	call   f010cf25 <to_frame_number>
f010cf68:	83 c4 04             	add    $0x4,%esp
f010cf6b:	c1 e0 0c             	shl    $0xc,%eax
}
f010cf6e:	c9                   	leave  
f010cf6f:	c3                   	ret    

f010cf70 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cf70:	55                   	push   %ebp
f010cf71:	89 e5                	mov    %esp,%ebp
f010cf73:	83 ec 18             	sub    $0x18,%esp
f010cf76:	8b 45 10             	mov    0x10(%ebp),%eax
f010cf79:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010cf7c:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010cf80:	74 26                	je     f010cfa8 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010cf82:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010cf87:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf8a:	8b 15 f4 fd 85 f0    	mov    0xf085fdf4,%edx
f010cf90:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010cf96:	83 ec 04             	sub    $0x4,%esp
f010cf99:	50                   	push   %eax
f010cf9a:	52                   	push   %edx
f010cf9b:	68 d0 7b 13 f0       	push   $0xf0137bd0
f010cfa0:	e8 69 3d ff ff       	call   f0100d0e <cprintf>
f010cfa5:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cfa8:	83 ec 04             	sub    $0x4,%esp
f010cfab:	ff 75 08             	pushl  0x8(%ebp)
f010cfae:	ff 75 0c             	pushl  0xc(%ebp)
f010cfb1:	68 d9 7b 13 f0       	push   $0xf0137bd9
f010cfb6:	e8 53 3d ff ff       	call   f0100d0e <cprintf>
f010cfbb:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010cfbe:	90                   	nop
f010cfbf:	c9                   	leave  
f010cfc0:	c3                   	ret    

f010cfc1 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010cfc1:	55                   	push   %ebp
f010cfc2:	89 e5                	mov    %esp,%ebp
f010cfc4:	83 ec 18             	sub    $0x18,%esp
f010cfc7:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfca:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010cfcd:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cfd1:	83 ec 08             	sub    $0x8,%esp
f010cfd4:	50                   	push   %eax
f010cfd5:	68 de 7b 13 f0       	push   $0xf0137bde
f010cfda:	e8 2f 3d ff ff       	call   f0100d0e <cprintf>
f010cfdf:	83 c4 10             	add    $0x10,%esp
}
f010cfe2:	90                   	nop
f010cfe3:	c9                   	leave  
f010cfe4:	c3                   	ret    

f010cfe5 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010cfe5:	55                   	push   %ebp
f010cfe6:	89 e5                	mov    %esp,%ebp
f010cfe8:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010cfeb:	e8 58 3b ff ff       	call   f0100b48 <cons_getc2>
f010cff0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010cff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cff6:	c9                   	leave  
f010cff7:	c3                   	ret    

f010cff8 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010cff8:	55                   	push   %ebp
f010cff9:	89 e5                	mov    %esp,%ebp
f010cffb:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010cffe:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d003:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d006:	83 ec 0c             	sub    $0xc,%esp
f010d009:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d00c:	50                   	push   %eax
f010d00d:	e8 0c 99 ff ff       	call   f010691e <allocate_frame>
f010d012:	83 c4 10             	add    $0x10,%esp
f010d015:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d018:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d01c:	75 08                	jne    f010d026 <__sys_allocate_page+0x2e>
		return r ;
f010d01e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d021:	e9 e9 00 00 00       	jmp    f010d10f <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d026:	8b 45 08             	mov    0x8(%ebp),%eax
f010d029:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d02e:	77 0c                	ja     f010d03c <__sys_allocate_page+0x44>
f010d030:	8b 45 08             	mov    0x8(%ebp),%eax
f010d033:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d038:	85 c0                	test   %eax,%eax
f010d03a:	74 0a                	je     f010d046 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d03c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d041:	e9 c9 00 00 00       	jmp    f010d10f <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d046:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d049:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d04e:	83 f8 04             	cmp    $0x4,%eax
f010d051:	74 0a                	je     f010d05d <__sys_allocate_page+0x65>
		return E_INVAL;
f010d053:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d058:	e9 b2 00 00 00       	jmp    f010d10f <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d05d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d060:	83 ec 0c             	sub    $0xc,%esp
f010d063:	50                   	push   %eax
f010d064:	e8 f4 fe ff ff       	call   f010cf5d <to_physical_address>
f010d069:	83 c4 10             	add    $0x10,%esp
f010d06c:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010d06f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d072:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d075:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d078:	6a 02                	push   $0x2
f010d07a:	68 00 00 80 ef       	push   $0xef800000
f010d07f:	52                   	push   %edx
f010d080:	50                   	push   %eax
f010d081:	e8 e7 9c ff ff       	call   f0106d6d <map_frame>
f010d086:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010d089:	83 ec 04             	sub    $0x4,%esp
f010d08c:	68 00 10 00 00       	push   $0x1000
f010d091:	6a 00                	push   $0x0
f010d093:	68 00 00 80 ef       	push   $0xef800000
f010d098:	e8 41 4b 02 00       	call   f0131bde <memset>
f010d09d:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010d0a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0a6:	8b 40 08             	mov    0x8(%eax),%eax
f010d0a9:	40                   	inc    %eax
f010d0aa:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010d0ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0b1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d0b4:	83 ec 08             	sub    $0x8,%esp
f010d0b7:	68 00 00 80 ef       	push   $0xef800000
f010d0bc:	50                   	push   %eax
f010d0bd:	e8 e0 9d ff ff       	call   f0106ea2 <unmap_frame>
f010d0c2:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010d0c5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0cb:	8b 40 08             	mov    0x8(%eax),%eax
f010d0ce:	48                   	dec    %eax
f010d0cf:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d0d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d0d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0dc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d0df:	ff 75 0c             	pushl  0xc(%ebp)
f010d0e2:	51                   	push   %ecx
f010d0e3:	52                   	push   %edx
f010d0e4:	50                   	push   %eax
f010d0e5:	e8 83 9c ff ff       	call   f0106d6d <map_frame>
f010d0ea:	83 c4 10             	add    $0x10,%esp
f010d0ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d0f0:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d0f4:	75 14                	jne    f010d10a <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010d0f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0f9:	83 ec 0c             	sub    $0xc,%esp
f010d0fc:	50                   	push   %eax
f010d0fd:	e8 ab 99 ff ff       	call   f0106aad <decrement_references>
f010d102:	83 c4 10             	add    $0x10,%esp
		return r;
f010d105:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d108:	eb 05                	jmp    f010d10f <__sys_allocate_page+0x117>
	}
	return 0 ;
f010d10a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d10f:	c9                   	leave  
f010d110:	c3                   	ret    

f010d111 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d111:	55                   	push   %ebp
f010d112:	89 e5                	mov    %esp,%ebp
f010d114:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d117:	83 ec 04             	sub    $0x4,%esp
f010d11a:	68 e1 7b 13 f0       	push   $0xf0137be1
f010d11f:	68 b3 00 00 00       	push   $0xb3
f010d124:	68 ff 7b 13 f0       	push   $0xf0137bff
f010d129:	e8 d7 30 ff ff       	call   f0100205 <_panic>

f010d12e <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d12e:	55                   	push   %ebp
f010d12f:	89 e5                	mov    %esp,%ebp
f010d131:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d134:	83 ec 04             	sub    $0x4,%esp
f010d137:	68 14 7c 13 f0       	push   $0xf0137c14
f010d13c:	68 c3 00 00 00       	push   $0xc3
f010d141:	68 ff 7b 13 f0       	push   $0xf0137bff
f010d146:	e8 ba 30 ff ff       	call   f0100205 <_panic>

f010d14b <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d14b:	55                   	push   %ebp
f010d14c:	89 e5                	mov    %esp,%ebp
f010d14e:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010d151:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d156:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d159:	83 ec 04             	sub    $0x4,%esp
f010d15c:	ff 75 0c             	pushl  0xc(%ebp)
f010d15f:	ff 75 08             	pushl  0x8(%ebp)
f010d162:	50                   	push   %eax
f010d163:	e8 be bf ff ff       	call   f0109126 <calculate_required_frames>
f010d168:	83 c4 10             	add    $0x10,%esp
}
f010d16b:	c9                   	leave  
f010d16c:	c3                   	ret    

f010d16d <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010d16d:	55                   	push   %ebp
f010d16e:	89 e5                	mov    %esp,%ebp
f010d170:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d173:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d176:	83 ec 0c             	sub    $0xc,%esp
f010d179:	50                   	push   %eax
f010d17a:	e8 88 9e ff ff       	call   f0107007 <calculate_available_frames>
f010d17f:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010d182:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d185:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d188:	01 d0                	add    %edx,%eax
}
f010d18a:	c9                   	leave  
f010d18b:	c3                   	ret    

f010d18c <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010d18c:	55                   	push   %ebp
f010d18d:	89 e5                	mov    %esp,%ebp
f010d18f:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d192:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d195:	83 ec 0c             	sub    $0xc,%esp
f010d198:	50                   	push   %eax
f010d199:	e8 69 9e ff ff       	call   f0107007 <calculate_available_frames>
f010d19e:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010d1a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d1a4:	c9                   	leave  
f010d1a5:	c3                   	ret    

f010d1a6 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010d1a6:	55                   	push   %ebp
f010d1a7:	89 e5                	mov    %esp,%ebp
f010d1a9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d1ac:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d1af:	83 ec 0c             	sub    $0xc,%esp
f010d1b2:	50                   	push   %eax
f010d1b3:	e8 4f 9e ff ff       	call   f0107007 <calculate_available_frames>
f010d1b8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010d1bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010d1be:	c9                   	leave  
f010d1bf:	c3                   	ret    

f010d1c0 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010d1c0:	55                   	push   %ebp
f010d1c1:	89 e5                	mov    %esp,%ebp
f010d1c3:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010d1c6:	83 ec 0c             	sub    $0xc,%esp
f010d1c9:	ff 75 08             	pushl  0x8(%ebp)
f010d1cc:	e8 2a 37 02 00       	call   f01308fb <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010d1d1:	83 c4 10             	add    $0x10,%esp
}
f010d1d4:	c9                   	leave  
f010d1d5:	c3                   	ret    

f010d1d6 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010d1d6:	55                   	push   %ebp
f010d1d7:	89 e5                	mov    %esp,%ebp
f010d1d9:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010d1dc:	e8 72 36 02 00       	call   f0130853 <scarce_memory>
}
f010d1e1:	90                   	nop
f010d1e2:	c9                   	leave  
f010d1e3:	c3                   	ret    

f010d1e4 <sys_clearFFL>:

void sys_clearFFL()
{
f010d1e4:	55                   	push   %ebp
f010d1e5:	89 e5                	mov    %esp,%ebp
f010d1e7:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010d1ea:	a1 20 07 86 f0       	mov    0xf0860720,%eax
f010d1ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010d1f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d1f9:	eb 12                	jmp    f010d20d <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010d1fb:	83 ec 0c             	sub    $0xc,%esp
f010d1fe:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d201:	50                   	push   %eax
f010d202:	e8 17 97 ff ff       	call   f010691e <allocate_frame>
f010d207:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d20a:	ff 45 f4             	incl   -0xc(%ebp)
f010d20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d210:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d213:	7c e6                	jl     f010d1fb <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010d215:	90                   	nop
f010d216:	c9                   	leave  
f010d217:	c3                   	ret    

f010d218 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010d218:	55                   	push   %ebp
f010d219:	89 e5                	mov    %esp,%ebp
f010d21b:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010d21e:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d223:	83 ec 0c             	sub    $0xc,%esp
f010d226:	50                   	push   %eax
f010d227:	e8 28 6b ff ff       	call   f0103d54 <pf_calculate_allocated_pages>
f010d22c:	83 c4 10             	add    $0x10,%esp
}
f010d22f:	c9                   	leave  
f010d230:	c3                   	ret    

f010d231 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010d231:	55                   	push   %ebp
f010d232:	89 e5                	mov    %esp,%ebp
f010d234:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010d237:	e8 9a 11 00 00       	call   f010e3d6 <isBufferingEnabled>
f010d23c:	84 c0                	test   %al,%al
f010d23e:	74 19                	je     f010d259 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010d240:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d245:	83 ec 04             	sub    $0x4,%esp
f010d248:	ff 75 0c             	pushl  0xc(%ebp)
f010d24b:	ff 75 08             	pushl  0x8(%ebp)
f010d24e:	50                   	push   %eax
f010d24f:	e8 a6 c1 ff ff       	call   f01093fa <__free_user_mem_with_buffering>
f010d254:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010d257:	eb 18                	jmp    f010d271 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010d259:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d25e:	83 ec 04             	sub    $0x4,%esp
f010d261:	ff 75 0c             	pushl  0xc(%ebp)
f010d264:	ff 75 08             	pushl  0x8(%ebp)
f010d267:	50                   	push   %eax
f010d268:	e8 8a bf ff ff       	call   f01091f7 <free_user_mem>
f010d26d:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010d270:	90                   	nop
}
f010d271:	c9                   	leave  
f010d272:	c3                   	ret    

f010d273 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010d273:	55                   	push   %ebp
f010d274:	89 e5                	mov    %esp,%ebp
f010d276:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010d279:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d27e:	83 ec 04             	sub    $0x4,%esp
f010d281:	ff 75 0c             	pushl  0xc(%ebp)
f010d284:	ff 75 08             	pushl  0x8(%ebp)
f010d287:	50                   	push   %eax
f010d288:	e8 4d bf ff ff       	call   f01091da <allocate_user_mem>
f010d28d:	83 c4 10             	add    $0x10,%esp
	return;
f010d290:	90                   	nop
}
f010d291:	c9                   	leave  
f010d292:	c3                   	ret    

f010d293 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010d293:	55                   	push   %ebp
f010d294:	89 e5                	mov    %esp,%ebp
f010d296:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010d299:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d29e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d2a1:	ff 75 10             	pushl  0x10(%ebp)
f010d2a4:	ff 75 0c             	pushl  0xc(%ebp)
f010d2a7:	ff 75 08             	pushl  0x8(%ebp)
f010d2aa:	50                   	push   %eax
f010d2ab:	e8 dc bb ff ff       	call   f0108e8c <allocate_chunk>
f010d2b0:	83 c4 10             	add    $0x10,%esp
	return;
f010d2b3:	90                   	nop
}
f010d2b4:	c9                   	leave  
f010d2b5:	c3                   	ret    

f010d2b6 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010d2b6:	55                   	push   %ebp
f010d2b7:	89 e5                	mov    %esp,%ebp
f010d2b9:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010d2bc:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d2c1:	ff 75 10             	pushl  0x10(%ebp)
f010d2c4:	ff 75 0c             	pushl  0xc(%ebp)
f010d2c7:	ff 75 08             	pushl  0x8(%ebp)
f010d2ca:	50                   	push   %eax
f010d2cb:	e8 47 c1 ff ff       	call   f0109417 <move_user_mem>
f010d2d0:	83 c4 10             	add    $0x10,%esp
	return;
f010d2d3:	90                   	nop
}
f010d2d4:	c9                   	leave  
f010d2d5:	c3                   	ret    

f010d2d6 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d2d6:	55                   	push   %ebp
f010d2d7:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d2d9:	a1 2c 07 86 f0       	mov    0xf086072c,%eax
}
f010d2de:	5d                   	pop    %ebp
f010d2df:	c3                   	ret    

f010d2e0 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d2e0:	55                   	push   %ebp
f010d2e1:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d2e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2e6:	a3 2c 07 86 f0       	mov    %eax,0xf086072c
}
f010d2eb:	90                   	nop
f010d2ec:	5d                   	pop    %ebp
f010d2ed:	c3                   	ret    

f010d2ee <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d2ee:	55                   	push   %ebp
f010d2ef:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d2f1:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d2f6:	8b 15 f4 fd 85 f0    	mov    0xf085fdf4,%edx
f010d2fc:	8b 52 38             	mov    0x38(%edx),%edx
f010d2ff:	80 e6 fd             	and    $0xfd,%dh
f010d302:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d305:	90                   	nop
f010d306:	5d                   	pop    %ebp
f010d307:	c3                   	ret    

f010d308 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d308:	55                   	push   %ebp
f010d309:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d30b:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d310:	8b 15 f4 fd 85 f0    	mov    0xf085fdf4,%edx
f010d316:	8b 52 38             	mov    0x38(%edx),%edx
f010d319:	80 ce 02             	or     $0x2,%dh
f010d31c:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d31f:	90                   	nop
f010d320:	5d                   	pop    %ebp
f010d321:	c3                   	ret    

f010d322 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d322:	55                   	push   %ebp
f010d323:	89 e5                	mov    %esp,%ebp
f010d325:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d328:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d32d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d330:	83 ec 04             	sub    $0x4,%esp
f010d333:	ff 75 0c             	pushl  0xc(%ebp)
f010d336:	ff 75 08             	pushl  0x8(%ebp)
f010d339:	50                   	push   %eax
f010d33a:	e8 10 18 00 00       	call   f010eb4f <createSemaphore>
f010d33f:	83 c4 10             	add    $0x10,%esp
}
f010d342:	c9                   	leave  
f010d343:	c3                   	ret    

f010d344 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d344:	55                   	push   %ebp
f010d345:	89 e5                	mov    %esp,%ebp
f010d347:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d34a:	83 ec 08             	sub    $0x8,%esp
f010d34d:	ff 75 0c             	pushl  0xc(%ebp)
f010d350:	ff 75 08             	pushl  0x8(%ebp)
f010d353:	e8 c2 18 00 00       	call   f010ec1a <waitSemaphore>
f010d358:	83 c4 10             	add    $0x10,%esp
}
f010d35b:	90                   	nop
f010d35c:	c9                   	leave  
f010d35d:	c3                   	ret    

f010d35e <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d35e:	55                   	push   %ebp
f010d35f:	89 e5                	mov    %esp,%ebp
f010d361:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d364:	83 ec 08             	sub    $0x8,%esp
f010d367:	ff 75 0c             	pushl  0xc(%ebp)
f010d36a:	ff 75 08             	pushl  0x8(%ebp)
f010d36d:	e8 72 19 00 00       	call   f010ece4 <signalSemaphore>
f010d372:	83 c4 10             	add    $0x10,%esp
}
f010d375:	90                   	nop
f010d376:	c9                   	leave  
f010d377:	c3                   	ret    

f010d378 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d378:	55                   	push   %ebp
f010d379:	89 e5                	mov    %esp,%ebp
f010d37b:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d37e:	83 ec 08             	sub    $0x8,%esp
f010d381:	ff 75 0c             	pushl  0xc(%ebp)
f010d384:	ff 75 08             	pushl  0x8(%ebp)
f010d387:	e8 3b 16 00 00       	call   f010e9c7 <get_semaphore_object_ID>
f010d38c:	83 c4 10             	add    $0x10,%esp
f010d38f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d392:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d396:	78 0c                	js     f010d3a4 <sys_getSemaphoreValue+0x2c>
f010d398:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d39b:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010d3a0:	39 c2                	cmp    %eax,%edx
f010d3a2:	72 19                	jb     f010d3bd <sys_getSemaphoreValue+0x45>
f010d3a4:	68 34 7c 13 f0       	push   $0xf0137c34
f010d3a9:	68 59 7c 13 f0       	push   $0xf0137c59
f010d3ae:	68 4a 01 00 00       	push   $0x14a
f010d3b3:	68 ff 7b 13 f0       	push   $0xf0137bff
f010d3b8:	e8 48 2e ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d3bd:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010d3c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3c6:	89 d0                	mov    %edx,%eax
f010d3c8:	c1 e0 02             	shl    $0x2,%eax
f010d3cb:	01 d0                	add    %edx,%eax
f010d3cd:	01 c0                	add    %eax,%eax
f010d3cf:	01 d0                	add    %edx,%eax
f010d3d1:	01 c0                	add    %eax,%eax
f010d3d3:	01 d0                	add    %edx,%eax
f010d3d5:	c1 e0 02             	shl    $0x2,%eax
f010d3d8:	01 c8                	add    %ecx,%eax
f010d3da:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d3dd:	c9                   	leave  
f010d3de:	c3                   	ret    

f010d3df <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d3df:	55                   	push   %ebp
f010d3e0:	89 e5                	mov    %esp,%ebp
f010d3e2:	83 ec 18             	sub    $0x18,%esp
f010d3e5:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3e8:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d3eb:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d3ef:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d3f4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d3f7:	83 ec 0c             	sub    $0xc,%esp
f010d3fa:	ff 75 14             	pushl  0x14(%ebp)
f010d3fd:	52                   	push   %edx
f010d3fe:	ff 75 0c             	pushl  0xc(%ebp)
f010d401:	ff 75 08             	pushl  0x8(%ebp)
f010d404:	50                   	push   %eax
f010d405:	e8 be a1 ff ff       	call   f01075c8 <createSharedObject>
f010d40a:	83 c4 20             	add    $0x20,%esp
}
f010d40d:	c9                   	leave  
f010d40e:	c3                   	ret    

f010d40f <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d40f:	55                   	push   %ebp
f010d410:	89 e5                	mov    %esp,%ebp
f010d412:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d415:	83 ec 08             	sub    $0x8,%esp
f010d418:	ff 75 0c             	pushl  0xc(%ebp)
f010d41b:	ff 75 08             	pushl  0x8(%ebp)
f010d41e:	e8 5f a1 ff ff       	call   f0107582 <getSizeOfSharedObject>
f010d423:	83 c4 10             	add    $0x10,%esp
}
f010d426:	c9                   	leave  
f010d427:	c3                   	ret    

f010d428 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d428:	55                   	push   %ebp
f010d429:	89 e5                	mov    %esp,%ebp
f010d42b:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d42e:	83 ec 04             	sub    $0x4,%esp
f010d431:	ff 75 10             	pushl  0x10(%ebp)
f010d434:	ff 75 0c             	pushl  0xc(%ebp)
f010d437:	ff 75 08             	pushl  0x8(%ebp)
f010d43a:	e8 cf a2 ff ff       	call   f010770e <getSharedObject>
f010d43f:	83 c4 10             	add    $0x10,%esp
}
f010d442:	c9                   	leave  
f010d443:	c3                   	ret    

f010d444 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d444:	55                   	push   %ebp
f010d445:	89 e5                	mov    %esp,%ebp
f010d447:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d44a:	83 ec 08             	sub    $0x8,%esp
f010d44d:	ff 75 0c             	pushl  0xc(%ebp)
f010d450:	ff 75 08             	pushl  0x8(%ebp)
f010d453:	e8 12 a4 ff ff       	call   f010786a <freeSharedObject>
f010d458:	83 c4 10             	add    $0x10,%esp
}
f010d45b:	c9                   	leave  
f010d45c:	c3                   	ret    

f010d45d <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d45d:	55                   	push   %ebp
f010d45e:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d460:	a1 24 07 86 f0       	mov    0xf0860724,%eax
}
f010d465:	5d                   	pop    %ebp
f010d466:	c3                   	ret    

f010d467 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d467:	55                   	push   %ebp
f010d468:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d46a:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d46f:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d472:	5d                   	pop    %ebp
f010d473:	c3                   	ret    

f010d474 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d474:	55                   	push   %ebp
f010d475:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d477:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d47c:	89 c2                	mov    %eax,%edx
f010d47e:	a1 f0 fd 85 f0       	mov    0xf085fdf0,%eax
f010d483:	29 c2                	sub    %eax,%edx
f010d485:	89 d0                	mov    %edx,%eax
f010d487:	c1 f8 04             	sar    $0x4,%eax
f010d48a:	89 c2                	mov    %eax,%edx
f010d48c:	89 d0                	mov    %edx,%eax
f010d48e:	c1 e0 03             	shl    $0x3,%eax
f010d491:	01 d0                	add    %edx,%eax
f010d493:	01 c0                	add    %eax,%eax
f010d495:	01 d0                	add    %edx,%eax
f010d497:	c1 e0 03             	shl    $0x3,%eax
f010d49a:	01 d0                	add    %edx,%eax
f010d49c:	89 c1                	mov    %eax,%ecx
f010d49e:	c1 e1 08             	shl    $0x8,%ecx
f010d4a1:	01 c8                	add    %ecx,%eax
f010d4a3:	01 c0                	add    %eax,%eax
f010d4a5:	01 d0                	add    %edx,%eax
f010d4a7:	01 c0                	add    %eax,%eax
f010d4a9:	01 d0                	add    %edx,%eax
f010d4ab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d4b2:	01 d0                	add    %edx,%eax
f010d4b4:	89 c2                	mov    %eax,%edx
f010d4b6:	c1 e2 09             	shl    $0x9,%edx
f010d4b9:	29 c2                	sub    %eax,%edx
f010d4bb:	89 d0                	mov    %edx,%eax
f010d4bd:	f7 d8                	neg    %eax
}
f010d4bf:	5d                   	pop    %ebp
f010d4c0:	c3                   	ret    

f010d4c1 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d4c1:	55                   	push   %ebp
f010d4c2:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d4c4:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d4c9:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d4cc:	5d                   	pop    %ebp
f010d4cd:	c3                   	ret    

f010d4ce <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d4ce:	55                   	push   %ebp
f010d4cf:	89 e5                	mov    %esp,%ebp
f010d4d1:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d4d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d4d8:	75 0a                	jne    f010d4e4 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d4da:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d4df:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d4e2:	eb 22                	jmp    f010d506 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d4e4:	83 ec 04             	sub    $0x4,%esp
f010d4e7:	6a 00                	push   $0x0
f010d4e9:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d4ec:	50                   	push   %eax
f010d4ed:	ff 75 08             	pushl  0x8(%ebp)
f010d4f0:	e8 e6 cb ff ff       	call   f010a0db <envid2env>
f010d4f5:	83 c4 10             	add    $0x10,%esp
f010d4f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d4fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d4ff:	79 05                	jns    f010d506 <sys_destroy_env+0x38>
	{
		return r;
f010d501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d504:	eb 5e                	jmp    f010d564 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d506:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d509:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d50e:	39 c2                	cmp    %eax,%edx
f010d510:	75 1b                	jne    f010d52d <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d512:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d517:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d51a:	83 ec 08             	sub    $0x8,%esp
f010d51d:	50                   	push   %eax
f010d51e:	68 6e 7c 13 f0       	push   $0xf0137c6e
f010d523:	e8 e6 37 ff ff       	call   f0100d0e <cprintf>
f010d528:	83 c4 10             	add    $0x10,%esp
f010d52b:	eb 20                	jmp    f010d54d <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d52d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d530:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d533:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d538:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d53b:	83 ec 04             	sub    $0x4,%esp
f010d53e:	52                   	push   %edx
f010d53f:	50                   	push   %eax
f010d540:	68 89 7c 13 f0       	push   $0xf0137c89
f010d545:	e8 c4 37 ff ff       	call   f0100d0e <cprintf>
f010d54a:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d54d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d550:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d553:	83 ec 0c             	sub    $0xc,%esp
f010d556:	50                   	push   %eax
f010d557:	e8 0f 81 ff ff       	call   f010566b <sched_kill_env>
f010d55c:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d55f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d564:	c9                   	leave  
f010d565:	c3                   	ret    

f010d566 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d566:	55                   	push   %ebp
f010d567:	89 e5                	mov    %esp,%ebp
f010d569:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d56c:	e8 4b cb ff ff       	call   f010a0bc <env_exit>
	//env_run_cmd_prmpt();
}
f010d571:	90                   	nop
f010d572:	c9                   	leave  
f010d573:	c3                   	ret    

f010d574 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d574:	55                   	push   %ebp
f010d575:	89 e5                	mov    %esp,%ebp
f010d577:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d57a:	ff 75 14             	pushl  0x14(%ebp)
f010d57d:	ff 75 10             	pushl  0x10(%ebp)
f010d580:	ff 75 0c             	pushl  0xc(%ebp)
f010d583:	ff 75 08             	pushl  0x8(%ebp)
f010d586:	e8 a9 be ff ff       	call   f0109434 <env_create>
f010d58b:	83 c4 10             	add    $0x10,%esp
f010d58e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d591:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d595:	75 07                	jne    f010d59e <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d597:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d59c:	eb 14                	jmp    f010d5b2 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d59e:	83 ec 0c             	sub    $0xc,%esp
f010d5a1:	ff 75 f4             	pushl  -0xc(%ebp)
f010d5a4:	e8 87 7c ff ff       	call   f0105230 <sched_new_env>
f010d5a9:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d5ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5af:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d5b2:	c9                   	leave  
f010d5b3:	c3                   	ret    

f010d5b4 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d5b4:	55                   	push   %ebp
f010d5b5:	89 e5                	mov    %esp,%ebp
f010d5b7:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d5ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5bd:	83 ec 0c             	sub    $0xc,%esp
f010d5c0:	50                   	push   %eax
f010d5c1:	e8 87 7c ff ff       	call   f010524d <sched_run_env>
f010d5c6:	83 c4 10             	add    $0x10,%esp
}
f010d5c9:	90                   	nop
f010d5ca:	c9                   	leave  
f010d5cb:	c3                   	ret    

f010d5cc <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d5cc:	55                   	push   %ebp
f010d5cd:	89 e5                	mov    %esp,%ebp
f010d5cf:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d5d2:	0f 31                	rdtsc  
f010d5d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d5d7:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d5da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d5dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d5e3:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d5e6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d5e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d5ec:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d5ef:	89 01                	mov    %eax,(%ecx)
f010d5f1:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d5f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5f7:	c9                   	leave  
f010d5f8:	c2 04 00             	ret    $0x4

f010d5fb <sys_rcr2>:

uint32 sys_rcr2()
{
f010d5fb:	55                   	push   %ebp
f010d5fc:	89 e5                	mov    %esp,%ebp
f010d5fe:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d601:	0f 20 d0             	mov    %cr2,%eax
f010d604:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d607:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d60a:	90                   	nop
}
f010d60b:	c9                   	leave  
f010d60c:	c3                   	ret    

f010d60d <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d60d:	55                   	push   %ebp
f010d60e:	89 e5                	mov    %esp,%ebp
f010d610:	83 ec 04             	sub    $0x4,%esp
f010d613:	8b 45 08             	mov    0x8(%ebp),%eax
f010d616:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d619:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d61c:	a2 a8 06 86 f0       	mov    %al,0xf08606a8
}
f010d621:	90                   	nop
f010d622:	c9                   	leave  
f010d623:	c3                   	ret    

f010d624 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d624:	55                   	push   %ebp
f010d625:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d627:	c7 05 b0 08 86 f0 00 	movl   $0x0,0xf08608b0
f010d62e:	00 00 00 
}
f010d631:	90                   	nop
f010d632:	5d                   	pop    %ebp
f010d633:	c3                   	ret    

f010d634 <inctst>:
void inctst()
{
f010d634:	55                   	push   %ebp
f010d635:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d637:	a1 b0 08 86 f0       	mov    0xf08608b0,%eax
f010d63c:	40                   	inc    %eax
f010d63d:	a3 b0 08 86 f0       	mov    %eax,0xf08608b0
}
f010d642:	90                   	nop
f010d643:	5d                   	pop    %ebp
f010d644:	c3                   	ret    

f010d645 <gettst>:
uint32 gettst()
{
f010d645:	55                   	push   %ebp
f010d646:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d648:	a1 b0 08 86 f0       	mov    0xf08608b0,%eax
}
f010d64d:	5d                   	pop    %ebp
f010d64e:	c3                   	ret    

f010d64f <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d64f:	55                   	push   %ebp
f010d650:	89 e5                	mov    %esp,%ebp
f010d652:	83 ec 28             	sub    $0x28,%esp
f010d655:	8b 45 14             	mov    0x14(%ebp),%eax
f010d658:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d65b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d662:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d666:	83 f8 65             	cmp    $0x65,%eax
f010d669:	74 5d                	je     f010d6c8 <tst+0x79>
f010d66b:	83 f8 65             	cmp    $0x65,%eax
f010d66e:	7f 0a                	jg     f010d67a <tst+0x2b>
f010d670:	83 f8 62             	cmp    $0x62,%eax
f010d673:	74 73                	je     f010d6e8 <tst+0x99>
f010d675:	e9 91 00 00 00       	jmp    f010d70b <tst+0xbc>
f010d67a:	83 f8 67             	cmp    $0x67,%eax
f010d67d:	74 29                	je     f010d6a8 <tst+0x59>
f010d67f:	83 f8 6c             	cmp    $0x6c,%eax
f010d682:	0f 85 83 00 00 00    	jne    f010d70b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d688:	8b 45 08             	mov    0x8(%ebp),%eax
f010d68b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d68e:	73 09                	jae    f010d699 <tst+0x4a>
			chk = 1;
f010d690:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d697:	eb 68                	jmp    f010d701 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d699:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d69d:	74 62                	je     f010d701 <tst+0xb2>
			chk = 1;
f010d69f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d6a6:	eb 59                	jmp    f010d701 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d6a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6ab:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6ae:	76 09                	jbe    f010d6b9 <tst+0x6a>
			chk = 1;
f010d6b0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d6b7:	eb 4b                	jmp    f010d704 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d6b9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d6bd:	74 45                	je     f010d704 <tst+0xb5>
			chk = 1;
f010d6bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d6c6:	eb 3c                	jmp    f010d704 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d6c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6cb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6ce:	75 09                	jne    f010d6d9 <tst+0x8a>
			chk = 1;
f010d6d0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d6d7:	eb 2e                	jmp    f010d707 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d6d9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d6dd:	74 28                	je     f010d707 <tst+0xb8>
			chk = 1;
f010d6df:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d6e6:	eb 1f                	jmp    f010d707 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6ee:	72 1a                	jb     f010d70a <tst+0xbb>
f010d6f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6f3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6f6:	77 12                	ja     f010d70a <tst+0xbb>
			chk = 1;
f010d6f8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d6ff:	eb 09                	jmp    f010d70a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d701:	90                   	nop
f010d702:	eb 07                	jmp    f010d70b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d704:	90                   	nop
f010d705:	eb 04                	jmp    f010d70b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d707:	90                   	nop
f010d708:	eb 01                	jmp    f010d70b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d70a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d70b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d70f:	75 17                	jne    f010d728 <tst+0xd9>
f010d711:	83 ec 04             	sub    $0x4,%esp
f010d714:	68 a1 7c 13 f0       	push   $0xf0137ca1
f010d719:	68 00 02 00 00       	push   $0x200
f010d71e:	68 ff 7b 13 f0       	push   $0xf0137bff
f010d723:	e8 dd 2a ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d728:	a1 b0 08 86 f0       	mov    0xf08608b0,%eax
f010d72d:	40                   	inc    %eax
f010d72e:	a3 b0 08 86 f0       	mov    %eax,0xf08608b0
	return;
f010d733:	90                   	nop
}
f010d734:	c9                   	leave  
f010d735:	c3                   	ret    

f010d736 <chktst>:

void chktst(uint32 n)
{
f010d736:	55                   	push   %ebp
f010d737:	89 e5                	mov    %esp,%ebp
f010d739:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d73c:	a1 b0 08 86 f0       	mov    0xf08608b0,%eax
f010d741:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d744:	75 12                	jne    f010d758 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d746:	83 ec 0c             	sub    $0xc,%esp
f010d749:	68 b4 7c 13 f0       	push   $0xf0137cb4
f010d74e:	e8 bb 35 ff ff       	call   f0100d0e <cprintf>
f010d753:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d756:	eb 17                	jmp    f010d76f <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d758:	83 ec 04             	sub    $0x4,%esp
f010d75b:	68 e0 7c 13 f0       	push   $0xf0137ce0
f010d760:	68 0a 02 00 00       	push   $0x20a
f010d765:	68 ff 7b 13 f0       	push   $0xf0137bff
f010d76a:	e8 96 2a ff ff       	call   f0100205 <_panic>
}
f010d76f:	c9                   	leave  
f010d770:	c3                   	ret    

f010d771 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d771:	55                   	push   %ebp
f010d772:	89 e5                	mov    %esp,%ebp
f010d774:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d777:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d77c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d77f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d786:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d78d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d791:	0f 84 a5 00 00 00    	je     f010d83c <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d797:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d79e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7a1:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d7a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d7aa:	eb 4a                	jmp    f010d7f6 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7af:	8b 00                	mov    (%eax),%eax
f010d7b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d7b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d7b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d7bc:	89 c2                	mov    %eax,%edx
f010d7be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d7c1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7cb:	01 c8                	add    %ecx,%eax
f010d7cd:	8b 00                	mov    (%eax),%eax
f010d7cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d7d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d7da:	39 c2                	cmp    %eax,%edx
f010d7dc:	74 09                	je     f010d7e7 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d7de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d7e5:	eb 3e                	jmp    f010d825 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d7e7:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d7ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7ed:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d7f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d7f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d7fa:	74 08                	je     f010d804 <sys_check_LRU_lists+0x93>
f010d7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7ff:	8b 40 10             	mov    0x10(%eax),%eax
f010d802:	eb 05                	jmp    f010d809 <sys_check_LRU_lists+0x98>
f010d804:	b8 00 00 00 00       	mov    $0x0,%eax
f010d809:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d80c:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d812:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d815:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d81b:	85 c0                	test   %eax,%eax
f010d81d:	75 8d                	jne    f010d7ac <sys_check_LRU_lists+0x3b>
f010d81f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d823:	75 87                	jne    f010d7ac <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d825:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d828:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d82e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d831:	39 c2                	cmp    %eax,%edx
f010d833:	74 07                	je     f010d83c <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d835:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d83c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d840:	0f 84 a5 00 00 00    	je     f010d8eb <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d846:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d84d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d850:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d856:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d859:	eb 4a                	jmp    f010d8a5 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d85b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d85e:	8b 00                	mov    (%eax),%eax
f010d860:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d863:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d866:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d86b:	89 c2                	mov    %eax,%edx
f010d86d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d870:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d877:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d87a:	01 c8                	add    %ecx,%eax
f010d87c:	8b 00                	mov    (%eax),%eax
f010d87e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d881:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d884:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d889:	39 c2                	cmp    %eax,%edx
f010d88b:	74 09                	je     f010d896 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d88d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d894:	eb 3e                	jmp    f010d8d4 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d896:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d899:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d89c:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d8a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d8a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d8a9:	74 08                	je     f010d8b3 <sys_check_LRU_lists+0x142>
f010d8ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8ae:	8b 40 10             	mov    0x10(%eax),%eax
f010d8b1:	eb 05                	jmp    f010d8b8 <sys_check_LRU_lists+0x147>
f010d8b3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8b8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d8bb:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d8c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d8c4:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d8ca:	85 c0                	test   %eax,%eax
f010d8cc:	75 8d                	jne    f010d85b <sys_check_LRU_lists+0xea>
f010d8ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d8d2:	75 87                	jne    f010d85b <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d8d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d8d7:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d8dd:	8b 45 14             	mov    0x14(%ebp),%eax
f010d8e0:	39 c2                	cmp    %eax,%edx
f010d8e2:	74 07                	je     f010d8eb <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d8e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d8eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d8ee:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d8f1:	c9                   	leave  
f010d8f2:	c3                   	ret    

f010d8f3 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d8f3:	55                   	push   %ebp
f010d8f4:	89 e5                	mov    %esp,%ebp
f010d8f6:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d8f9:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010d8fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d901:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d908:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d90b:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d911:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d914:	eb 65                	jmp    f010d97b <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d916:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d91d:	eb 3a                	jmp    f010d959 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d91f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d922:	8b 00                	mov    (%eax),%eax
f010d924:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d927:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d92a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d92f:	89 c2                	mov    %eax,%edx
f010d931:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d934:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d93e:	01 c8                	add    %ecx,%eax
f010d940:	8b 00                	mov    (%eax),%eax
f010d942:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d945:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d948:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d94d:	39 c2                	cmp    %eax,%edx
f010d94f:	75 05                	jne    f010d956 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d951:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d954:	eb 0b                	jmp    f010d961 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d956:	ff 45 f4             	incl   -0xc(%ebp)
f010d959:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d95c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d95f:	7c be                	jl     f010d91f <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d961:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d965:	7e 08                	jle    f010d96f <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d967:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d96a:	e9 ed 00 00 00       	jmp    f010da5c <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d96f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d972:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d978:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d97b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d97f:	74 08                	je     f010d989 <sys_check_LRU_lists_free+0x96>
f010d981:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d984:	8b 40 10             	mov    0x10(%eax),%eax
f010d987:	eb 05                	jmp    f010d98e <sys_check_LRU_lists_free+0x9b>
f010d989:	b8 00 00 00 00       	mov    $0x0,%eax
f010d98e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d991:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d997:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d99a:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d9a0:	85 c0                	test   %eax,%eax
f010d9a2:	0f 85 6e ff ff ff    	jne    f010d916 <sys_check_LRU_lists_free+0x23>
f010d9a8:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d9ac:	0f 85 64 ff ff ff    	jne    f010d916 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d9b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9b5:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d9bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d9be:	eb 62                	jmp    f010da22 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d9c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d9c7:	eb 3a                	jmp    f010da03 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d9c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d9cc:	8b 00                	mov    (%eax),%eax
f010d9ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d9d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d9d4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d9d9:	89 c2                	mov    %eax,%edx
f010d9db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d9de:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d9e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9e8:	01 c8                	add    %ecx,%eax
f010d9ea:	8b 00                	mov    (%eax),%eax
f010d9ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d9ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d9f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d9f7:	39 c2                	cmp    %eax,%edx
f010d9f9:	75 05                	jne    f010da00 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d9fb:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d9fe:	eb 0b                	jmp    f010da0b <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010da00:	ff 45 f0             	incl   -0x10(%ebp)
f010da03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da06:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010da09:	7c be                	jl     f010d9c9 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010da0b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010da0f:	7e 05                	jle    f010da16 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010da11:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010da14:	eb 46                	jmp    f010da5c <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010da16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da19:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010da1f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010da22:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010da26:	74 08                	je     f010da30 <sys_check_LRU_lists_free+0x13d>
f010da28:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010da2b:	8b 40 10             	mov    0x10(%eax),%eax
f010da2e:	eb 05                	jmp    f010da35 <sys_check_LRU_lists_free+0x142>
f010da30:	b8 00 00 00 00       	mov    $0x0,%eax
f010da35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da38:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010da3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da41:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010da47:	85 c0                	test   %eax,%eax
f010da49:	0f 85 71 ff ff ff    	jne    f010d9c0 <sys_check_LRU_lists_free+0xcd>
f010da4f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010da53:	0f 85 67 ff ff ff    	jne    f010d9c0 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010da59:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010da5c:	c9                   	leave  
f010da5d:	c3                   	ret    

f010da5e <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010da5e:	55                   	push   %ebp
f010da5f:	89 e5                	mov    %esp,%ebp
f010da61:	56                   	push   %esi
f010da62:	53                   	push   %ebx
f010da63:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010da66:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010da6a:	0f 87 0e 04 00 00    	ja     f010de7e <syscall+0x420>
f010da70:	8b 45 08             	mov    0x8(%ebp),%eax
f010da73:	c1 e0 02             	shl    $0x2,%eax
f010da76:	05 fc 7c 13 f0       	add    $0xf0137cfc,%eax
f010da7b:	8b 00                	mov    (%eax),%eax
f010da7d:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010da7f:	8b 45 14             	mov    0x14(%ebp),%eax
f010da82:	0f b6 d0             	movzbl %al,%edx
f010da85:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da88:	83 ec 04             	sub    $0x4,%esp
f010da8b:	52                   	push   %edx
f010da8c:	ff 75 10             	pushl  0x10(%ebp)
f010da8f:	50                   	push   %eax
f010da90:	e8 db f4 ff ff       	call   f010cf70 <sys_cputs>
f010da95:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da98:	b8 00 00 00 00       	mov    $0x0,%eax
f010da9d:	e9 e1 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010daa2:	e8 3e f5 ff ff       	call   f010cfe5 <sys_cgetc>
f010daa7:	e9 d7 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010daac:	83 ec 08             	sub    $0x8,%esp
f010daaf:	ff 75 10             	pushl  0x10(%ebp)
f010dab2:	ff 75 0c             	pushl  0xc(%ebp)
f010dab5:	e8 91 f6 ff ff       	call   f010d14b <sys_calculate_required_frames>
f010daba:	83 c4 10             	add    $0x10,%esp
f010dabd:	e9 c1 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010dac2:	e8 a6 f6 ff ff       	call   f010d16d <sys_calculate_free_frames>
f010dac7:	e9 b7 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010dacc:	e8 bb f6 ff ff       	call   f010d18c <sys_calculate_modified_frames>
f010dad1:	e9 ad 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010dad6:	e8 cb f6 ff ff       	call   f010d1a6 <sys_calculate_notmod_frames>
f010dadb:	e9 a3 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010dae0:	e8 33 f7 ff ff       	call   f010d218 <sys_pf_calculate_allocated_pages>
f010dae5:	e9 99 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010daea:	83 ec 0c             	sub    $0xc,%esp
f010daed:	ff 75 0c             	pushl  0xc(%ebp)
f010daf0:	e8 cb f6 ff ff       	call   f010d1c0 <sys_calculate_pages_tobe_removed_ready_exit>
f010daf5:	83 c4 10             	add    $0x10,%esp
f010daf8:	e9 86 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010dafd:	e8 d4 f6 ff ff       	call   f010d1d6 <sys_scarce_memory>
		return 0;
f010db02:	b8 00 00 00 00       	mov    $0x0,%eax
f010db07:	e9 77 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010db0c:	83 ec 08             	sub    $0x8,%esp
f010db0f:	ff 75 10             	pushl  0x10(%ebp)
f010db12:	ff 75 0c             	pushl  0xc(%ebp)
f010db15:	e8 17 f7 ff ff       	call   f010d231 <sys_free_user_mem>
f010db1a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db1d:	b8 00 00 00 00       	mov    $0x0,%eax
f010db22:	e9 5c 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010db27:	8b 55 10             	mov    0x10(%ebp),%edx
f010db2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db2d:	83 ec 08             	sub    $0x8,%esp
f010db30:	52                   	push   %edx
f010db31:	50                   	push   %eax
f010db32:	e8 c1 f4 ff ff       	call   f010cff8 <__sys_allocate_page>
f010db37:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db3a:	b8 00 00 00 00       	mov    $0x0,%eax
f010db3f:	e9 3f 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010db44:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010db47:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010db4a:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010db4d:	8b 55 10             	mov    0x10(%ebp),%edx
f010db50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db53:	83 ec 0c             	sub    $0xc,%esp
f010db56:	56                   	push   %esi
f010db57:	53                   	push   %ebx
f010db58:	51                   	push   %ecx
f010db59:	52                   	push   %edx
f010db5a:	50                   	push   %eax
f010db5b:	e8 b1 f5 ff ff       	call   f010d111 <__sys_map_frame>
f010db60:	83 c4 20             	add    $0x20,%esp
		return 0;
f010db63:	b8 00 00 00 00       	mov    $0x0,%eax
f010db68:	e9 16 03 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010db6d:	8b 55 10             	mov    0x10(%ebp),%edx
f010db70:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db73:	83 ec 08             	sub    $0x8,%esp
f010db76:	52                   	push   %edx
f010db77:	50                   	push   %eax
f010db78:	e8 b1 f5 ff ff       	call   f010d12e <__sys_unmap_frame>
f010db7d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db80:	b8 00 00 00 00       	mov    $0x0,%eax
f010db85:	e9 f9 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010db8a:	83 ec 04             	sub    $0x4,%esp
f010db8d:	ff 75 14             	pushl  0x14(%ebp)
f010db90:	ff 75 10             	pushl  0x10(%ebp)
f010db93:	ff 75 0c             	pushl  0xc(%ebp)
f010db96:	e8 f8 f6 ff ff       	call   f010d293 <sys_allocate_chunk>
f010db9b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db9e:	b8 00 00 00 00       	mov    $0x0,%eax
f010dba3:	e9 db 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010dba8:	e8 41 f7 ff ff       	call   f010d2ee <sys_disable_interrupt>
		return 0;
f010dbad:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbb2:	e9 cc 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010dbb7:	e8 4c f7 ff ff       	call   f010d308 <sys_enable_interrupt>
		return 0;
f010dbbc:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbc1:	e9 bd 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dbc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbc9:	0f be c0             	movsbl %al,%eax
f010dbcc:	83 ec 0c             	sub    $0xc,%esp
f010dbcf:	50                   	push   %eax
f010dbd0:	e8 ec f3 ff ff       	call   f010cfc1 <sys_cputc>
f010dbd5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbd8:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbdd:	e9 a1 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010dbe2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbe5:	0f be c0             	movsbl %al,%eax
f010dbe8:	83 ec 0c             	sub    $0xc,%esp
f010dbeb:	50                   	push   %eax
f010dbec:	e8 f3 f5 ff ff       	call   f010d1e4 <sys_clearFFL>
f010dbf1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbf4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbf9:	e9 85 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010dbfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc01:	83 ec 08             	sub    $0x8,%esp
f010dc04:	ff 75 10             	pushl  0x10(%ebp)
f010dc07:	50                   	push   %eax
f010dc08:	e8 15 f7 ff ff       	call   f010d322 <sys_createSemaphore>
f010dc0d:	83 c4 10             	add    $0x10,%esp
f010dc10:	e9 6e 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010dc15:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc18:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc1b:	83 ec 08             	sub    $0x8,%esp
f010dc1e:	52                   	push   %edx
f010dc1f:	50                   	push   %eax
f010dc20:	e8 1f f7 ff ff       	call   f010d344 <sys_waitSemaphore>
f010dc25:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc28:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc2d:	e9 51 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010dc32:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc35:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc38:	83 ec 08             	sub    $0x8,%esp
f010dc3b:	52                   	push   %edx
f010dc3c:	50                   	push   %eax
f010dc3d:	e8 1c f7 ff ff       	call   f010d35e <sys_signalSemaphore>
f010dc42:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc45:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc4a:	e9 34 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010dc4f:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc52:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc55:	83 ec 08             	sub    $0x8,%esp
f010dc58:	52                   	push   %edx
f010dc59:	50                   	push   %eax
f010dc5a:	e8 19 f7 ff ff       	call   f010d378 <sys_getSemaphoreValue>
f010dc5f:	83 c4 10             	add    $0x10,%esp
f010dc62:	e9 1c 02 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010dc67:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010dc6a:	8b 45 14             	mov    0x14(%ebp),%eax
f010dc6d:	0f b6 d0             	movzbl %al,%edx
f010dc70:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc73:	51                   	push   %ecx
f010dc74:	52                   	push   %edx
f010dc75:	ff 75 10             	pushl  0x10(%ebp)
f010dc78:	50                   	push   %eax
f010dc79:	e8 61 f7 ff ff       	call   f010d3df <sys_createSharedObject>
f010dc7e:	83 c4 10             	add    $0x10,%esp
f010dc81:	e9 fd 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010dc86:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dc89:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc8f:	83 ec 04             	sub    $0x4,%esp
f010dc92:	51                   	push   %ecx
f010dc93:	52                   	push   %edx
f010dc94:	50                   	push   %eax
f010dc95:	e8 8e f7 ff ff       	call   f010d428 <sys_getSharedObject>
f010dc9a:	83 c4 10             	add    $0x10,%esp
f010dc9d:	e9 e1 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010dca2:	8b 55 10             	mov    0x10(%ebp),%edx
f010dca5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dca8:	83 ec 08             	sub    $0x8,%esp
f010dcab:	52                   	push   %edx
f010dcac:	50                   	push   %eax
f010dcad:	e8 92 f7 ff ff       	call   f010d444 <sys_freeSharedObject>
f010dcb2:	83 c4 10             	add    $0x10,%esp
f010dcb5:	e9 c9 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010dcba:	8b 55 10             	mov    0x10(%ebp),%edx
f010dcbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcc0:	83 ec 08             	sub    $0x8,%esp
f010dcc3:	52                   	push   %edx
f010dcc4:	50                   	push   %eax
f010dcc5:	e8 45 f7 ff ff       	call   f010d40f <sys_getSizeOfSharedObject>
f010dcca:	83 c4 10             	add    $0x10,%esp
f010dccd:	e9 b1 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010dcd2:	e8 86 f7 ff ff       	call   f010d45d <sys_getMaxShares>
f010dcd7:	e9 a7 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010dcdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcdf:	ff 75 18             	pushl  0x18(%ebp)
f010dce2:	ff 75 14             	pushl  0x14(%ebp)
f010dce5:	ff 75 10             	pushl  0x10(%ebp)
f010dce8:	50                   	push   %eax
f010dce9:	e8 86 f8 ff ff       	call   f010d574 <sys_create_env>
f010dcee:	83 c4 10             	add    $0x10,%esp
f010dcf1:	e9 8d 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010dcf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcf9:	83 ec 0c             	sub    $0xc,%esp
f010dcfc:	50                   	push   %eax
f010dcfd:	e8 b2 f8 ff ff       	call   f010d5b4 <sys_run_env>
f010dd02:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd05:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd0a:	e9 74 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010dd0f:	e8 60 f7 ff ff       	call   f010d474 <sys_getenvindex>
f010dd14:	e9 6a 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010dd19:	e8 49 f7 ff ff       	call   f010d467 <sys_getenvid>
f010dd1e:	e9 60 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010dd23:	e8 99 f7 ff ff       	call   f010d4c1 <sys_getparentenvid>
f010dd28:	e9 56 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010dd2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd30:	83 ec 0c             	sub    $0xc,%esp
f010dd33:	50                   	push   %eax
f010dd34:	e8 95 f7 ff ff       	call   f010d4ce <sys_destroy_env>
f010dd39:	83 c4 10             	add    $0x10,%esp
f010dd3c:	e9 42 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010dd41:	e8 20 f8 ff ff       	call   f010d566 <sys_exit_env>
		return 0;
f010dd46:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd4b:	e9 33 01 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010dd50:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010dd53:	83 ec 0c             	sub    $0xc,%esp
f010dd56:	50                   	push   %eax
f010dd57:	e8 70 f8 ff ff       	call   f010d5cc <sys_get_virtual_time>
f010dd5c:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010dd5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd62:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010dd65:	8b 45 10             	mov    0x10(%ebp),%eax
f010dd68:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010dd6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010dd6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd71:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010dd73:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dd76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd79:	89 10                	mov    %edx,(%eax)
		return 0;
f010dd7b:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd80:	e9 fe 00 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010dd85:	83 ec 04             	sub    $0x4,%esp
f010dd88:	ff 75 14             	pushl  0x14(%ebp)
f010dd8b:	ff 75 10             	pushl  0x10(%ebp)
f010dd8e:	ff 75 0c             	pushl  0xc(%ebp)
f010dd91:	e8 20 f5 ff ff       	call   f010d2b6 <sys_move_user_mem>
f010dd96:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd99:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd9e:	e9 e0 00 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dda3:	e8 53 f8 ff ff       	call   f010d5fb <sys_rcr2>
f010dda8:	e9 d6 00 00 00       	jmp    f010de83 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010ddad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddb0:	0f b6 c0             	movzbl %al,%eax
f010ddb3:	83 ec 0c             	sub    $0xc,%esp
f010ddb6:	50                   	push   %eax
f010ddb7:	e8 51 f8 ff ff       	call   f010d60d <sys_bypassPageFault>
f010ddbc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ddbf:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc4:	e9 ba 00 00 00       	jmp    f010de83 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010ddc9:	e8 56 f8 ff ff       	call   f010d624 <rsttst>
		return 0;
f010ddce:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddd3:	e9 ab 00 00 00       	jmp    f010de83 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010ddd8:	e8 57 f8 ff ff       	call   f010d634 <inctst>
		return 0;
f010dddd:	b8 00 00 00 00       	mov    $0x0,%eax
f010dde2:	e9 9c 00 00 00       	jmp    f010de83 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010dde7:	83 ec 0c             	sub    $0xc,%esp
f010ddea:	ff 75 0c             	pushl  0xc(%ebp)
f010dded:	e8 44 f9 ff ff       	call   f010d736 <chktst>
f010ddf2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ddf5:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddfa:	e9 84 00 00 00       	jmp    f010de83 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010ddff:	e8 41 f8 ff ff       	call   f010d645 <gettst>
f010de04:	eb 7d                	jmp    f010de83 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010de06:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010de09:	8b 45 18             	mov    0x18(%ebp),%eax
f010de0c:	0f be c0             	movsbl %al,%eax
f010de0f:	83 ec 0c             	sub    $0xc,%esp
f010de12:	52                   	push   %edx
f010de13:	50                   	push   %eax
f010de14:	ff 75 14             	pushl  0x14(%ebp)
f010de17:	ff 75 10             	pushl  0x10(%ebp)
f010de1a:	ff 75 0c             	pushl  0xc(%ebp)
f010de1d:	e8 2d f8 ff ff       	call   f010d64f <tst>
f010de22:	83 c4 20             	add    $0x20,%esp
		return 0;
f010de25:	b8 00 00 00 00       	mov    $0x0,%eax
f010de2a:	eb 57                	jmp    f010de83 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010de2c:	e8 a5 f4 ff ff       	call   f010d2d6 <sys_get_heap_strategy>
f010de31:	eb 50                	jmp    f010de83 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010de33:	83 ec 0c             	sub    $0xc,%esp
f010de36:	ff 75 0c             	pushl  0xc(%ebp)
f010de39:	e8 a2 f4 ff ff       	call   f010d2e0 <sys_set_uheap_strategy>
f010de3e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de41:	b8 00 00 00 00       	mov    $0x0,%eax
f010de46:	eb 3b                	jmp    f010de83 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010de48:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010de4b:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010de4e:	8b 55 10             	mov    0x10(%ebp),%edx
f010de51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de54:	53                   	push   %ebx
f010de55:	51                   	push   %ecx
f010de56:	52                   	push   %edx
f010de57:	50                   	push   %eax
f010de58:	e8 14 f9 ff ff       	call   f010d771 <sys_check_LRU_lists>
f010de5d:	83 c4 10             	add    $0x10,%esp
f010de60:	eb 21                	jmp    f010de83 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010de62:	8b 55 10             	mov    0x10(%ebp),%edx
f010de65:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de68:	83 ec 08             	sub    $0x8,%esp
f010de6b:	52                   	push   %edx
f010de6c:	50                   	push   %eax
f010de6d:	e8 81 fa ff ff       	call   f010d8f3 <sys_check_LRU_lists_free>
f010de72:	83 c4 10             	add    $0x10,%esp
f010de75:	eb 0c                	jmp    f010de83 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010de77:	b8 03 00 00 00       	mov    $0x3,%eax
f010de7c:	eb 05                	jmp    f010de83 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010de7e:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010de83:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010de86:	5b                   	pop    %ebx
f010de87:	5e                   	pop    %esi
f010de88:	5d                   	pop    %ebp
f010de89:	c3                   	ret    

f010de8a <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010de8a:	55                   	push   %ebp
f010de8b:	89 e5                	mov    %esp,%ebp
f010de8d:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010de90:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de93:	8b 00                	mov    (%eax),%eax
f010de95:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010de98:	8b 45 10             	mov    0x10(%ebp),%eax
f010de9b:	8b 00                	mov    (%eax),%eax
f010de9d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dea0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010dea7:	e9 ca 00 00 00       	jmp    f010df76 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010deac:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010deaf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010deb2:	01 d0                	add    %edx,%eax
f010deb4:	89 c2                	mov    %eax,%edx
f010deb6:	c1 ea 1f             	shr    $0x1f,%edx
f010deb9:	01 d0                	add    %edx,%eax
f010debb:	d1 f8                	sar    %eax
f010debd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dec0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dec3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010dec6:	eb 03                	jmp    f010decb <stab_binsearch+0x41>
			m--;
f010dec8:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010decb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dece:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ded1:	7c 1e                	jl     f010def1 <stab_binsearch+0x67>
f010ded3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ded6:	89 d0                	mov    %edx,%eax
f010ded8:	01 c0                	add    %eax,%eax
f010deda:	01 d0                	add    %edx,%eax
f010dedc:	c1 e0 02             	shl    $0x2,%eax
f010dedf:	89 c2                	mov    %eax,%edx
f010dee1:	8b 45 08             	mov    0x8(%ebp),%eax
f010dee4:	01 d0                	add    %edx,%eax
f010dee6:	8a 40 04             	mov    0x4(%eax),%al
f010dee9:	0f b6 c0             	movzbl %al,%eax
f010deec:	3b 45 14             	cmp    0x14(%ebp),%eax
f010deef:	75 d7                	jne    f010dec8 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010def1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010def4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010def7:	7d 09                	jge    f010df02 <stab_binsearch+0x78>
			l = true_m + 1;
f010def9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010defc:	40                   	inc    %eax
f010defd:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010df00:	eb 74                	jmp    f010df76 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010df02:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010df09:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df0c:	89 d0                	mov    %edx,%eax
f010df0e:	01 c0                	add    %eax,%eax
f010df10:	01 d0                	add    %edx,%eax
f010df12:	c1 e0 02             	shl    $0x2,%eax
f010df15:	89 c2                	mov    %eax,%edx
f010df17:	8b 45 08             	mov    0x8(%ebp),%eax
f010df1a:	01 d0                	add    %edx,%eax
f010df1c:	8b 40 08             	mov    0x8(%eax),%eax
f010df1f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010df22:	73 11                	jae    f010df35 <stab_binsearch+0xab>
			*region_left = m;
f010df24:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df27:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df2a:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010df2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df2f:	40                   	inc    %eax
f010df30:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010df33:	eb 41                	jmp    f010df76 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010df35:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df38:	89 d0                	mov    %edx,%eax
f010df3a:	01 c0                	add    %eax,%eax
f010df3c:	01 d0                	add    %edx,%eax
f010df3e:	c1 e0 02             	shl    $0x2,%eax
f010df41:	89 c2                	mov    %eax,%edx
f010df43:	8b 45 08             	mov    0x8(%ebp),%eax
f010df46:	01 d0                	add    %edx,%eax
f010df48:	8b 40 08             	mov    0x8(%eax),%eax
f010df4b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010df4e:	76 14                	jbe    f010df64 <stab_binsearch+0xda>
			*region_right = m - 1;
f010df50:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df53:	8d 50 ff             	lea    -0x1(%eax),%edx
f010df56:	8b 45 10             	mov    0x10(%ebp),%eax
f010df59:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010df5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df5e:	48                   	dec    %eax
f010df5f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010df62:	eb 12                	jmp    f010df76 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010df64:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df6a:	89 10                	mov    %edx,(%eax)
			l = m;
f010df6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df6f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010df72:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010df76:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010df79:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010df7c:	0f 8e 2a ff ff ff    	jle    f010deac <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010df82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010df86:	75 0f                	jne    f010df97 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010df88:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df8b:	8b 00                	mov    (%eax),%eax
f010df8d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010df90:	8b 45 10             	mov    0x10(%ebp),%eax
f010df93:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010df95:	eb 3d                	jmp    f010dfd4 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010df97:	8b 45 10             	mov    0x10(%ebp),%eax
f010df9a:	8b 00                	mov    (%eax),%eax
f010df9c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010df9f:	eb 03                	jmp    f010dfa4 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dfa1:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dfa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfa7:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dfa9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dfac:	7d 1e                	jge    f010dfcc <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010dfae:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dfb1:	89 d0                	mov    %edx,%eax
f010dfb3:	01 c0                	add    %eax,%eax
f010dfb5:	01 d0                	add    %edx,%eax
f010dfb7:	c1 e0 02             	shl    $0x2,%eax
f010dfba:	89 c2                	mov    %eax,%edx
f010dfbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfbf:	01 d0                	add    %edx,%eax
f010dfc1:	8a 40 04             	mov    0x4(%eax),%al
f010dfc4:	0f b6 c0             	movzbl %al,%eax
f010dfc7:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dfca:	75 d5                	jne    f010dfa1 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010dfcc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfcf:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dfd2:	89 10                	mov    %edx,(%eax)
	}
}
f010dfd4:	90                   	nop
f010dfd5:	c9                   	leave  
f010dfd6:	c3                   	ret    

f010dfd7 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010dfd7:	55                   	push   %ebp
f010dfd8:	89 e5                	mov    %esp,%ebp
f010dfda:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010dfdd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfe0:	c7 00 c0 7d 13 f0    	movl   $0xf0137dc0,(%eax)
	info->eip_line = 0;
f010dfe6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfe9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010dff0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dff3:	c7 40 08 c0 7d 13 f0 	movl   $0xf0137dc0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010dffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dffd:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010e004:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e007:	8b 55 08             	mov    0x8(%ebp),%edx
f010e00a:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010e00d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e010:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010e017:	8b 45 08             	mov    0x8(%ebp),%eax
f010e01a:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010e01f:	76 1e                	jbe    f010e03f <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010e021:	c7 45 f4 78 d9 13 f0 	movl   $0xf013d978,-0xc(%ebp)
		stab_end = __STAB_END__;
f010e028:	c7 45 f0 fc d8 17 f0 	movl   $0xf017d8fc,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010e02f:	c7 45 ec fd d8 17 f0 	movl   $0xf017d8fd,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010e036:	c7 45 e8 d7 a3 18 f0 	movl   $0xf018a3d7,-0x18(%ebp)
f010e03d:	eb 2a                	jmp    f010e069 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010e03f:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010e046:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e049:	8b 00                	mov    (%eax),%eax
f010e04b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010e04e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e051:	8b 40 04             	mov    0x4(%eax),%eax
f010e054:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010e057:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e05a:	8b 40 08             	mov    0x8(%eax),%eax
f010e05d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010e060:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e063:	8b 40 0c             	mov    0xc(%eax),%eax
f010e066:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e069:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e06c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e06f:	76 0a                	jbe    f010e07b <debuginfo_eip+0xa4>
f010e071:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e074:	48                   	dec    %eax
f010e075:	8a 00                	mov    (%eax),%al
f010e077:	84 c0                	test   %al,%al
f010e079:	74 0a                	je     f010e085 <debuginfo_eip+0xae>
		return -1;
f010e07b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e080:	e9 01 02 00 00       	jmp    f010e286 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e085:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e08c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e08f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e092:	29 c2                	sub    %eax,%edx
f010e094:	89 d0                	mov    %edx,%eax
f010e096:	c1 f8 02             	sar    $0x2,%eax
f010e099:	89 c2                	mov    %eax,%edx
f010e09b:	89 d0                	mov    %edx,%eax
f010e09d:	c1 e0 02             	shl    $0x2,%eax
f010e0a0:	01 d0                	add    %edx,%eax
f010e0a2:	c1 e0 02             	shl    $0x2,%eax
f010e0a5:	01 d0                	add    %edx,%eax
f010e0a7:	c1 e0 02             	shl    $0x2,%eax
f010e0aa:	01 d0                	add    %edx,%eax
f010e0ac:	89 c1                	mov    %eax,%ecx
f010e0ae:	c1 e1 08             	shl    $0x8,%ecx
f010e0b1:	01 c8                	add    %ecx,%eax
f010e0b3:	89 c1                	mov    %eax,%ecx
f010e0b5:	c1 e1 10             	shl    $0x10,%ecx
f010e0b8:	01 c8                	add    %ecx,%eax
f010e0ba:	01 c0                	add    %eax,%eax
f010e0bc:	01 d0                	add    %edx,%eax
f010e0be:	48                   	dec    %eax
f010e0bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e0c2:	ff 75 08             	pushl  0x8(%ebp)
f010e0c5:	6a 64                	push   $0x64
f010e0c7:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e0ca:	50                   	push   %eax
f010e0cb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e0ce:	50                   	push   %eax
f010e0cf:	ff 75 f4             	pushl  -0xc(%ebp)
f010e0d2:	e8 b3 fd ff ff       	call   f010de8a <stab_binsearch>
f010e0d7:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e0da:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e0dd:	85 c0                	test   %eax,%eax
f010e0df:	75 0a                	jne    f010e0eb <debuginfo_eip+0x114>
		return -1;
f010e0e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e0e6:	e9 9b 01 00 00       	jmp    f010e286 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e0eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e0ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e0f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e0f4:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e0f7:	ff 75 08             	pushl  0x8(%ebp)
f010e0fa:	6a 24                	push   $0x24
f010e0fc:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e0ff:	50                   	push   %eax
f010e100:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e103:	50                   	push   %eax
f010e104:	ff 75 f4             	pushl  -0xc(%ebp)
f010e107:	e8 7e fd ff ff       	call   f010de8a <stab_binsearch>
f010e10c:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e10f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e112:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e115:	39 c2                	cmp    %eax,%edx
f010e117:	0f 8f 86 00 00 00    	jg     f010e1a3 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e11d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e120:	89 c2                	mov    %eax,%edx
f010e122:	89 d0                	mov    %edx,%eax
f010e124:	01 c0                	add    %eax,%eax
f010e126:	01 d0                	add    %edx,%eax
f010e128:	c1 e0 02             	shl    $0x2,%eax
f010e12b:	89 c2                	mov    %eax,%edx
f010e12d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e130:	01 d0                	add    %edx,%eax
f010e132:	8b 00                	mov    (%eax),%eax
f010e134:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e137:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e13a:	29 d1                	sub    %edx,%ecx
f010e13c:	89 ca                	mov    %ecx,%edx
f010e13e:	39 d0                	cmp    %edx,%eax
f010e140:	73 22                	jae    f010e164 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e142:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e145:	89 c2                	mov    %eax,%edx
f010e147:	89 d0                	mov    %edx,%eax
f010e149:	01 c0                	add    %eax,%eax
f010e14b:	01 d0                	add    %edx,%eax
f010e14d:	c1 e0 02             	shl    $0x2,%eax
f010e150:	89 c2                	mov    %eax,%edx
f010e152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e155:	01 d0                	add    %edx,%eax
f010e157:	8b 10                	mov    (%eax),%edx
f010e159:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e15c:	01 c2                	add    %eax,%edx
f010e15e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e161:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e164:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e167:	89 c2                	mov    %eax,%edx
f010e169:	89 d0                	mov    %edx,%eax
f010e16b:	01 c0                	add    %eax,%eax
f010e16d:	01 d0                	add    %edx,%eax
f010e16f:	c1 e0 02             	shl    $0x2,%eax
f010e172:	89 c2                	mov    %eax,%edx
f010e174:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e177:	01 d0                	add    %edx,%eax
f010e179:	8b 50 08             	mov    0x8(%eax),%edx
f010e17c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e17f:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e182:	8b 55 08             	mov    0x8(%ebp),%edx
f010e185:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e188:	8b 40 10             	mov    0x10(%eax),%eax
f010e18b:	29 c2                	sub    %eax,%edx
f010e18d:	89 d0                	mov    %edx,%eax
f010e18f:	c1 f8 02             	sar    $0x2,%eax
f010e192:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e195:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e198:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e19b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e19e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e1a1:	eb 15                	jmp    f010e1b8 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e1a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1a6:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1a9:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e1ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e1af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e1b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e1b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e1b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1bb:	8b 40 08             	mov    0x8(%eax),%eax
f010e1be:	83 ec 08             	sub    $0x8,%esp
f010e1c1:	6a 3a                	push   $0x3a
f010e1c3:	50                   	push   %eax
f010e1c4:	e8 e9 39 02 00       	call   f0131bb2 <strfind>
f010e1c9:	83 c4 10             	add    $0x10,%esp
f010e1cc:	89 c2                	mov    %eax,%edx
f010e1ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1d1:	8b 40 08             	mov    0x8(%eax),%eax
f010e1d4:	29 c2                	sub    %eax,%edx
f010e1d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1d9:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e1dc:	eb 03                	jmp    f010e1e1 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e1de:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e1e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e1e4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e1e7:	7c 4e                	jl     f010e237 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e1e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1ec:	89 d0                	mov    %edx,%eax
f010e1ee:	01 c0                	add    %eax,%eax
f010e1f0:	01 d0                	add    %edx,%eax
f010e1f2:	c1 e0 02             	shl    $0x2,%eax
f010e1f5:	89 c2                	mov    %eax,%edx
f010e1f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1fa:	01 d0                	add    %edx,%eax
f010e1fc:	8a 40 04             	mov    0x4(%eax),%al
f010e1ff:	3c 84                	cmp    $0x84,%al
f010e201:	74 34                	je     f010e237 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e203:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e206:	89 d0                	mov    %edx,%eax
f010e208:	01 c0                	add    %eax,%eax
f010e20a:	01 d0                	add    %edx,%eax
f010e20c:	c1 e0 02             	shl    $0x2,%eax
f010e20f:	89 c2                	mov    %eax,%edx
f010e211:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e214:	01 d0                	add    %edx,%eax
f010e216:	8a 40 04             	mov    0x4(%eax),%al
f010e219:	3c 64                	cmp    $0x64,%al
f010e21b:	75 c1                	jne    f010e1de <debuginfo_eip+0x207>
f010e21d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e220:	89 d0                	mov    %edx,%eax
f010e222:	01 c0                	add    %eax,%eax
f010e224:	01 d0                	add    %edx,%eax
f010e226:	c1 e0 02             	shl    $0x2,%eax
f010e229:	89 c2                	mov    %eax,%edx
f010e22b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e22e:	01 d0                	add    %edx,%eax
f010e230:	8b 40 08             	mov    0x8(%eax),%eax
f010e233:	85 c0                	test   %eax,%eax
f010e235:	74 a7                	je     f010e1de <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e237:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e23a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e23d:	7c 42                	jl     f010e281 <debuginfo_eip+0x2aa>
f010e23f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e242:	89 d0                	mov    %edx,%eax
f010e244:	01 c0                	add    %eax,%eax
f010e246:	01 d0                	add    %edx,%eax
f010e248:	c1 e0 02             	shl    $0x2,%eax
f010e24b:	89 c2                	mov    %eax,%edx
f010e24d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e250:	01 d0                	add    %edx,%eax
f010e252:	8b 00                	mov    (%eax),%eax
f010e254:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e257:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e25a:	29 d1                	sub    %edx,%ecx
f010e25c:	89 ca                	mov    %ecx,%edx
f010e25e:	39 d0                	cmp    %edx,%eax
f010e260:	73 1f                	jae    f010e281 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e262:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e265:	89 d0                	mov    %edx,%eax
f010e267:	01 c0                	add    %eax,%eax
f010e269:	01 d0                	add    %edx,%eax
f010e26b:	c1 e0 02             	shl    $0x2,%eax
f010e26e:	89 c2                	mov    %eax,%edx
f010e270:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e273:	01 d0                	add    %edx,%eax
f010e275:	8b 10                	mov    (%eax),%edx
f010e277:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e27a:	01 c2                	add    %eax,%edx
f010e27c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e27f:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e281:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e286:	c9                   	leave  
f010e287:	c3                   	ret    

f010e288 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e288:	55                   	push   %ebp
f010e289:	89 e5                	mov    %esp,%ebp
f010e28b:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e28e:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e292:	74 1c                	je     f010e2b0 <setPageReplacmentAlgorithmLRU+0x28>
f010e294:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e298:	74 16                	je     f010e2b0 <setPageReplacmentAlgorithmLRU+0x28>
f010e29a:	68 cc 7d 13 f0       	push   $0xf0137dcc
f010e29f:	68 16 7e 13 f0       	push   $0xf0137e16
f010e2a4:	6a 18                	push   $0x18
f010e2a6:	68 2b 7e 13 f0       	push   $0xf0137e2b
f010e2ab:	e8 55 1f ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e2b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2b3:	a3 84 07 86 f0       	mov    %eax,0xf0860784
}
f010e2b8:	90                   	nop
f010e2b9:	c9                   	leave  
f010e2ba:	c3                   	ret    

f010e2bb <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e2bb:	55                   	push   %ebp
f010e2bc:	89 e5                	mov    %esp,%ebp
f010e2be:	c7 05 84 07 86 f0 03 	movl   $0x3,0xf0860784
f010e2c5:	00 00 00 
f010e2c8:	90                   	nop
f010e2c9:	5d                   	pop    %ebp
f010e2ca:	c3                   	ret    

f010e2cb <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e2cb:	55                   	push   %ebp
f010e2cc:	89 e5                	mov    %esp,%ebp
f010e2ce:	c7 05 84 07 86 f0 04 	movl   $0x4,0xf0860784
f010e2d5:	00 00 00 
f010e2d8:	90                   	nop
f010e2d9:	5d                   	pop    %ebp
f010e2da:	c3                   	ret    

f010e2db <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e2db:	55                   	push   %ebp
f010e2dc:	89 e5                	mov    %esp,%ebp
f010e2de:	c7 05 84 07 86 f0 05 	movl   $0x5,0xf0860784
f010e2e5:	00 00 00 
f010e2e8:	90                   	nop
f010e2e9:	5d                   	pop    %ebp
f010e2ea:	c3                   	ret    

f010e2eb <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e2eb:	55                   	push   %ebp
f010e2ec:	89 e5                	mov    %esp,%ebp
f010e2ee:	c7 05 84 07 86 f0 07 	movl   $0x7,0xf0860784
f010e2f5:	00 00 00 
f010e2f8:	90                   	nop
f010e2f9:	5d                   	pop    %ebp
f010e2fa:	c3                   	ret    

f010e2fb <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e2fb:	55                   	push   %ebp
f010e2fc:	89 e5                	mov    %esp,%ebp
f010e2fe:	c7 05 84 07 86 f0 06 	movl   $0x6,0xf0860784
f010e305:	00 00 00 
f010e308:	8b 45 08             	mov    0x8(%ebp),%eax
f010e30b:	a3 e0 06 86 f0       	mov    %eax,0xf08606e0
f010e310:	90                   	nop
f010e311:	5d                   	pop    %ebp
f010e312:	c3                   	ret    

f010e313 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e313:	55                   	push   %ebp
f010e314:	89 e5                	mov    %esp,%ebp
f010e316:	8b 15 84 07 86 f0    	mov    0xf0860784,%edx
f010e31c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e31f:	39 c2                	cmp    %eax,%edx
f010e321:	0f 94 c0             	sete   %al
f010e324:	0f b6 c0             	movzbl %al,%eax
f010e327:	5d                   	pop    %ebp
f010e328:	c3                   	ret    

f010e329 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e329:	55                   	push   %ebp
f010e32a:	89 e5                	mov    %esp,%ebp
f010e32c:	a1 84 07 86 f0       	mov    0xf0860784,%eax
f010e331:	83 f8 03             	cmp    $0x3,%eax
f010e334:	75 07                	jne    f010e33d <isPageReplacmentAlgorithmCLOCK+0x14>
f010e336:	b8 01 00 00 00       	mov    $0x1,%eax
f010e33b:	eb 05                	jmp    f010e342 <isPageReplacmentAlgorithmCLOCK+0x19>
f010e33d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e342:	5d                   	pop    %ebp
f010e343:	c3                   	ret    

f010e344 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e344:	55                   	push   %ebp
f010e345:	89 e5                	mov    %esp,%ebp
f010e347:	a1 84 07 86 f0       	mov    0xf0860784,%eax
f010e34c:	83 f8 04             	cmp    $0x4,%eax
f010e34f:	75 07                	jne    f010e358 <isPageReplacmentAlgorithmFIFO+0x14>
f010e351:	b8 01 00 00 00       	mov    $0x1,%eax
f010e356:	eb 05                	jmp    f010e35d <isPageReplacmentAlgorithmFIFO+0x19>
f010e358:	b8 00 00 00 00       	mov    $0x0,%eax
f010e35d:	5d                   	pop    %ebp
f010e35e:	c3                   	ret    

f010e35f <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e35f:	55                   	push   %ebp
f010e360:	89 e5                	mov    %esp,%ebp
f010e362:	a1 84 07 86 f0       	mov    0xf0860784,%eax
f010e367:	83 f8 05             	cmp    $0x5,%eax
f010e36a:	75 07                	jne    f010e373 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e36c:	b8 01 00 00 00       	mov    $0x1,%eax
f010e371:	eb 05                	jmp    f010e378 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e373:	b8 00 00 00 00       	mov    $0x0,%eax
f010e378:	5d                   	pop    %ebp
f010e379:	c3                   	ret    

f010e37a <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e37a:	55                   	push   %ebp
f010e37b:	89 e5                	mov    %esp,%ebp
f010e37d:	a1 84 07 86 f0       	mov    0xf0860784,%eax
f010e382:	83 f8 07             	cmp    $0x7,%eax
f010e385:	75 07                	jne    f010e38e <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e387:	b8 01 00 00 00       	mov    $0x1,%eax
f010e38c:	eb 05                	jmp    f010e393 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e38e:	b8 00 00 00 00       	mov    $0x0,%eax
f010e393:	5d                   	pop    %ebp
f010e394:	c3                   	ret    

f010e395 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e395:	55                   	push   %ebp
f010e396:	89 e5                	mov    %esp,%ebp
f010e398:	a1 84 07 86 f0       	mov    0xf0860784,%eax
f010e39d:	83 f8 06             	cmp    $0x6,%eax
f010e3a0:	75 07                	jne    f010e3a9 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e3a2:	b8 01 00 00 00       	mov    $0x1,%eax
f010e3a7:	eb 05                	jmp    f010e3ae <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e3a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3ae:	5d                   	pop    %ebp
f010e3af:	c3                   	ret    

f010e3b0 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e3b0:	55                   	push   %ebp
f010e3b1:	89 e5                	mov    %esp,%ebp
f010e3b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3b6:	a3 4c 07 86 f0       	mov    %eax,0xf086074c
f010e3bb:	90                   	nop
f010e3bc:	5d                   	pop    %ebp
f010e3bd:	c3                   	ret    

f010e3be <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e3be:	55                   	push   %ebp
f010e3bf:	89 e5                	mov    %esp,%ebp
f010e3c1:	a1 4c 07 86 f0       	mov    0xf086074c,%eax
f010e3c6:	5d                   	pop    %ebp
f010e3c7:	c3                   	ret    

f010e3c8 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e3c8:	55                   	push   %ebp
f010e3c9:	89 e5                	mov    %esp,%ebp
f010e3cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3ce:	a3 8c 07 86 f0       	mov    %eax,0xf086078c
f010e3d3:	90                   	nop
f010e3d4:	5d                   	pop    %ebp
f010e3d5:	c3                   	ret    

f010e3d6 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e3d6:	55                   	push   %ebp
f010e3d7:	89 e5                	mov    %esp,%ebp
f010e3d9:	a1 8c 07 86 f0       	mov    0xf086078c,%eax
f010e3de:	5d                   	pop    %ebp
f010e3df:	c3                   	ret    

f010e3e0 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e3e0:	55                   	push   %ebp
f010e3e1:	89 e5                	mov    %esp,%ebp
f010e3e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3e6:	a3 ac 07 86 f0       	mov    %eax,0xf08607ac
f010e3eb:	90                   	nop
f010e3ec:	5d                   	pop    %ebp
f010e3ed:	c3                   	ret    

f010e3ee <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e3ee:	55                   	push   %ebp
f010e3ef:	89 e5                	mov    %esp,%ebp
f010e3f1:	a1 ac 07 86 f0       	mov    0xf08607ac,%eax
f010e3f6:	5d                   	pop    %ebp
f010e3f7:	c3                   	ret    

f010e3f8 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e3f8:	55                   	push   %ebp
f010e3f9:	89 e5                	mov    %esp,%ebp
f010e3fb:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e3fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010e401:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e404:	83 ec 08             	sub    $0x8,%esp
f010e407:	ff 75 0c             	pushl  0xc(%ebp)
f010e40a:	50                   	push   %eax
f010e40b:	e8 23 88 ff ff       	call   f0106c33 <create_page_table>
f010e410:	83 c4 10             	add    $0x10,%esp
f010e413:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e416:	90                   	nop
f010e417:	c9                   	leave  
f010e418:	c3                   	ret    

f010e419 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e419:	55                   	push   %ebp
f010e41a:	89 e5                	mov    %esp,%ebp
f010e41c:	83 ec 58             	sub    $0x58,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 page_working_set_size=env_page_ws_get_size(curenv);
f010e41f:	83 ec 0c             	sub    $0xc,%esp
f010e422:	ff 75 08             	pushl  0x8(%ebp)
f010e425:	e8 5c 9b ff ff       	call   f0107f86 <env_page_ws_get_size>
f010e42a:	83 c4 10             	add    $0x10,%esp
f010e42d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(page_working_set_size<curenv->page_WS_max_size)
f010e430:	8b 45 08             	mov    0x8(%ebp),%eax
f010e433:	8b 40 74             	mov    0x74(%eax),%eax
f010e436:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e439:	0f 86 ee 00 00 00    	jbe    f010e52d <page_fault_handler+0x114>
	{
	            struct FrameInfo *info =NULL ;
f010e43f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
				int ret = allocate_frame(&info);
f010e446:	83 ec 0c             	sub    $0xc,%esp
f010e449:	8d 45 bc             	lea    -0x44(%ebp),%eax
f010e44c:	50                   	push   %eax
f010e44d:	e8 cc 84 ff ff       	call   f010691e <allocate_frame>
f010e452:	83 c4 10             	add    $0x10,%esp
f010e455:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if(ret!=E_NO_MEM)
f010e458:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010e45c:	0f 84 2b 03 00 00    	je     f010e78d <page_fault_handler+0x374>
				{
				  map_frame(curenv->env_page_directory ,info ,fault_va,PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f010e462:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010e465:	8b 45 08             	mov    0x8(%ebp),%eax
f010e468:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e46b:	6a 07                	push   $0x7
f010e46d:	ff 75 0c             	pushl  0xc(%ebp)
f010e470:	52                   	push   %edx
f010e471:	50                   	push   %eax
f010e472:	e8 f6 88 ff ff       	call   f0106d6d <map_frame>
f010e477:	83 c4 10             	add    $0x10,%esp
				  ret = pf_read_env_page(curenv,(void *)fault_va);
f010e47a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e47d:	83 ec 08             	sub    $0x8,%esp
f010e480:	50                   	push   %eax
f010e481:	ff 75 08             	pushl  0x8(%ebp)
f010e484:	e8 dd 55 ff ff       	call   f0103a66 <pf_read_env_page>
f010e489:	83 c4 10             	add    $0x10,%esp
f010e48c:	89 45 e8             	mov    %eax,-0x18(%ebp)
				  if (ret == E_PAGE_NOT_EXIST_IN_PF)
f010e48f:	83 7d e8 f7          	cmpl   $0xfffffff7,-0x18(%ebp)
f010e493:	75 54                	jne    f010e4e9 <page_fault_handler+0xd0>
				  {
					  // CHECK if it is a stack page or heap page
					  if ((fault_va <USER_HEAP_MAX && fault_va >= USER_HEAP_START)||(fault_va<USTACKTOP&&fault_va>=USTACKBOTTOM))
f010e495:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e49c:	77 07                	ja     f010e4a5 <page_fault_handler+0x8c>
f010e49e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4a1:	85 c0                	test   %eax,%eax
f010e4a3:	78 44                	js     f010e4e9 <page_fault_handler+0xd0>
f010e4a5:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e4ac:	77 27                	ja     f010e4d5 <page_fault_handler+0xbc>
f010e4ae:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010e4b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4b8:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e4bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010e4c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e4c3:	ba 00 00 00 00       	mov    $0x0,%edx
f010e4c8:	f7 75 e4             	divl   -0x1c(%ebp)
f010e4cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e4ce:	29 d0                	sub    %edx,%eax
f010e4d0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e4d3:	76 14                	jbe    f010e4e9 <page_fault_handler+0xd0>
					  {

					  }
					  else
						  panic("ILLEGAL MEMORY ACCESS for the given fault virtual address\n");
f010e4d5:	83 ec 04             	sub    $0x4,%esp
f010e4d8:	68 48 7e 13 f0       	push   $0xf0137e48
f010e4dd:	6a 62                	push   $0x62
f010e4df:	68 2b 7e 13 f0       	push   $0xf0137e2b
f010e4e4:	e8 1c 1d ff ff       	call   f0100205 <_panic>
				  }


					env_page_ws_set_entry(curenv,curenv->page_last_WS_index ,fault_va);
f010e4e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4ec:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e4f2:	83 ec 04             	sub    $0x4,%esp
f010e4f5:	ff 75 0c             	pushl  0xc(%ebp)
f010e4f8:	50                   	push   %eax
f010e4f9:	ff 75 08             	pushl  0x8(%ebp)
f010e4fc:	e8 39 9b ff ff       	call   f010803a <env_page_ws_set_entry>
f010e501:	83 c4 10             	add    $0x10,%esp
				     curenv->page_last_WS_index =( curenv->page_last_WS_index+1)%curenv->page_WS_max_size ;
f010e504:	8b 45 08             	mov    0x8(%ebp),%eax
f010e507:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e50d:	8d 50 01             	lea    0x1(%eax),%edx
f010e510:	8b 45 08             	mov    0x8(%ebp),%eax
f010e513:	8b 48 74             	mov    0x74(%eax),%ecx
f010e516:	89 d0                	mov    %edx,%eax
f010e518:	ba 00 00 00 00       	mov    $0x0,%edx
f010e51d:	f7 f1                	div    %ecx
f010e51f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e522:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

	}


}
}
f010e528:	e9 60 02 00 00       	jmp    f010e78d <page_fault_handler+0x374>
//circular working set
				}
	}
	else
	{
	uint32 size = curenv->page_WS_max_size ;
f010e52d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e530:	8b 40 74             	mov    0x74(%eax),%eax
f010e533:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for(uint32 i=0;i<size;i++)
f010e536:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e53d:	e9 3c 02 00 00       	jmp    f010e77e <page_fault_handler+0x365>
	{
		uint32 va=curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address ;
f010e542:	8b 45 08             	mov    0x8(%ebp),%eax
f010e545:	8b 48 78             	mov    0x78(%eax),%ecx
f010e548:	8b 45 08             	mov    0x8(%ebp),%eax
f010e54b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e551:	89 d0                	mov    %edx,%eax
f010e553:	01 c0                	add    %eax,%eax
f010e555:	01 d0                	add    %edx,%eax
f010e557:	c1 e0 03             	shl    $0x3,%eax
f010e55a:	01 c8                	add    %ecx,%eax
f010e55c:	8b 00                	mov    (%eax),%eax
f010e55e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 perm =pt_get_page_permissions(curenv->env_page_directory,va);
f010e561:	8b 45 08             	mov    0x8(%ebp),%eax
f010e564:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e567:	83 ec 08             	sub    $0x8,%esp
f010e56a:	ff 75 d8             	pushl  -0x28(%ebp)
f010e56d:	50                   	push   %eax
f010e56e:	e8 65 98 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f010e573:	83 c4 10             	add    $0x10,%esp
f010e576:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	    uint32 * ptr_table = NULL ;
f010e579:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
		struct FrameInfo * frame_info_ptr = get_frame_info(curenv->env_page_directory,va, &ptr_table);
f010e580:	8b 45 08             	mov    0x8(%ebp),%eax
f010e583:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e586:	83 ec 04             	sub    $0x4,%esp
f010e589:	8d 55 b8             	lea    -0x48(%ebp),%edx
f010e58c:	52                   	push   %edx
f010e58d:	ff 75 d8             	pushl  -0x28(%ebp)
f010e590:	50                   	push   %eax
f010e591:	e8 9c 88 ff ff       	call   f0106e32 <get_frame_info>
f010e596:	83 c4 10             	add    $0x10,%esp
f010e599:	89 45 d0             	mov    %eax,-0x30(%ebp)


	     if((perm&PERM_USED)==0)
f010e59c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e59f:	83 e0 20             	and    $0x20,%eax
f010e5a2:	85 c0                	test   %eax,%eax
f010e5a4:	0f 85 97 01 00 00    	jne    f010e741 <page_fault_handler+0x328>
	        {
             if((perm&PERM_MODIFIED)==PERM_MODIFIED)
f010e5aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5ad:	83 e0 40             	and    $0x40,%eax
f010e5b0:	85 c0                	test   %eax,%eax
f010e5b2:	74 17                	je     f010e5cb <page_fault_handler+0x1b2>

            {
	           int ret = pf_update_env_page(curenv,va,frame_info_ptr) ;
f010e5b4:	83 ec 04             	sub    $0x4,%esp
f010e5b7:	ff 75 d0             	pushl  -0x30(%ebp)
f010e5ba:	ff 75 d8             	pushl  -0x28(%ebp)
f010e5bd:	ff 75 08             	pushl  0x8(%ebp)
f010e5c0:	e8 3f 52 ff ff       	call   f0103804 <pf_update_env_page>
f010e5c5:	83 c4 10             	add    $0x10,%esp
f010e5c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
            }
          unmap_frame(curenv->env_page_directory,va);
f010e5cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5ce:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e5d1:	83 ec 08             	sub    $0x8,%esp
f010e5d4:	ff 75 d8             	pushl  -0x28(%ebp)
f010e5d7:	50                   	push   %eax
f010e5d8:	e8 c5 88 ff ff       	call   f0106ea2 <unmap_frame>
f010e5dd:	83 c4 10             	add    $0x10,%esp
     	  env_page_ws_invalidate(curenv,va);
f010e5e0:	83 ec 08             	sub    $0x8,%esp
f010e5e3:	ff 75 d8             	pushl  -0x28(%ebp)
f010e5e6:	ff 75 08             	pushl  0x8(%ebp)
f010e5e9:	e8 e1 99 ff ff       	call   f0107fcf <env_page_ws_invalidate>
f010e5ee:	83 c4 10             	add    $0x10,%esp
     	  struct FrameInfo *info =NULL ;
f010e5f1:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
     	 				int ret = allocate_frame(&info);
f010e5f8:	83 ec 0c             	sub    $0xc,%esp
f010e5fb:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e5fe:	50                   	push   %eax
f010e5ff:	e8 1a 83 ff ff       	call   f010691e <allocate_frame>
f010e604:	83 c4 10             	add    $0x10,%esp
f010e607:	89 45 c8             	mov    %eax,-0x38(%ebp)
     	 				if(ret!=E_NO_MEM)
f010e60a:	83 7d c8 fc          	cmpl   $0xfffffffc,-0x38(%ebp)
f010e60e:	0f 84 78 01 00 00    	je     f010e78c <page_fault_handler+0x373>
     	 				{
     	 				  map_frame(curenv->env_page_directory ,info ,fault_va,PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f010e614:	8b 55 b4             	mov    -0x4c(%ebp),%edx
f010e617:	8b 45 08             	mov    0x8(%ebp),%eax
f010e61a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e61d:	6a 07                	push   $0x7
f010e61f:	ff 75 0c             	pushl  0xc(%ebp)
f010e622:	52                   	push   %edx
f010e623:	50                   	push   %eax
f010e624:	e8 44 87 ff ff       	call   f0106d6d <map_frame>
f010e629:	83 c4 10             	add    $0x10,%esp
     	 				  ret = pf_read_env_page(curenv,(void *)fault_va);
f010e62c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e62f:	83 ec 08             	sub    $0x8,%esp
f010e632:	50                   	push   %eax
f010e633:	ff 75 08             	pushl  0x8(%ebp)
f010e636:	e8 2b 54 ff ff       	call   f0103a66 <pf_read_env_page>
f010e63b:	83 c4 10             	add    $0x10,%esp
f010e63e:	89 45 c8             	mov    %eax,-0x38(%ebp)
     	 				  if (ret == E_PAGE_NOT_EXIST_IN_PF)
f010e641:	83 7d c8 f7          	cmpl   $0xfffffff7,-0x38(%ebp)
f010e645:	75 57                	jne    f010e69e <page_fault_handler+0x285>
     	 				  {
     	 					  // CHECK if it is a stack page or heap page
     	 					  if ((fault_va <USER_HEAP_MAX && fault_va >= USER_HEAP_START)||(fault_va<USTACKTOP&&fault_va>=USTACKBOTTOM))
f010e647:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e64e:	77 07                	ja     f010e657 <page_fault_handler+0x23e>
f010e650:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e653:	85 c0                	test   %eax,%eax
f010e655:	78 47                	js     f010e69e <page_fault_handler+0x285>
f010e657:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e65e:	77 27                	ja     f010e687 <page_fault_handler+0x26e>
f010e660:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010e667:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e66a:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e66f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010e672:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e675:	ba 00 00 00 00       	mov    $0x0,%edx
f010e67a:	f7 75 c4             	divl   -0x3c(%ebp)
f010e67d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e680:	29 d0                	sub    %edx,%eax
f010e682:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e685:	76 17                	jbe    f010e69e <page_fault_handler+0x285>
     	 					  {

     	 					  }
     	 					  else
     	 						  panic("ILLEGAL MEMORY ACCESS for the given fault virtual address\n");
f010e687:	83 ec 04             	sub    $0x4,%esp
f010e68a:	68 48 7e 13 f0       	push   $0xf0137e48
f010e68f:	68 8d 00 00 00       	push   $0x8d
f010e694:	68 2b 7e 13 f0       	push   $0xf0137e2b
f010e699:	e8 67 1b ff ff       	call   f0100205 <_panic>

     	 				  }


     	 					for( uint32 i =0 ; i<size;i++)
f010e69e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e6a5:	eb 4d                	jmp    f010e6f4 <page_fault_handler+0x2db>
     	 					{
     	 						if(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].empty)
f010e6a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6aa:	8b 48 78             	mov    0x78(%eax),%ecx
f010e6ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6b0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e6b6:	89 d0                	mov    %edx,%eax
f010e6b8:	01 c0                	add    %eax,%eax
f010e6ba:	01 d0                	add    %edx,%eax
f010e6bc:	c1 e0 03             	shl    $0x3,%eax
f010e6bf:	01 c8                	add    %ecx,%eax
f010e6c1:	8a 40 04             	mov    0x4(%eax),%al
f010e6c4:	84 c0                	test   %al,%al
f010e6c6:	75 36                	jne    f010e6fe <page_fault_handler+0x2e5>
     	 							break;
     	 						else if(curenv->ptr_pageWorkingSet[i].empty)
f010e6c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6cb:	8b 48 78             	mov    0x78(%eax),%ecx
f010e6ce:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e6d1:	89 d0                	mov    %edx,%eax
f010e6d3:	01 c0                	add    %eax,%eax
f010e6d5:	01 d0                	add    %edx,%eax
f010e6d7:	c1 e0 03             	shl    $0x3,%eax
f010e6da:	01 c8                	add    %ecx,%eax
f010e6dc:	8a 40 04             	mov    0x4(%eax),%al
f010e6df:	84 c0                	test   %al,%al
f010e6e1:	74 0e                	je     f010e6f1 <page_fault_handler+0x2d8>
     	 						{
     	 							curenv->page_last_WS_index = i ;
f010e6e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e6e9:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
     	 							break ;
f010e6ef:	eb 0e                	jmp    f010e6ff <page_fault_handler+0x2e6>
     	 						  panic("ILLEGAL MEMORY ACCESS for the given fault virtual address\n");

     	 				  }


     	 					for( uint32 i =0 ; i<size;i++)
f010e6f1:	ff 45 f0             	incl   -0x10(%ebp)
f010e6f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e6f7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010e6fa:	72 ab                	jb     f010e6a7 <page_fault_handler+0x28e>
f010e6fc:	eb 01                	jmp    f010e6ff <page_fault_handler+0x2e6>
     	 					{
     	 						if(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].empty)
     	 							break;
f010e6fe:	90                   	nop
     	 						{
     	 							curenv->page_last_WS_index = i ;
     	 							break ;
     	 						}
     	 					}
     	 					env_page_ws_set_entry(curenv,curenv->page_last_WS_index ,fault_va);
f010e6ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010e702:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e708:	83 ec 04             	sub    $0x4,%esp
f010e70b:	ff 75 0c             	pushl  0xc(%ebp)
f010e70e:	50                   	push   %eax
f010e70f:	ff 75 08             	pushl  0x8(%ebp)
f010e712:	e8 23 99 ff ff       	call   f010803a <env_page_ws_set_entry>
f010e717:	83 c4 10             	add    $0x10,%esp
     	 				     curenv->page_last_WS_index =( curenv->page_last_WS_index+1)%curenv->page_WS_max_size ;
f010e71a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e71d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e723:	8d 50 01             	lea    0x1(%eax),%edx
f010e726:	8b 45 08             	mov    0x8(%ebp),%eax
f010e729:	8b 48 74             	mov    0x74(%eax),%ecx
f010e72c:	89 d0                	mov    %edx,%eax
f010e72e:	ba 00 00 00 00       	mov    $0x0,%edx
f010e733:	f7 f1                	div    %ecx
f010e735:	8b 45 08             	mov    0x8(%ebp),%eax
f010e738:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
                             //circular working set
     	 				}

	              break;
f010e73e:	90                   	nop
f010e73f:	eb 4b                	jmp    f010e78c <page_fault_handler+0x373>
	        }
	    pt_set_page_permissions(curenv->env_page_directory,va,0,PERM_USED);
f010e741:	8b 45 08             	mov    0x8(%ebp),%eax
f010e744:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e747:	6a 20                	push   $0x20
f010e749:	6a 00                	push   $0x0
f010e74b:	ff 75 d8             	pushl  -0x28(%ebp)
f010e74e:	50                   	push   %eax
f010e74f:	e8 cf 95 ff ff       	call   f0107d23 <pt_set_page_permissions>
f010e754:	83 c4 10             	add    $0x10,%esp

	     curenv->page_last_WS_index =( curenv->page_last_WS_index+1)%curenv->page_WS_max_size ;
f010e757:	8b 45 08             	mov    0x8(%ebp),%eax
f010e75a:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e760:	8d 50 01             	lea    0x1(%eax),%edx
f010e763:	8b 45 08             	mov    0x8(%ebp),%eax
f010e766:	8b 48 74             	mov    0x74(%eax),%ecx
f010e769:	89 d0                	mov    %edx,%eax
f010e76b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e770:	f7 f1                	div    %ecx
f010e772:	8b 45 08             	mov    0x8(%ebp),%eax
f010e775:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
				}
	}
	else
	{
	uint32 size = curenv->page_WS_max_size ;
	for(uint32 i=0;i<size;i++)
f010e77b:	ff 45 f4             	incl   -0xc(%ebp)
f010e77e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e781:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010e784:	0f 82 b8 fd ff ff    	jb     f010e542 <page_fault_handler+0x129>

	}


}
}
f010e78a:	eb 01                	jmp    f010e78d <page_fault_handler+0x374>
     	 					env_page_ws_set_entry(curenv,curenv->page_last_WS_index ,fault_va);
     	 				     curenv->page_last_WS_index =( curenv->page_last_WS_index+1)%curenv->page_WS_max_size ;
                             //circular working set
     	 				}

	              break;
f010e78c:	90                   	nop

	}


}
}
f010e78d:	90                   	nop
f010e78e:	c9                   	leave  
f010e78f:	c3                   	ret    

f010e790 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e790:	55                   	push   %ebp
f010e791:	89 e5                	mov    %esp,%ebp
f010e793:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e796:	83 ec 04             	sub    $0x4,%esp
f010e799:	68 84 7e 13 f0       	push   $0xf0137e84
f010e79e:	68 b0 00 00 00       	push   $0xb0
f010e7a3:	68 2b 7e 13 f0       	push   $0xf0137e2b
f010e7a8:	e8 58 1a ff ff       	call   f0100205 <_panic>

f010e7ad <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e7ad:	55                   	push   %ebp
f010e7ae:	89 e5                	mov    %esp,%ebp
f010e7b0:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e7b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7b6:	a3 b0 06 86 f0       	mov    %eax,0xf08606b0
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e7bb:	8b 55 08             	mov    0x8(%ebp),%edx
f010e7be:	89 d0                	mov    %edx,%eax
f010e7c0:	c1 e0 02             	shl    $0x2,%eax
f010e7c3:	01 d0                	add    %edx,%eax
f010e7c5:	01 c0                	add    %eax,%eax
f010e7c7:	01 d0                	add    %edx,%eax
f010e7c9:	01 c0                	add    %eax,%eax
f010e7cb:	01 d0                	add    %edx,%eax
f010e7cd:	c1 e0 02             	shl    $0x2,%eax
f010e7d0:	83 ec 0c             	sub    $0xc,%esp
f010e7d3:	50                   	push   %eax
f010e7d4:	e8 8d 92 ff ff       	call   f0107a66 <kmalloc>
f010e7d9:	83 c4 10             	add    $0x10,%esp
f010e7dc:	a3 08 07 86 f0       	mov    %eax,0xf0860708
	if (semaphores == NULL)
f010e7e1:	a1 08 07 86 f0       	mov    0xf0860708,%eax
f010e7e6:	85 c0                	test   %eax,%eax
f010e7e8:	75 14                	jne    f010e7fe <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e7ea:	83 ec 04             	sub    $0x4,%esp
f010e7ed:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010e7f2:	6a 1e                	push   $0x1e
f010e7f4:	68 08 7f 13 f0       	push   $0xf0137f08
f010e7f9:	e8 07 1a ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e7fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e805:	e9 bd 00 00 00       	jmp    f010e8c7 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e80a:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e810:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e813:	89 d0                	mov    %edx,%eax
f010e815:	c1 e0 02             	shl    $0x2,%eax
f010e818:	01 d0                	add    %edx,%eax
f010e81a:	01 c0                	add    %eax,%eax
f010e81c:	01 d0                	add    %edx,%eax
f010e81e:	01 c0                	add    %eax,%eax
f010e820:	01 d0                	add    %edx,%eax
f010e822:	c1 e0 02             	shl    $0x2,%eax
f010e825:	01 c8                	add    %ecx,%eax
f010e827:	83 ec 04             	sub    $0x4,%esp
f010e82a:	6a 5c                	push   $0x5c
f010e82c:	6a 00                	push   $0x0
f010e82e:	50                   	push   %eax
f010e82f:	e8 aa 33 02 00       	call   f0131bde <memset>
f010e834:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e837:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e83d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e840:	89 d0                	mov    %edx,%eax
f010e842:	c1 e0 02             	shl    $0x2,%eax
f010e845:	01 d0                	add    %edx,%eax
f010e847:	01 c0                	add    %eax,%eax
f010e849:	01 d0                	add    %edx,%eax
f010e84b:	01 c0                	add    %eax,%eax
f010e84d:	01 d0                	add    %edx,%eax
f010e84f:	c1 e0 02             	shl    $0x2,%eax
f010e852:	01 c8                	add    %ecx,%eax
f010e854:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e858:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e85e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e861:	89 d0                	mov    %edx,%eax
f010e863:	c1 e0 02             	shl    $0x2,%eax
f010e866:	01 d0                	add    %edx,%eax
f010e868:	01 c0                	add    %eax,%eax
f010e86a:	01 d0                	add    %edx,%eax
f010e86c:	01 c0                	add    %eax,%eax
f010e86e:	01 d0                	add    %edx,%eax
f010e870:	c1 e0 02             	shl    $0x2,%eax
f010e873:	01 c8                	add    %ecx,%eax
f010e875:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e87c:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e882:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e885:	89 d0                	mov    %edx,%eax
f010e887:	c1 e0 02             	shl    $0x2,%eax
f010e88a:	01 d0                	add    %edx,%eax
f010e88c:	01 c0                	add    %eax,%eax
f010e88e:	01 d0                	add    %edx,%eax
f010e890:	01 c0                	add    %eax,%eax
f010e892:	01 d0                	add    %edx,%eax
f010e894:	c1 e0 02             	shl    $0x2,%eax
f010e897:	01 c8                	add    %ecx,%eax
f010e899:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e8a0:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e8a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8a9:	89 d0                	mov    %edx,%eax
f010e8ab:	c1 e0 02             	shl    $0x2,%eax
f010e8ae:	01 d0                	add    %edx,%eax
f010e8b0:	01 c0                	add    %eax,%eax
f010e8b2:	01 d0                	add    %edx,%eax
f010e8b4:	01 c0                	add    %eax,%eax
f010e8b6:	01 d0                	add    %edx,%eax
f010e8b8:	c1 e0 02             	shl    $0x2,%eax
f010e8bb:	01 c8                	add    %ecx,%eax
f010e8bd:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e8c4:	ff 45 f4             	incl   -0xc(%ebp)
f010e8c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8ca:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010e8cf:	39 c2                	cmp    %eax,%edx
f010e8d1:	0f 82 33 ff ff ff    	jb     f010e80a <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e8d7:	90                   	nop
f010e8d8:	c9                   	leave  
f010e8d9:	c3                   	ret    

f010e8da <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e8da:	55                   	push   %ebp
f010e8db:	89 e5                	mov    %esp,%ebp
f010e8dd:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e8e0:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e8e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e8ee:	eb 2f                	jmp    f010e91f <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e8f0:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e8f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e8f9:	89 d0                	mov    %edx,%eax
f010e8fb:	c1 e0 02             	shl    $0x2,%eax
f010e8fe:	01 d0                	add    %edx,%eax
f010e900:	01 c0                	add    %eax,%eax
f010e902:	01 d0                	add    %edx,%eax
f010e904:	01 c0                	add    %eax,%eax
f010e906:	01 d0                	add    %edx,%eax
f010e908:	c1 e0 02             	shl    $0x2,%eax
f010e90b:	01 c8                	add    %ecx,%eax
f010e90d:	8a 40 58             	mov    0x58(%eax),%al
f010e910:	84 c0                	test   %al,%al
f010e912:	74 08                	je     f010e91c <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e914:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e917:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e91a:	eb 0f                	jmp    f010e92b <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e91c:	ff 45 f0             	incl   -0x10(%ebp)
f010e91f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e922:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010e927:	39 c2                	cmp    %eax,%edx
f010e929:	72 c5                	jb     f010e8f0 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e92b:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e92f:	75 4d                	jne    f010e97e <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e931:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010e936:	01 c0                	add    %eax,%eax
f010e938:	89 c2                	mov    %eax,%edx
f010e93a:	a1 08 07 86 f0       	mov    0xf0860708,%eax
f010e93f:	83 ec 08             	sub    $0x8,%esp
f010e942:	52                   	push   %edx
f010e943:	50                   	push   %eax
f010e944:	e8 bd 93 ff ff       	call   f0107d06 <krealloc>
f010e949:	83 c4 10             	add    $0x10,%esp
f010e94c:	a3 08 07 86 f0       	mov    %eax,0xf0860708
			if (semaphores == NULL)
f010e951:	a1 08 07 86 f0       	mov    0xf0860708,%eax
f010e956:	85 c0                	test   %eax,%eax
f010e958:	75 10                	jne    f010e96a <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e95a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e95d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e963:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e968:	eb 5b                	jmp    f010e9c5 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e96a:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010e96f:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e972:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010e977:	01 c0                	add    %eax,%eax
f010e979:	a3 b0 06 86 f0       	mov    %eax,0xf08606b0
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e97e:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e984:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e987:	89 d0                	mov    %edx,%eax
f010e989:	c1 e0 02             	shl    $0x2,%eax
f010e98c:	01 d0                	add    %edx,%eax
f010e98e:	01 c0                	add    %eax,%eax
f010e990:	01 d0                	add    %edx,%eax
f010e992:	01 c0                	add    %eax,%eax
f010e994:	01 d0                	add    %edx,%eax
f010e996:	c1 e0 02             	shl    $0x2,%eax
f010e999:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e99c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e99f:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e9a1:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e9a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9aa:	89 d0                	mov    %edx,%eax
f010e9ac:	c1 e0 02             	shl    $0x2,%eax
f010e9af:	01 d0                	add    %edx,%eax
f010e9b1:	01 c0                	add    %eax,%eax
f010e9b3:	01 d0                	add    %edx,%eax
f010e9b5:	01 c0                	add    %eax,%eax
f010e9b7:	01 d0                	add    %edx,%eax
f010e9b9:	c1 e0 02             	shl    $0x2,%eax
f010e9bc:	01 c8                	add    %ecx,%eax
f010e9be:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e9c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e9c5:	c9                   	leave  
f010e9c6:	c3                   	ret    

f010e9c7 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e9c7:	55                   	push   %ebp
f010e9c8:	89 e5                	mov    %esp,%ebp
f010e9ca:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e9cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e9d4:	e9 84 00 00 00       	jmp    f010ea5d <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e9d9:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010e9df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9e2:	89 d0                	mov    %edx,%eax
f010e9e4:	c1 e0 02             	shl    $0x2,%eax
f010e9e7:	01 d0                	add    %edx,%eax
f010e9e9:	01 c0                	add    %eax,%eax
f010e9eb:	01 d0                	add    %edx,%eax
f010e9ed:	01 c0                	add    %eax,%eax
f010e9ef:	01 d0                	add    %edx,%eax
f010e9f1:	c1 e0 02             	shl    $0x2,%eax
f010e9f4:	01 c8                	add    %ecx,%eax
f010e9f6:	8a 40 58             	mov    0x58(%eax),%al
f010e9f9:	84 c0                	test   %al,%al
f010e9fb:	75 5c                	jne    f010ea59 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e9fd:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ea03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea06:	89 d0                	mov    %edx,%eax
f010ea08:	c1 e0 02             	shl    $0x2,%eax
f010ea0b:	01 d0                	add    %edx,%eax
f010ea0d:	01 c0                	add    %eax,%eax
f010ea0f:	01 d0                	add    %edx,%eax
f010ea11:	01 c0                	add    %eax,%eax
f010ea13:	01 d0                	add    %edx,%eax
f010ea15:	c1 e0 02             	shl    $0x2,%eax
f010ea18:	01 c8                	add    %ecx,%eax
f010ea1a:	8b 00                	mov    (%eax),%eax
f010ea1c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ea1f:	75 39                	jne    f010ea5a <get_semaphore_object_ID+0x93>
f010ea21:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ea27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea2a:	89 d0                	mov    %edx,%eax
f010ea2c:	c1 e0 02             	shl    $0x2,%eax
f010ea2f:	01 d0                	add    %edx,%eax
f010ea31:	01 c0                	add    %eax,%eax
f010ea33:	01 d0                	add    %edx,%eax
f010ea35:	01 c0                	add    %eax,%eax
f010ea37:	01 d0                	add    %edx,%eax
f010ea39:	c1 e0 02             	shl    $0x2,%eax
f010ea3c:	01 c8                	add    %ecx,%eax
f010ea3e:	83 c0 04             	add    $0x4,%eax
f010ea41:	83 ec 08             	sub    $0x8,%esp
f010ea44:	50                   	push   %eax
f010ea45:	ff 75 0c             	pushl  0xc(%ebp)
f010ea48:	e8 af 30 02 00       	call   f0131afc <strcmp>
f010ea4d:	83 c4 10             	add    $0x10,%esp
f010ea50:	85 c0                	test   %eax,%eax
f010ea52:	75 06                	jne    f010ea5a <get_semaphore_object_ID+0x93>
		{
			return i;
f010ea54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea57:	eb 19                	jmp    f010ea72 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010ea59:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010ea5a:	ff 45 f4             	incl   -0xc(%ebp)
f010ea5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea60:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010ea65:	39 c2                	cmp    %eax,%edx
f010ea67:	0f 82 6c ff ff ff    	jb     f010e9d9 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010ea6d:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010ea72:	c9                   	leave  
f010ea73:	c3                   	ret    

f010ea74 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010ea74:	55                   	push   %ebp
f010ea75:	89 e5                	mov    %esp,%ebp
f010ea77:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010ea7a:	a1 b0 06 86 f0       	mov    0xf08606b0,%eax
f010ea7f:	39 45 08             	cmp    %eax,0x8(%ebp)
f010ea82:	72 0a                	jb     f010ea8e <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010ea84:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010ea89:	e9 bf 00 00 00       	jmp    f010eb4d <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010ea8e:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ea94:	8b 55 08             	mov    0x8(%ebp),%edx
f010ea97:	89 d0                	mov    %edx,%eax
f010ea99:	c1 e0 02             	shl    $0x2,%eax
f010ea9c:	01 d0                	add    %edx,%eax
f010ea9e:	01 c0                	add    %eax,%eax
f010eaa0:	01 d0                	add    %edx,%eax
f010eaa2:	01 c0                	add    %eax,%eax
f010eaa4:	01 d0                	add    %edx,%eax
f010eaa6:	c1 e0 02             	shl    $0x2,%eax
f010eaa9:	01 c8                	add    %ecx,%eax
f010eaab:	83 ec 04             	sub    $0x4,%esp
f010eaae:	6a 5c                	push   $0x5c
f010eab0:	6a 00                	push   $0x0
f010eab2:	50                   	push   %eax
f010eab3:	e8 26 31 02 00       	call   f0131bde <memset>
f010eab8:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010eabb:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010eac1:	8b 55 08             	mov    0x8(%ebp),%edx
f010eac4:	89 d0                	mov    %edx,%eax
f010eac6:	c1 e0 02             	shl    $0x2,%eax
f010eac9:	01 d0                	add    %edx,%eax
f010eacb:	01 c0                	add    %eax,%eax
f010eacd:	01 d0                	add    %edx,%eax
f010eacf:	01 c0                	add    %eax,%eax
f010ead1:	01 d0                	add    %edx,%eax
f010ead3:	c1 e0 02             	shl    $0x2,%eax
f010ead6:	01 c8                	add    %ecx,%eax
f010ead8:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010eadc:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010eae2:	8b 55 08             	mov    0x8(%ebp),%edx
f010eae5:	89 d0                	mov    %edx,%eax
f010eae7:	c1 e0 02             	shl    $0x2,%eax
f010eaea:	01 d0                	add    %edx,%eax
f010eaec:	01 c0                	add    %eax,%eax
f010eaee:	01 d0                	add    %edx,%eax
f010eaf0:	01 c0                	add    %eax,%eax
f010eaf2:	01 d0                	add    %edx,%eax
f010eaf4:	c1 e0 02             	shl    $0x2,%eax
f010eaf7:	01 c8                	add    %ecx,%eax
f010eaf9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010eb00:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010eb06:	8b 55 08             	mov    0x8(%ebp),%edx
f010eb09:	89 d0                	mov    %edx,%eax
f010eb0b:	c1 e0 02             	shl    $0x2,%eax
f010eb0e:	01 d0                	add    %edx,%eax
f010eb10:	01 c0                	add    %eax,%eax
f010eb12:	01 d0                	add    %edx,%eax
f010eb14:	01 c0                	add    %eax,%eax
f010eb16:	01 d0                	add    %edx,%eax
f010eb18:	c1 e0 02             	shl    $0x2,%eax
f010eb1b:	01 c8                	add    %ecx,%eax
f010eb1d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010eb24:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010eb2a:	8b 55 08             	mov    0x8(%ebp),%edx
f010eb2d:	89 d0                	mov    %edx,%eax
f010eb2f:	c1 e0 02             	shl    $0x2,%eax
f010eb32:	01 d0                	add    %edx,%eax
f010eb34:	01 c0                	add    %eax,%eax
f010eb36:	01 d0                	add    %edx,%eax
f010eb38:	01 c0                	add    %eax,%eax
f010eb3a:	01 d0                	add    %edx,%eax
f010eb3c:	c1 e0 02             	shl    $0x2,%eax
f010eb3f:	01 c8                	add    %ecx,%eax
f010eb41:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010eb48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eb4d:	c9                   	leave  
f010eb4e:	c3                   	ret    

f010eb4f <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010eb4f:	55                   	push   %ebp
f010eb50:	89 e5                	mov    %esp,%ebp
f010eb52:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] createSemaphore
	// your code is here, remove the panic and write your code
	//panic("createSemaphore() is not implemented yet...!!");
	int ret = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010eb55:	83 ec 08             	sub    $0x8,%esp
f010eb58:	ff 75 0c             	pushl  0xc(%ebp)
f010eb5b:	ff 75 08             	pushl  0x8(%ebp)
f010eb5e:	e8 64 fe ff ff       	call   f010e9c7 <get_semaphore_object_ID>
f010eb63:	83 c4 10             	add    $0x10,%esp
f010eb66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret!=E_SEMAPHORE_NOT_EXISTS)
f010eb69:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010eb6d:	74 0a                	je     f010eb79 <createSemaphore+0x2a>
		{

			return E_SEMAPHORE_EXISTS  ;
f010eb6f:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010eb74:	e9 9f 00 00 00       	jmp    f010ec18 <createSemaphore+0xc9>
		}

		struct Semaphore * semaphore_ptr = NULL ;
f010eb79:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		  ret = allocate_semaphore_object(&semaphore_ptr);
f010eb80:	83 ec 0c             	sub    $0xc,%esp
f010eb83:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010eb86:	50                   	push   %eax
f010eb87:	e8 4e fd ff ff       	call   f010e8da <allocate_semaphore_object>
f010eb8c:	83 c4 10             	add    $0x10,%esp
f010eb8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 if(ret !=E_NO_SEMAPHORE)
f010eb92:	83 7d f4 f5          	cmpl   $0xfffffff5,-0xc(%ebp)
f010eb96:	74 7b                	je     f010ec13 <createSemaphore+0xc4>
		 {


			 semaphores[ret].ownerID = ownerEnvID ;
f010eb98:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010eb9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eba1:	89 d0                	mov    %edx,%eax
f010eba3:	c1 e0 02             	shl    $0x2,%eax
f010eba6:	01 d0                	add    %edx,%eax
f010eba8:	01 c0                	add    %eax,%eax
f010ebaa:	01 d0                	add    %edx,%eax
f010ebac:	01 c0                	add    %eax,%eax
f010ebae:	01 d0                	add    %edx,%eax
f010ebb0:	c1 e0 02             	shl    $0x2,%eax
f010ebb3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ebb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebb9:	89 02                	mov    %eax,(%edx)
			 strcpy(semaphores[ret].name, semaphoreName);
f010ebbb:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ebc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ebc4:	89 d0                	mov    %edx,%eax
f010ebc6:	c1 e0 02             	shl    $0x2,%eax
f010ebc9:	01 d0                	add    %edx,%eax
f010ebcb:	01 c0                	add    %eax,%eax
f010ebcd:	01 d0                	add    %edx,%eax
f010ebcf:	01 c0                	add    %eax,%eax
f010ebd1:	01 d0                	add    %edx,%eax
f010ebd3:	c1 e0 02             	shl    $0x2,%eax
f010ebd6:	01 c8                	add    %ecx,%eax
f010ebd8:	83 c0 04             	add    $0x4,%eax
f010ebdb:	83 ec 08             	sub    $0x8,%esp
f010ebde:	ff 75 0c             	pushl  0xc(%ebp)
f010ebe1:	50                   	push   %eax
f010ebe2:	e8 58 2e 02 00       	call   f0131a3f <strcpy>
f010ebe7:	83 c4 10             	add    $0x10,%esp
			 semaphores[ret].value   = initialValue ;
f010ebea:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ebf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ebf3:	89 d0                	mov    %edx,%eax
f010ebf5:	c1 e0 02             	shl    $0x2,%eax
f010ebf8:	01 d0                	add    %edx,%eax
f010ebfa:	01 c0                	add    %eax,%eax
f010ebfc:	01 d0                	add    %edx,%eax
f010ebfe:	01 c0                	add    %eax,%eax
f010ec00:	01 d0                	add    %edx,%eax
f010ec02:	c1 e0 02             	shl    $0x2,%eax
f010ec05:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ec08:	8b 45 10             	mov    0x10(%ebp),%eax
f010ec0b:	89 42 54             	mov    %eax,0x54(%edx)
			 return ret ;
f010ec0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec11:	eb 05                	jmp    f010ec18 <createSemaphore+0xc9>
		 }
		//	c) E_NO_SEMAPHORE if the the array of semaphores is full
		//change this "return" according to your answer
		return E_NO_SEMAPHORE;
f010ec13:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full


}
f010ec18:	c9                   	leave  
f010ec19:	c3                   	ret    

f010ec1a <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010ec1a:	55                   	push   %ebp
f010ec1b:	89 e5                	mov    %esp,%ebp
f010ec1d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010ec20:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f010ec25:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int ret=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010ec28:	83 ec 08             	sub    $0x8,%esp
f010ec2b:	ff 75 0c             	pushl  0xc(%ebp)
f010ec2e:	ff 75 08             	pushl  0x8(%ebp)
f010ec31:	e8 91 fd ff ff       	call   f010e9c7 <get_semaphore_object_ID>
f010ec36:	83 c4 10             	add    $0x10,%esp
f010ec39:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(ret!=E_SEMAPHORE_NOT_EXISTS)
f010ec3c:	83 7d f0 f3          	cmpl   $0xfffffff3,-0x10(%ebp)
f010ec40:	0f 84 99 00 00 00    	je     f010ecdf <waitSemaphore+0xc5>
		{
		semaphores[ret].value--;
f010ec46:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ec4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec4f:	89 d0                	mov    %edx,%eax
f010ec51:	c1 e0 02             	shl    $0x2,%eax
f010ec54:	01 d0                	add    %edx,%eax
f010ec56:	01 c0                	add    %eax,%eax
f010ec58:	01 d0                	add    %edx,%eax
f010ec5a:	01 c0                	add    %eax,%eax
f010ec5c:	01 d0                	add    %edx,%eax
f010ec5e:	c1 e0 02             	shl    $0x2,%eax
f010ec61:	01 c8                	add    %ecx,%eax
f010ec63:	8b 50 54             	mov    0x54(%eax),%edx
f010ec66:	4a                   	dec    %edx
f010ec67:	89 50 54             	mov    %edx,0x54(%eax)

		if(semaphores[ret].value<0){
f010ec6a:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ec70:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec73:	89 d0                	mov    %edx,%eax
f010ec75:	c1 e0 02             	shl    $0x2,%eax
f010ec78:	01 d0                	add    %edx,%eax
f010ec7a:	01 c0                	add    %eax,%eax
f010ec7c:	01 d0                	add    %edx,%eax
f010ec7e:	01 c0                	add    %eax,%eax
f010ec80:	01 d0                	add    %edx,%eax
f010ec82:	c1 e0 02             	shl    $0x2,%eax
f010ec85:	01 c8                	add    %ecx,%eax
f010ec87:	8b 40 54             	mov    0x54(%eax),%eax
f010ec8a:	85 c0                	test   %eax,%eax
f010ec8c:	79 51                	jns    f010ecdf <waitSemaphore+0xc5>
			sched_remove_ready(myenv);
f010ec8e:	83 ec 0c             	sub    $0xc,%esp
f010ec91:	ff 75 f4             	pushl  -0xc(%ebp)
f010ec94:	e8 0c 5d ff ff       	call   f01049a5 <sched_remove_ready>
f010ec99:	83 c4 10             	add    $0x10,%esp
			enqueue(&semaphores[ret].env_queue, myenv);
f010ec9c:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010eca2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010eca5:	89 d0                	mov    %edx,%eax
f010eca7:	c1 e0 02             	shl    $0x2,%eax
f010ecaa:	01 d0                	add    %edx,%eax
f010ecac:	01 c0                	add    %eax,%eax
f010ecae:	01 d0                	add    %edx,%eax
f010ecb0:	01 c0                	add    %eax,%eax
f010ecb2:	01 d0                	add    %edx,%eax
f010ecb4:	c1 e0 02             	shl    $0x2,%eax
f010ecb7:	01 c8                	add    %ecx,%eax
f010ecb9:	83 c0 44             	add    $0x44,%eax
f010ecbc:	83 ec 08             	sub    $0x8,%esp
f010ecbf:	ff 75 f4             	pushl  -0xc(%ebp)
f010ecc2:	50                   	push   %eax
f010ecc3:	e8 01 58 ff ff       	call   f01044c9 <enqueue>
f010ecc8:	83 c4 10             	add    $0x10,%esp

			myenv->env_status=ENV_BLOCKED;
f010eccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ecce:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			curenv=NULL;
f010ecd5:	c7 05 f4 fd 85 f0 00 	movl   $0x0,0xf085fdf4
f010ecdc:	00 00 00 

		}
		}
		fos_scheduler();
f010ecdf:	e8 6e 5a ff ff       	call   f0104752 <fos_scheduler>

f010ece4 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010ece4:	55                   	push   %ebp
f010ece5:	89 e5                	mov    %esp,%ebp
f010ece7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] signalSemaphore
	// your code is here, remove the panic and write your code
	//panic("signalSemaphore() is not implemented yet...!!");
	struct Env* myenv;
		int ret=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010ecea:	83 ec 08             	sub    $0x8,%esp
f010eced:	ff 75 0c             	pushl  0xc(%ebp)
f010ecf0:	ff 75 08             	pushl  0x8(%ebp)
f010ecf3:	e8 cf fc ff ff       	call   f010e9c7 <get_semaphore_object_ID>
f010ecf8:	83 c4 10             	add    $0x10,%esp
f010ecfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret!= E_SEMAPHORE_NOT_EXISTS)
f010ecfe:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010ed02:	0f 84 8f 00 00 00    	je     f010ed97 <signalSemaphore+0xb3>
		{
		 semaphores[ret].value++;
f010ed08:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ed0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed11:	89 d0                	mov    %edx,%eax
f010ed13:	c1 e0 02             	shl    $0x2,%eax
f010ed16:	01 d0                	add    %edx,%eax
f010ed18:	01 c0                	add    %eax,%eax
f010ed1a:	01 d0                	add    %edx,%eax
f010ed1c:	01 c0                	add    %eax,%eax
f010ed1e:	01 d0                	add    %edx,%eax
f010ed20:	c1 e0 02             	shl    $0x2,%eax
f010ed23:	01 c8                	add    %ecx,%eax
f010ed25:	8b 50 54             	mov    0x54(%eax),%edx
f010ed28:	42                   	inc    %edx
f010ed29:	89 50 54             	mov    %edx,0x54(%eax)
			if(semaphores[ret].value<=0){
f010ed2c:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ed32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed35:	89 d0                	mov    %edx,%eax
f010ed37:	c1 e0 02             	shl    $0x2,%eax
f010ed3a:	01 d0                	add    %edx,%eax
f010ed3c:	01 c0                	add    %eax,%eax
f010ed3e:	01 d0                	add    %edx,%eax
f010ed40:	01 c0                	add    %eax,%eax
f010ed42:	01 d0                	add    %edx,%eax
f010ed44:	c1 e0 02             	shl    $0x2,%eax
f010ed47:	01 c8                	add    %ecx,%eax
f010ed49:	8b 40 54             	mov    0x54(%eax),%eax
f010ed4c:	85 c0                	test   %eax,%eax
f010ed4e:	7f 47                	jg     f010ed97 <signalSemaphore+0xb3>
				myenv=dequeue(&semaphores[ret].env_queue);
f010ed50:	8b 0d 08 07 86 f0    	mov    0xf0860708,%ecx
f010ed56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed59:	89 d0                	mov    %edx,%eax
f010ed5b:	c1 e0 02             	shl    $0x2,%eax
f010ed5e:	01 d0                	add    %edx,%eax
f010ed60:	01 c0                	add    %eax,%eax
f010ed62:	01 d0                	add    %edx,%eax
f010ed64:	01 c0                	add    %eax,%eax
f010ed66:	01 d0                	add    %edx,%eax
f010ed68:	c1 e0 02             	shl    $0x2,%eax
f010ed6b:	01 c8                	add    %ecx,%eax
f010ed6d:	83 c0 44             	add    $0x44,%eax
f010ed70:	83 ec 0c             	sub    $0xc,%esp
f010ed73:	50                   	push   %eax
f010ed74:	e8 e1 57 ff ff       	call   f010455a <dequeue>
f010ed79:	83 c4 10             	add    $0x10,%esp
f010ed7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
				sched_insert_ready(myenv);
f010ed7f:	83 ec 0c             	sub    $0xc,%esp
f010ed82:	ff 75 f0             	pushl  -0x10(%ebp)
f010ed85:	e8 ee 5b ff ff       	call   f0104978 <sched_insert_ready>
f010ed8a:	83 c4 10             	add    $0x10,%esp

				myenv->env_status=ENV_READY;
f010ed8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ed90:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
	//	2) Increment its value
	//	3) If less than or equal 0, release a blocked environment, by
	//		a) removing it from semaphore queue		[refer to helper functions in doc]
	//		b) adding it to ready queue				[refer to helper functions in doc]
	//		c) changing its status to ENV_READY
}
f010ed97:	90                   	nop
f010ed98:	c9                   	leave  
f010ed99:	c3                   	ret    

f010ed9a <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010ed9a:	55                   	push   %ebp
f010ed9b:	89 e5                	mov    %esp,%ebp
f010ed9d:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010eda0:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eda7:	83 ec 0c             	sub    $0xc,%esp
f010edaa:	ff 75 ec             	pushl  -0x14(%ebp)
f010edad:	e8 a8 37 02 00       	call   f013255a <initialize_MemBlocksList>
f010edb2:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010edb5:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010edba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010edbd:	74 17                	je     f010edd6 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010edbf:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010edc4:	50                   	push   %eax
f010edc5:	68 40 7f 13 f0       	push   $0xf0137f40
f010edca:	6a 1f                	push   $0x1f
f010edcc:	68 94 7f 13 f0       	push   $0xf0137f94
f010edd1:	e8 2f 14 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010edd6:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010eddb:	85 c0                	test   %eax,%eax
f010eddd:	74 17                	je     f010edf6 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010eddf:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010ede4:	50                   	push   %eax
f010ede5:	68 b8 7f 13 f0       	push   $0xf0137fb8
f010edea:	6a 26                	push   $0x26
f010edec:	68 94 7f 13 f0       	push   $0xf0137f94
f010edf1:	e8 0f 14 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010edf6:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010edfb:	85 c0                	test   %eax,%eax
f010edfd:	74 17                	je     f010ee16 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010edff:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010ee04:	50                   	push   %eax
f010ee05:	68 08 80 13 f0       	push   $0xf0138008
f010ee0a:	6a 2c                	push   $0x2c
f010ee0c:	68 94 7f 13 f0       	push   $0xf0137f94
f010ee11:	e8 ef 13 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010ee16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010ee1d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ee24:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f010ee29:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ee2c:	eb 29                	jmp    f010ee57 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010ee2e:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010ee31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee34:	8b 50 0c             	mov    0xc(%eax),%edx
f010ee37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee3a:	8b 40 08             	mov    0x8(%eax),%eax
f010ee3d:	83 ec 04             	sub    $0x4,%esp
f010ee40:	52                   	push   %edx
f010ee41:	50                   	push   %eax
f010ee42:	68 58 80 13 f0       	push   $0xf0138058
f010ee47:	e8 c2 1e ff ff       	call   f0100d0e <cprintf>
f010ee4c:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ee4f:	a1 9c 07 86 f0       	mov    0xf086079c,%eax
f010ee54:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ee57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ee5b:	74 07                	je     f010ee64 <test_initialize_MemBlocksList+0xca>
f010ee5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee60:	8b 00                	mov    (%eax),%eax
f010ee62:	eb 05                	jmp    f010ee69 <test_initialize_MemBlocksList+0xcf>
f010ee64:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee69:	a3 9c 07 86 f0       	mov    %eax,0xf086079c
f010ee6e:	a1 9c 07 86 f0       	mov    0xf086079c,%eax
f010ee73:	85 c0                	test   %eax,%eax
f010ee75:	75 b7                	jne    f010ee2e <test_initialize_MemBlocksList+0x94>
f010ee77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ee7b:	75 b1                	jne    f010ee2e <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010ee7d:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010ee82:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee85:	74 14                	je     f010ee9b <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010ee87:	83 ec 04             	sub    $0x4,%esp
f010ee8a:	68 78 80 13 f0       	push   $0xf0138078
f010ee8f:	6a 38                	push   $0x38
f010ee91:	68 94 7f 13 f0       	push   $0xf0137f94
f010ee96:	e8 6a 13 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010ee9b:	83 ec 0c             	sub    $0xc,%esp
f010ee9e:	68 d0 80 13 f0       	push   $0xf01380d0
f010eea3:	e8 66 1e ff ff       	call   f0100d0e <cprintf>
f010eea8:	83 c4 10             	add    $0x10,%esp
}
f010eeab:	90                   	nop
f010eeac:	c9                   	leave  
f010eead:	c3                   	ret    

f010eeae <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010eeae:	55                   	push   %ebp
f010eeaf:	89 e5                	mov    %esp,%ebp
f010eeb1:	57                   	push   %edi
f010eeb2:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010eeb8:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eebf:	83 ec 0c             	sub    $0xc,%esp
f010eec2:	ff 75 f4             	pushl  -0xc(%ebp)
f010eec5:	e8 90 36 02 00       	call   f013255a <initialize_MemBlocksList>
f010eeca:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eecd:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f010eed4:	00 00 00 
f010eed7:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f010eede:	00 00 00 
f010eee1:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f010eee8:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010eeeb:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f010eef2:	00 00 00 
f010eef5:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f010eefc:	00 00 00 
f010eeff:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f010ef06:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010ef09:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010ef0c:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ef11:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef16:	89 d7                	mov    %edx,%edi
f010ef18:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010ef1a:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010ef1d:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ef22:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef27:	89 d7                	mov    %edx,%edi
f010ef29:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010ef2b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010ef32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010ef39:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010ef40:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010ef47:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010ef4d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ef50:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010ef53:	83 ec 0c             	sub    $0xc,%esp
f010ef56:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ef59:	50                   	push   %eax
f010ef5a:	e8 13 37 02 00       	call   f0132672 <insert_sorted_allocList>
f010ef5f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010ef62:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ef69:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010ef6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef71:	74 14                	je     f010ef87 <test_insert_sorted_allocList+0xd9>
f010ef73:	83 ec 04             	sub    $0x4,%esp
f010ef76:	68 1c 81 13 f0       	push   $0xf013811c
f010ef7b:	6a 56                	push   $0x56
f010ef7d:	68 94 7f 13 f0       	push   $0xf0137f94
f010ef82:	e8 7e 12 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ef87:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010ef8c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ef8f:	74 14                	je     f010efa5 <test_insert_sorted_allocList+0xf7>
f010ef91:	83 ec 04             	sub    $0x4,%esp
f010ef94:	68 68 81 13 f0       	push   $0xf0138168
f010ef99:	6a 59                	push   $0x59
f010ef9b:	68 94 7f 13 f0       	push   $0xf0137f94
f010efa0:	e8 60 12 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010efa5:	83 ec 0c             	sub    $0xc,%esp
f010efa8:	ff 75 f0             	pushl  -0x10(%ebp)
f010efab:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010efae:	50                   	push   %eax
f010efaf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010efb2:	50                   	push   %eax
f010efb3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010efb6:	50                   	push   %eax
f010efb7:	68 c4 06 86 f0       	push   $0xf08606c4
f010efbc:	e8 7d 26 00 00       	call   f011163e <check_list_data>
f010efc1:	83 c4 20             	add    $0x20,%esp
f010efc4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010efc7:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010efcb:	74 14                	je     f010efe1 <test_insert_sorted_allocList+0x133>
f010efcd:	83 ec 04             	sub    $0x4,%esp
f010efd0:	68 b8 81 13 f0       	push   $0xf01381b8
f010efd5:	6a 5d                	push   $0x5d
f010efd7:	68 94 7f 13 f0       	push   $0xf0137f94
f010efdc:	e8 24 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010efe1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010efe4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010efe7:	74 14                	je     f010effd <test_insert_sorted_allocList+0x14f>
f010efe9:	83 ec 04             	sub    $0x4,%esp
f010efec:	68 08 82 13 f0       	push   $0xf0138208
f010eff1:	6a 5e                	push   $0x5e
f010eff3:	68 94 7f 13 f0       	push   $0xf0137f94
f010eff8:	e8 08 12 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010effd:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010f004:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010f00b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f00e:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010f011:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f014:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010f017:	83 ec 0c             	sub    $0xc,%esp
f010f01a:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010f01d:	50                   	push   %eax
f010f01e:	e8 4f 36 02 00       	call   f0132672 <insert_sorted_allocList>
f010f023:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010f026:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f02d:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f032:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f035:	74 14                	je     f010f04b <test_insert_sorted_allocList+0x19d>
f010f037:	83 ec 04             	sub    $0x4,%esp
f010f03a:	68 1c 81 13 f0       	push   $0xf013811c
f010f03f:	6a 6d                	push   $0x6d
f010f041:	68 94 7f 13 f0       	push   $0xf0137f94
f010f046:	e8 ba 11 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f04b:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010f050:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f053:	74 14                	je     f010f069 <test_insert_sorted_allocList+0x1bb>
f010f055:	83 ec 04             	sub    $0x4,%esp
f010f058:	68 68 81 13 f0       	push   $0xf0138168
f010f05d:	6a 70                	push   $0x70
f010f05f:	68 94 7f 13 f0       	push   $0xf0137f94
f010f064:	e8 9c 11 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f069:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f070:	83 ec 0c             	sub    $0xc,%esp
f010f073:	ff 75 f0             	pushl  -0x10(%ebp)
f010f076:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f079:	50                   	push   %eax
f010f07a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f07d:	50                   	push   %eax
f010f07e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f081:	50                   	push   %eax
f010f082:	68 c4 06 86 f0       	push   $0xf08606c4
f010f087:	e8 b2 25 00 00       	call   f011163e <check_list_data>
f010f08c:	83 c4 20             	add    $0x20,%esp
f010f08f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f092:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f096:	74 14                	je     f010f0ac <test_insert_sorted_allocList+0x1fe>
f010f098:	83 ec 04             	sub    $0x4,%esp
f010f09b:	68 b8 81 13 f0       	push   $0xf01381b8
f010f0a0:	6a 75                	push   $0x75
f010f0a2:	68 94 7f 13 f0       	push   $0xf0137f94
f010f0a7:	e8 59 11 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f0ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f0af:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f0b2:	74 14                	je     f010f0c8 <test_insert_sorted_allocList+0x21a>
f010f0b4:	83 ec 04             	sub    $0x4,%esp
f010f0b7:	68 08 82 13 f0       	push   $0xf0138208
f010f0bc:	6a 76                	push   $0x76
f010f0be:	68 94 7f 13 f0       	push   $0xf0137f94
f010f0c3:	e8 3d 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010f0c8:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010f0cf:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010f0d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f0d9:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010f0dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f0df:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010f0e2:	83 ec 0c             	sub    $0xc,%esp
f010f0e5:	8d 45 90             	lea    -0x70(%ebp),%eax
f010f0e8:	50                   	push   %eax
f010f0e9:	e8 84 35 02 00       	call   f0132672 <insert_sorted_allocList>
f010f0ee:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010f0f1:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f0f8:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f0fd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f100:	74 17                	je     f010f119 <test_insert_sorted_allocList+0x26b>
f010f102:	83 ec 04             	sub    $0x4,%esp
f010f105:	68 1c 81 13 f0       	push   $0xf013811c
f010f10a:	68 85 00 00 00       	push   $0x85
f010f10f:	68 94 7f 13 f0       	push   $0xf0137f94
f010f114:	e8 ec 10 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010f119:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010f11e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f121:	74 17                	je     f010f13a <test_insert_sorted_allocList+0x28c>
f010f123:	83 ec 04             	sub    $0x4,%esp
f010f126:	68 54 82 13 f0       	push   $0xf0138254
f010f12b:	68 88 00 00 00       	push   $0x88
f010f130:	68 94 7f 13 f0       	push   $0xf0137f94
f010f135:	e8 cb 10 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f13a:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f141:	83 ec 0c             	sub    $0xc,%esp
f010f144:	ff 75 f0             	pushl  -0x10(%ebp)
f010f147:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f14a:	50                   	push   %eax
f010f14b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f14e:	50                   	push   %eax
f010f14f:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f152:	50                   	push   %eax
f010f153:	68 c4 06 86 f0       	push   $0xf08606c4
f010f158:	e8 e1 24 00 00       	call   f011163e <check_list_data>
f010f15d:	83 c4 20             	add    $0x20,%esp
f010f160:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f163:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f167:	74 17                	je     f010f180 <test_insert_sorted_allocList+0x2d2>
f010f169:	83 ec 04             	sub    $0x4,%esp
f010f16c:	68 b8 81 13 f0       	push   $0xf01381b8
f010f171:	68 8d 00 00 00       	push   $0x8d
f010f176:	68 94 7f 13 f0       	push   $0xf0137f94
f010f17b:	e8 85 10 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f180:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f183:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f186:	74 17                	je     f010f19f <test_insert_sorted_allocList+0x2f1>
f010f188:	83 ec 04             	sub    $0x4,%esp
f010f18b:	68 08 82 13 f0       	push   $0xf0138208
f010f190:	68 8e 00 00 00       	push   $0x8e
f010f195:	68 94 7f 13 f0       	push   $0xf0137f94
f010f19a:	e8 66 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010f19f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010f1a6:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010f1ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f1b0:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010f1b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f1b6:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010f1b9:	83 ec 0c             	sub    $0xc,%esp
f010f1bc:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f1bf:	50                   	push   %eax
f010f1c0:	e8 ad 34 02 00       	call   f0132672 <insert_sorted_allocList>
f010f1c5:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010f1c8:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f1cf:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f1d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1d7:	74 17                	je     f010f1f0 <test_insert_sorted_allocList+0x342>
f010f1d9:	83 ec 04             	sub    $0x4,%esp
f010f1dc:	68 1c 81 13 f0       	push   $0xf013811c
f010f1e1:	68 9c 00 00 00       	push   $0x9c
f010f1e6:	68 94 7f 13 f0       	push   $0xf0137f94
f010f1eb:	e8 15 10 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f1f0:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010f1f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f1f8:	74 17                	je     f010f211 <test_insert_sorted_allocList+0x363>
f010f1fa:	83 ec 04             	sub    $0x4,%esp
f010f1fd:	68 68 81 13 f0       	push   $0xf0138168
f010f202:	68 9f 00 00 00       	push   $0x9f
f010f207:	68 94 7f 13 f0       	push   $0xf0137f94
f010f20c:	e8 f4 0f ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f211:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f218:	83 ec 0c             	sub    $0xc,%esp
f010f21b:	ff 75 f0             	pushl  -0x10(%ebp)
f010f21e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f221:	50                   	push   %eax
f010f222:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f225:	50                   	push   %eax
f010f226:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f229:	50                   	push   %eax
f010f22a:	68 c4 06 86 f0       	push   $0xf08606c4
f010f22f:	e8 0a 24 00 00       	call   f011163e <check_list_data>
f010f234:	83 c4 20             	add    $0x20,%esp
f010f237:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f23a:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f23e:	74 17                	je     f010f257 <test_insert_sorted_allocList+0x3a9>
f010f240:	83 ec 04             	sub    $0x4,%esp
f010f243:	68 b8 81 13 f0       	push   $0xf01381b8
f010f248:	68 a4 00 00 00       	push   $0xa4
f010f24d:	68 94 7f 13 f0       	push   $0xf0137f94
f010f252:	e8 ae 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f257:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f25a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f25d:	74 17                	je     f010f276 <test_insert_sorted_allocList+0x3c8>
f010f25f:	83 ec 04             	sub    $0x4,%esp
f010f262:	68 08 82 13 f0       	push   $0xf0138208
f010f267:	68 a5 00 00 00       	push   $0xa5
f010f26c:	68 94 7f 13 f0       	push   $0xf0137f94
f010f271:	e8 8f 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010f276:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010f27d:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010f284:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f287:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010f28d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f290:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010f296:	83 ec 0c             	sub    $0xc,%esp
f010f299:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010f29f:	50                   	push   %eax
f010f2a0:	e8 cd 33 02 00       	call   f0132672 <insert_sorted_allocList>
f010f2a5:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010f2a8:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f2af:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f2b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f2b7:	74 17                	je     f010f2d0 <test_insert_sorted_allocList+0x422>
f010f2b9:	83 ec 04             	sub    $0x4,%esp
f010f2bc:	68 1c 81 13 f0       	push   $0xf013811c
f010f2c1:	68 b3 00 00 00       	push   $0xb3
f010f2c6:	68 94 7f 13 f0       	push   $0xf0137f94
f010f2cb:	e8 35 0f ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f2d0:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010f2d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f2d8:	74 17                	je     f010f2f1 <test_insert_sorted_allocList+0x443>
f010f2da:	83 ec 04             	sub    $0x4,%esp
f010f2dd:	68 68 81 13 f0       	push   $0xf0138168
f010f2e2:	68 b6 00 00 00       	push   $0xb6
f010f2e7:	68 94 7f 13 f0       	push   $0xf0137f94
f010f2ec:	e8 14 0f ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f2f1:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f2f8:	83 ec 0c             	sub    $0xc,%esp
f010f2fb:	ff 75 f0             	pushl  -0x10(%ebp)
f010f2fe:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f301:	50                   	push   %eax
f010f302:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f305:	50                   	push   %eax
f010f306:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f309:	50                   	push   %eax
f010f30a:	68 c4 06 86 f0       	push   $0xf08606c4
f010f30f:	e8 2a 23 00 00       	call   f011163e <check_list_data>
f010f314:	83 c4 20             	add    $0x20,%esp
f010f317:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f31a:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f31e:	74 17                	je     f010f337 <test_insert_sorted_allocList+0x489>
f010f320:	83 ec 04             	sub    $0x4,%esp
f010f323:	68 b8 81 13 f0       	push   $0xf01381b8
f010f328:	68 bb 00 00 00       	push   $0xbb
f010f32d:	68 94 7f 13 f0       	push   $0xf0137f94
f010f332:	e8 ce 0e ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f337:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f33a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f33d:	74 17                	je     f010f356 <test_insert_sorted_allocList+0x4a8>
f010f33f:	83 ec 04             	sub    $0x4,%esp
f010f342:	68 08 82 13 f0       	push   $0xf0138208
f010f347:	68 bc 00 00 00       	push   $0xbc
f010f34c:	68 94 7f 13 f0       	push   $0xf0137f94
f010f351:	e8 af 0e ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010f356:	83 ec 0c             	sub    $0xc,%esp
f010f359:	68 a4 82 13 f0       	push   $0xf01382a4
f010f35e:	e8 ab 19 ff ff       	call   f0100d0e <cprintf>
f010f363:	83 c4 10             	add    $0x10,%esp
}
f010f366:	90                   	nop
f010f367:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010f36a:	c9                   	leave  
f010f36b:	c3                   	ret    

f010f36c <test_find_block>:

void test_find_block()
{
f010f36c:	55                   	push   %ebp
f010f36d:	89 e5                	mov    %esp,%ebp
f010f36f:	57                   	push   %edi
f010f370:	56                   	push   %esi
f010f371:	53                   	push   %ebx
f010f372:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010f378:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f37f:	83 ec 0c             	sub    $0xc,%esp
f010f382:	ff 75 e0             	pushl  -0x20(%ebp)
f010f385:	e8 d0 31 02 00       	call   f013255a <initialize_MemBlocksList>
f010f38a:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010f38d:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f010f394:	00 00 00 
f010f397:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f010f39e:	00 00 00 
f010f3a1:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f010f3a8:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010f3ab:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f3ae:	bb 1c 84 13 f0       	mov    $0xf013841c,%ebx
f010f3b3:	ba 06 00 00 00       	mov    $0x6,%edx
f010f3b8:	89 c7                	mov    %eax,%edi
f010f3ba:	89 de                	mov    %ebx,%esi
f010f3bc:	89 d1                	mov    %edx,%ecx
f010f3be:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010f3c0:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010f3c3:	bb 34 84 13 f0       	mov    $0xf0138434,%ebx
f010f3c8:	ba 06 00 00 00       	mov    $0x6,%edx
f010f3cd:	89 c7                	mov    %eax,%edi
f010f3cf:	89 de                	mov    %ebx,%esi
f010f3d1:	89 d1                	mov    %edx,%ecx
f010f3d3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010f3d5:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f010f3dc:	00 00 00 
f010f3df:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f010f3e6:	00 00 00 
f010f3e9:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f010f3f0:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f3f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f3fa:	e9 5f 01 00 00       	jmp    f010f55e <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010f3ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f402:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010f406:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f409:	c1 e2 04             	shl    $0x4,%edx
f010f40c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f40f:	01 da                	add    %ebx,%edx
f010f411:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010f417:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010f419:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f41c:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010f420:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f423:	c1 e2 04             	shl    $0x4,%edx
f010f426:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f429:	01 f2                	add    %esi,%edx
f010f42b:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010f431:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f433:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f437:	0f 85 92 00 00 00    	jne    f010f4cf <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010f43d:	a1 c4 06 86 f0       	mov    0xf08606c4,%eax
f010f442:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f445:	c1 e2 04             	shl    $0x4,%edx
f010f448:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f44b:	01 fa                	add    %edi,%edx
f010f44d:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f453:	89 02                	mov    %eax,(%edx)
f010f455:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f458:	c1 e0 04             	shl    $0x4,%eax
f010f45b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f45e:	01 d8                	add    %ebx,%eax
f010f460:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f465:	8b 00                	mov    (%eax),%eax
f010f467:	85 c0                	test   %eax,%eax
f010f469:	74 18                	je     f010f483 <test_find_block+0x117>
f010f46b:	a1 c4 06 86 f0       	mov    0xf08606c4,%eax
f010f470:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f476:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f479:	c1 e1 04             	shl    $0x4,%ecx
f010f47c:	01 ca                	add    %ecx,%edx
f010f47e:	89 50 04             	mov    %edx,0x4(%eax)
f010f481:	eb 13                	jmp    f010f496 <test_find_block+0x12a>
f010f483:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f489:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f48c:	c1 e2 04             	shl    $0x4,%edx
f010f48f:	01 d0                	add    %edx,%eax
f010f491:	a3 c8 06 86 f0       	mov    %eax,0xf08606c8
f010f496:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f49c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f49f:	c1 e2 04             	shl    $0x4,%edx
f010f4a2:	01 d0                	add    %edx,%eax
f010f4a4:	a3 c4 06 86 f0       	mov    %eax,0xf08606c4
f010f4a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ac:	c1 e0 04             	shl    $0x4,%eax
f010f4af:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f4b2:	01 f0                	add    %esi,%eax
f010f4b4:	2d 98 00 00 00       	sub    $0x98,%eax
f010f4b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f4bf:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f4c4:	40                   	inc    %eax
f010f4c5:	a3 d0 06 86 f0       	mov    %eax,0xf08606d0
f010f4ca:	e9 8c 00 00 00       	jmp    f010f55b <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f4cf:	a1 c8 06 86 f0       	mov    0xf08606c8,%eax
f010f4d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4d7:	c1 e2 04             	shl    $0x4,%edx
f010f4da:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4dd:	01 fa                	add    %edi,%edx
f010f4df:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f4e5:	89 02                	mov    %eax,(%edx)
f010f4e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ea:	c1 e0 04             	shl    $0x4,%eax
f010f4ed:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f4f0:	01 d8                	add    %ebx,%eax
f010f4f2:	2d 98 00 00 00       	sub    $0x98,%eax
f010f4f7:	8b 00                	mov    (%eax),%eax
f010f4f9:	85 c0                	test   %eax,%eax
f010f4fb:	74 17                	je     f010f514 <test_find_block+0x1a8>
f010f4fd:	a1 c8 06 86 f0       	mov    0xf08606c8,%eax
f010f502:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f508:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f50b:	c1 e1 04             	shl    $0x4,%ecx
f010f50e:	01 ca                	add    %ecx,%edx
f010f510:	89 10                	mov    %edx,(%eax)
f010f512:	eb 13                	jmp    f010f527 <test_find_block+0x1bb>
f010f514:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f51a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f51d:	c1 e2 04             	shl    $0x4,%edx
f010f520:	01 d0                	add    %edx,%eax
f010f522:	a3 c4 06 86 f0       	mov    %eax,0xf08606c4
f010f527:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f52d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f530:	c1 e2 04             	shl    $0x4,%edx
f010f533:	01 d0                	add    %edx,%eax
f010f535:	a3 c8 06 86 f0       	mov    %eax,0xf08606c8
f010f53a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f53d:	c1 e0 04             	shl    $0x4,%eax
f010f540:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f543:	01 f0                	add    %esi,%eax
f010f545:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f54a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f550:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f555:	40                   	inc    %eax
f010f556:	a3 d0 06 86 f0       	mov    %eax,0xf08606d0
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f55b:	ff 45 e4             	incl   -0x1c(%ebp)
f010f55e:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f562:	0f 8e 97 fe ff ff    	jle    f010f3ff <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f568:	83 ec 08             	sub    $0x8,%esp
f010f56b:	68 00 10 00 00       	push   $0x1000
f010f570:	68 c4 06 86 f0       	push   $0xf08606c4
f010f575:	e8 c5 30 02 00       	call   f013263f <find_block>
f010f57a:	83 c4 10             	add    $0x10,%esp
f010f57d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f580:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f584:	74 17                	je     f010f59d <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f586:	83 ec 04             	sub    $0x4,%esp
f010f589:	68 e4 82 13 f0       	push   $0xf01382e4
f010f58e:	68 de 00 00 00       	push   $0xde
f010f593:	68 94 7f 13 f0       	push   $0xf0137f94
f010f598:	e8 68 0c ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f59d:	83 ec 08             	sub    $0x8,%esp
f010f5a0:	6a 00                	push   $0x0
f010f5a2:	68 c4 06 86 f0       	push   $0xf08606c4
f010f5a7:	e8 93 30 02 00       	call   f013263f <find_block>
f010f5ac:	83 c4 10             	add    $0x10,%esp
f010f5af:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f5b2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5b6:	74 17                	je     f010f5cf <test_find_block+0x263>
f010f5b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5bb:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5be:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f5c3:	75 0a                	jne    f010f5cf <test_find_block+0x263>
f010f5c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5c8:	8b 40 08             	mov    0x8(%eax),%eax
f010f5cb:	85 c0                	test   %eax,%eax
f010f5cd:	74 17                	je     f010f5e6 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f5cf:	83 ec 04             	sub    $0x4,%esp
f010f5d2:	68 48 83 13 f0       	push   $0xf0138348
f010f5d7:	68 e3 00 00 00       	push   $0xe3
f010f5dc:	68 94 7f 13 f0       	push   $0xf0137f94
f010f5e1:	e8 1f 0c ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f5e6:	83 ec 08             	sub    $0x8,%esp
f010f5e9:	68 00 70 00 00       	push   $0x7000
f010f5ee:	68 c4 06 86 f0       	push   $0xf08606c4
f010f5f3:	e8 47 30 02 00       	call   f013263f <find_block>
f010f5f8:	83 c4 10             	add    $0x10,%esp
f010f5fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f5fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f602:	74 1a                	je     f010f61e <test_find_block+0x2b2>
f010f604:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f607:	8b 40 0c             	mov    0xc(%eax),%eax
f010f60a:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f60f:	75 0d                	jne    f010f61e <test_find_block+0x2b2>
f010f611:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f614:	8b 40 08             	mov    0x8(%eax),%eax
f010f617:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f61c:	74 17                	je     f010f635 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f61e:	83 ec 04             	sub    $0x4,%esp
f010f621:	68 48 83 13 f0       	push   $0xf0138348
f010f626:	68 e8 00 00 00       	push   $0xe8
f010f62b:	68 94 7f 13 f0       	push   $0xf0137f94
f010f630:	e8 d0 0b ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f635:	83 ec 08             	sub    $0x8,%esp
f010f638:	68 00 a4 01 00       	push   $0x1a400
f010f63d:	68 c4 06 86 f0       	push   $0xf08606c4
f010f642:	e8 f8 2f 02 00       	call   f013263f <find_block>
f010f647:	83 c4 10             	add    $0x10,%esp
f010f64a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f64d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f651:	74 1a                	je     f010f66d <test_find_block+0x301>
f010f653:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f656:	8b 40 0c             	mov    0xc(%eax),%eax
f010f659:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f65e:	75 0d                	jne    f010f66d <test_find_block+0x301>
f010f660:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f663:	8b 40 08             	mov    0x8(%eax),%eax
f010f666:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f66b:	74 17                	je     f010f684 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f66d:	83 ec 04             	sub    $0x4,%esp
f010f670:	68 48 83 13 f0       	push   $0xf0138348
f010f675:	68 ed 00 00 00       	push   $0xed
f010f67a:	68 94 7f 13 f0       	push   $0xf0137f94
f010f67f:	e8 81 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f684:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010f689:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f68c:	75 09                	jne    f010f697 <test_find_block+0x32b>
f010f68e:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010f693:	85 c0                	test   %eax,%eax
f010f695:	74 17                	je     f010f6ae <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f697:	83 ec 04             	sub    $0x4,%esp
f010f69a:	68 7c 83 13 f0       	push   $0xf013837c
f010f69f:	68 f2 00 00 00       	push   $0xf2
f010f6a4:	68 94 7f 13 f0       	push   $0xf0137f94
f010f6a9:	e8 57 0b ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f6ae:	83 ec 0c             	sub    $0xc,%esp
f010f6b1:	68 e0 83 13 f0       	push   $0xf01383e0
f010f6b6:	e8 53 16 ff ff       	call   f0100d0e <cprintf>
f010f6bb:	83 c4 10             	add    $0x10,%esp
}
f010f6be:	90                   	nop
f010f6bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f6c2:	5b                   	pop    %ebx
f010f6c3:	5e                   	pop    %esi
f010f6c4:	5f                   	pop    %edi
f010f6c5:	5d                   	pop    %ebp
f010f6c6:	c3                   	ret    

f010f6c7 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f6c7:	55                   	push   %ebp
f010f6c8:	89 e5                	mov    %esp,%ebp
f010f6ca:	57                   	push   %edi
f010f6cb:	56                   	push   %esi
f010f6cc:	53                   	push   %ebx
f010f6cd:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f6d3:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f6da:	83 ec 0c             	sub    $0xc,%esp
f010f6dd:	ff 75 e0             	pushl  -0x20(%ebp)
f010f6e0:	e8 75 2e 02 00       	call   f013255a <initialize_MemBlocksList>
f010f6e5:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f6e8:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f010f6ef:	00 00 00 
f010f6f2:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f010f6f9:	00 00 00 
f010f6fc:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f010f703:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f706:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f709:	bb c0 86 13 f0       	mov    $0xf01386c0,%ebx
f010f70e:	ba 08 00 00 00       	mov    $0x8,%edx
f010f713:	89 c7                	mov    %eax,%edi
f010f715:	89 de                	mov    %ebx,%esi
f010f717:	89 d1                	mov    %edx,%ecx
f010f719:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f71b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f71e:	bb e0 86 13 f0       	mov    $0xf01386e0,%ebx
f010f723:	ba 08 00 00 00       	mov    $0x8,%edx
f010f728:	89 c7                	mov    %eax,%edi
f010f72a:	89 de                	mov    %ebx,%esi
f010f72c:	89 d1                	mov    %edx,%ecx
f010f72e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f730:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f010f737:	00 00 00 
f010f73a:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f010f741:	00 00 00 
f010f744:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f010f74b:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f74e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f755:	e9 5f 01 00 00       	jmp    f010f8b9 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f75a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f75d:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f761:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f764:	c1 e2 04             	shl    $0x4,%edx
f010f767:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f76a:	01 da                	add    %ebx,%edx
f010f76c:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f772:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f777:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f77b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f77e:	c1 e2 04             	shl    $0x4,%edx
f010f781:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f784:	01 f2                	add    %esi,%edx
f010f786:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f78c:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f78e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f792:	0f 85 92 00 00 00    	jne    f010f82a <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f798:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f010f79d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7a0:	c1 e2 04             	shl    $0x4,%edx
f010f7a3:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f7a6:	01 fa                	add    %edi,%edx
f010f7a8:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f7ae:	89 02                	mov    %eax,(%edx)
f010f7b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7b3:	c1 e0 04             	shl    $0x4,%eax
f010f7b6:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f7b9:	01 d8                	add    %ebx,%eax
f010f7bb:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f7c0:	8b 00                	mov    (%eax),%eax
f010f7c2:	85 c0                	test   %eax,%eax
f010f7c4:	74 18                	je     f010f7de <test_alloc_block_FF+0x117>
f010f7c6:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f010f7cb:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f7d1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f7d4:	c1 e1 04             	shl    $0x4,%ecx
f010f7d7:	01 ca                	add    %ecx,%edx
f010f7d9:	89 50 04             	mov    %edx,0x4(%eax)
f010f7dc:	eb 13                	jmp    f010f7f1 <test_alloc_block_FF+0x12a>
f010f7de:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f7e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7e7:	c1 e2 04             	shl    $0x4,%edx
f010f7ea:	01 d0                	add    %edx,%eax
f010f7ec:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f010f7f1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f7f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7fa:	c1 e2 04             	shl    $0x4,%edx
f010f7fd:	01 d0                	add    %edx,%eax
f010f7ff:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f010f804:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f807:	c1 e0 04             	shl    $0x4,%eax
f010f80a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f80d:	01 f0                	add    %esi,%eax
f010f80f:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f814:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f81a:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010f81f:	40                   	inc    %eax
f010f820:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
f010f825:	e9 8c 00 00 00       	jmp    f010f8b6 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f82a:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f010f82f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f832:	c1 e2 04             	shl    $0x4,%edx
f010f835:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f838:	01 fa                	add    %edi,%edx
f010f83a:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f840:	89 02                	mov    %eax,(%edx)
f010f842:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f845:	c1 e0 04             	shl    $0x4,%eax
f010f848:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f84b:	01 d8                	add    %ebx,%eax
f010f84d:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f852:	8b 00                	mov    (%eax),%eax
f010f854:	85 c0                	test   %eax,%eax
f010f856:	74 17                	je     f010f86f <test_alloc_block_FF+0x1a8>
f010f858:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f010f85d:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f863:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f866:	c1 e1 04             	shl    $0x4,%ecx
f010f869:	01 ca                	add    %ecx,%edx
f010f86b:	89 10                	mov    %edx,(%eax)
f010f86d:	eb 13                	jmp    f010f882 <test_alloc_block_FF+0x1bb>
f010f86f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f875:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f878:	c1 e2 04             	shl    $0x4,%edx
f010f87b:	01 d0                	add    %edx,%eax
f010f87d:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f010f882:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f888:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f88b:	c1 e2 04             	shl    $0x4,%edx
f010f88e:	01 d0                	add    %edx,%eax
f010f890:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f010f895:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f898:	c1 e0 04             	shl    $0x4,%eax
f010f89b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f89e:	01 f0                	add    %esi,%eax
f010f8a0:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f8a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f8ab:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010f8b0:	40                   	inc    %eax
f010f8b1:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f8b6:	ff 45 e4             	incl   -0x1c(%ebp)
f010f8b9:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f8bd:	0f 8e 97 fe ff ff    	jle    f010f75a <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f8c3:	83 ec 0c             	sub    $0xc,%esp
f010f8c6:	68 00 00 30 00       	push   $0x300000
f010f8cb:	e8 51 2f 02 00       	call   f0132821 <alloc_block_FF>
f010f8d0:	83 c4 10             	add    $0x10,%esp
f010f8d3:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f8d6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f8da:	74 17                	je     f010f8f3 <test_alloc_block_FF+0x22c>
f010f8dc:	83 ec 04             	sub    $0x4,%esp
f010f8df:	68 4c 84 13 f0       	push   $0xf013844c
f010f8e4:	68 15 01 00 00       	push   $0x115
f010f8e9:	68 94 7f 13 f0       	push   $0xf0137f94
f010f8ee:	e8 12 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f8f3:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010f8f8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f8fb:	75 13                	jne    f010f910 <test_alloc_block_FF+0x249>
f010f8fd:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010f902:	83 f8 08             	cmp    $0x8,%eax
f010f905:	75 09                	jne    f010f910 <test_alloc_block_FF+0x249>
f010f907:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f90c:	85 c0                	test   %eax,%eax
f010f90e:	74 17                	je     f010f927 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f910:	83 ec 04             	sub    $0x4,%esp
f010f913:	68 c0 84 13 f0       	push   $0xf01384c0
f010f918:	68 19 01 00 00       	push   $0x119
f010f91d:	68 94 7f 13 f0       	push   $0xf0137f94
f010f922:	e8 de 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f927:	83 ec 0c             	sub    $0xc,%esp
f010f92a:	68 00 24 00 00       	push   $0x2400
f010f92f:	e8 ed 2e 02 00       	call   f0132821 <alloc_block_FF>
f010f934:	83 c4 10             	add    $0x10,%esp
f010f937:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f93a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f93e:	74 1a                	je     f010f95a <test_alloc_block_FF+0x293>
f010f940:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f943:	8b 40 0c             	mov    0xc(%eax),%eax
f010f946:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f94b:	75 0d                	jne    f010f95a <test_alloc_block_FF+0x293>
f010f94d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f950:	8b 40 08             	mov    0x8(%eax),%eax
f010f953:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f958:	74 17                	je     f010f971 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f95a:	83 ec 04             	sub    $0x4,%esp
f010f95d:	68 38 85 13 f0       	push   $0xf0138538
f010f962:	68 21 01 00 00       	push   $0x121
f010f967:	68 94 7f 13 f0       	push   $0xf0137f94
f010f96c:	e8 94 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f971:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010f976:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f979:	75 13                	jne    f010f98e <test_alloc_block_FF+0x2c7>
f010f97b:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010f980:	83 f8 07             	cmp    $0x7,%eax
f010f983:	75 09                	jne    f010f98e <test_alloc_block_FF+0x2c7>
f010f985:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010f98a:	85 c0                	test   %eax,%eax
f010f98c:	74 17                	je     f010f9a5 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f98e:	83 ec 04             	sub    $0x4,%esp
f010f991:	68 7c 85 13 f0       	push   $0xf013857c
f010f996:	68 25 01 00 00       	push   $0x125
f010f99b:	68 94 7f 13 f0       	push   $0xf0137f94
f010f9a0:	e8 60 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f9a5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f9ac:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f9af:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f9b6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f9bd:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9c4:	83 ec 0c             	sub    $0xc,%esp
f010f9c7:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9ca:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f9d0:	50                   	push   %eax
f010f9d1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9d4:	50                   	push   %eax
f010f9d5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f9d8:	50                   	push   %eax
f010f9d9:	68 60 07 86 f0       	push   $0xf0860760
f010f9de:	e8 5b 1c 00 00       	call   f011163e <check_list_data>
f010f9e3:	83 c4 20             	add    $0x20,%esp
f010f9e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f9e9:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f9ed:	74 17                	je     f010fa06 <test_alloc_block_FF+0x33f>
f010f9ef:	83 ec 04             	sub    $0x4,%esp
f010f9f2:	68 e0 85 13 f0       	push   $0xf01385e0
f010f9f7:	68 2d 01 00 00       	push   $0x12d
f010f9fc:	68 94 7f 13 f0       	push   $0xf0137f94
f010fa01:	e8 ff 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa06:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fa0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa0f:	74 17                	je     f010fa28 <test_alloc_block_FF+0x361>
f010fa11:	83 ec 04             	sub    $0x4,%esp
f010fa14:	68 2c 86 13 f0       	push   $0xf013862c
f010fa19:	68 2e 01 00 00       	push   $0x12e
f010fa1e:	68 94 7f 13 f0       	push   $0xf0137f94
f010fa23:	e8 dd 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010fa28:	83 ec 0c             	sub    $0xc,%esp
f010fa2b:	68 00 00 10 00       	push   $0x100000
f010fa30:	e8 ec 2d 02 00       	call   f0132821 <alloc_block_FF>
f010fa35:	83 c4 10             	add    $0x10,%esp
f010fa38:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fa3b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa3f:	74 1a                	je     f010fa5b <test_alloc_block_FF+0x394>
f010fa41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa44:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa47:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fa4c:	75 0d                	jne    f010fa5b <test_alloc_block_FF+0x394>
f010fa4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa51:	8b 40 08             	mov    0x8(%eax),%eax
f010fa54:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fa59:	74 17                	je     f010fa72 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010fa5b:	83 ec 04             	sub    $0x4,%esp
f010fa5e:	68 38 85 13 f0       	push   $0xf0138538
f010fa63:	68 36 01 00 00       	push   $0x136
f010fa68:	68 94 7f 13 f0       	push   $0xf0137f94
f010fa6d:	e8 93 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa72:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010fa77:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa7a:	4a                   	dec    %edx
f010fa7b:	39 d0                	cmp    %edx,%eax
f010fa7d:	75 13                	jne    f010fa92 <test_alloc_block_FF+0x3cb>
f010fa7f:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010fa84:	83 f8 07             	cmp    $0x7,%eax
f010fa87:	75 09                	jne    f010fa92 <test_alloc_block_FF+0x3cb>
f010fa89:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010fa8e:	85 c0                	test   %eax,%eax
f010fa90:	74 17                	je     f010faa9 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa92:	83 ec 04             	sub    $0x4,%esp
f010fa95:	68 7c 85 13 f0       	push   $0xf013857c
f010fa9a:	68 3a 01 00 00       	push   $0x13a
f010fa9f:	68 94 7f 13 f0       	push   $0xf0137f94
f010faa4:	e8 5c 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010faa9:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fab0:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010fab3:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010faba:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010fac1:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fac8:	83 ec 0c             	sub    $0xc,%esp
f010facb:	ff 75 d8             	pushl  -0x28(%ebp)
f010face:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fad4:	50                   	push   %eax
f010fad5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fad8:	50                   	push   %eax
f010fad9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fadc:	50                   	push   %eax
f010fadd:	68 60 07 86 f0       	push   $0xf0860760
f010fae2:	e8 57 1b 00 00       	call   f011163e <check_list_data>
f010fae7:	83 c4 20             	add    $0x20,%esp
f010faea:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010faed:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010faf1:	74 17                	je     f010fb0a <test_alloc_block_FF+0x443>
f010faf3:	83 ec 04             	sub    $0x4,%esp
f010faf6:	68 e0 85 13 f0       	push   $0xf01385e0
f010fafb:	68 42 01 00 00       	push   $0x142
f010fb00:	68 94 7f 13 f0       	push   $0xf0137f94
f010fb05:	e8 fb 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb0a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fb10:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb13:	74 17                	je     f010fb2c <test_alloc_block_FF+0x465>
f010fb15:	83 ec 04             	sub    $0x4,%esp
f010fb18:	68 2c 86 13 f0       	push   $0xf013862c
f010fb1d:	68 43 01 00 00       	push   $0x143
f010fb22:	68 94 7f 13 f0       	push   $0xf0137f94
f010fb27:	e8 d9 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010fb2c:	83 ec 0c             	sub    $0xc,%esp
f010fb2f:	68 78 86 13 f0       	push   $0xf0138678
f010fb34:	e8 d5 11 ff ff       	call   f0100d0e <cprintf>
f010fb39:	83 c4 10             	add    $0x10,%esp
}
f010fb3c:	90                   	nop
f010fb3d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fb40:	5b                   	pop    %ebx
f010fb41:	5e                   	pop    %esi
f010fb42:	5f                   	pop    %edi
f010fb43:	5d                   	pop    %ebp
f010fb44:	c3                   	ret    

f010fb45 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010fb45:	55                   	push   %ebp
f010fb46:	89 e5                	mov    %esp,%ebp
f010fb48:	57                   	push   %edi
f010fb49:	56                   	push   %esi
f010fb4a:	53                   	push   %ebx
f010fb4b:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010fb51:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fb58:	83 ec 0c             	sub    $0xc,%esp
f010fb5b:	ff 75 e0             	pushl  -0x20(%ebp)
f010fb5e:	e8 f7 29 02 00       	call   f013255a <initialize_MemBlocksList>
f010fb63:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fb66:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f010fb6d:	00 00 00 
f010fb70:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f010fb77:	00 00 00 
f010fb7a:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f010fb81:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010fb84:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fb87:	bb f4 88 13 f0       	mov    $0xf01388f4,%ebx
f010fb8c:	ba 07 00 00 00       	mov    $0x7,%edx
f010fb91:	89 c7                	mov    %eax,%edi
f010fb93:	89 de                	mov    %ebx,%esi
f010fb95:	89 d1                	mov    %edx,%ecx
f010fb97:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010fb99:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fb9c:	bb 10 89 13 f0       	mov    $0xf0138910,%ebx
f010fba1:	ba 07 00 00 00       	mov    $0x7,%edx
f010fba6:	89 c7                	mov    %eax,%edi
f010fba8:	89 de                	mov    %ebx,%esi
f010fbaa:	89 d1                	mov    %edx,%ecx
f010fbac:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fbae:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f010fbb5:	00 00 00 
f010fbb8:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f010fbbf:	00 00 00 
f010fbc2:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f010fbc9:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fbcc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fbd3:	e9 5f 01 00 00       	jmp    f010fd37 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fbd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbdb:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010fbdf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbe2:	c1 e2 04             	shl    $0x4,%edx
f010fbe5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fbe8:	01 da                	add    %ebx,%edx
f010fbea:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010fbf0:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fbf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbf5:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010fbf9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbfc:	c1 e2 04             	shl    $0x4,%edx
f010fbff:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fc02:	01 f2                	add    %esi,%edx
f010fc04:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010fc0a:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fc0c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fc10:	0f 85 92 00 00 00    	jne    f010fca8 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fc16:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f010fc1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc1e:	c1 e2 04             	shl    $0x4,%edx
f010fc21:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fc24:	01 fa                	add    %edi,%edx
f010fc26:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010fc2c:	89 02                	mov    %eax,(%edx)
f010fc2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc31:	c1 e0 04             	shl    $0x4,%eax
f010fc34:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fc37:	01 d8                	add    %ebx,%eax
f010fc39:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fc3e:	8b 00                	mov    (%eax),%eax
f010fc40:	85 c0                	test   %eax,%eax
f010fc42:	74 18                	je     f010fc5c <test_alloc_block_BF+0x117>
f010fc44:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f010fc49:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fc4f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fc52:	c1 e1 04             	shl    $0x4,%ecx
f010fc55:	01 ca                	add    %ecx,%edx
f010fc57:	89 50 04             	mov    %edx,0x4(%eax)
f010fc5a:	eb 13                	jmp    f010fc6f <test_alloc_block_BF+0x12a>
f010fc5c:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fc62:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc65:	c1 e2 04             	shl    $0x4,%edx
f010fc68:	01 d0                	add    %edx,%eax
f010fc6a:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f010fc6f:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fc75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc78:	c1 e2 04             	shl    $0x4,%edx
f010fc7b:	01 d0                	add    %edx,%eax
f010fc7d:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f010fc82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc85:	c1 e0 04             	shl    $0x4,%eax
f010fc88:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fc8b:	01 f0                	add    %esi,%eax
f010fc8d:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fc92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fc98:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010fc9d:	40                   	inc    %eax
f010fc9e:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
f010fca3:	e9 8c 00 00 00       	jmp    f010fd34 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fca8:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f010fcad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcb0:	c1 e2 04             	shl    $0x4,%edx
f010fcb3:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fcb6:	01 fa                	add    %edi,%edx
f010fcb8:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010fcbe:	89 02                	mov    %eax,(%edx)
f010fcc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcc3:	c1 e0 04             	shl    $0x4,%eax
f010fcc6:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fcc9:	01 d8                	add    %ebx,%eax
f010fccb:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fcd0:	8b 00                	mov    (%eax),%eax
f010fcd2:	85 c0                	test   %eax,%eax
f010fcd4:	74 17                	je     f010fced <test_alloc_block_BF+0x1a8>
f010fcd6:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f010fcdb:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fce1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fce4:	c1 e1 04             	shl    $0x4,%ecx
f010fce7:	01 ca                	add    %ecx,%edx
f010fce9:	89 10                	mov    %edx,(%eax)
f010fceb:	eb 13                	jmp    f010fd00 <test_alloc_block_BF+0x1bb>
f010fced:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fcf3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcf6:	c1 e2 04             	shl    $0x4,%edx
f010fcf9:	01 d0                	add    %edx,%eax
f010fcfb:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f010fd00:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fd06:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd09:	c1 e2 04             	shl    $0x4,%edx
f010fd0c:	01 d0                	add    %edx,%eax
f010fd0e:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f010fd13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd16:	c1 e0 04             	shl    $0x4,%eax
f010fd19:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fd1c:	01 f0                	add    %esi,%eax
f010fd1e:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fd23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fd29:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010fd2e:	40                   	inc    %eax
f010fd2f:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fd34:	ff 45 e4             	incl   -0x1c(%ebp)
f010fd37:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010fd3b:	0f 8e 97 fe ff ff    	jle    f010fbd8 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010fd41:	83 ec 0c             	sub    $0xc,%esp
f010fd44:	68 00 00 40 00       	push   $0x400000
f010fd49:	e8 6b 2c 02 00       	call   f01329b9 <alloc_block_BF>
f010fd4e:	83 c4 10             	add    $0x10,%esp
f010fd51:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010fd54:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fd58:	74 17                	je     f010fd71 <test_alloc_block_BF+0x22c>
f010fd5a:	83 ec 04             	sub    $0x4,%esp
f010fd5d:	68 00 87 13 f0       	push   $0xf0138700
f010fd62:	68 66 01 00 00       	push   $0x166
f010fd67:	68 94 7f 13 f0       	push   $0xf0137f94
f010fd6c:	e8 94 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd71:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010fd76:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fd79:	75 13                	jne    f010fd8e <test_alloc_block_BF+0x249>
f010fd7b:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010fd80:	83 f8 07             	cmp    $0x7,%eax
f010fd83:	75 09                	jne    f010fd8e <test_alloc_block_BF+0x249>
f010fd85:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010fd8a:	85 c0                	test   %eax,%eax
f010fd8c:	74 17                	je     f010fda5 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fd8e:	83 ec 04             	sub    $0x4,%esp
f010fd91:	68 c0 84 13 f0       	push   $0xf01384c0
f010fd96:	68 6a 01 00 00       	push   $0x16a
f010fd9b:	68 94 7f 13 f0       	push   $0xf0137f94
f010fda0:	e8 60 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fda5:	83 ec 0c             	sub    $0xc,%esp
f010fda8:	68 00 00 10 00       	push   $0x100000
f010fdad:	e8 07 2c 02 00       	call   f01329b9 <alloc_block_BF>
f010fdb2:	83 c4 10             	add    $0x10,%esp
f010fdb5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010fdb8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fdbc:	74 1a                	je     f010fdd8 <test_alloc_block_BF+0x293>
f010fdbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdc1:	8b 40 0c             	mov    0xc(%eax),%eax
f010fdc4:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fdc9:	75 0d                	jne    f010fdd8 <test_alloc_block_BF+0x293>
f010fdcb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdce:	8b 40 08             	mov    0x8(%eax),%eax
f010fdd1:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fdd6:	74 17                	je     f010fdef <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fdd8:	83 ec 04             	sub    $0x4,%esp
f010fddb:	68 74 87 13 f0       	push   $0xf0138774
f010fde0:	68 72 01 00 00       	push   $0x172
f010fde5:	68 94 7f 13 f0       	push   $0xf0137f94
f010fdea:	e8 16 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fdef:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010fdf4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fdf7:	75 13                	jne    f010fe0c <test_alloc_block_BF+0x2c7>
f010fdf9:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010fdfe:	83 f8 06             	cmp    $0x6,%eax
f010fe01:	75 09                	jne    f010fe0c <test_alloc_block_BF+0x2c7>
f010fe03:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010fe08:	85 c0                	test   %eax,%eax
f010fe0a:	74 17                	je     f010fe23 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe0c:	83 ec 04             	sub    $0x4,%esp
f010fe0f:	68 b8 87 13 f0       	push   $0xf01387b8
f010fe14:	68 76 01 00 00       	push   $0x176
f010fe19:	68 94 7f 13 f0       	push   $0xf0137f94
f010fe1e:	e8 e2 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fe23:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fe2a:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010fe2d:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010fe34:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010fe3b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fe42:	83 ec 0c             	sub    $0xc,%esp
f010fe45:	ff 75 d8             	pushl  -0x28(%ebp)
f010fe48:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fe4e:	50                   	push   %eax
f010fe4f:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fe52:	50                   	push   %eax
f010fe53:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fe56:	50                   	push   %eax
f010fe57:	68 60 07 86 f0       	push   $0xf0860760
f010fe5c:	e8 dd 17 00 00       	call   f011163e <check_list_data>
f010fe61:	83 c4 20             	add    $0x20,%esp
f010fe64:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fe67:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fe6b:	74 17                	je     f010fe84 <test_alloc_block_BF+0x33f>
f010fe6d:	83 ec 04             	sub    $0x4,%esp
f010fe70:	68 1c 88 13 f0       	push   $0xf013881c
f010fe75:	68 7e 01 00 00       	push   $0x17e
f010fe7a:	68 94 7f 13 f0       	push   $0xf0137f94
f010fe7f:	e8 81 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fe84:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fe8a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fe8d:	74 17                	je     f010fea6 <test_alloc_block_BF+0x361>
f010fe8f:	83 ec 04             	sub    $0x4,%esp
f010fe92:	68 68 88 13 f0       	push   $0xf0138868
f010fe97:	68 7f 01 00 00       	push   $0x17f
f010fe9c:	68 94 7f 13 f0       	push   $0xf0137f94
f010fea1:	e8 5f 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fea6:	83 ec 0c             	sub    $0xc,%esp
f010fea9:	68 00 00 10 00       	push   $0x100000
f010feae:	e8 06 2b 02 00       	call   f01329b9 <alloc_block_BF>
f010feb3:	83 c4 10             	add    $0x10,%esp
f010feb6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010feb9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010febd:	74 1a                	je     f010fed9 <test_alloc_block_BF+0x394>
f010febf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fec2:	8b 40 0c             	mov    0xc(%eax),%eax
f010fec5:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010feca:	75 0d                	jne    f010fed9 <test_alloc_block_BF+0x394>
f010fecc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fecf:	8b 40 08             	mov    0x8(%eax),%eax
f010fed2:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fed7:	74 17                	je     f010fef0 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fed9:	83 ec 04             	sub    $0x4,%esp
f010fedc:	68 74 87 13 f0       	push   $0xf0138774
f010fee1:	68 87 01 00 00       	push   $0x187
f010fee6:	68 94 7f 13 f0       	push   $0xf0137f94
f010feeb:	e8 15 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fef0:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010fef5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fef8:	4a                   	dec    %edx
f010fef9:	39 d0                	cmp    %edx,%eax
f010fefb:	75 13                	jne    f010ff10 <test_alloc_block_BF+0x3cb>
f010fefd:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f010ff02:	83 f8 06             	cmp    $0x6,%eax
f010ff05:	75 09                	jne    f010ff10 <test_alloc_block_BF+0x3cb>
f010ff07:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f010ff0c:	85 c0                	test   %eax,%eax
f010ff0e:	74 17                	je     f010ff27 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff10:	83 ec 04             	sub    $0x4,%esp
f010ff13:	68 b8 87 13 f0       	push   $0xf01387b8
f010ff18:	68 8b 01 00 00       	push   $0x18b
f010ff1d:	68 94 7f 13 f0       	push   $0xf0137f94
f010ff22:	e8 de 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ff27:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ff2e:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ff31:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ff38:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ff3f:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ff46:	83 ec 0c             	sub    $0xc,%esp
f010ff49:	ff 75 d8             	pushl  -0x28(%ebp)
f010ff4c:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ff52:	50                   	push   %eax
f010ff53:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ff56:	50                   	push   %eax
f010ff57:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ff5a:	50                   	push   %eax
f010ff5b:	68 60 07 86 f0       	push   $0xf0860760
f010ff60:	e8 d9 16 00 00       	call   f011163e <check_list_data>
f010ff65:	83 c4 20             	add    $0x20,%esp
f010ff68:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ff6b:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ff6f:	74 17                	je     f010ff88 <test_alloc_block_BF+0x443>
f010ff71:	83 ec 04             	sub    $0x4,%esp
f010ff74:	68 1c 88 13 f0       	push   $0xf013881c
f010ff79:	68 93 01 00 00       	push   $0x193
f010ff7e:	68 94 7f 13 f0       	push   $0xf0137f94
f010ff83:	e8 7d 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ff88:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ff8e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ff91:	74 17                	je     f010ffaa <test_alloc_block_BF+0x465>
f010ff93:	83 ec 04             	sub    $0x4,%esp
f010ff96:	68 68 88 13 f0       	push   $0xf0138868
f010ff9b:	68 94 01 00 00       	push   $0x194
f010ffa0:	68 94 7f 13 f0       	push   $0xf0137f94
f010ffa5:	e8 5b 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010ffaa:	83 ec 0c             	sub    $0xc,%esp
f010ffad:	68 00 0c 00 00       	push   $0xc00
f010ffb2:	e8 02 2a 02 00       	call   f01329b9 <alloc_block_BF>
f010ffb7:	83 c4 10             	add    $0x10,%esp
f010ffba:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010ffbd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ffc1:	74 1a                	je     f010ffdd <test_alloc_block_BF+0x498>
f010ffc3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffc6:	8b 40 0c             	mov    0xc(%eax),%eax
f010ffc9:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ffce:	75 0d                	jne    f010ffdd <test_alloc_block_BF+0x498>
f010ffd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffd3:	8b 40 08             	mov    0x8(%eax),%eax
f010ffd6:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010ffdb:	74 17                	je     f010fff4 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ffdd:	83 ec 04             	sub    $0x4,%esp
f010ffe0:	68 74 87 13 f0       	push   $0xf0138774
f010ffe5:	68 9c 01 00 00       	push   $0x19c
f010ffea:	68 94 7f 13 f0       	push   $0xf0137f94
f010ffef:	e8 11 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fff4:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f010fff9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fffc:	83 ea 02             	sub    $0x2,%edx
f010ffff:	39 d0                	cmp    %edx,%eax
f0110001:	75 13                	jne    f0110016 <test_alloc_block_BF+0x4d1>
f0110003:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110008:	83 f8 06             	cmp    $0x6,%eax
f011000b:	75 09                	jne    f0110016 <test_alloc_block_BF+0x4d1>
f011000d:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110012:	85 c0                	test   %eax,%eax
f0110014:	74 17                	je     f011002d <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110016:	83 ec 04             	sub    $0x4,%esp
f0110019:	68 b8 87 13 f0       	push   $0xf01387b8
f011001e:	68 a0 01 00 00       	push   $0x1a0
f0110023:	68 94 7f 13 f0       	push   $0xf0137f94
f0110028:	e8 d8 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011002d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0110034:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f0110037:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f011003e:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f0110045:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011004c:	83 ec 0c             	sub    $0xc,%esp
f011004f:	ff 75 d8             	pushl  -0x28(%ebp)
f0110052:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0110058:	50                   	push   %eax
f0110059:	8d 45 9c             	lea    -0x64(%ebp),%eax
f011005c:	50                   	push   %eax
f011005d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110060:	50                   	push   %eax
f0110061:	68 60 07 86 f0       	push   $0xf0860760
f0110066:	e8 d3 15 00 00       	call   f011163e <check_list_data>
f011006b:	83 c4 20             	add    $0x20,%esp
f011006e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f0110071:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110075:	74 17                	je     f011008e <test_alloc_block_BF+0x549>
f0110077:	83 ec 04             	sub    $0x4,%esp
f011007a:	68 1c 88 13 f0       	push   $0xf013881c
f011007f:	68 a8 01 00 00       	push   $0x1a8
f0110084:	68 94 7f 13 f0       	push   $0xf0137f94
f0110089:	e8 77 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f011008e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110094:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110097:	74 17                	je     f01100b0 <test_alloc_block_BF+0x56b>
f0110099:	83 ec 04             	sub    $0x4,%esp
f011009c:	68 68 88 13 f0       	push   $0xf0138868
f01100a1:	68 a9 01 00 00       	push   $0x1a9
f01100a6:	68 94 7f 13 f0       	push   $0xf0137f94
f01100ab:	e8 55 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f01100b0:	83 ec 0c             	sub    $0xc,%esp
f01100b3:	68 00 08 00 00       	push   $0x800
f01100b8:	e8 fc 28 02 00       	call   f01329b9 <alloc_block_BF>
f01100bd:	83 c4 10             	add    $0x10,%esp
f01100c0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f01100c3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01100c7:	74 17                	je     f01100e0 <test_alloc_block_BF+0x59b>
f01100c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100cc:	8b 40 0c             	mov    0xc(%eax),%eax
f01100cf:	3d 00 08 00 00       	cmp    $0x800,%eax
f01100d4:	75 0a                	jne    f01100e0 <test_alloc_block_BF+0x59b>
f01100d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100d9:	8b 40 08             	mov    0x8(%eax),%eax
f01100dc:	85 c0                	test   %eax,%eax
f01100de:	74 17                	je     f01100f7 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f01100e0:	83 ec 04             	sub    $0x4,%esp
f01100e3:	68 74 87 13 f0       	push   $0xf0138774
f01100e8:	68 b1 01 00 00       	push   $0x1b1
f01100ed:	68 94 7f 13 f0       	push   $0xf0137f94
f01100f2:	e8 0e 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01100f7:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f01100fc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01100ff:	83 ea 02             	sub    $0x2,%edx
f0110102:	39 d0                	cmp    %edx,%eax
f0110104:	75 13                	jne    f0110119 <test_alloc_block_BF+0x5d4>
f0110106:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f011010b:	83 f8 05             	cmp    $0x5,%eax
f011010e:	75 09                	jne    f0110119 <test_alloc_block_BF+0x5d4>
f0110110:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110115:	85 c0                	test   %eax,%eax
f0110117:	74 17                	je     f0110130 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110119:	83 ec 04             	sub    $0x4,%esp
f011011c:	68 b8 87 13 f0       	push   $0xf01387b8
f0110121:	68 b5 01 00 00       	push   $0x1b5
f0110126:	68 94 7f 13 f0       	push   $0xf0137f94
f011012b:	e8 d5 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110130:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0110137:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f011013a:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f0110141:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f0110148:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011014f:	83 ec 0c             	sub    $0xc,%esp
f0110152:	ff 75 d8             	pushl  -0x28(%ebp)
f0110155:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f011015b:	50                   	push   %eax
f011015c:	8d 45 9c             	lea    -0x64(%ebp),%eax
f011015f:	50                   	push   %eax
f0110160:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110163:	50                   	push   %eax
f0110164:	68 60 07 86 f0       	push   $0xf0860760
f0110169:	e8 d0 14 00 00       	call   f011163e <check_list_data>
f011016e:	83 c4 20             	add    $0x20,%esp
f0110171:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f0110174:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110178:	74 17                	je     f0110191 <test_alloc_block_BF+0x64c>
f011017a:	83 ec 04             	sub    $0x4,%esp
f011017d:	68 1c 88 13 f0       	push   $0xf013881c
f0110182:	68 bd 01 00 00       	push   $0x1bd
f0110187:	68 94 7f 13 f0       	push   $0xf0137f94
f011018c:	e8 74 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f0110191:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110197:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011019a:	74 17                	je     f01101b3 <test_alloc_block_BF+0x66e>
f011019c:	83 ec 04             	sub    $0x4,%esp
f011019f:	68 68 88 13 f0       	push   $0xf0138868
f01101a4:	68 be 01 00 00       	push   $0x1be
f01101a9:	68 94 7f 13 f0       	push   $0xf0137f94
f01101ae:	e8 52 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f01101b3:	83 ec 0c             	sub    $0xc,%esp
f01101b6:	68 b4 88 13 f0       	push   $0xf01388b4
f01101bb:	e8 4e 0b ff ff       	call   f0100d0e <cprintf>
f01101c0:	83 c4 10             	add    $0x10,%esp
}
f01101c3:	90                   	nop
f01101c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01101c7:	5b                   	pop    %ebx
f01101c8:	5e                   	pop    %esi
f01101c9:	5f                   	pop    %edi
f01101ca:	5d                   	pop    %ebp
f01101cb:	c3                   	ret    

f01101cc <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f01101cc:	55                   	push   %ebp
f01101cd:	89 e5                	mov    %esp,%ebp
f01101cf:	57                   	push   %edi
f01101d0:	56                   	push   %esi
f01101d1:	53                   	push   %ebx
f01101d2:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f01101d8:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f01101df:	83 ec 0c             	sub    $0xc,%esp
f01101e2:	ff 75 e0             	pushl  -0x20(%ebp)
f01101e5:	e8 70 23 02 00       	call   f013255a <initialize_MemBlocksList>
f01101ea:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f01101ed:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f01101f4:	00 00 00 
f01101f7:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f01101fe:	00 00 00 
f0110201:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f0110208:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f011020b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011020e:	bb c0 86 13 f0       	mov    $0xf01386c0,%ebx
f0110213:	ba 08 00 00 00       	mov    $0x8,%edx
f0110218:	89 c7                	mov    %eax,%edi
f011021a:	89 de                	mov    %ebx,%esi
f011021c:	89 d1                	mov    %edx,%ecx
f011021e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f0110220:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110223:	bb 20 8b 13 f0       	mov    $0xf0138b20,%ebx
f0110228:	ba 08 00 00 00       	mov    $0x8,%edx
f011022d:	89 c7                	mov    %eax,%edi
f011022f:	89 de                	mov    %ebx,%esi
f0110231:	89 d1                	mov    %edx,%ecx
f0110233:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f0110235:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f011023c:	00 00 00 
f011023f:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f0110246:	00 00 00 
f0110249:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f0110250:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f0110253:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011025a:	e9 5f 01 00 00       	jmp    f01103be <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f011025f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110262:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f0110266:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110269:	c1 e2 04             	shl    $0x4,%edx
f011026c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f011026f:	01 da                	add    %ebx,%edx
f0110271:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f0110277:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f0110279:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011027c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f0110280:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110283:	c1 e2 04             	shl    $0x4,%edx
f0110286:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110289:	01 f2                	add    %esi,%edx
f011028b:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f0110291:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f0110293:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0110297:	0f 85 92 00 00 00    	jne    f011032f <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f011029d:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f01102a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102a5:	c1 e2 04             	shl    $0x4,%edx
f01102a8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f01102ab:	01 fa                	add    %edi,%edx
f01102ad:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f01102b3:	89 02                	mov    %eax,(%edx)
f01102b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01102b8:	c1 e0 04             	shl    $0x4,%eax
f01102bb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f01102be:	01 d8                	add    %ebx,%eax
f01102c0:	2d d4 00 00 00       	sub    $0xd4,%eax
f01102c5:	8b 00                	mov    (%eax),%eax
f01102c7:	85 c0                	test   %eax,%eax
f01102c9:	74 18                	je     f01102e3 <test_alloc_block_NF+0x117>
f01102cb:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f01102d0:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f01102d6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f01102d9:	c1 e1 04             	shl    $0x4,%ecx
f01102dc:	01 ca                	add    %ecx,%edx
f01102de:	89 50 04             	mov    %edx,0x4(%eax)
f01102e1:	eb 13                	jmp    f01102f6 <test_alloc_block_NF+0x12a>
f01102e3:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01102e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102ec:	c1 e2 04             	shl    $0x4,%edx
f01102ef:	01 d0                	add    %edx,%eax
f01102f1:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f01102f6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01102fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102ff:	c1 e2 04             	shl    $0x4,%edx
f0110302:	01 d0                	add    %edx,%eax
f0110304:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f0110309:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011030c:	c1 e0 04             	shl    $0x4,%eax
f011030f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110312:	01 f0                	add    %esi,%eax
f0110314:	2d d0 00 00 00       	sub    $0xd0,%eax
f0110319:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f011031f:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110324:	40                   	inc    %eax
f0110325:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
f011032a:	e9 8c 00 00 00       	jmp    f01103bb <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f011032f:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0110334:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110337:	c1 e2 04             	shl    $0x4,%edx
f011033a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f011033d:	01 fa                	add    %edi,%edx
f011033f:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f0110345:	89 02                	mov    %eax,(%edx)
f0110347:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011034a:	c1 e0 04             	shl    $0x4,%eax
f011034d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110350:	01 d8                	add    %ebx,%eax
f0110352:	2d d0 00 00 00       	sub    $0xd0,%eax
f0110357:	8b 00                	mov    (%eax),%eax
f0110359:	85 c0                	test   %eax,%eax
f011035b:	74 17                	je     f0110374 <test_alloc_block_NF+0x1a8>
f011035d:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0110362:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f0110368:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f011036b:	c1 e1 04             	shl    $0x4,%ecx
f011036e:	01 ca                	add    %ecx,%edx
f0110370:	89 10                	mov    %edx,(%eax)
f0110372:	eb 13                	jmp    f0110387 <test_alloc_block_NF+0x1bb>
f0110374:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011037a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011037d:	c1 e2 04             	shl    $0x4,%edx
f0110380:	01 d0                	add    %edx,%eax
f0110382:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f0110387:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011038d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110390:	c1 e2 04             	shl    $0x4,%edx
f0110393:	01 d0                	add    %edx,%eax
f0110395:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f011039a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011039d:	c1 e0 04             	shl    $0x4,%eax
f01103a0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f01103a3:	01 f0                	add    %esi,%eax
f01103a5:	2d d4 00 00 00       	sub    $0xd4,%eax
f01103aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01103b0:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f01103b5:	40                   	inc    %eax
f01103b6:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f01103bb:	ff 45 e4             	incl   -0x1c(%ebp)
f01103be:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f01103c2:	0f 8e 97 fe ff ff    	jle    f011025f <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f01103c8:	83 ec 0c             	sub    $0xc,%esp
f01103cb:	68 00 00 a0 00       	push   $0xa00000
f01103d0:	e8 c3 27 02 00       	call   f0132b98 <alloc_block_NF>
f01103d5:	83 c4 10             	add    $0x10,%esp
f01103d8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f01103db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01103df:	74 17                	je     f01103f8 <test_alloc_block_NF+0x22c>
f01103e1:	83 ec 04             	sub    $0x4,%esp
f01103e4:	68 2c 89 13 f0       	push   $0xf013892c
f01103e9:	68 e1 01 00 00       	push   $0x1e1
f01103ee:	68 94 7f 13 f0       	push   $0xf0137f94
f01103f3:	e8 0d fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01103f8:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f01103fd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110400:	75 13                	jne    f0110415 <test_alloc_block_NF+0x249>
f0110402:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110407:	83 f8 08             	cmp    $0x8,%eax
f011040a:	75 09                	jne    f0110415 <test_alloc_block_NF+0x249>
f011040c:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110411:	85 c0                	test   %eax,%eax
f0110413:	74 17                	je     f011042c <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f0110415:	83 ec 04             	sub    $0x4,%esp
f0110418:	68 c0 84 13 f0       	push   $0xf01384c0
f011041d:	68 e5 01 00 00       	push   $0x1e5
f0110422:	68 94 7f 13 f0       	push   $0xf0137f94
f0110427:	e8 d9 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f011042c:	83 ec 0c             	sub    $0xc,%esp
f011042f:	68 00 28 00 00       	push   $0x2800
f0110434:	e8 5f 27 02 00       	call   f0132b98 <alloc_block_NF>
f0110439:	83 c4 10             	add    $0x10,%esp
f011043c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f011043f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110443:	74 1a                	je     f011045f <test_alloc_block_NF+0x293>
f0110445:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110448:	8b 40 0c             	mov    0xc(%eax),%eax
f011044b:	3d 00 28 00 00       	cmp    $0x2800,%eax
f0110450:	75 0d                	jne    f011045f <test_alloc_block_NF+0x293>
f0110452:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110455:	8b 40 08             	mov    0x8(%eax),%eax
f0110458:	3d 00 70 00 00       	cmp    $0x7000,%eax
f011045d:	74 17                	je     f0110476 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011045f:	83 ec 04             	sub    $0x4,%esp
f0110462:	68 a0 89 13 f0       	push   $0xf01389a0
f0110467:	68 ed 01 00 00       	push   $0x1ed
f011046c:	68 94 7f 13 f0       	push   $0xf0137f94
f0110471:	e8 8f fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110476:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f011047b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011047e:	75 13                	jne    f0110493 <test_alloc_block_NF+0x2c7>
f0110480:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110485:	83 f8 07             	cmp    $0x7,%eax
f0110488:	75 09                	jne    f0110493 <test_alloc_block_NF+0x2c7>
f011048a:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f011048f:	85 c0                	test   %eax,%eax
f0110491:	74 17                	je     f01104aa <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110493:	83 ec 04             	sub    $0x4,%esp
f0110496:	68 e4 89 13 f0       	push   $0xf01389e4
f011049b:	68 f1 01 00 00       	push   $0x1f1
f01104a0:	68 94 7f 13 f0       	push   $0xf0137f94
f01104a5:	e8 5b fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f01104aa:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01104b1:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f01104b4:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f01104bb:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f01104c2:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01104c9:	83 ec 0c             	sub    $0xc,%esp
f01104cc:	ff 75 d8             	pushl  -0x28(%ebp)
f01104cf:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01104d5:	50                   	push   %eax
f01104d6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104d9:	50                   	push   %eax
f01104da:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01104dd:	50                   	push   %eax
f01104de:	68 60 07 86 f0       	push   $0xf0860760
f01104e3:	e8 56 11 00 00       	call   f011163e <check_list_data>
f01104e8:	83 c4 20             	add    $0x20,%esp
f01104eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01104ee:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01104f2:	74 17                	je     f011050b <test_alloc_block_NF+0x33f>
f01104f4:	83 ec 04             	sub    $0x4,%esp
f01104f7:	68 48 8a 13 f0       	push   $0xf0138a48
f01104fc:	68 f9 01 00 00       	push   $0x1f9
f0110501:	68 94 7f 13 f0       	push   $0xf0137f94
f0110506:	e8 fa fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011050b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110511:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110514:	74 17                	je     f011052d <test_alloc_block_NF+0x361>
f0110516:	83 ec 04             	sub    $0x4,%esp
f0110519:	68 94 8a 13 f0       	push   $0xf0138a94
f011051e:	68 fa 01 00 00       	push   $0x1fa
f0110523:	68 94 7f 13 f0       	push   $0xf0137f94
f0110528:	e8 d8 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f011052d:	83 ec 0c             	sub    $0xc,%esp
f0110530:	68 00 00 20 00       	push   $0x200000
f0110535:	e8 5e 26 02 00       	call   f0132b98 <alloc_block_NF>
f011053a:	83 c4 10             	add    $0x10,%esp
f011053d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f0110540:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110544:	74 1a                	je     f0110560 <test_alloc_block_NF+0x394>
f0110546:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110549:	8b 40 0c             	mov    0xc(%eax),%eax
f011054c:	3d 00 00 20 00       	cmp    $0x200000,%eax
f0110551:	75 0d                	jne    f0110560 <test_alloc_block_NF+0x394>
f0110553:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110556:	8b 40 08             	mov    0x8(%eax),%eax
f0110559:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f011055e:	74 17                	je     f0110577 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110560:	83 ec 04             	sub    $0x4,%esp
f0110563:	68 a0 89 13 f0       	push   $0xf01389a0
f0110568:	68 03 02 00 00       	push   $0x203
f011056d:	68 94 7f 13 f0       	push   $0xf0137f94
f0110572:	e8 8e fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110577:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f011057c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011057f:	75 13                	jne    f0110594 <test_alloc_block_NF+0x3c8>
f0110581:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110586:	83 f8 06             	cmp    $0x6,%eax
f0110589:	75 09                	jne    f0110594 <test_alloc_block_NF+0x3c8>
f011058b:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110590:	85 c0                	test   %eax,%eax
f0110592:	74 17                	je     f01105ab <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110594:	83 ec 04             	sub    $0x4,%esp
f0110597:	68 e4 89 13 f0       	push   $0xf01389e4
f011059c:	68 07 02 00 00       	push   $0x207
f01105a1:	68 94 7f 13 f0       	push   $0xf0137f94
f01105a6:	e8 5a fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01105ab:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01105b2:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01105b5:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f01105bc:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f01105c3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01105ca:	83 ec 0c             	sub    $0xc,%esp
f01105cd:	ff 75 d8             	pushl  -0x28(%ebp)
f01105d0:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01105d6:	50                   	push   %eax
f01105d7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105da:	50                   	push   %eax
f01105db:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01105de:	50                   	push   %eax
f01105df:	68 60 07 86 f0       	push   $0xf0860760
f01105e4:	e8 55 10 00 00       	call   f011163e <check_list_data>
f01105e9:	83 c4 20             	add    $0x20,%esp
f01105ec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01105ef:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01105f3:	74 17                	je     f011060c <test_alloc_block_NF+0x440>
f01105f5:	83 ec 04             	sub    $0x4,%esp
f01105f8:	68 48 8a 13 f0       	push   $0xf0138a48
f01105fd:	68 0f 02 00 00       	push   $0x20f
f0110602:	68 94 7f 13 f0       	push   $0xf0137f94
f0110607:	e8 f9 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011060c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110612:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110615:	74 17                	je     f011062e <test_alloc_block_NF+0x462>
f0110617:	83 ec 04             	sub    $0x4,%esp
f011061a:	68 94 8a 13 f0       	push   $0xf0138a94
f011061f:	68 10 02 00 00       	push   $0x210
f0110624:	68 94 7f 13 f0       	push   $0xf0137f94
f0110629:	e8 d7 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f011062e:	83 ec 0c             	sub    $0xc,%esp
f0110631:	68 00 00 08 00       	push   $0x80000
f0110636:	e8 5d 25 02 00       	call   f0132b98 <alloc_block_NF>
f011063b:	83 c4 10             	add    $0x10,%esp
f011063e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f0110641:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110645:	74 1a                	je     f0110661 <test_alloc_block_NF+0x495>
f0110647:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011064a:	8b 40 0c             	mov    0xc(%eax),%eax
f011064d:	3d 00 00 08 00       	cmp    $0x80000,%eax
f0110652:	75 0d                	jne    f0110661 <test_alloc_block_NF+0x495>
f0110654:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110657:	8b 40 08             	mov    0x8(%eax),%eax
f011065a:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f011065f:	74 17                	je     f0110678 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110661:	83 ec 04             	sub    $0x4,%esp
f0110664:	68 a0 89 13 f0       	push   $0xf01389a0
f0110669:	68 19 02 00 00       	push   $0x219
f011066e:	68 94 7f 13 f0       	push   $0xf0137f94
f0110673:	e8 8d fb fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110678:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f011067d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110680:	4a                   	dec    %edx
f0110681:	39 d0                	cmp    %edx,%eax
f0110683:	75 13                	jne    f0110698 <test_alloc_block_NF+0x4cc>
f0110685:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f011068a:	83 f8 06             	cmp    $0x6,%eax
f011068d:	75 09                	jne    f0110698 <test_alloc_block_NF+0x4cc>
f011068f:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110694:	85 c0                	test   %eax,%eax
f0110696:	74 17                	je     f01106af <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110698:	83 ec 04             	sub    $0x4,%esp
f011069b:	68 e4 89 13 f0       	push   $0xf01389e4
f01106a0:	68 1d 02 00 00       	push   $0x21d
f01106a5:	68 94 7f 13 f0       	push   $0xf0137f94
f01106aa:	e8 56 fb fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01106af:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01106b6:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01106b9:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f01106c0:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f01106c7:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01106ce:	83 ec 0c             	sub    $0xc,%esp
f01106d1:	ff 75 d8             	pushl  -0x28(%ebp)
f01106d4:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01106da:	50                   	push   %eax
f01106db:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106de:	50                   	push   %eax
f01106df:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01106e2:	50                   	push   %eax
f01106e3:	68 60 07 86 f0       	push   $0xf0860760
f01106e8:	e8 51 0f 00 00       	call   f011163e <check_list_data>
f01106ed:	83 c4 20             	add    $0x20,%esp
f01106f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01106f3:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01106f7:	74 17                	je     f0110710 <test_alloc_block_NF+0x544>
f01106f9:	83 ec 04             	sub    $0x4,%esp
f01106fc:	68 48 8a 13 f0       	push   $0xf0138a48
f0110701:	68 25 02 00 00       	push   $0x225
f0110706:	68 94 7f 13 f0       	push   $0xf0137f94
f011070b:	e8 f5 fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110710:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110716:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110719:	74 17                	je     f0110732 <test_alloc_block_NF+0x566>
f011071b:	83 ec 04             	sub    $0x4,%esp
f011071e:	68 94 8a 13 f0       	push   $0xf0138a94
f0110723:	68 26 02 00 00       	push   $0x226
f0110728:	68 94 7f 13 f0       	push   $0xf0137f94
f011072d:	e8 d3 fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f0110732:	83 ec 0c             	sub    $0xc,%esp
f0110735:	68 00 fc 07 00       	push   $0x7fc00
f011073a:	e8 59 24 02 00       	call   f0132b98 <alloc_block_NF>
f011073f:	83 c4 10             	add    $0x10,%esp
f0110742:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f0110745:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110749:	74 1a                	je     f0110765 <test_alloc_block_NF+0x599>
f011074b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011074e:	8b 40 0c             	mov    0xc(%eax),%eax
f0110751:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f0110756:	75 0d                	jne    f0110765 <test_alloc_block_NF+0x599>
f0110758:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011075b:	8b 40 08             	mov    0x8(%eax),%eax
f011075e:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110763:	74 17                	je     f011077c <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110765:	83 ec 04             	sub    $0x4,%esp
f0110768:	68 a0 89 13 f0       	push   $0xf01389a0
f011076d:	68 2f 02 00 00       	push   $0x22f
f0110772:	68 94 7f 13 f0       	push   $0xf0137f94
f0110777:	e8 89 fa fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011077c:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0110781:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110784:	83 ea 02             	sub    $0x2,%edx
f0110787:	39 d0                	cmp    %edx,%eax
f0110789:	75 13                	jne    f011079e <test_alloc_block_NF+0x5d2>
f011078b:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110790:	83 f8 06             	cmp    $0x6,%eax
f0110793:	75 09                	jne    f011079e <test_alloc_block_NF+0x5d2>
f0110795:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f011079a:	85 c0                	test   %eax,%eax
f011079c:	74 17                	je     f01107b5 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011079e:	83 ec 04             	sub    $0x4,%esp
f01107a1:	68 e4 89 13 f0       	push   $0xf01389e4
f01107a6:	68 33 02 00 00       	push   $0x233
f01107ab:	68 94 7f 13 f0       	push   $0xf0137f94
f01107b0:	e8 50 fa fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01107b5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01107bc:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01107bf:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f01107c6:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f01107cd:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01107d4:	83 ec 0c             	sub    $0xc,%esp
f01107d7:	ff 75 d8             	pushl  -0x28(%ebp)
f01107da:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01107e0:	50                   	push   %eax
f01107e1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107e4:	50                   	push   %eax
f01107e5:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01107e8:	50                   	push   %eax
f01107e9:	68 60 07 86 f0       	push   $0xf0860760
f01107ee:	e8 4b 0e 00 00       	call   f011163e <check_list_data>
f01107f3:	83 c4 20             	add    $0x20,%esp
f01107f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01107f9:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01107fd:	74 17                	je     f0110816 <test_alloc_block_NF+0x64a>
f01107ff:	83 ec 04             	sub    $0x4,%esp
f0110802:	68 48 8a 13 f0       	push   $0xf0138a48
f0110807:	68 3b 02 00 00       	push   $0x23b
f011080c:	68 94 7f 13 f0       	push   $0xf0137f94
f0110811:	e8 ef f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110816:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011081c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011081f:	74 17                	je     f0110838 <test_alloc_block_NF+0x66c>
f0110821:	83 ec 04             	sub    $0x4,%esp
f0110824:	68 94 8a 13 f0       	push   $0xf0138a94
f0110829:	68 3c 02 00 00       	push   $0x23c
f011082e:	68 94 7f 13 f0       	push   $0xf0137f94
f0110833:	e8 cd f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f0110838:	83 ec 0c             	sub    $0xc,%esp
f011083b:	68 00 0c 00 00       	push   $0xc00
f0110840:	e8 53 23 02 00       	call   f0132b98 <alloc_block_NF>
f0110845:	83 c4 10             	add    $0x10,%esp
f0110848:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f011084b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011084f:	74 17                	je     f0110868 <test_alloc_block_NF+0x69c>
f0110851:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110854:	8b 40 0c             	mov    0xc(%eax),%eax
f0110857:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f011085c:	75 0a                	jne    f0110868 <test_alloc_block_NF+0x69c>
f011085e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110861:	8b 40 08             	mov    0x8(%eax),%eax
f0110864:	85 c0                	test   %eax,%eax
f0110866:	74 17                	je     f011087f <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110868:	83 ec 04             	sub    $0x4,%esp
f011086b:	68 a0 89 13 f0       	push   $0xf01389a0
f0110870:	68 45 02 00 00       	push   $0x245
f0110875:	68 94 7f 13 f0       	push   $0xf0137f94
f011087a:	e8 86 f9 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011087f:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0110884:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110887:	83 ea 02             	sub    $0x2,%edx
f011088a:	39 d0                	cmp    %edx,%eax
f011088c:	75 13                	jne    f01108a1 <test_alloc_block_NF+0x6d5>
f011088e:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110893:	83 f8 05             	cmp    $0x5,%eax
f0110896:	75 09                	jne    f01108a1 <test_alloc_block_NF+0x6d5>
f0110898:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f011089d:	85 c0                	test   %eax,%eax
f011089f:	74 17                	je     f01108b8 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01108a1:	83 ec 04             	sub    $0x4,%esp
f01108a4:	68 e4 89 13 f0       	push   $0xf01389e4
f01108a9:	68 49 02 00 00       	push   $0x249
f01108ae:	68 94 7f 13 f0       	push   $0xf0137f94
f01108b3:	e8 4d f9 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01108b8:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01108bf:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01108c2:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f01108c9:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f01108d0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01108d7:	83 ec 0c             	sub    $0xc,%esp
f01108da:	ff 75 d8             	pushl  -0x28(%ebp)
f01108dd:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01108e3:	50                   	push   %eax
f01108e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108e7:	50                   	push   %eax
f01108e8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01108eb:	50                   	push   %eax
f01108ec:	68 60 07 86 f0       	push   $0xf0860760
f01108f1:	e8 48 0d 00 00       	call   f011163e <check_list_data>
f01108f6:	83 c4 20             	add    $0x20,%esp
f01108f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f01108fc:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110900:	74 17                	je     f0110919 <test_alloc_block_NF+0x74d>
f0110902:	83 ec 04             	sub    $0x4,%esp
f0110905:	68 48 8a 13 f0       	push   $0xf0138a48
f011090a:	68 51 02 00 00       	push   $0x251
f011090f:	68 94 7f 13 f0       	push   $0xf0137f94
f0110914:	e8 ec f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110919:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011091f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110922:	74 17                	je     f011093b <test_alloc_block_NF+0x76f>
f0110924:	83 ec 04             	sub    $0x4,%esp
f0110927:	68 94 8a 13 f0       	push   $0xf0138a94
f011092c:	68 52 02 00 00       	push   $0x252
f0110931:	68 94 7f 13 f0       	push   $0xf0137f94
f0110936:	e8 ca f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f011093b:	83 ec 0c             	sub    $0xc,%esp
f011093e:	68 00 04 00 00       	push   $0x400
f0110943:	e8 50 22 02 00       	call   f0132b98 <alloc_block_NF>
f0110948:	83 c4 10             	add    $0x10,%esp
f011094b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f011094e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110952:	74 1a                	je     f011096e <test_alloc_block_NF+0x7a2>
f0110954:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110957:	8b 40 0c             	mov    0xc(%eax),%eax
f011095a:	3d 00 04 00 00       	cmp    $0x400,%eax
f011095f:	75 0d                	jne    f011096e <test_alloc_block_NF+0x7a2>
f0110961:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110964:	8b 40 08             	mov    0x8(%eax),%eax
f0110967:	3d 00 20 00 00       	cmp    $0x2000,%eax
f011096c:	74 17                	je     f0110985 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011096e:	83 ec 04             	sub    $0x4,%esp
f0110971:	68 a0 89 13 f0       	push   $0xf01389a0
f0110976:	68 5b 02 00 00       	push   $0x25b
f011097b:	68 94 7f 13 f0       	push   $0xf0137f94
f0110980:	e8 80 f8 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110985:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f011098a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011098d:	83 ea 03             	sub    $0x3,%edx
f0110990:	39 d0                	cmp    %edx,%eax
f0110992:	75 13                	jne    f01109a7 <test_alloc_block_NF+0x7db>
f0110994:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110999:	83 f8 05             	cmp    $0x5,%eax
f011099c:	75 09                	jne    f01109a7 <test_alloc_block_NF+0x7db>
f011099e:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f01109a3:	85 c0                	test   %eax,%eax
f01109a5:	74 17                	je     f01109be <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01109a7:	83 ec 04             	sub    $0x4,%esp
f01109aa:	68 e4 89 13 f0       	push   $0xf01389e4
f01109af:	68 5f 02 00 00       	push   $0x25f
f01109b4:	68 94 7f 13 f0       	push   $0xf0137f94
f01109b9:	e8 47 f8 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01109be:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01109c5:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01109c8:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f01109cf:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f01109d6:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01109dd:	83 ec 0c             	sub    $0xc,%esp
f01109e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01109e3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01109e9:	50                   	push   %eax
f01109ea:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109ed:	50                   	push   %eax
f01109ee:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01109f1:	50                   	push   %eax
f01109f2:	68 60 07 86 f0       	push   $0xf0860760
f01109f7:	e8 42 0c 00 00       	call   f011163e <check_list_data>
f01109fc:	83 c4 20             	add    $0x20,%esp
f01109ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110a02:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110a06:	74 17                	je     f0110a1f <test_alloc_block_NF+0x853>
f0110a08:	83 ec 04             	sub    $0x4,%esp
f0110a0b:	68 48 8a 13 f0       	push   $0xf0138a48
f0110a10:	68 67 02 00 00       	push   $0x267
f0110a15:	68 94 7f 13 f0       	push   $0xf0137f94
f0110a1a:	e8 e6 f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110a1f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110a25:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110a28:	74 17                	je     f0110a41 <test_alloc_block_NF+0x875>
f0110a2a:	83 ec 04             	sub    $0x4,%esp
f0110a2d:	68 94 8a 13 f0       	push   $0xf0138a94
f0110a32:	68 68 02 00 00       	push   $0x268
f0110a37:	68 94 7f 13 f0       	push   $0xf0137f94
f0110a3c:	e8 c4 f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110a41:	83 ec 0c             	sub    $0xc,%esp
f0110a44:	68 e0 8a 13 f0       	push   $0xf0138ae0
f0110a49:	e8 c0 02 ff ff       	call   f0100d0e <cprintf>
f0110a4e:	83 c4 10             	add    $0x10,%esp

}
f0110a51:	90                   	nop
f0110a52:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110a55:	5b                   	pop    %ebx
f0110a56:	5e                   	pop    %esi
f0110a57:	5f                   	pop    %edi
f0110a58:	5d                   	pop    %ebp
f0110a59:	c3                   	ret    

f0110a5a <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110a5a:	55                   	push   %ebp
f0110a5b:	89 e5                	mov    %esp,%ebp
f0110a5d:	57                   	push   %edi
f0110a5e:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110a64:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110a6b:	83 ec 0c             	sub    $0xc,%esp
f0110a6e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a71:	e8 e4 1a 02 00       	call   f013255a <initialize_MemBlocksList>
f0110a76:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110a79:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f0110a80:	00 00 00 
f0110a83:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f0110a8a:	00 00 00 
f0110a8d:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f0110a94:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110a97:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f0110a9e:	00 00 00 
f0110aa1:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f0110aa8:	00 00 00 
f0110aab:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f0110ab2:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110ab5:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110ab8:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110abd:	b8 00 00 00 00       	mov    $0x0,%eax
f0110ac2:	89 d7                	mov    %edx,%edi
f0110ac4:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110ac6:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110ac9:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110ace:	b8 00 00 00 00       	mov    $0x0,%eax
f0110ad3:	89 d7                	mov    %edx,%edi
f0110ad5:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110ad7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f0110ade:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f0110ae5:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110aec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aef:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f0110af6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110af7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110afa:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110b01:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110b02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b05:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110b09:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f0110b0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b0f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110b13:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f0110b16:	83 ec 0c             	sub    $0xc,%esp
f0110b19:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0110b1c:	50                   	push   %eax
f0110b1d:	e8 89 22 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f0110b22:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0110b25:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110b2a:	85 c0                	test   %eax,%eax
f0110b2c:	75 14                	jne    f0110b42 <test_insert_sorted_with_merge_freeList+0xe8>
f0110b2e:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0110b33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b36:	75 0a                	jne    f0110b42 <test_insert_sorted_with_merge_freeList+0xe8>
f0110b38:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110b3d:	83 f8 01             	cmp    $0x1,%eax
f0110b40:	74 17                	je     f0110b59 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110b42:	83 ec 04             	sub    $0x4,%esp
f0110b45:	68 40 8b 13 f0       	push   $0xf0138b40
f0110b4a:	68 88 02 00 00       	push   $0x288
f0110b4f:	68 94 7f 13 f0       	push   $0xf0137f94
f0110b54:	e8 ac f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110b59:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110b60:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110b67:	83 ec 0c             	sub    $0xc,%esp
f0110b6a:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b6d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b70:	50                   	push   %eax
f0110b71:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b74:	50                   	push   %eax
f0110b75:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b78:	50                   	push   %eax
f0110b79:	68 60 07 86 f0       	push   $0xf0860760
f0110b7e:	e8 bb 0a 00 00       	call   f011163e <check_list_data>
f0110b83:	83 c4 20             	add    $0x20,%esp
f0110b86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b89:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b8d:	74 17                	je     f0110ba6 <test_insert_sorted_with_merge_freeList+0x14c>
f0110b8f:	83 ec 04             	sub    $0x4,%esp
f0110b92:	68 ac 8b 13 f0       	push   $0xf0138bac
f0110b97:	68 8e 02 00 00       	push   $0x28e
f0110b9c:	68 94 7f 13 f0       	push   $0xf0137f94
f0110ba1:	e8 5f f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110ba6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ba9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110bac:	74 17                	je     f0110bc5 <test_insert_sorted_with_merge_freeList+0x16b>
f0110bae:	83 ec 04             	sub    $0x4,%esp
f0110bb1:	68 00 8c 13 f0       	push   $0xf0138c00
f0110bb6:	68 8f 02 00 00       	push   $0x28f
f0110bbb:	68 94 7f 13 f0       	push   $0xf0137f94
f0110bc0:	e8 40 f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110bc5:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110bcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bcf:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110bd6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110bd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bda:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f0110be1:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110be2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110be5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110be9:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110bef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bf2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110bf6:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110bf9:	83 ec 0c             	sub    $0xc,%esp
f0110bfc:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110c02:	50                   	push   %eax
f0110c03:	e8 a3 21 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f0110c08:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f0110c0b:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110c10:	85 c0                	test   %eax,%eax
f0110c12:	75 14                	jne    f0110c28 <test_insert_sorted_with_merge_freeList+0x1ce>
f0110c14:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0110c19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110c1c:	75 0a                	jne    f0110c28 <test_insert_sorted_with_merge_freeList+0x1ce>
f0110c1e:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110c23:	83 f8 02             	cmp    $0x2,%eax
f0110c26:	74 17                	je     f0110c3f <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c28:	83 ec 04             	sub    $0x4,%esp
f0110c2b:	68 40 8b 13 f0       	push   $0xf0138b40
f0110c30:	68 9e 02 00 00       	push   $0x29e
f0110c35:	68 94 7f 13 f0       	push   $0xf0137f94
f0110c3a:	e8 c6 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c3f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110c46:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c4d:	83 ec 0c             	sub    $0xc,%esp
f0110c50:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c53:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c56:	50                   	push   %eax
f0110c57:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c5a:	50                   	push   %eax
f0110c5b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c5e:	50                   	push   %eax
f0110c5f:	68 60 07 86 f0       	push   $0xf0860760
f0110c64:	e8 d5 09 00 00       	call   f011163e <check_list_data>
f0110c69:	83 c4 20             	add    $0x20,%esp
f0110c6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c6f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c73:	74 17                	je     f0110c8c <test_insert_sorted_with_merge_freeList+0x232>
f0110c75:	83 ec 04             	sub    $0x4,%esp
f0110c78:	68 ac 8b 13 f0       	push   $0xf0138bac
f0110c7d:	68 a4 02 00 00       	push   $0x2a4
f0110c82:	68 94 7f 13 f0       	push   $0xf0137f94
f0110c87:	e8 79 f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110c8c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c8f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110c92:	74 17                	je     f0110cab <test_insert_sorted_with_merge_freeList+0x251>
f0110c94:	83 ec 04             	sub    $0x4,%esp
f0110c97:	68 00 8c 13 f0       	push   $0xf0138c00
f0110c9c:	68 a5 02 00 00       	push   $0x2a5
f0110ca1:	68 94 7f 13 f0       	push   $0xf0137f94
f0110ca6:	e8 5a f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110cab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110cb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cb5:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110cbc:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110cbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cc0:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110cc7:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110cc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ccb:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ccf:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110cd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cd8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110cdc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f0110ce2:	83 ec 0c             	sub    $0xc,%esp
f0110ce5:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110ceb:	50                   	push   %eax
f0110cec:	e8 ba 20 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f0110cf1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110cf4:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110cf9:	85 c0                	test   %eax,%eax
f0110cfb:	75 14                	jne    f0110d11 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110cfd:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0110d02:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110d05:	75 0a                	jne    f0110d11 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110d07:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110d0c:	83 f8 03             	cmp    $0x3,%eax
f0110d0f:	74 17                	je     f0110d28 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110d11:	83 ec 04             	sub    $0x4,%esp
f0110d14:	68 40 8b 13 f0       	push   $0xf0138b40
f0110d19:	68 b4 02 00 00       	push   $0x2b4
f0110d1e:	68 94 7f 13 f0       	push   $0xf0137f94
f0110d23:	e8 dd f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110d28:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110d2f:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110d36:	83 ec 0c             	sub    $0xc,%esp
f0110d39:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d3c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d3f:	50                   	push   %eax
f0110d40:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110d43:	50                   	push   %eax
f0110d44:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110d47:	50                   	push   %eax
f0110d48:	68 60 07 86 f0       	push   $0xf0860760
f0110d4d:	e8 ec 08 00 00       	call   f011163e <check_list_data>
f0110d52:	83 c4 20             	add    $0x20,%esp
f0110d55:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110d58:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d5c:	74 17                	je     f0110d75 <test_insert_sorted_with_merge_freeList+0x31b>
f0110d5e:	83 ec 04             	sub    $0x4,%esp
f0110d61:	68 ac 8b 13 f0       	push   $0xf0138bac
f0110d66:	68 ba 02 00 00       	push   $0x2ba
f0110d6b:	68 94 7f 13 f0       	push   $0xf0137f94
f0110d70:	e8 90 f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110d75:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d78:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110d7b:	74 17                	je     f0110d94 <test_insert_sorted_with_merge_freeList+0x33a>
f0110d7d:	83 ec 04             	sub    $0x4,%esp
f0110d80:	68 00 8c 13 f0       	push   $0xf0138c00
f0110d85:	68 bb 02 00 00       	push   $0x2bb
f0110d8a:	68 94 7f 13 f0       	push   $0xf0137f94
f0110d8f:	e8 71 f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110d94:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110d9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d9e:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110da5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110da6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110da9:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110db0:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110db1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110db4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110db8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110dbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dc1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110dc5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110dcb:	83 ec 0c             	sub    $0xc,%esp
f0110dce:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110dd4:	50                   	push   %eax
f0110dd5:	e8 d1 1f 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f0110dda:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110ddd:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110de2:	85 c0                	test   %eax,%eax
f0110de4:	75 14                	jne    f0110dfa <test_insert_sorted_with_merge_freeList+0x3a0>
f0110de6:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0110deb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110dee:	75 0a                	jne    f0110dfa <test_insert_sorted_with_merge_freeList+0x3a0>
f0110df0:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110df5:	83 f8 04             	cmp    $0x4,%eax
f0110df8:	74 17                	je     f0110e11 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110dfa:	83 ec 04             	sub    $0x4,%esp
f0110dfd:	68 40 8b 13 f0       	push   $0xf0138b40
f0110e02:	68 ca 02 00 00       	push   $0x2ca
f0110e07:	68 94 7f 13 f0       	push   $0xf0137f94
f0110e0c:	e8 f4 f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110e11:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110e18:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e1f:	83 ec 0c             	sub    $0xc,%esp
f0110e22:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e25:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e28:	50                   	push   %eax
f0110e29:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e2c:	50                   	push   %eax
f0110e2d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e30:	50                   	push   %eax
f0110e31:	68 60 07 86 f0       	push   $0xf0860760
f0110e36:	e8 03 08 00 00       	call   f011163e <check_list_data>
f0110e3b:	83 c4 20             	add    $0x20,%esp
f0110e3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e41:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e45:	74 17                	je     f0110e5e <test_insert_sorted_with_merge_freeList+0x404>
f0110e47:	83 ec 04             	sub    $0x4,%esp
f0110e4a:	68 ac 8b 13 f0       	push   $0xf0138bac
f0110e4f:	68 d0 02 00 00       	push   $0x2d0
f0110e54:	68 94 7f 13 f0       	push   $0xf0137f94
f0110e59:	e8 a7 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e5e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e61:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e64:	74 17                	je     f0110e7d <test_insert_sorted_with_merge_freeList+0x423>
f0110e66:	83 ec 04             	sub    $0x4,%esp
f0110e69:	68 00 8c 13 f0       	push   $0xf0138c00
f0110e6e:	68 d1 02 00 00       	push   $0x2d1
f0110e73:	68 94 7f 13 f0       	push   $0xf0137f94
f0110e78:	e8 88 f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110e7d:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110e84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e87:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110e8e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110e8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e92:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110e99:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110e9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e9d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ea1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110ea7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110eaa:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110eae:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110eb4:	83 ec 0c             	sub    $0xc,%esp
f0110eb7:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110ebd:	50                   	push   %eax
f0110ebe:	e8 e8 1e 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f0110ec3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110ec6:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0110ecb:	85 c0                	test   %eax,%eax
f0110ecd:	75 17                	jne    f0110ee6 <test_insert_sorted_with_merge_freeList+0x48c>
f0110ecf:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0110ed4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110ed7:	42                   	inc    %edx
f0110ed8:	39 d0                	cmp    %edx,%eax
f0110eda:	75 0a                	jne    f0110ee6 <test_insert_sorted_with_merge_freeList+0x48c>
f0110edc:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0110ee1:	83 f8 04             	cmp    $0x4,%eax
f0110ee4:	74 17                	je     f0110efd <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110ee6:	83 ec 04             	sub    $0x4,%esp
f0110ee9:	68 40 8b 13 f0       	push   $0xf0138b40
f0110eee:	68 e3 02 00 00       	push   $0x2e3
f0110ef3:	68 94 7f 13 f0       	push   $0xf0137f94
f0110ef8:	e8 08 f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110efd:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110f04:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110f0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f0e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f14:	48                   	dec    %eax
f0110f15:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f1c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f20:	01 c8                	add    %ecx,%eax
f0110f22:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110f26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f29:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110f30:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f34:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110f3b:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110f3c:	83 ec 0c             	sub    $0xc,%esp
f0110f3f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f42:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f45:	50                   	push   %eax
f0110f46:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110f49:	50                   	push   %eax
f0110f4a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110f4d:	50                   	push   %eax
f0110f4e:	68 60 07 86 f0       	push   $0xf0860760
f0110f53:	e8 e6 06 00 00       	call   f011163e <check_list_data>
f0110f58:	83 c4 20             	add    $0x20,%esp
f0110f5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110f5e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f62:	74 17                	je     f0110f7b <test_insert_sorted_with_merge_freeList+0x521>
f0110f64:	83 ec 04             	sub    $0x4,%esp
f0110f67:	68 ac 8b 13 f0       	push   $0xf0138bac
f0110f6c:	68 ec 02 00 00       	push   $0x2ec
f0110f71:	68 94 7f 13 f0       	push   $0xf0137f94
f0110f76:	e8 8a f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110f7b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110f7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110f81:	74 17                	je     f0110f9a <test_insert_sorted_with_merge_freeList+0x540>
f0110f83:	83 ec 04             	sub    $0x4,%esp
f0110f86:	68 00 8c 13 f0       	push   $0xf0138c00
f0110f8b:	68 ed 02 00 00       	push   $0x2ed
f0110f90:	68 94 7f 13 f0       	push   $0xf0137f94
f0110f95:	e8 6b f2 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110f9a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110fa1:	83 ec 0c             	sub    $0xc,%esp
f0110fa4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110fa7:	50                   	push   %eax
f0110fa8:	e8 5d 07 00 00       	call   f011170a <check_avaliable_list_data>
f0110fad:	83 c4 10             	add    $0x10,%esp
f0110fb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110fb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fb6:	8d 50 01             	lea    0x1(%eax),%edx
f0110fb9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110fbc:	39 c2                	cmp    %eax,%edx
f0110fbe:	74 17                	je     f0110fd7 <test_insert_sorted_with_merge_freeList+0x57d>
f0110fc0:	83 ec 04             	sub    $0x4,%esp
f0110fc3:	68 54 8c 13 f0       	push   $0xf0138c54
f0110fc8:	68 f2 02 00 00       	push   $0x2f2
f0110fcd:	68 94 7f 13 f0       	push   $0xf0137f94
f0110fd2:	e8 2e f2 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110fd7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110fdb:	74 17                	je     f0110ff4 <test_insert_sorted_with_merge_freeList+0x59a>
f0110fdd:	83 ec 04             	sub    $0x4,%esp
f0110fe0:	68 ac 8c 13 f0       	push   $0xf0138cac
f0110fe5:	68 f3 02 00 00       	push   $0x2f3
f0110fea:	68 94 7f 13 f0       	push   $0xf0137f94
f0110fef:	e8 11 f2 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110ff4:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110ffb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ffe:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0111005:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0111006:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111009:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0111010:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111011:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111014:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111018:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f011101e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111021:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111025:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f011102b:	83 ec 0c             	sub    $0xc,%esp
f011102e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0111034:	50                   	push   %eax
f0111035:	e8 71 1d 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f011103a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011103d:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0111042:	85 c0                	test   %eax,%eax
f0111044:	75 19                	jne    f011105f <test_insert_sorted_with_merge_freeList+0x605>
f0111046:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f011104b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011104e:	83 c2 02             	add    $0x2,%edx
f0111051:	39 d0                	cmp    %edx,%eax
f0111053:	75 0a                	jne    f011105f <test_insert_sorted_with_merge_freeList+0x605>
f0111055:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f011105a:	83 f8 04             	cmp    $0x4,%eax
f011105d:	74 17                	je     f0111076 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011105f:	83 ec 04             	sub    $0x4,%esp
f0111062:	68 40 8b 13 f0       	push   $0xf0138b40
f0111067:	68 05 03 00 00       	push   $0x305
f011106c:	68 94 7f 13 f0       	push   $0xf0137f94
f0111071:	e8 8f f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0111076:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011107d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0111084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111087:	8d 50 ff             	lea    -0x1(%eax),%edx
f011108a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011108d:	48                   	dec    %eax
f011108e:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111092:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111095:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111099:	01 c8                	add    %ecx,%eax
f011109b:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011109f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110a2:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01110a9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01110aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110ad:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01110b4:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01110b5:	83 ec 0c             	sub    $0xc,%esp
f01110b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01110bb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01110be:	50                   	push   %eax
f01110bf:	8d 45 98             	lea    -0x68(%ebp),%eax
f01110c2:	50                   	push   %eax
f01110c3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01110c6:	50                   	push   %eax
f01110c7:	68 60 07 86 f0       	push   $0xf0860760
f01110cc:	e8 6d 05 00 00       	call   f011163e <check_list_data>
f01110d1:	83 c4 20             	add    $0x20,%esp
f01110d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01110d7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01110db:	74 17                	je     f01110f4 <test_insert_sorted_with_merge_freeList+0x69a>
f01110dd:	83 ec 04             	sub    $0x4,%esp
f01110e0:	68 ac 8b 13 f0       	push   $0xf0138bac
f01110e5:	68 0e 03 00 00       	push   $0x30e
f01110ea:	68 94 7f 13 f0       	push   $0xf0137f94
f01110ef:	e8 11 f1 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01110f4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01110f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01110fa:	74 17                	je     f0111113 <test_insert_sorted_with_merge_freeList+0x6b9>
f01110fc:	83 ec 04             	sub    $0x4,%esp
f01110ff:	68 00 8c 13 f0       	push   $0xf0138c00
f0111104:	68 0f 03 00 00       	push   $0x30f
f0111109:	68 94 7f 13 f0       	push   $0xf0137f94
f011110e:	e8 f2 f0 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111113:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011111a:	83 ec 0c             	sub    $0xc,%esp
f011111d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111120:	50                   	push   %eax
f0111121:	e8 e4 05 00 00       	call   f011170a <check_avaliable_list_data>
f0111126:	83 c4 10             	add    $0x10,%esp
f0111129:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011112c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011112f:	8d 50 02             	lea    0x2(%eax),%edx
f0111132:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111135:	39 c2                	cmp    %eax,%edx
f0111137:	74 17                	je     f0111150 <test_insert_sorted_with_merge_freeList+0x6f6>
f0111139:	83 ec 04             	sub    $0x4,%esp
f011113c:	68 54 8c 13 f0       	push   $0xf0138c54
f0111141:	68 14 03 00 00       	push   $0x314
f0111146:	68 94 7f 13 f0       	push   $0xf0137f94
f011114b:	e8 b5 f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111150:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111154:	74 17                	je     f011116d <test_insert_sorted_with_merge_freeList+0x713>
f0111156:	83 ec 04             	sub    $0x4,%esp
f0111159:	68 ac 8c 13 f0       	push   $0xf0138cac
f011115e:	68 15 03 00 00       	push   $0x315
f0111163:	68 94 7f 13 f0       	push   $0xf0137f94
f0111168:	e8 98 f0 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f011116d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111174:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111177:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011117e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011117f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111182:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0111189:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011118a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011118d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111191:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0111197:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011119a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011119e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f01111a4:	83 ec 0c             	sub    $0xc,%esp
f01111a7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01111ad:	50                   	push   %eax
f01111ae:	e8 f8 1b 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f01111b3:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01111b6:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f01111bb:	85 c0                	test   %eax,%eax
f01111bd:	75 19                	jne    f01111d8 <test_insert_sorted_with_merge_freeList+0x77e>
f01111bf:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f01111c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01111c7:	83 c2 03             	add    $0x3,%edx
f01111ca:	39 d0                	cmp    %edx,%eax
f01111cc:	75 0a                	jne    f01111d8 <test_insert_sorted_with_merge_freeList+0x77e>
f01111ce:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f01111d3:	83 f8 04             	cmp    $0x4,%eax
f01111d6:	74 17                	je     f01111ef <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01111d8:	83 ec 04             	sub    $0x4,%esp
f01111db:	68 40 8b 13 f0       	push   $0xf0138b40
f01111e0:	68 28 03 00 00       	push   $0x328
f01111e5:	68 94 7f 13 f0       	push   $0xf0137f94
f01111ea:	e8 16 f0 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01111ef:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01111f6:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01111fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111200:	8d 50 01             	lea    0x1(%eax),%edx
f0111203:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111206:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011120a:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f011120e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111211:	8d 50 01             	lea    0x1(%eax),%edx
f0111214:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111217:	40                   	inc    %eax
f0111218:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011121c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011121f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111223:	01 c8                	add    %ecx,%eax
f0111225:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111229:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011122c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111233:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111234:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111237:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011123e:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011123f:	83 ec 0c             	sub    $0xc,%esp
f0111242:	ff 75 f0             	pushl  -0x10(%ebp)
f0111245:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111248:	50                   	push   %eax
f0111249:	8d 45 98             	lea    -0x68(%ebp),%eax
f011124c:	50                   	push   %eax
f011124d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111250:	50                   	push   %eax
f0111251:	68 60 07 86 f0       	push   $0xf0860760
f0111256:	e8 e3 03 00 00       	call   f011163e <check_list_data>
f011125b:	83 c4 20             	add    $0x20,%esp
f011125e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111261:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111265:	74 17                	je     f011127e <test_insert_sorted_with_merge_freeList+0x824>
f0111267:	83 ec 04             	sub    $0x4,%esp
f011126a:	68 ac 8b 13 f0       	push   $0xf0138bac
f011126f:	68 32 03 00 00       	push   $0x332
f0111274:	68 94 7f 13 f0       	push   $0xf0137f94
f0111279:	e8 87 ef fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011127e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111281:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111284:	74 17                	je     f011129d <test_insert_sorted_with_merge_freeList+0x843>
f0111286:	83 ec 04             	sub    $0x4,%esp
f0111289:	68 00 8c 13 f0       	push   $0xf0138c00
f011128e:	68 33 03 00 00       	push   $0x333
f0111293:	68 94 7f 13 f0       	push   $0xf0137f94
f0111298:	e8 68 ef fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011129d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01112a4:	83 ec 0c             	sub    $0xc,%esp
f01112a7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01112aa:	50                   	push   %eax
f01112ab:	e8 5a 04 00 00       	call   f011170a <check_avaliable_list_data>
f01112b0:	83 c4 10             	add    $0x10,%esp
f01112b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01112b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01112b9:	8d 50 03             	lea    0x3(%eax),%edx
f01112bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01112bf:	39 c2                	cmp    %eax,%edx
f01112c1:	74 17                	je     f01112da <test_insert_sorted_with_merge_freeList+0x880>
f01112c3:	83 ec 04             	sub    $0x4,%esp
f01112c6:	68 54 8c 13 f0       	push   $0xf0138c54
f01112cb:	68 38 03 00 00       	push   $0x338
f01112d0:	68 94 7f 13 f0       	push   $0xf0137f94
f01112d5:	e8 2b ef fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01112da:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112de:	74 17                	je     f01112f7 <test_insert_sorted_with_merge_freeList+0x89d>
f01112e0:	83 ec 04             	sub    $0x4,%esp
f01112e3:	68 ac 8c 13 f0       	push   $0xf0138cac
f01112e8:	68 39 03 00 00       	push   $0x339
f01112ed:	68 94 7f 13 f0       	push   $0xf0137f94
f01112f2:	e8 0e ef fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f01112f7:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f01112fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111301:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0111308:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0111309:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011130c:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0111313:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111314:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111317:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011131b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0111321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111324:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111328:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f011132e:	83 ec 0c             	sub    $0xc,%esp
f0111331:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0111337:	50                   	push   %eax
f0111338:	e8 6e 1a 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f011133d:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0111340:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0111345:	85 c0                	test   %eax,%eax
f0111347:	75 19                	jne    f0111362 <test_insert_sorted_with_merge_freeList+0x908>
f0111349:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f011134e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111351:	83 c2 04             	add    $0x4,%edx
f0111354:	39 d0                	cmp    %edx,%eax
f0111356:	75 0a                	jne    f0111362 <test_insert_sorted_with_merge_freeList+0x908>
f0111358:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f011135d:	83 f8 04             	cmp    $0x4,%eax
f0111360:	74 17                	je     f0111379 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111362:	83 ec 04             	sub    $0x4,%esp
f0111365:	68 40 8b 13 f0       	push   $0xf0138b40
f011136a:	68 4c 03 00 00       	push   $0x34c
f011136f:	68 94 7f 13 f0       	push   $0xf0137f94
f0111374:	e8 8c ee fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0111379:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0111380:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0111387:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011138a:	8d 50 01             	lea    0x1(%eax),%edx
f011138d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111390:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111394:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0111398:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011139b:	8d 50 01             	lea    0x1(%eax),%edx
f011139e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113a1:	40                   	inc    %eax
f01113a2:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01113a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113a9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01113ad:	01 c8                	add    %ecx,%eax
f01113af:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01113b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113b6:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01113bd:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01113be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113c1:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01113c8:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01113c9:	83 ec 0c             	sub    $0xc,%esp
f01113cc:	ff 75 f0             	pushl  -0x10(%ebp)
f01113cf:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01113d2:	50                   	push   %eax
f01113d3:	8d 45 98             	lea    -0x68(%ebp),%eax
f01113d6:	50                   	push   %eax
f01113d7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01113da:	50                   	push   %eax
f01113db:	68 60 07 86 f0       	push   $0xf0860760
f01113e0:	e8 59 02 00 00       	call   f011163e <check_list_data>
f01113e5:	83 c4 20             	add    $0x20,%esp
f01113e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01113eb:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01113ef:	74 17                	je     f0111408 <test_insert_sorted_with_merge_freeList+0x9ae>
f01113f1:	83 ec 04             	sub    $0x4,%esp
f01113f4:	68 ac 8b 13 f0       	push   $0xf0138bac
f01113f9:	68 56 03 00 00       	push   $0x356
f01113fe:	68 94 7f 13 f0       	push   $0xf0137f94
f0111403:	e8 fd ed fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111408:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011140b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011140e:	74 17                	je     f0111427 <test_insert_sorted_with_merge_freeList+0x9cd>
f0111410:	83 ec 04             	sub    $0x4,%esp
f0111413:	68 00 8c 13 f0       	push   $0xf0138c00
f0111418:	68 57 03 00 00       	push   $0x357
f011141d:	68 94 7f 13 f0       	push   $0xf0137f94
f0111422:	e8 de ed fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111427:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011142e:	83 ec 0c             	sub    $0xc,%esp
f0111431:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111434:	50                   	push   %eax
f0111435:	e8 d0 02 00 00       	call   f011170a <check_avaliable_list_data>
f011143a:	83 c4 10             	add    $0x10,%esp
f011143d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111440:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111443:	8d 50 04             	lea    0x4(%eax),%edx
f0111446:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111449:	39 c2                	cmp    %eax,%edx
f011144b:	74 17                	je     f0111464 <test_insert_sorted_with_merge_freeList+0xa0a>
f011144d:	83 ec 04             	sub    $0x4,%esp
f0111450:	68 54 8c 13 f0       	push   $0xf0138c54
f0111455:	68 5c 03 00 00       	push   $0x35c
f011145a:	68 94 7f 13 f0       	push   $0xf0137f94
f011145f:	e8 a1 ed fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111464:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111468:	74 17                	je     f0111481 <test_insert_sorted_with_merge_freeList+0xa27>
f011146a:	83 ec 04             	sub    $0x4,%esp
f011146d:	68 ac 8c 13 f0       	push   $0xf0138cac
f0111472:	68 5d 03 00 00       	push   $0x35d
f0111477:	68 94 7f 13 f0       	push   $0xf0137f94
f011147c:	e8 84 ed fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0111481:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0111488:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011148b:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0111492:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0111493:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111496:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f011149d:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011149e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114a1:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01114a5:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f01114ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114ae:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01114b2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f01114b8:	83 ec 0c             	sub    $0xc,%esp
f01114bb:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01114c1:	50                   	push   %eax
f01114c2:	e8 e4 18 02 00       	call   f0132dab <insert_sorted_with_merge_freeList>
f01114c7:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01114ca:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f01114cf:	85 c0                	test   %eax,%eax
f01114d1:	75 19                	jne    f01114ec <test_insert_sorted_with_merge_freeList+0xa92>
f01114d3:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f01114d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01114db:	83 c2 06             	add    $0x6,%edx
f01114de:	39 d0                	cmp    %edx,%eax
f01114e0:	75 0a                	jne    f01114ec <test_insert_sorted_with_merge_freeList+0xa92>
f01114e2:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f01114e7:	83 f8 03             	cmp    $0x3,%eax
f01114ea:	74 17                	je     f0111503 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01114ec:	83 ec 04             	sub    $0x4,%esp
f01114ef:	68 40 8b 13 f0       	push   $0xf0138b40
f01114f4:	68 70 03 00 00       	push   $0x370
f01114f9:	68 94 7f 13 f0       	push   $0xf0137f94
f01114fe:	e8 02 ed fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0111503:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f011150a:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0111511:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111514:	48                   	dec    %eax
f0111515:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011151c:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f011151d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111520:	8d 50 ff             	lea    -0x1(%eax),%edx
f0111523:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111526:	48                   	dec    %eax
f0111527:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011152b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011152e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111532:	01 c1                	add    %eax,%ecx
f0111534:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111537:	40                   	inc    %eax
f0111538:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011153c:	01 c8                	add    %ecx,%eax
f011153e:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111542:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111545:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011154c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011154d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111550:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111557:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0111558:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011155b:	40                   	inc    %eax
f011155c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111563:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111564:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111567:	40                   	inc    %eax
f0111568:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011156f:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111570:	83 ec 0c             	sub    $0xc,%esp
f0111573:	ff 75 f0             	pushl  -0x10(%ebp)
f0111576:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111579:	50                   	push   %eax
f011157a:	8d 45 98             	lea    -0x68(%ebp),%eax
f011157d:	50                   	push   %eax
f011157e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111581:	50                   	push   %eax
f0111582:	68 60 07 86 f0       	push   $0xf0860760
f0111587:	e8 b2 00 00 00       	call   f011163e <check_list_data>
f011158c:	83 c4 20             	add    $0x20,%esp
f011158f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111592:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111596:	74 17                	je     f01115af <test_insert_sorted_with_merge_freeList+0xb55>
f0111598:	83 ec 04             	sub    $0x4,%esp
f011159b:	68 ac 8b 13 f0       	push   $0xf0138bac
f01115a0:	68 7c 03 00 00       	push   $0x37c
f01115a5:	68 94 7f 13 f0       	push   $0xf0137f94
f01115aa:	e8 56 ec fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01115af:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01115b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01115b5:	74 17                	je     f01115ce <test_insert_sorted_with_merge_freeList+0xb74>
f01115b7:	83 ec 04             	sub    $0x4,%esp
f01115ba:	68 00 8c 13 f0       	push   $0xf0138c00
f01115bf:	68 7d 03 00 00       	push   $0x37d
f01115c4:	68 94 7f 13 f0       	push   $0xf0137f94
f01115c9:	e8 37 ec fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01115ce:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01115d5:	83 ec 0c             	sub    $0xc,%esp
f01115d8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01115db:	50                   	push   %eax
f01115dc:	e8 29 01 00 00       	call   f011170a <check_avaliable_list_data>
f01115e1:	83 c4 10             	add    $0x10,%esp
f01115e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01115e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01115ea:	8d 50 06             	lea    0x6(%eax),%edx
f01115ed:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01115f0:	39 c2                	cmp    %eax,%edx
f01115f2:	74 17                	je     f011160b <test_insert_sorted_with_merge_freeList+0xbb1>
f01115f4:	83 ec 04             	sub    $0x4,%esp
f01115f7:	68 54 8c 13 f0       	push   $0xf0138c54
f01115fc:	68 82 03 00 00       	push   $0x382
f0111601:	68 94 7f 13 f0       	push   $0xf0137f94
f0111606:	e8 fa eb fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011160b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011160f:	74 17                	je     f0111628 <test_insert_sorted_with_merge_freeList+0xbce>
f0111611:	83 ec 04             	sub    $0x4,%esp
f0111614:	68 ac 8c 13 f0       	push   $0xf0138cac
f0111619:	68 83 03 00 00       	push   $0x383
f011161e:	68 94 7f 13 f0       	push   $0xf0137f94
f0111623:	e8 dd eb fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0111628:	83 ec 0c             	sub    $0xc,%esp
f011162b:	68 08 8d 13 f0       	push   $0xf0138d08
f0111630:	e8 d9 f6 fe ff       	call   f0100d0e <cprintf>
f0111635:	83 c4 10             	add    $0x10,%esp

}
f0111638:	90                   	nop
f0111639:	8b 7d fc             	mov    -0x4(%ebp),%edi
f011163c:	c9                   	leave  
f011163d:	c3                   	ret    

f011163e <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f011163e:	55                   	push   %ebp
f011163f:	89 e5                	mov    %esp,%ebp
f0111641:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111644:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011164b:	8b 45 14             	mov    0x14(%ebp),%eax
f011164e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0111654:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f011165b:	8b 45 08             	mov    0x8(%ebp),%eax
f011165e:	8b 00                	mov    (%eax),%eax
f0111660:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111663:	eb 6e                	jmp    f01116d3 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0111665:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0111668:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011166b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111672:	8b 45 10             	mov    0x10(%ebp),%eax
f0111675:	01 d0                	add    %edx,%eax
f0111677:	8b 00                	mov    (%eax),%eax
f0111679:	85 c0                	test   %eax,%eax
f011167b:	74 e8                	je     f0111665 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f011167d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111680:	8b 50 08             	mov    0x8(%eax),%edx
f0111683:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111686:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011168d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111690:	01 c8                	add    %ecx,%eax
f0111692:	8b 00                	mov    (%eax),%eax
f0111694:	39 c2                	cmp    %eax,%edx
f0111696:	75 1b                	jne    f01116b3 <check_list_data+0x75>
f0111698:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011169b:	8b 50 0c             	mov    0xc(%eax),%edx
f011169e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01116a1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01116a8:	8b 45 10             	mov    0x10(%ebp),%eax
f01116ab:	01 c8                	add    %ecx,%eax
f01116ad:	8b 00                	mov    (%eax),%eax
f01116af:	39 c2                	cmp    %eax,%edx
f01116b1:	74 07                	je     f01116ba <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f01116b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01116b8:	eb 4e                	jmp    f0111708 <check_list_data+0xca>
		}
		(*size)++;
f01116ba:	8b 45 14             	mov    0x14(%ebp),%eax
f01116bd:	8b 00                	mov    (%eax),%eax
f01116bf:	8d 50 01             	lea    0x1(%eax),%edx
f01116c2:	8b 45 14             	mov    0x14(%ebp),%eax
f01116c5:	89 10                	mov    %edx,(%eax)
		i++;
f01116c7:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01116ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01116cd:	8b 40 08             	mov    0x8(%eax),%eax
f01116d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01116d3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01116d7:	74 07                	je     f01116e0 <check_list_data+0xa2>
f01116d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01116dc:	8b 00                	mov    (%eax),%eax
f01116de:	eb 05                	jmp    f01116e5 <check_list_data+0xa7>
f01116e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01116e5:	8b 55 08             	mov    0x8(%ebp),%edx
f01116e8:	89 42 08             	mov    %eax,0x8(%edx)
f01116eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01116ee:	8b 40 08             	mov    0x8(%eax),%eax
f01116f1:	85 c0                	test   %eax,%eax
f01116f3:	0f 85 6f ff ff ff    	jne    f0111668 <check_list_data+0x2a>
f01116f9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01116fd:	0f 85 65 ff ff ff    	jne    f0111668 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0111703:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111708:	c9                   	leave  
f0111709:	c3                   	ret    

f011170a <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f011170a:	55                   	push   %ebp
f011170b:	89 e5                	mov    %esp,%ebp
f011170d:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111710:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0111717:	8b 45 08             	mov    0x8(%ebp),%eax
f011171a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111720:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f0111725:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111728:	eb 30                	jmp    f011175a <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f011172a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011172d:	8b 40 08             	mov    0x8(%eax),%eax
f0111730:	85 c0                	test   %eax,%eax
f0111732:	75 0a                	jne    f011173e <check_avaliable_list_data+0x34>
f0111734:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111737:	8b 40 0c             	mov    0xc(%eax),%eax
f011173a:	85 c0                	test   %eax,%eax
f011173c:	74 07                	je     f0111745 <check_avaliable_list_data+0x3b>
		{
			return 0;
f011173e:	b8 00 00 00 00       	mov    $0x0,%eax
f0111743:	eb 40                	jmp    f0111785 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0111745:	8b 45 08             	mov    0x8(%ebp),%eax
f0111748:	8b 00                	mov    (%eax),%eax
f011174a:	8d 50 01             	lea    0x1(%eax),%edx
f011174d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111750:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111752:	a1 9c 07 86 f0       	mov    0xf086079c,%eax
f0111757:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011175a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011175e:	74 07                	je     f0111767 <check_avaliable_list_data+0x5d>
f0111760:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111763:	8b 00                	mov    (%eax),%eax
f0111765:	eb 05                	jmp    f011176c <check_avaliable_list_data+0x62>
f0111767:	b8 00 00 00 00       	mov    $0x0,%eax
f011176c:	a3 9c 07 86 f0       	mov    %eax,0xf086079c
f0111771:	a1 9c 07 86 f0       	mov    0xf086079c,%eax
f0111776:	85 c0                	test   %eax,%eax
f0111778:	75 b0                	jne    f011172a <check_avaliable_list_data+0x20>
f011177a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011177e:	75 aa                	jne    f011172a <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0111780:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111785:	c9                   	leave  
f0111786:	c3                   	ret    

f0111787 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0111787:	55                   	push   %ebp
f0111788:	89 e5                	mov    %esp,%ebp
f011178a:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f011178d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0111794:	8b 45 08             	mov    0x8(%ebp),%eax
f0111797:	8b 00                	mov    (%eax),%eax
f0111799:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011179c:	eb 27                	jmp    f01117c5 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f011179e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117a1:	8b 50 0c             	mov    0xc(%eax),%edx
f01117a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117a7:	8b 40 08             	mov    0x8(%eax),%eax
f01117aa:	83 ec 04             	sub    $0x4,%esp
f01117ad:	52                   	push   %edx
f01117ae:	50                   	push   %eax
f01117af:	68 58 80 13 f0       	push   $0xf0138058
f01117b4:	e8 55 f5 fe ff       	call   f0100d0e <cprintf>
f01117b9:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01117bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01117bf:	8b 40 08             	mov    0x8(%eax),%eax
f01117c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01117c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01117c9:	74 07                	je     f01117d2 <show_list_content+0x4b>
f01117cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117ce:	8b 00                	mov    (%eax),%eax
f01117d0:	eb 05                	jmp    f01117d7 <show_list_content+0x50>
f01117d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01117d7:	8b 55 08             	mov    0x8(%ebp),%edx
f01117da:	89 42 08             	mov    %eax,0x8(%edx)
f01117dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01117e0:	8b 40 08             	mov    0x8(%eax),%eax
f01117e3:	85 c0                	test   %eax,%eax
f01117e5:	75 b7                	jne    f011179e <show_list_content+0x17>
f01117e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01117eb:	75 b1                	jne    f011179e <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01117ed:	90                   	nop
f01117ee:	c9                   	leave  
f01117ef:	c3                   	ret    

f01117f0 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01117f0:	55                   	push   %ebp
f01117f1:	89 e5                	mov    %esp,%ebp
f01117f3:	57                   	push   %edi
f01117f4:	56                   	push   %esi
f01117f5:	53                   	push   %ebx
f01117f6:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01117fc:	83 ec 0c             	sub    $0xc,%esp
f01117ff:	68 5c 8d 13 f0       	push   $0xf0138d5c
f0111804:	e8 05 f5 fe ff       	call   f0100d0e <cprintf>
f0111809:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f011180c:	83 ec 0c             	sub    $0xc,%esp
f011180f:	68 80 8d 13 f0       	push   $0xf0138d80
f0111814:	e8 f5 f4 fe ff       	call   f0100d0e <cprintf>
f0111819:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f011181c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111823:	83 ec 0c             	sub    $0xc,%esp
f0111826:	68 9c 8d 13 f0       	push   $0xf0138d9c
f011182b:	e8 de f4 fe ff       	call   f0100d0e <cprintf>
f0111830:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111833:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111836:	bb 56 8e 13 f0       	mov    $0xf0138e56,%ebx
f011183b:	ba 03 00 00 00       	mov    $0x3,%edx
f0111840:	89 c7                	mov    %eax,%edi
f0111842:	89 de                	mov    %ebx,%esi
f0111844:	89 d1                	mov    %edx,%ecx
f0111846:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111848:	8d 55 8c             	lea    -0x74(%ebp),%edx
f011184b:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111850:	b8 00 00 00 00       	mov    $0x0,%eax
f0111855:	89 d7                	mov    %edx,%edi
f0111857:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111859:	83 ec 0c             	sub    $0xc,%esp
f011185c:	8d 45 80             	lea    -0x80(%ebp),%eax
f011185f:	50                   	push   %eax
f0111860:	e8 0b f5 fe ff       	call   f0100d70 <execute_command>
f0111865:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111868:	83 ec 0c             	sub    $0xc,%esp
f011186b:	68 ca 8d 13 f0       	push   $0xf0138dca
f0111870:	e8 99 f4 fe ff       	call   f0100d0e <cprintf>
f0111875:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111878:	83 ec 0c             	sub    $0xc,%esp
f011187b:	68 e0 8d 13 f0       	push   $0xf0138de0
f0111880:	e8 89 f4 fe ff       	call   f0100d0e <cprintf>
f0111885:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111888:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f011188f:	65 00 00 
f0111892:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111898:	b9 18 00 00 00       	mov    $0x18,%ecx
f011189d:	b8 00 00 00 00       	mov    $0x0,%eax
f01118a2:	89 d7                	mov    %edx,%edi
f01118a4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01118a6:	83 ec 0c             	sub    $0xc,%esp
f01118a9:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01118af:	50                   	push   %eax
f01118b0:	e8 bb f4 fe ff       	call   f0100d70 <execute_command>
f01118b5:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01118b8:	83 ec 0c             	sub    $0xc,%esp
f01118bb:	68 ca 8d 13 f0       	push   $0xf0138dca
f01118c0:	e8 49 f4 fe ff       	call   f0100d0e <cprintf>
f01118c5:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01118c8:	83 ec 0c             	sub    $0xc,%esp
f01118cb:	68 08 8e 13 f0       	push   $0xf0138e08
f01118d0:	e8 39 f4 fe ff       	call   f0100d0e <cprintf>
f01118d5:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f01118d8:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f01118df:	75 00 00 
f01118e2:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01118e8:	b9 18 00 00 00       	mov    $0x18,%ecx
f01118ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01118f2:	89 d7                	mov    %edx,%edi
f01118f4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f01118f6:	83 ec 0c             	sub    $0xc,%esp
f01118f9:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01118ff:	50                   	push   %eax
f0111900:	e8 6b f4 fe ff       	call   f0100d70 <execute_command>
f0111905:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111908:	83 ec 0c             	sub    $0xc,%esp
f011190b:	68 ca 8d 13 f0       	push   $0xf0138dca
f0111910:	e8 f9 f3 fe ff       	call   f0100d0e <cprintf>
f0111915:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111918:	83 ec 0c             	sub    $0xc,%esp
f011191b:	68 30 8e 13 f0       	push   $0xf0138e30
f0111920:	e8 e9 f3 fe ff       	call   f0100d0e <cprintf>
f0111925:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111928:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f011192f:	6d 6d 00 
f0111932:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111938:	b9 18 00 00 00       	mov    $0x18,%ecx
f011193d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111942:	89 d7                	mov    %edx,%edi
f0111944:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111946:	83 ec 0c             	sub    $0xc,%esp
f0111949:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f011194f:	50                   	push   %eax
f0111950:	e8 1b f4 fe ff       	call   f0100d70 <execute_command>
f0111955:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111958:	83 ec 0c             	sub    $0xc,%esp
f011195b:	68 ca 8d 13 f0       	push   $0xf0138dca
f0111960:	e8 a9 f3 fe ff       	call   f0100d0e <cprintf>
f0111965:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111968:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011196d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111970:	5b                   	pop    %ebx
f0111971:	5e                   	pop    %esi
f0111972:	5f                   	pop    %edi
f0111973:	5d                   	pop    %ebp
f0111974:	c3                   	ret    

f0111975 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111975:	55                   	push   %ebp
f0111976:	89 e5                	mov    %esp,%ebp
f0111978:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f011197b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111982:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111989:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111990:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111995:	ff 75 ec             	pushl  -0x14(%ebp)
f0111998:	ff 75 f0             	pushl  -0x10(%ebp)
f011199b:	ff 75 f4             	pushl  -0xc(%ebp)
f011199e:	50                   	push   %eax
f011199f:	e8 7f 63 ff ff       	call   f0107d23 <pt_set_page_permissions>
f01119a4:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119a7:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01119ac:	ff 75 ec             	pushl  -0x14(%ebp)
f01119af:	ff 75 f0             	pushl  -0x10(%ebp)
f01119b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01119b5:	50                   	push   %eax
f01119b6:	e8 9e 4e 00 00       	call   f0116859 <CP>
f01119bb:	83 c4 10             	add    $0x10,%esp
f01119be:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01119c1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01119c5:	74 14                	je     f01119db <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01119c7:	83 ec 04             	sub    $0x4,%esp
f01119ca:	68 bc 8e 13 f0       	push   $0xf0138ebc
f01119cf:	6a 5a                	push   $0x5a
f01119d1:	68 de 8e 13 f0       	push   $0xf0138ede
f01119d6:	e8 2a e8 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01119db:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01119e2:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01119e9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119f0:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01119f5:	ff 75 ec             	pushl  -0x14(%ebp)
f01119f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01119fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01119fe:	50                   	push   %eax
f01119ff:	e8 1f 63 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0111a04:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a07:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111a0c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a0f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a12:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a15:	50                   	push   %eax
f0111a16:	e8 3e 4e 00 00       	call   f0116859 <CP>
f0111a1b:	83 c4 10             	add    $0x10,%esp
f0111a1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a21:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a25:	74 14                	je     f0111a3b <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111a27:	83 ec 04             	sub    $0x4,%esp
f0111a2a:	68 fc 8e 13 f0       	push   $0xf0138efc
f0111a2f:	6a 66                	push   $0x66
f0111a31:	68 de 8e 13 f0       	push   $0xf0138ede
f0111a36:	e8 ca e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111a3b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111a42:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111a49:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a50:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111a55:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a58:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a5b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a5e:	50                   	push   %eax
f0111a5f:	e8 bf 62 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0111a64:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a67:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111a6c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a6f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a72:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a75:	50                   	push   %eax
f0111a76:	e8 de 4d 00 00       	call   f0116859 <CP>
f0111a7b:	83 c4 10             	add    $0x10,%esp
f0111a7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a81:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a85:	74 14                	je     f0111a9b <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111a87:	83 ec 04             	sub    $0x4,%esp
f0111a8a:	68 20 8f 13 f0       	push   $0xf0138f20
f0111a8f:	6a 71                	push   $0x71
f0111a91:	68 de 8e 13 f0       	push   $0xf0138ede
f0111a96:	e8 6a e7 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111a9b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111aa2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111aa9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ab0:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111ab5:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0111abb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111abe:	50                   	push   %eax
f0111abf:	e8 5f 62 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0111ac4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ac7:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111acc:	ff 75 ec             	pushl  -0x14(%ebp)
f0111acf:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ad2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ad5:	50                   	push   %eax
f0111ad6:	e8 7e 4d 00 00       	call   f0116859 <CP>
f0111adb:	83 c4 10             	add    $0x10,%esp
f0111ade:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111ae1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ae5:	74 14                	je     f0111afb <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111ae7:	83 ec 04             	sub    $0x4,%esp
f0111aea:	68 44 8f 13 f0       	push   $0xf0138f44
f0111aef:	6a 7d                	push   $0x7d
f0111af1:	68 de 8e 13 f0       	push   $0xf0138ede
f0111af6:	e8 0a e7 fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111afb:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111b02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111b09:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b10:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111b15:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b18:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b1b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b1e:	50                   	push   %eax
f0111b1f:	e8 ff 61 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0111b24:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b27:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111b2c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b2f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b32:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b35:	50                   	push   %eax
f0111b36:	e8 1e 4d 00 00       	call   f0116859 <CP>
f0111b3b:	83 c4 10             	add    $0x10,%esp
f0111b3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b41:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111b45:	74 17                	je     f0111b5e <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111b47:	83 ec 04             	sub    $0x4,%esp
f0111b4a:	68 68 8f 13 f0       	push   $0xf0138f68
f0111b4f:	68 89 00 00 00       	push   $0x89
f0111b54:	68 de 8e 13 f0       	push   $0xf0138ede
f0111b59:	e8 a7 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111b5e:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111b65:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111b6c:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b73:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111b78:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b7b:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b7e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b81:	50                   	push   %eax
f0111b82:	e8 9c 61 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0111b87:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b8a:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111b8f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b92:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b95:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b98:	50                   	push   %eax
f0111b99:	e8 bb 4c 00 00       	call   f0116859 <CP>
f0111b9e:	83 c4 10             	add    $0x10,%esp
f0111ba1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111ba4:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ba8:	74 17                	je     f0111bc1 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111baa:	83 ec 04             	sub    $0x4,%esp
f0111bad:	68 8c 8f 13 f0       	push   $0xf0138f8c
f0111bb2:	68 95 00 00 00       	push   $0x95
f0111bb7:	68 de 8e 13 f0       	push   $0xf0138ede
f0111bbc:	e8 44 e6 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111bc1:	83 ec 0c             	sub    $0xc,%esp
f0111bc4:	68 b8 8f 13 f0       	push   $0xf0138fb8
f0111bc9:	e8 40 f1 fe ff       	call   f0100d0e <cprintf>
f0111bce:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111bd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111bd6:	c9                   	leave  
f0111bd7:	c3                   	ret    

f0111bd8 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111bd8:	55                   	push   %ebp
f0111bd9:	89 e5                	mov    %esp,%ebp
f0111bdb:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111bde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111be5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111bec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111bf3:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111bf8:	ff 75 ec             	pushl  -0x14(%ebp)
f0111bfb:	ff 75 f0             	pushl  -0x10(%ebp)
f0111bfe:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c01:	50                   	push   %eax
f0111c02:	e8 1c 61 ff ff       	call   f0107d23 <pt_set_page_permissions>
f0111c07:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111c0a:	83 ec 04             	sub    $0x4,%esp
f0111c0d:	68 08 90 13 f0       	push   $0xf0139008
f0111c12:	68 a2 00 00 00       	push   $0xa2
f0111c17:	68 de 8e 13 f0       	push   $0xf0138ede
f0111c1c:	e8 e4 e5 fe ff       	call   f0100205 <_panic>

f0111c21 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111c21:	55                   	push   %ebp
f0111c22:	89 e5                	mov    %esp,%ebp
f0111c24:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111c27:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c2e:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111c33:	83 ec 08             	sub    $0x8,%esp
f0111c36:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c39:	50                   	push   %eax
f0111c3a:	e8 99 61 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0111c3f:	83 c4 10             	add    $0x10,%esp
f0111c42:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111c45:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111c49:	74 17                	je     f0111c62 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111c4b:	83 ec 04             	sub    $0x4,%esp
f0111c4e:	68 a4 90 13 f0       	push   $0xf01390a4
f0111c53:	68 b0 00 00 00       	push   $0xb0
f0111c58:	68 de 8e 13 f0       	push   $0xf0138ede
f0111c5d:	e8 a3 e5 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111c62:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c69:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111c6e:	83 ec 08             	sub    $0x8,%esp
f0111c71:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c74:	50                   	push   %eax
f0111c75:	e8 5e 61 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0111c7a:	83 c4 10             	add    $0x10,%esp
f0111c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111c80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111c84:	74 17                	je     f0111c9d <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111c86:	83 ec 04             	sub    $0x4,%esp
f0111c89:	68 c8 90 13 f0       	push   $0xf01390c8
f0111c8e:	68 b8 00 00 00       	push   $0xb8
f0111c93:	68 de 8e 13 f0       	push   $0xf0138ede
f0111c98:	e8 68 e5 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111c9d:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111ca4:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111ca9:	83 ec 08             	sub    $0x8,%esp
f0111cac:	ff 75 f4             	pushl  -0xc(%ebp)
f0111caf:	50                   	push   %eax
f0111cb0:	e8 23 61 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0111cb5:	83 c4 10             	add    $0x10,%esp
f0111cb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111cbb:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111cbf:	74 17                	je     f0111cd8 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111cc1:	83 ec 04             	sub    $0x4,%esp
f0111cc4:	68 ec 90 13 f0       	push   $0xf01390ec
f0111cc9:	68 c0 00 00 00       	push   $0xc0
f0111cce:	68 de 8e 13 f0       	push   $0xf0138ede
f0111cd3:	e8 2d e5 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111cd8:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111cdf:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111ce4:	83 ec 08             	sub    $0x8,%esp
f0111ce7:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cea:	50                   	push   %eax
f0111ceb:	e8 e8 60 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0111cf0:	83 c4 10             	add    $0x10,%esp
f0111cf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111cf6:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111cfa:	74 17                	je     f0111d13 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111cfc:	83 ec 04             	sub    $0x4,%esp
f0111cff:	68 10 91 13 f0       	push   $0xf0139110
f0111d04:	68 c7 00 00 00       	push   $0xc7
f0111d09:	68 de 8e 13 f0       	push   $0xf0138ede
f0111d0e:	e8 f2 e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111d13:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d1a:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111d1f:	83 ec 08             	sub    $0x8,%esp
f0111d22:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d25:	50                   	push   %eax
f0111d26:	e8 ad 60 ff ff       	call   f0107dd8 <pt_get_page_permissions>
f0111d2b:	83 c4 10             	add    $0x10,%esp
f0111d2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111d31:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111d35:	74 17                	je     f0111d4e <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111d37:	83 ec 04             	sub    $0x4,%esp
f0111d3a:	68 34 91 13 f0       	push   $0xf0139134
f0111d3f:	68 ce 00 00 00       	push   $0xce
f0111d44:	68 de 8e 13 f0       	push   $0xf0138ede
f0111d49:	e8 b7 e4 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111d4e:	83 ec 0c             	sub    $0xc,%esp
f0111d51:	68 58 91 13 f0       	push   $0xf0139158
f0111d56:	e8 b3 ef fe ff       	call   f0100d0e <cprintf>
f0111d5b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111d5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111d63:	c9                   	leave  
f0111d64:	c3                   	ret    

f0111d65 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111d65:	55                   	push   %ebp
f0111d66:	89 e5                	mov    %esp,%ebp
f0111d68:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111d6b:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111d72:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111d77:	83 ec 08             	sub    $0x8,%esp
f0111d7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d7d:	50                   	push   %eax
f0111d7e:	e8 aa 60 ff ff       	call   f0107e2d <pt_clear_page_table_entry>
f0111d83:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111d86:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111d8b:	83 ec 08             	sub    $0x8,%esp
f0111d8e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d91:	50                   	push   %eax
f0111d92:	e8 1e 4a 00 00       	call   f01167b5 <CE>
f0111d97:	83 c4 10             	add    $0x10,%esp
f0111d9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111d9d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111da1:	74 17                	je     f0111dba <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111da3:	83 ec 04             	sub    $0x4,%esp
f0111da6:	68 a0 91 13 f0       	push   $0xf01391a0
f0111dab:	68 de 00 00 00       	push   $0xde
f0111db0:	68 de 8e 13 f0       	push   $0xf0138ede
f0111db5:	e8 4b e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111dba:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111dc1:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111dc6:	83 ec 08             	sub    $0x8,%esp
f0111dc9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111dcc:	50                   	push   %eax
f0111dcd:	e8 5b 60 ff ff       	call   f0107e2d <pt_clear_page_table_entry>
f0111dd2:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111dd5:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111dda:	83 ec 08             	sub    $0x8,%esp
f0111ddd:	ff 75 f4             	pushl  -0xc(%ebp)
f0111de0:	50                   	push   %eax
f0111de1:	e8 cf 49 00 00       	call   f01167b5 <CE>
f0111de6:	83 c4 10             	add    $0x10,%esp
f0111de9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111dec:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111df0:	74 17                	je     f0111e09 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111df2:	83 ec 04             	sub    $0x4,%esp
f0111df5:	68 cc 91 13 f0       	push   $0xf01391cc
f0111dfa:	68 e6 00 00 00       	push   $0xe6
f0111dff:	68 de 8e 13 f0       	push   $0xf0138ede
f0111e04:	e8 fc e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111e09:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e10:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111e15:	83 ec 08             	sub    $0x8,%esp
f0111e18:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e1b:	50                   	push   %eax
f0111e1c:	e8 0c 60 ff ff       	call   f0107e2d <pt_clear_page_table_entry>
f0111e21:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e24:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111e29:	83 ec 08             	sub    $0x8,%esp
f0111e2c:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e2f:	50                   	push   %eax
f0111e30:	e8 80 49 00 00       	call   f01167b5 <CE>
f0111e35:	83 c4 10             	add    $0x10,%esp
f0111e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e3b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e3f:	74 17                	je     f0111e58 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111e41:	83 ec 04             	sub    $0x4,%esp
f0111e44:	68 f8 91 13 f0       	push   $0xf01391f8
f0111e49:	68 ee 00 00 00       	push   $0xee
f0111e4e:	68 de 8e 13 f0       	push   $0xf0138ede
f0111e53:	e8 ad e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111e58:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e5f:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111e64:	83 ec 08             	sub    $0x8,%esp
f0111e67:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e6a:	50                   	push   %eax
f0111e6b:	e8 bd 5f ff ff       	call   f0107e2d <pt_clear_page_table_entry>
f0111e70:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e73:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111e78:	83 ec 08             	sub    $0x8,%esp
f0111e7b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e7e:	50                   	push   %eax
f0111e7f:	e8 31 49 00 00       	call   f01167b5 <CE>
f0111e84:	83 c4 10             	add    $0x10,%esp
f0111e87:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e8a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e8e:	74 17                	je     f0111ea7 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111e90:	83 ec 04             	sub    $0x4,%esp
f0111e93:	68 24 92 13 f0       	push   $0xf0139224
f0111e98:	68 f6 00 00 00       	push   $0xf6
f0111e9d:	68 de 8e 13 f0       	push   $0xf0138ede
f0111ea2:	e8 5e e3 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111ea7:	83 ec 0c             	sub    $0xc,%esp
f0111eaa:	68 50 92 13 f0       	push   $0xf0139250
f0111eaf:	e8 5a ee fe ff       	call   f0100d0e <cprintf>
f0111eb4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111eb7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ebc:	c9                   	leave  
f0111ebd:	c3                   	ret    

f0111ebe <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111ebe:	55                   	push   %ebp
f0111ebf:	89 e5                	mov    %esp,%ebp
f0111ec1:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111ec4:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111ecb:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111ed0:	83 ec 08             	sub    $0x8,%esp
f0111ed3:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ed6:	50                   	push   %eax
f0111ed7:	e8 51 5f ff ff       	call   f0107e2d <pt_clear_page_table_entry>
f0111edc:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111edf:	83 ec 04             	sub    $0x4,%esp
f0111ee2:	68 9c 92 13 f0       	push   $0xf013929c
f0111ee7:	68 01 01 00 00       	push   $0x101
f0111eec:	68 de 8e 13 f0       	push   $0xf0138ede
f0111ef1:	e8 0f e3 fe ff       	call   f0100205 <_panic>

f0111ef6 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111ef6:	55                   	push   %ebp
f0111ef7:	89 e5                	mov    %esp,%ebp
f0111ef9:	57                   	push   %edi
f0111efa:	56                   	push   %esi
f0111efb:	53                   	push   %ebx
f0111efc:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111f02:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111f09:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111f10:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111f15:	83 ec 0c             	sub    $0xc,%esp
f0111f18:	50                   	push   %eax
f0111f19:	e8 79 49 00 00       	call   f0116897 <ClearUserSpace>
f0111f1e:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111f21:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111f28:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111f2d:	83 ec 08             	sub    $0x8,%esp
f0111f30:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f33:	50                   	push   %eax
f0111f34:	e8 61 5f ff ff       	call   f0107e9a <virtual_to_physical>
f0111f39:	83 c4 10             	add    $0x10,%esp
f0111f3c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111f3f:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111f43:	74 17                	je     f0111f5c <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111f45:	83 ec 04             	sub    $0x4,%esp
f0111f48:	68 34 93 13 f0       	push   $0xf0139334
f0111f4d:	68 16 01 00 00       	push   $0x116
f0111f52:	68 de 8e 13 f0       	push   $0xf0138ede
f0111f57:	e8 a9 e2 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111f5c:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111f63:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111f68:	83 ec 08             	sub    $0x8,%esp
f0111f6b:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f6e:	50                   	push   %eax
f0111f6f:	e8 26 5f ff ff       	call   f0107e9a <virtual_to_physical>
f0111f74:	83 c4 10             	add    $0x10,%esp
f0111f77:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111f7a:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111f7f:	83 ec 08             	sub    $0x8,%esp
f0111f82:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f85:	50                   	push   %eax
f0111f86:	e8 0b 48 00 00       	call   f0116796 <CA>
f0111f8b:	83 c4 10             	add    $0x10,%esp
f0111f8e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111f91:	74 17                	je     f0111faa <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111f93:	83 ec 04             	sub    $0x4,%esp
f0111f96:	68 6c 93 13 f0       	push   $0xf013936c
f0111f9b:	68 1f 01 00 00       	push   $0x11f
f0111fa0:	68 de 8e 13 f0       	push   $0xf0138ede
f0111fa5:	e8 5b e2 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111faa:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111fb0:	bb 38 95 13 f0       	mov    $0xf0139538,%ebx
f0111fb5:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111fba:	89 c7                	mov    %eax,%edi
f0111fbc:	89 de                	mov    %ebx,%esi
f0111fbe:	89 d1                	mov    %edx,%ecx
f0111fc0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fc2:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111fc5:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111fca:	b0 00                	mov    $0x0,%al
f0111fcc:	89 d7                	mov    %edx,%edi
f0111fce:	f3 aa                	rep stos %al,%es:(%edi)
f0111fd0:	83 ec 0c             	sub    $0xc,%esp
f0111fd3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111fd9:	50                   	push   %eax
f0111fda:	e8 91 ed fe ff       	call   f0100d70 <execute_command>
f0111fdf:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111fe2:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111fe9:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0111fee:	83 ec 08             	sub    $0x8,%esp
f0111ff1:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ff4:	50                   	push   %eax
f0111ff5:	e8 a0 5e ff ff       	call   f0107e9a <virtual_to_physical>
f0111ffa:	83 c4 10             	add    $0x10,%esp
f0111ffd:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112000:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0112005:	83 ec 08             	sub    $0x8,%esp
f0112008:	ff 75 dc             	pushl  -0x24(%ebp)
f011200b:	50                   	push   %eax
f011200c:	e8 85 47 00 00       	call   f0116796 <CA>
f0112011:	83 c4 10             	add    $0x10,%esp
f0112014:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112017:	74 17                	je     f0112030 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0112019:	83 ec 04             	sub    $0x4,%esp
f011201c:	68 a4 93 13 f0       	push   $0xf01393a4
f0112021:	68 28 01 00 00       	push   $0x128
f0112026:	68 de 8e 13 f0       	push   $0xf0138ede
f011202b:	e8 d5 e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0112030:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0112036:	bb 9c 95 13 f0       	mov    $0xf013959c,%ebx
f011203b:	ba 0d 00 00 00       	mov    $0xd,%edx
f0112040:	89 c7                	mov    %eax,%edi
f0112042:	89 de                	mov    %ebx,%esi
f0112044:	89 d1                	mov    %edx,%ecx
f0112046:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112048:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f011204e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0112053:	b0 00                	mov    $0x0,%al
f0112055:	89 d7                	mov    %edx,%edi
f0112057:	f3 aa                	rep stos %al,%es:(%edi)
f0112059:	83 ec 0c             	sub    $0xc,%esp
f011205c:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0112062:	50                   	push   %eax
f0112063:	e8 08 ed fe ff       	call   f0100d70 <execute_command>
f0112068:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f011206b:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112072:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0112077:	83 ec 08             	sub    $0x8,%esp
f011207a:	ff 75 dc             	pushl  -0x24(%ebp)
f011207d:	50                   	push   %eax
f011207e:	e8 17 5e ff ff       	call   f0107e9a <virtual_to_physical>
f0112083:	83 c4 10             	add    $0x10,%esp
f0112086:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112089:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f011208e:	83 ec 08             	sub    $0x8,%esp
f0112091:	ff 75 dc             	pushl  -0x24(%ebp)
f0112094:	50                   	push   %eax
f0112095:	e8 fc 46 00 00       	call   f0116796 <CA>
f011209a:	83 c4 10             	add    $0x10,%esp
f011209d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01120a0:	74 17                	je     f01120b9 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01120a2:	83 ec 04             	sub    $0x4,%esp
f01120a5:	68 dc 93 13 f0       	push   $0xf01393dc
f01120aa:	68 31 01 00 00       	push   $0x131
f01120af:	68 de 8e 13 f0       	push   $0xf0138ede
f01120b4:	e8 4c e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01120b9:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01120bf:	bb 00 96 13 f0       	mov    $0xf0139600,%ebx
f01120c4:	ba 0d 00 00 00       	mov    $0xd,%edx
f01120c9:	89 c7                	mov    %eax,%edi
f01120cb:	89 de                	mov    %ebx,%esi
f01120cd:	89 d1                	mov    %edx,%ecx
f01120cf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120d1:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01120d7:	b9 57 00 00 00       	mov    $0x57,%ecx
f01120dc:	b0 00                	mov    $0x0,%al
f01120de:	89 d7                	mov    %edx,%edi
f01120e0:	f3 aa                	rep stos %al,%es:(%edi)
f01120e2:	83 ec 0c             	sub    $0xc,%esp
f01120e5:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01120eb:	50                   	push   %eax
f01120ec:	e8 7f ec fe ff       	call   f0100d70 <execute_command>
f01120f1:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f01120f4:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01120fb:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0112100:	83 ec 08             	sub    $0x8,%esp
f0112103:	ff 75 dc             	pushl  -0x24(%ebp)
f0112106:	50                   	push   %eax
f0112107:	e8 8e 5d ff ff       	call   f0107e9a <virtual_to_physical>
f011210c:	83 c4 10             	add    $0x10,%esp
f011210f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112112:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0112117:	83 ec 08             	sub    $0x8,%esp
f011211a:	ff 75 dc             	pushl  -0x24(%ebp)
f011211d:	50                   	push   %eax
f011211e:	e8 73 46 00 00       	call   f0116796 <CA>
f0112123:	83 c4 10             	add    $0x10,%esp
f0112126:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112129:	74 17                	je     f0112142 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f011212b:	83 ec 04             	sub    $0x4,%esp
f011212e:	68 14 94 13 f0       	push   $0xf0139414
f0112133:	68 3a 01 00 00       	push   $0x13a
f0112138:	68 de 8e 13 f0       	push   $0xf0138ede
f011213d:	e8 c3 e0 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0112142:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112149:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f011214e:	83 ec 08             	sub    $0x8,%esp
f0112151:	ff 75 dc             	pushl  -0x24(%ebp)
f0112154:	50                   	push   %eax
f0112155:	e8 40 5d ff ff       	call   f0107e9a <virtual_to_physical>
f011215a:	83 c4 10             	add    $0x10,%esp
f011215d:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112160:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0112165:	83 ec 08             	sub    $0x8,%esp
f0112168:	ff 75 dc             	pushl  -0x24(%ebp)
f011216b:	50                   	push   %eax
f011216c:	e8 25 46 00 00       	call   f0116796 <CA>
f0112171:	83 c4 10             	add    $0x10,%esp
f0112174:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112177:	74 17                	je     f0112190 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0112179:	83 ec 04             	sub    $0x4,%esp
f011217c:	68 4c 94 13 f0       	push   $0xf013944c
f0112181:	68 42 01 00 00       	push   $0x142
f0112186:	68 de 8e 13 f0       	push   $0xf0138ede
f011218b:	e8 75 e0 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0112190:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112197:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f011219c:	83 ec 08             	sub    $0x8,%esp
f011219f:	ff 75 dc             	pushl  -0x24(%ebp)
f01121a2:	50                   	push   %eax
f01121a3:	e8 f2 5c ff ff       	call   f0107e9a <virtual_to_physical>
f01121a8:	83 c4 10             	add    $0x10,%esp
f01121ab:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01121ae:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01121b3:	83 ec 08             	sub    $0x8,%esp
f01121b6:	ff 75 dc             	pushl  -0x24(%ebp)
f01121b9:	50                   	push   %eax
f01121ba:	e8 d7 45 00 00       	call   f0116796 <CA>
f01121bf:	83 c4 10             	add    $0x10,%esp
f01121c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01121c5:	74 17                	je     f01121de <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01121c7:	83 ec 04             	sub    $0x4,%esp
f01121ca:	68 84 94 13 f0       	push   $0xf0139484
f01121cf:	68 4a 01 00 00       	push   $0x14a
f01121d4:	68 de 8e 13 f0       	push   $0xf0138ede
f01121d9:	e8 27 e0 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01121de:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01121e4:	bb 64 96 13 f0       	mov    $0xf0139664,%ebx
f01121e9:	ba 0e 00 00 00       	mov    $0xe,%edx
f01121ee:	89 c7                	mov    %eax,%edi
f01121f0:	89 de                	mov    %ebx,%esi
f01121f2:	89 d1                	mov    %edx,%ecx
f01121f4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01121f6:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f01121fc:	b9 56 00 00 00       	mov    $0x56,%ecx
f0112201:	b0 00                	mov    $0x0,%al
f0112203:	89 d7                	mov    %edx,%edi
f0112205:	f3 aa                	rep stos %al,%es:(%edi)
f0112207:	83 ec 0c             	sub    $0xc,%esp
f011220a:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0112210:	50                   	push   %eax
f0112211:	e8 5a eb fe ff       	call   f0100d70 <execute_command>
f0112216:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0112219:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112220:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0112225:	83 ec 08             	sub    $0x8,%esp
f0112228:	ff 75 dc             	pushl  -0x24(%ebp)
f011222b:	50                   	push   %eax
f011222c:	e8 69 5c ff ff       	call   f0107e9a <virtual_to_physical>
f0112231:	83 c4 10             	add    $0x10,%esp
f0112234:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112237:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f011223c:	83 ec 08             	sub    $0x8,%esp
f011223f:	ff 75 dc             	pushl  -0x24(%ebp)
f0112242:	50                   	push   %eax
f0112243:	e8 4e 45 00 00       	call   f0116796 <CA>
f0112248:	83 c4 10             	add    $0x10,%esp
f011224b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011224e:	74 17                	je     f0112267 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0112250:	83 ec 04             	sub    $0x4,%esp
f0112253:	68 bc 94 13 f0       	push   $0xf01394bc
f0112258:	68 53 01 00 00       	push   $0x153
f011225d:	68 de 8e 13 f0       	push   $0xf0138ede
f0112262:	e8 9e df fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0112267:	83 ec 0c             	sub    $0xc,%esp
f011226a:	68 f4 94 13 f0       	push   $0xf01394f4
f011226f:	e8 9a ea fe ff       	call   f0100d0e <cprintf>
f0112274:	83 c4 10             	add    $0x10,%esp

	return 0;
f0112277:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011227c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011227f:	5b                   	pop    %ebx
f0112280:	5e                   	pop    %esi
f0112281:	5f                   	pop    %edi
f0112282:	5d                   	pop    %ebp
f0112283:	c3                   	ret    

f0112284 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112284:	55                   	push   %ebp
f0112285:	89 e5                	mov    %esp,%ebp
f0112287:	57                   	push   %edi
f0112288:	56                   	push   %esi
f0112289:	53                   	push   %ebx
f011228a:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112290:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112296:	bb 78 99 13 f0       	mov    $0xf0139978,%ebx
f011229b:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122a0:	89 c7                	mov    %eax,%edi
f01122a2:	89 de                	mov    %ebx,%esi
f01122a4:	89 d1                	mov    %edx,%ecx
f01122a6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122a8:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01122ae:	b9 23 00 00 00       	mov    $0x23,%ecx
f01122b3:	b0 00                	mov    $0x0,%al
f01122b5:	89 d7                	mov    %edx,%edi
f01122b7:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01122b9:	6a 00                	push   $0x0
f01122bb:	6a 0a                	push   $0xa
f01122bd:	6a 14                	push   $0x14
f01122bf:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01122c5:	50                   	push   %eax
f01122c6:	e8 69 71 ff ff       	call   f0109434 <env_create>
f01122cb:	83 c4 10             	add    $0x10,%esp
f01122ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01122d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01122d4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01122d7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01122da:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01122dd:	8b 40 60             	mov    0x60(%eax),%eax
f01122e0:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01122e3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01122e6:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01122e9:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01122f0:	75 70 20 
f01122f3:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01122fa:	00 00 00 
f01122fd:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0112303:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112308:	b8 00 00 00 00       	mov    $0x0,%eax
f011230d:	89 d7                	mov    %edx,%edi
f011230f:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112311:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112314:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112317:	83 ec 08             	sub    $0x8,%esp
f011231a:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112320:	52                   	push   %edx
f0112321:	50                   	push   %eax
f0112322:	e8 6f fb 01 00       	call   f0131e96 <ltostr>
f0112327:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011232a:	83 ec 04             	sub    $0x4,%esp
f011232d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112333:	50                   	push   %eax
f0112334:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f011233a:	50                   	push   %eax
f011233b:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112341:	50                   	push   %eax
f0112342:	e8 47 fc 01 00       	call   f0131f8e <strcconcat>
f0112347:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f011234a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112351:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0112358:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f011235f:	83 ec 0c             	sub    $0xc,%esp
f0112362:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112365:	e8 2d 45 00 00       	call   f0116897 <ClearUserSpace>
f011236a:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f011236d:	83 ec 04             	sub    $0x4,%esp
f0112370:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112376:	50                   	push   %eax
f0112377:	68 c8 96 13 f0       	push   $0xf01396c8
f011237c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112382:	50                   	push   %eax
f0112383:	e8 06 fc 01 00       	call   f0131f8e <strcconcat>
f0112388:	83 c4 10             	add    $0x10,%esp
f011238b:	83 ec 0c             	sub    $0xc,%esp
f011238e:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112394:	50                   	push   %eax
f0112395:	e8 d6 e9 fe ff       	call   f0100d70 <execute_command>
f011239a:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f011239d:	83 ec 04             	sub    $0x4,%esp
f01123a0:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01123a6:	50                   	push   %eax
f01123a7:	68 d3 96 13 f0       	push   $0xf01396d3
f01123ac:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123b2:	50                   	push   %eax
f01123b3:	e8 d6 fb 01 00       	call   f0131f8e <strcconcat>
f01123b8:	83 c4 10             	add    $0x10,%esp
f01123bb:	83 ec 0c             	sub    $0xc,%esp
f01123be:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01123c4:	50                   	push   %eax
f01123c5:	e8 a6 e9 fe ff       	call   f0100d70 <execute_command>
f01123ca:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01123cd:	83 ec 04             	sub    $0x4,%esp
f01123d0:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01123d6:	50                   	push   %eax
f01123d7:	68 de 96 13 f0       	push   $0xf01396de
f01123dc:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123e2:	50                   	push   %eax
f01123e3:	e8 a6 fb 01 00       	call   f0131f8e <strcconcat>
f01123e8:	83 c4 10             	add    $0x10,%esp
f01123eb:	83 ec 0c             	sub    $0xc,%esp
f01123ee:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01123f4:	50                   	push   %eax
f01123f5:	e8 76 e9 fe ff       	call   f0100d70 <execute_command>
f01123fa:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01123fd:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0112404:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112407:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f011240a:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112411:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112414:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0112417:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f011241e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112421:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0112424:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112427:	83 ec 08             	sub    $0x8,%esp
f011242a:	50                   	push   %eax
f011242b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011242e:	e8 45 44 00 00       	call   f0116878 <GP>
f0112433:	83 c4 10             	add    $0x10,%esp
f0112436:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0112439:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112440:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0112447:	e8 21 ad ff ff       	call   f010d16d <sys_calculate_free_frames>
f011244c:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011244f:	83 ec 0c             	sub    $0xc,%esp
f0112452:	68 ec 96 13 f0       	push   $0xf01396ec
f0112457:	e8 b2 e8 fe ff       	call   f0100d0e <cprintf>
f011245c:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011245f:	6a 03                	push   $0x3
f0112461:	68 00 00 90 02       	push   $0x2900000
f0112466:	68 00 00 80 02       	push   $0x2800000
f011246b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011246e:	e8 4d 64 ff ff       	call   f01088c0 <cut_paste_pages>
f0112473:	83 c4 10             	add    $0x10,%esp
f0112476:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112479:	e8 ef ac ff ff       	call   f010d16d <sys_calculate_free_frames>
f011247e:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112481:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0112488:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011248c:	75 08                	jne    f0112496 <test_cut_paste_pages+0x212>
f011248e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112491:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112494:	74 2b                	je     f01124c1 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112496:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112499:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011249c:	83 ec 0c             	sub    $0xc,%esp
f011249f:	50                   	push   %eax
f01124a0:	ff 75 b4             	pushl  -0x4c(%ebp)
f01124a3:	68 1c 97 13 f0       	push   $0xf013971c
f01124a8:	68 91 01 00 00       	push   $0x191
f01124ad:	68 de 8e 13 f0       	push   $0xf0138ede
f01124b2:	e8 5c df fe ff       	call   f0100413 <_warn>
f01124b7:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01124ba:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01124c1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124c5:	74 04                	je     f01124cb <test_cut_paste_pages+0x247>
f01124c7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01124cb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01124d2:	83 ec 08             	sub    $0x8,%esp
f01124d5:	6a 00                	push   $0x0
f01124d7:	6a 01                	push   $0x1
f01124d9:	6a 00                	push   $0x0
f01124db:	68 ff 0f 00 00       	push   $0xfff
f01124e0:	ff 75 bc             	pushl  -0x44(%ebp)
f01124e3:	6a 01                	push   $0x1
f01124e5:	68 00 30 00 00       	push   $0x3000
f01124ea:	68 00 00 90 02       	push   $0x2900000
f01124ef:	68 00 00 80 02       	push   $0x2800000
f01124f4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124f7:	e8 cf 43 00 00       	call   f01168cb <CCP>
f01124fc:	83 c4 30             	add    $0x30,%esp
f01124ff:	83 f8 01             	cmp    $0x1,%eax
f0112502:	74 21                	je     f0112525 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112504:	83 ec 04             	sub    $0x4,%esp
f0112507:	68 70 97 13 f0       	push   $0xf0139770
f011250c:	68 99 01 00 00       	push   $0x199
f0112511:	68 de 8e 13 f0       	push   $0xf0138ede
f0112516:	e8 f8 de fe ff       	call   f0100413 <_warn>
f011251b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011251e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0112525:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112529:	74 04                	je     f011252f <test_cut_paste_pages+0x2ab>
f011252b:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f011252f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0112536:	83 ec 04             	sub    $0x4,%esp
f0112539:	6a 00                	push   $0x0
f011253b:	68 00 00 90 02       	push   $0x2900000
f0112540:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112543:	e8 5f 41 00 00       	call   f01166a7 <CB>
f0112548:	83 c4 10             	add    $0x10,%esp
f011254b:	85 c0                	test   %eax,%eax
f011254d:	0f 84 f6 00 00 00    	je     f0112649 <test_cut_paste_pages+0x3c5>
f0112553:	83 ec 04             	sub    $0x4,%esp
f0112556:	6a 00                	push   $0x0
f0112558:	68 00 10 90 02       	push   $0x2901000
f011255d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112560:	e8 42 41 00 00       	call   f01166a7 <CB>
f0112565:	83 c4 10             	add    $0x10,%esp
f0112568:	85 c0                	test   %eax,%eax
f011256a:	0f 84 d9 00 00 00    	je     f0112649 <test_cut_paste_pages+0x3c5>
f0112570:	83 ec 04             	sub    $0x4,%esp
f0112573:	6a 00                	push   $0x0
f0112575:	68 00 20 90 02       	push   $0x2902000
f011257a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011257d:	e8 25 41 00 00       	call   f01166a7 <CB>
f0112582:	83 c4 10             	add    $0x10,%esp
f0112585:	85 c0                	test   %eax,%eax
f0112587:	0f 84 bc 00 00 00    	je     f0112649 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f011258d:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112594:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f011259b:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01125a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125a5:	8a 00                	mov    (%eax),%al
f01125a7:	3c 61                	cmp    $0x61,%al
f01125a9:	75 12                	jne    f01125bd <test_cut_paste_pages+0x339>
f01125ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125ae:	8a 00                	mov    (%eax),%al
f01125b0:	3c 62                	cmp    $0x62,%al
f01125b2:	75 09                	jne    f01125bd <test_cut_paste_pages+0x339>
f01125b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01125b7:	8a 00                	mov    (%eax),%al
f01125b9:	3c 63                	cmp    $0x63,%al
f01125bb:	74 21                	je     f01125de <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01125bd:	83 ec 04             	sub    $0x4,%esp
f01125c0:	68 bc 97 13 f0       	push   $0xf01397bc
f01125c5:	68 a6 01 00 00       	push   $0x1a6
f01125ca:	68 de 8e 13 f0       	push   $0xf0138ede
f01125cf:	e8 3f de fe ff       	call   f0100413 <_warn>
f01125d4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01125d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01125de:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125e2:	74 04                	je     f01125e8 <test_cut_paste_pages+0x364>
f01125e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01125e8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01125ef:	83 ec 04             	sub    $0x4,%esp
f01125f2:	6a 01                	push   $0x1
f01125f4:	68 00 10 90 02       	push   $0x2901000
f01125f9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125fc:	e8 a6 40 00 00       	call   f01166a7 <CB>
f0112601:	83 c4 10             	add    $0x10,%esp
f0112604:	85 c0                	test   %eax,%eax
f0112606:	74 41                	je     f0112649 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0112608:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011260b:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f011260e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112611:	8a 00                	mov    (%eax),%al
f0112613:	3c 79                	cmp    $0x79,%al
f0112615:	74 21                	je     f0112638 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112617:	83 ec 04             	sub    $0x4,%esp
f011261a:	68 bc 97 13 f0       	push   $0xf01397bc
f011261f:	68 b1 01 00 00       	push   $0x1b1
f0112624:	68 de 8e 13 f0       	push   $0xf0138ede
f0112629:	e8 e5 dd fe ff       	call   f0100413 <_warn>
f011262e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112631:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112638:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011263c:	74 04                	je     f0112642 <test_cut_paste_pages+0x3be>
f011263e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112642:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0112649:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011264c:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f011264f:	6a 02                	push   $0x2
f0112651:	68 00 f0 bf 02       	push   $0x2bff000
f0112656:	68 00 10 90 02       	push   $0x2901000
f011265b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011265e:	e8 5d 62 ff ff       	call   f01088c0 <cut_paste_pages>
f0112663:	83 c4 10             	add    $0x10,%esp
f0112666:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112669:	e8 ff aa ff ff       	call   f010d16d <sys_calculate_free_frames>
f011266e:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112671:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112675:	75 0b                	jne    f0112682 <test_cut_paste_pages+0x3fe>
f0112677:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011267a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011267d:	83 f8 01             	cmp    $0x1,%eax
f0112680:	74 2b                	je     f01126ad <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112682:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112685:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112688:	83 ec 0c             	sub    $0xc,%esp
f011268b:	50                   	push   %eax
f011268c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011268f:	68 1c 97 13 f0       	push   $0xf013971c
f0112694:	68 c2 01 00 00       	push   $0x1c2
f0112699:	68 de 8e 13 f0       	push   $0xf0138ede
f011269e:	e8 70 dd fe ff       	call   f0100413 <_warn>
f01126a3:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01126a6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01126ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126b1:	74 04                	je     f01126b7 <test_cut_paste_pages+0x433>
f01126b3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01126b7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01126be:	83 ec 08             	sub    $0x8,%esp
f01126c1:	6a 00                	push   $0x0
f01126c3:	6a 01                	push   $0x1
f01126c5:	6a 00                	push   $0x0
f01126c7:	68 ff 0f 00 00       	push   $0xfff
f01126cc:	ff 75 bc             	pushl  -0x44(%ebp)
f01126cf:	6a 01                	push   $0x1
f01126d1:	68 00 20 00 00       	push   $0x2000
f01126d6:	68 00 f0 bf 02       	push   $0x2bff000
f01126db:	68 00 10 90 02       	push   $0x2901000
f01126e0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126e3:	e8 e3 41 00 00       	call   f01168cb <CCP>
f01126e8:	83 c4 30             	add    $0x30,%esp
f01126eb:	83 f8 01             	cmp    $0x1,%eax
f01126ee:	74 21                	je     f0112711 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01126f0:	83 ec 04             	sub    $0x4,%esp
f01126f3:	68 70 97 13 f0       	push   $0xf0139770
f01126f8:	68 ca 01 00 00       	push   $0x1ca
f01126fd:	68 de 8e 13 f0       	push   $0xf0138ede
f0112702:	e8 0c dd fe ff       	call   f0100413 <_warn>
f0112707:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011270a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112711:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112715:	74 04                	je     f011271b <test_cut_paste_pages+0x497>
f0112717:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011271b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112722:	83 ec 04             	sub    $0x4,%esp
f0112725:	6a 00                	push   $0x0
f0112727:	68 ff f7 bf 02       	push   $0x2bff7ff
f011272c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011272f:	e8 73 3f 00 00       	call   f01166a7 <CB>
f0112734:	83 c4 10             	add    $0x10,%esp
f0112737:	85 c0                	test   %eax,%eax
f0112739:	74 6b                	je     f01127a6 <test_cut_paste_pages+0x522>
f011273b:	83 ec 04             	sub    $0x4,%esp
f011273e:	6a 00                	push   $0x0
f0112740:	68 ff 0f c0 02       	push   $0x2c00fff
f0112745:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112748:	e8 5a 3f 00 00       	call   f01166a7 <CB>
f011274d:	83 c4 10             	add    $0x10,%esp
f0112750:	85 c0                	test   %eax,%eax
f0112752:	74 52                	je     f01127a6 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112754:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f011275b:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112762:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112765:	8a 00                	mov    (%eax),%al
f0112767:	3c 79                	cmp    $0x79,%al
f0112769:	75 09                	jne    f0112774 <test_cut_paste_pages+0x4f0>
f011276b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011276e:	8a 00                	mov    (%eax),%al
f0112770:	3c 63                	cmp    $0x63,%al
f0112772:	74 21                	je     f0112795 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112774:	83 ec 04             	sub    $0x4,%esp
f0112777:	68 bc 97 13 f0       	push   $0xf01397bc
f011277c:	68 d6 01 00 00       	push   $0x1d6
f0112781:	68 de 8e 13 f0       	push   $0xf0138ede
f0112786:	e8 88 dc fe ff       	call   f0100413 <_warn>
f011278b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011278e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112795:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112799:	74 04                	je     f011279f <test_cut_paste_pages+0x51b>
f011279b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011279f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01127a6:	83 ec 0c             	sub    $0xc,%esp
f01127a9:	68 f5 97 13 f0       	push   $0xf01397f5
f01127ae:	e8 5b e5 fe ff       	call   f0100d0e <cprintf>
f01127b3:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01127b6:	83 ec 0c             	sub    $0xc,%esp
f01127b9:	68 04 98 13 f0       	push   $0xf0139804
f01127be:	e8 4b e5 fe ff       	call   f0100d0e <cprintf>
f01127c3:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01127c6:	83 ec 04             	sub    $0x4,%esp
f01127c9:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01127cf:	50                   	push   %eax
f01127d0:	68 2d 98 13 f0       	push   $0xf013982d
f01127d5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01127db:	50                   	push   %eax
f01127dc:	e8 ad f7 01 00       	call   f0131f8e <strcconcat>
f01127e1:	83 c4 10             	add    $0x10,%esp
f01127e4:	83 ec 0c             	sub    $0xc,%esp
f01127e7:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01127ed:	50                   	push   %eax
f01127ee:	e8 7d e5 fe ff       	call   f0100d70 <execute_command>
f01127f3:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01127f6:	83 ec 04             	sub    $0x4,%esp
f01127f9:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01127ff:	50                   	push   %eax
f0112800:	68 38 98 13 f0       	push   $0xf0139838
f0112805:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011280b:	50                   	push   %eax
f011280c:	e8 7d f7 01 00       	call   f0131f8e <strcconcat>
f0112811:	83 c4 10             	add    $0x10,%esp
f0112814:	83 ec 0c             	sub    $0xc,%esp
f0112817:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011281d:	50                   	push   %eax
f011281e:	e8 4d e5 fe ff       	call   f0100d70 <execute_command>
f0112823:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112826:	83 ec 04             	sub    $0x4,%esp
f0112829:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011282f:	50                   	push   %eax
f0112830:	68 43 98 13 f0       	push   $0xf0139843
f0112835:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011283b:	50                   	push   %eax
f011283c:	e8 4d f7 01 00       	call   f0131f8e <strcconcat>
f0112841:	83 c4 10             	add    $0x10,%esp
f0112844:	83 ec 0c             	sub    $0xc,%esp
f0112847:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011284d:	50                   	push   %eax
f011284e:	e8 1d e5 fe ff       	call   f0100d70 <execute_command>
f0112853:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112856:	83 ec 04             	sub    $0x4,%esp
f0112859:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011285f:	50                   	push   %eax
f0112860:	68 4e 98 13 f0       	push   $0xf013984e
f0112865:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011286b:	50                   	push   %eax
f011286c:	e8 1d f7 01 00       	call   f0131f8e <strcconcat>
f0112871:	83 c4 10             	add    $0x10,%esp
f0112874:	83 ec 0c             	sub    $0xc,%esp
f0112877:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011287d:	50                   	push   %eax
f011287e:	e8 ed e4 fe ff       	call   f0100d70 <execute_command>
f0112883:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112886:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f011288d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112890:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112893:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f011289a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011289d:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01128a0:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01128a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128aa:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01128ad:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01128b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128b7:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01128ba:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01128c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128c4:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01128c7:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01128ce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128d1:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01128d4:	83 ec 08             	sub    $0x8,%esp
f01128d7:	68 00 00 c0 01       	push   $0x1c00000
f01128dc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128df:	e8 94 3f 00 00       	call   f0116878 <GP>
f01128e4:	83 c4 10             	add    $0x10,%esp
f01128e7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01128ea:	83 ec 08             	sub    $0x8,%esp
f01128ed:	68 00 00 40 01       	push   $0x1400000
f01128f2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128f5:	e8 7e 3f 00 00       	call   f0116878 <GP>
f01128fa:	83 c4 10             	add    $0x10,%esp
f01128fd:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112900:	e8 68 a8 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0112905:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0112908:	6a 01                	push   $0x1
f011290a:	68 00 00 40 01       	push   $0x1400000
f011290f:	68 00 00 c0 01       	push   $0x1c00000
f0112914:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112917:	e8 a4 5f ff ff       	call   f01088c0 <cut_paste_pages>
f011291c:	83 c4 10             	add    $0x10,%esp
f011291f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112922:	e8 46 a8 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0112927:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011292a:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f011292e:	75 08                	jne    f0112938 <test_cut_paste_pages+0x6b4>
f0112930:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112933:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112936:	74 2b                	je     f0112963 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112938:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011293b:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011293e:	83 ec 0c             	sub    $0xc,%esp
f0112941:	50                   	push   %eax
f0112942:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112945:	68 5c 98 13 f0       	push   $0xf013985c
f011294a:	68 f9 01 00 00       	push   $0x1f9
f011294f:	68 de 8e 13 f0       	push   $0xf0138ede
f0112954:	e8 ba da fe ff       	call   f0100413 <_warn>
f0112959:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011295c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112963:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112967:	74 04                	je     f011296d <test_cut_paste_pages+0x6e9>
f0112969:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011296d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112974:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f011297b:	83 ec 08             	sub    $0x8,%esp
f011297e:	6a 00                	push   $0x0
f0112980:	68 ff 0f 00 00       	push   $0xfff
f0112985:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112988:	68 ff 0f 00 00       	push   $0xfff
f011298d:	ff 75 a0             	pushl  -0x60(%ebp)
f0112990:	6a 01                	push   $0x1
f0112992:	68 00 10 00 00       	push   $0x1000
f0112997:	68 00 00 40 01       	push   $0x1400000
f011299c:	68 00 00 c0 01       	push   $0x1c00000
f01129a1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129a4:	e8 22 3f 00 00       	call   f01168cb <CCP>
f01129a9:	83 c4 30             	add    $0x30,%esp
f01129ac:	83 f8 01             	cmp    $0x1,%eax
f01129af:	74 28                	je     f01129d9 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01129b1:	83 ec 04             	sub    $0x4,%esp
f01129b4:	68 70 97 13 f0       	push   $0xf0139770
f01129b9:	68 02 02 00 00       	push   $0x202
f01129be:	68 de 8e 13 f0       	push   $0xf0138ede
f01129c3:	e8 4b da fe ff       	call   f0100413 <_warn>
f01129c8:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01129cb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01129d2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01129d9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129dd:	74 04                	je     f01129e3 <test_cut_paste_pages+0x75f>
f01129df:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01129e3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01129ea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01129ee:	0f 84 92 00 00 00    	je     f0112a86 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f01129f4:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01129fb:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112a02:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112a09:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112a10:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112a17:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a1e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112a21:	8a 00                	mov    (%eax),%al
f0112a23:	3c 61                	cmp    $0x61,%al
f0112a25:	75 2d                	jne    f0112a54 <test_cut_paste_pages+0x7d0>
f0112a27:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a2a:	8a 00                	mov    (%eax),%al
f0112a2c:	3c 78                	cmp    $0x78,%al
f0112a2e:	75 24                	jne    f0112a54 <test_cut_paste_pages+0x7d0>
f0112a30:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a33:	8a 00                	mov    (%eax),%al
f0112a35:	3c 62                	cmp    $0x62,%al
f0112a37:	75 1b                	jne    f0112a54 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a39:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a3c:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a3e:	3c 79                	cmp    $0x79,%al
f0112a40:	75 12                	jne    f0112a54 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a42:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a45:	8a 00                	mov    (%eax),%al
f0112a47:	3c 63                	cmp    $0x63,%al
f0112a49:	75 09                	jne    f0112a54 <test_cut_paste_pages+0x7d0>
f0112a4b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112a4e:	8a 00                	mov    (%eax),%al
f0112a50:	3c 7a                	cmp    $0x7a,%al
f0112a52:	74 21                	je     f0112a75 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112a54:	83 ec 04             	sub    $0x4,%esp
f0112a57:	68 bc 97 13 f0       	push   $0xf01397bc
f0112a5c:	68 14 02 00 00       	push   $0x214
f0112a61:	68 de 8e 13 f0       	push   $0xf0138ede
f0112a66:	e8 a8 d9 fe ff       	call   f0100413 <_warn>
f0112a6b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112a75:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a79:	74 04                	je     f0112a7f <test_cut_paste_pages+0x7fb>
f0112a7b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a7f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112a86:	e8 e2 a6 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0112a8b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112a8e:	6a 03                	push   $0x3
f0112a90:	68 00 f0 bf 01       	push   $0x1bff000
f0112a95:	68 00 00 40 01       	push   $0x1400000
f0112a9a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a9d:	e8 1e 5e ff ff       	call   f01088c0 <cut_paste_pages>
f0112aa2:	83 c4 10             	add    $0x10,%esp
f0112aa5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112aa8:	e8 c0 a6 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0112aad:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112ab0:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112ab4:	75 08                	jne    f0112abe <test_cut_paste_pages+0x83a>
f0112ab6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ab9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112abc:	74 2b                	je     f0112ae9 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112abe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ac1:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112ac4:	83 ec 0c             	sub    $0xc,%esp
f0112ac7:	50                   	push   %eax
f0112ac8:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112acb:	68 5c 98 13 f0       	push   $0xf013985c
f0112ad0:	68 23 02 00 00       	push   $0x223
f0112ad5:	68 de 8e 13 f0       	push   $0xf0138ede
f0112ada:	e8 34 d9 fe ff       	call   f0100413 <_warn>
f0112adf:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112ae2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112ae9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112aed:	74 04                	je     f0112af3 <test_cut_paste_pages+0x86f>
f0112aef:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112af3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112afa:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b01:	83 ec 04             	sub    $0x4,%esp
f0112b04:	6a 00                	push   $0x0
f0112b06:	68 00 00 40 01       	push   $0x1400000
f0112b0b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b0e:	e8 94 3b 00 00       	call   f01166a7 <CB>
f0112b13:	83 c4 10             	add    $0x10,%esp
f0112b16:	83 f8 01             	cmp    $0x1,%eax
f0112b19:	0f 85 80 00 00 00    	jne    f0112b9f <test_cut_paste_pages+0x91b>
f0112b1f:	83 ec 04             	sub    $0x4,%esp
f0112b22:	6a 00                	push   $0x0
f0112b24:	68 00 10 40 01       	push   $0x1401000
f0112b29:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b2c:	e8 76 3b 00 00       	call   f01166a7 <CB>
f0112b31:	83 c4 10             	add    $0x10,%esp
f0112b34:	83 f8 01             	cmp    $0x1,%eax
f0112b37:	75 66                	jne    f0112b9f <test_cut_paste_pages+0x91b>
f0112b39:	83 ec 04             	sub    $0x4,%esp
f0112b3c:	6a 00                	push   $0x0
f0112b3e:	68 00 20 40 01       	push   $0x1402000
f0112b43:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b46:	e8 5c 3b 00 00       	call   f01166a7 <CB>
f0112b4b:	83 c4 10             	add    $0x10,%esp
f0112b4e:	83 f8 01             	cmp    $0x1,%eax
f0112b51:	75 4c                	jne    f0112b9f <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112b53:	83 ec 04             	sub    $0x4,%esp
f0112b56:	6a 00                	push   $0x0
f0112b58:	68 00 f0 bf 01       	push   $0x1bff000
f0112b5d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b60:	e8 42 3b 00 00       	call   f01166a7 <CB>
f0112b65:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b68:	85 c0                	test   %eax,%eax
f0112b6a:	75 33                	jne    f0112b9f <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112b6c:	83 ec 04             	sub    $0x4,%esp
f0112b6f:	6a 00                	push   $0x0
f0112b71:	68 00 00 c0 01       	push   $0x1c00000
f0112b76:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b79:	e8 29 3b 00 00       	call   f01166a7 <CB>
f0112b7e:	83 c4 10             	add    $0x10,%esp
f0112b81:	83 f8 01             	cmp    $0x1,%eax
f0112b84:	75 19                	jne    f0112b9f <test_cut_paste_pages+0x91b>
f0112b86:	83 ec 04             	sub    $0x4,%esp
f0112b89:	6a 00                	push   $0x0
f0112b8b:	68 00 10 c0 01       	push   $0x1c01000
f0112b90:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b93:	e8 0f 3b 00 00       	call   f01166a7 <CB>
f0112b98:	83 c4 10             	add    $0x10,%esp
f0112b9b:	85 c0                	test   %eax,%eax
f0112b9d:	74 28                	je     f0112bc7 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112b9f:	83 ec 04             	sub    $0x4,%esp
f0112ba2:	68 bc 98 13 f0       	push   $0xf01398bc
f0112ba7:	68 2c 02 00 00       	push   $0x22c
f0112bac:	68 de 8e 13 f0       	push   $0xf0138ede
f0112bb1:	e8 5d d8 fe ff       	call   f0100413 <_warn>
f0112bb6:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112bb9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112bc0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112bc7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112bcb:	74 04                	je     f0112bd1 <test_cut_paste_pages+0x94d>
f0112bcd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112bd1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112bd8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112bdc:	0f 84 99 00 00 00    	je     f0112c7b <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0112be2:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112be9:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112bf0:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112bf7:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112bfe:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112c05:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c0f:	8a 00                	mov    (%eax),%al
f0112c11:	3c 61                	cmp    $0x61,%al
f0112c13:	75 2d                	jne    f0112c42 <test_cut_paste_pages+0x9be>
f0112c15:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112c18:	8a 00                	mov    (%eax),%al
f0112c1a:	3c 78                	cmp    $0x78,%al
f0112c1c:	75 24                	jne    f0112c42 <test_cut_paste_pages+0x9be>
f0112c1e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c21:	8a 00                	mov    (%eax),%al
f0112c23:	3c 62                	cmp    $0x62,%al
f0112c25:	75 1b                	jne    f0112c42 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c27:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c2a:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c2c:	3c 79                	cmp    $0x79,%al
f0112c2e:	75 12                	jne    f0112c42 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c30:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c33:	8a 00                	mov    (%eax),%al
f0112c35:	3c 63                	cmp    $0x63,%al
f0112c37:	75 09                	jne    f0112c42 <test_cut_paste_pages+0x9be>
f0112c39:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c3c:	8a 00                	mov    (%eax),%al
f0112c3e:	3c 7a                	cmp    $0x7a,%al
f0112c40:	74 28                	je     f0112c6a <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112c42:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112c49:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112c50:	83 ec 04             	sub    $0x4,%esp
f0112c53:	68 bc 97 13 f0       	push   $0xf01397bc
f0112c58:	68 40 02 00 00       	push   $0x240
f0112c5d:	68 de 8e 13 f0       	push   $0xf0138ede
f0112c62:	e8 ac d7 fe ff       	call   f0100413 <_warn>
f0112c67:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112c6a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c6e:	74 04                	je     f0112c74 <test_cut_paste_pages+0x9f0>
f0112c70:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c74:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112c7b:	83 ec 0c             	sub    $0xc,%esp
f0112c7e:	68 f5 98 13 f0       	push   $0xf01398f5
f0112c83:	e8 86 e0 fe ff       	call   f0100d0e <cprintf>
f0112c88:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112c8b:	83 ec 08             	sub    $0x8,%esp
f0112c8e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112c91:	68 04 99 13 f0       	push   $0xf0139904
f0112c96:	e8 73 e0 fe ff       	call   f0100d0e <cprintf>
f0112c9b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112c9e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112ca2:	75 10                	jne    f0112cb4 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112ca4:	83 ec 0c             	sub    $0xc,%esp
f0112ca7:	68 38 99 13 f0       	push   $0xf0139938
f0112cac:	e8 5d e0 fe ff       	call   f0100d0e <cprintf>
f0112cb1:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112cb4:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f0112cb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112cbc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112cbf:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112cc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112cc7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112cca:	5b                   	pop    %ebx
f0112ccb:	5e                   	pop    %esi
f0112ccc:	5f                   	pop    %edi
f0112ccd:	5d                   	pop    %ebp
f0112cce:	c3                   	ret    

f0112ccf <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112ccf:	55                   	push   %ebp
f0112cd0:	89 e5                	mov    %esp,%ebp
f0112cd2:	57                   	push   %edi
f0112cd3:	56                   	push   %esi
f0112cd4:	53                   	push   %ebx
f0112cd5:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112cdb:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112ce1:	bb 78 99 13 f0       	mov    $0xf0139978,%ebx
f0112ce6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ceb:	89 c7                	mov    %eax,%edi
f0112ced:	89 de                	mov    %ebx,%esi
f0112cef:	89 d1                	mov    %edx,%ecx
f0112cf1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112cf3:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112cf9:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112cfe:	b0 00                	mov    $0x0,%al
f0112d00:	89 d7                	mov    %edx,%edi
f0112d02:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112d04:	6a 00                	push   $0x0
f0112d06:	6a 0a                	push   $0xa
f0112d08:	6a 14                	push   $0x14
f0112d0a:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d10:	50                   	push   %eax
f0112d11:	e8 1e 67 ff ff       	call   f0109434 <env_create>
f0112d16:	83 c4 10             	add    $0x10,%esp
f0112d19:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112d1c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d1f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112d22:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112d25:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d28:	8b 40 60             	mov    0x60(%eax),%eax
f0112d2b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112d31:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112d37:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112d3a:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112d41:	75 70 20 
f0112d44:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112d4b:	00 00 00 
f0112d4e:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112d54:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112d59:	b8 00 00 00 00       	mov    $0x0,%eax
f0112d5e:	89 d7                	mov    %edx,%edi
f0112d60:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112d62:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d65:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112d68:	83 ec 08             	sub    $0x8,%esp
f0112d6b:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112d71:	52                   	push   %edx
f0112d72:	50                   	push   %eax
f0112d73:	e8 1e f1 01 00       	call   f0131e96 <ltostr>
f0112d78:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112d7b:	83 ec 04             	sub    $0x4,%esp
f0112d7e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d84:	50                   	push   %eax
f0112d85:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112d8b:	50                   	push   %eax
f0112d8c:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112d92:	50                   	push   %eax
f0112d93:	e8 f6 f1 01 00       	call   f0131f8e <strcconcat>
f0112d98:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112d9b:	83 ec 0c             	sub    $0xc,%esp
f0112d9e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112da1:	e8 f1 3a 00 00       	call   f0116897 <ClearUserSpace>
f0112da6:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112da9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112db0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112db7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112dbe:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112dc5:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112dcc:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112dd3:	83 ec 0c             	sub    $0xc,%esp
f0112dd6:	68 ac 99 13 f0       	push   $0xf01399ac
f0112ddb:	e8 2e df fe ff       	call   f0100d0e <cprintf>
f0112de0:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112de3:	83 ec 04             	sub    $0x4,%esp
f0112de6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112dec:	50                   	push   %eax
f0112ded:	68 e2 99 13 f0       	push   $0xf01399e2
f0112df2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112df8:	50                   	push   %eax
f0112df9:	e8 90 f1 01 00       	call   f0131f8e <strcconcat>
f0112dfe:	83 c4 10             	add    $0x10,%esp
f0112e01:	83 ec 0c             	sub    $0xc,%esp
f0112e04:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e0a:	50                   	push   %eax
f0112e0b:	e8 60 df fe ff       	call   f0100d70 <execute_command>
f0112e10:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112e13:	83 ec 04             	sub    $0x4,%esp
f0112e16:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e1c:	50                   	push   %eax
f0112e1d:	68 e7 99 13 f0       	push   $0xf01399e7
f0112e22:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e28:	50                   	push   %eax
f0112e29:	e8 60 f1 01 00       	call   f0131f8e <strcconcat>
f0112e2e:	83 c4 10             	add    $0x10,%esp
f0112e31:	83 ec 0c             	sub    $0xc,%esp
f0112e34:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e3a:	50                   	push   %eax
f0112e3b:	e8 30 df fe ff       	call   f0100d70 <execute_command>
f0112e40:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112e43:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112e49:	bb ed 9c 13 f0       	mov    $0xf0139ced,%ebx
f0112e4e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e53:	89 c7                	mov    %eax,%edi
f0112e55:	89 de                	mov    %ebx,%esi
f0112e57:	89 d1                	mov    %edx,%ecx
f0112e59:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e5b:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112e61:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e66:	b0 00                	mov    $0x0,%al
f0112e68:	89 d7                	mov    %edx,%edi
f0112e6a:	f3 aa                	rep stos %al,%es:(%edi)
f0112e6c:	83 ec 0c             	sub    $0xc,%esp
f0112e6f:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112e75:	50                   	push   %eax
f0112e76:	e8 f5 de fe ff       	call   f0100d70 <execute_command>
f0112e7b:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112e7e:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112e84:	bb 51 9d 13 f0       	mov    $0xf0139d51,%ebx
f0112e89:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e8e:	89 c7                	mov    %eax,%edi
f0112e90:	89 de                	mov    %ebx,%esi
f0112e92:	89 d1                	mov    %edx,%ecx
f0112e94:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e96:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112e9c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ea1:	b0 00                	mov    $0x0,%al
f0112ea3:	89 d7                	mov    %edx,%edi
f0112ea5:	f3 aa                	rep stos %al,%es:(%edi)
f0112ea7:	83 ec 0c             	sub    $0xc,%esp
f0112eaa:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112eb0:	50                   	push   %eax
f0112eb1:	e8 ba de fe ff       	call   f0100d70 <execute_command>
f0112eb6:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112eb9:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112ebf:	bb b5 9d 13 f0       	mov    $0xf0139db5,%ebx
f0112ec4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ec9:	89 c7                	mov    %eax,%edi
f0112ecb:	89 de                	mov    %ebx,%esi
f0112ecd:	89 d1                	mov    %edx,%ecx
f0112ecf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ed1:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112ed7:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112edc:	b0 00                	mov    $0x0,%al
f0112ede:	89 d7                	mov    %edx,%edi
f0112ee0:	f3 aa                	rep stos %al,%es:(%edi)
f0112ee2:	83 ec 0c             	sub    $0xc,%esp
f0112ee5:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112eeb:	50                   	push   %eax
f0112eec:	e8 7f de fe ff       	call   f0100d70 <execute_command>
f0112ef1:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112ef4:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112efa:	bb 19 9e 13 f0       	mov    $0xf0139e19,%ebx
f0112eff:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f04:	89 c7                	mov    %eax,%edi
f0112f06:	89 de                	mov    %ebx,%esi
f0112f08:	89 d1                	mov    %edx,%ecx
f0112f0a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f0c:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112f12:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f17:	b0 00                	mov    $0x0,%al
f0112f19:	89 d7                	mov    %edx,%edi
f0112f1b:	f3 aa                	rep stos %al,%es:(%edi)
f0112f1d:	83 ec 0c             	sub    $0xc,%esp
f0112f20:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f26:	50                   	push   %eax
f0112f27:	e8 44 de fe ff       	call   f0100d70 <execute_command>
f0112f2c:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112f2f:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f35:	bb 7d 9e 13 f0       	mov    $0xf0139e7d,%ebx
f0112f3a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f3f:	89 c7                	mov    %eax,%edi
f0112f41:	89 de                	mov    %ebx,%esi
f0112f43:	89 d1                	mov    %edx,%ecx
f0112f45:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f47:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112f4d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f52:	b0 00                	mov    $0x0,%al
f0112f54:	89 d7                	mov    %edx,%edi
f0112f56:	f3 aa                	rep stos %al,%es:(%edi)
f0112f58:	83 ec 0c             	sub    $0xc,%esp
f0112f5b:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f61:	50                   	push   %eax
f0112f62:	e8 09 de fe ff       	call   f0100d70 <execute_command>
f0112f67:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112f6a:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112f70:	bb e1 9e 13 f0       	mov    $0xf0139ee1,%ebx
f0112f75:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f7a:	89 c7                	mov    %eax,%edi
f0112f7c:	89 de                	mov    %ebx,%esi
f0112f7e:	89 d1                	mov    %edx,%ecx
f0112f80:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f82:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112f88:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f8d:	b0 00                	mov    $0x0,%al
f0112f8f:	89 d7                	mov    %edx,%edi
f0112f91:	f3 aa                	rep stos %al,%es:(%edi)
f0112f93:	83 ec 0c             	sub    $0xc,%esp
f0112f96:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112f9c:	50                   	push   %eax
f0112f9d:	e8 ce dd fe ff       	call   f0100d70 <execute_command>
f0112fa2:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112fa5:	83 ec 04             	sub    $0x4,%esp
f0112fa8:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fae:	50                   	push   %eax
f0112faf:	68 ef 99 13 f0       	push   $0xf01399ef
f0112fb4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112fba:	50                   	push   %eax
f0112fbb:	e8 ce ef 01 00       	call   f0131f8e <strcconcat>
f0112fc0:	83 c4 10             	add    $0x10,%esp
f0112fc3:	83 ec 0c             	sub    $0xc,%esp
f0112fc6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fcc:	50                   	push   %eax
f0112fcd:	e8 9e dd fe ff       	call   f0100d70 <execute_command>
f0112fd2:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112fd5:	83 ec 04             	sub    $0x4,%esp
f0112fd8:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fde:	50                   	push   %eax
f0112fdf:	68 f9 99 13 f0       	push   $0xf01399f9
f0112fe4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112fea:	50                   	push   %eax
f0112feb:	e8 9e ef 01 00       	call   f0131f8e <strcconcat>
f0112ff0:	83 c4 10             	add    $0x10,%esp
f0112ff3:	83 ec 0c             	sub    $0xc,%esp
f0112ff6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ffc:	50                   	push   %eax
f0112ffd:	e8 6e dd fe ff       	call   f0100d70 <execute_command>
f0113002:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0113005:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011300b:	bb 45 9f 13 f0       	mov    $0xf0139f45,%ebx
f0113010:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113015:	89 c7                	mov    %eax,%edi
f0113017:	89 de                	mov    %ebx,%esi
f0113019:	89 d1                	mov    %edx,%ecx
f011301b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011301d:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113023:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113028:	b0 00                	mov    $0x0,%al
f011302a:	89 d7                	mov    %edx,%edi
f011302c:	f3 aa                	rep stos %al,%es:(%edi)
f011302e:	83 ec 0c             	sub    $0xc,%esp
f0113031:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113037:	50                   	push   %eax
f0113038:	e8 33 dd fe ff       	call   f0100d70 <execute_command>
f011303d:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0113040:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113046:	bb a9 9f 13 f0       	mov    $0xf0139fa9,%ebx
f011304b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113050:	89 c7                	mov    %eax,%edi
f0113052:	89 de                	mov    %ebx,%esi
f0113054:	89 d1                	mov    %edx,%ecx
f0113056:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113058:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011305e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113063:	b0 00                	mov    $0x0,%al
f0113065:	89 d7                	mov    %edx,%edi
f0113067:	f3 aa                	rep stos %al,%es:(%edi)
f0113069:	83 ec 0c             	sub    $0xc,%esp
f011306c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113072:	50                   	push   %eax
f0113073:	e8 f8 dc fe ff       	call   f0100d70 <execute_command>
f0113078:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f011307b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113081:	bb 0d a0 13 f0       	mov    $0xf013a00d,%ebx
f0113086:	ba 0f 00 00 00       	mov    $0xf,%edx
f011308b:	89 c7                	mov    %eax,%edi
f011308d:	89 de                	mov    %ebx,%esi
f011308f:	89 d1                	mov    %edx,%ecx
f0113091:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113093:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113099:	b9 55 00 00 00       	mov    $0x55,%ecx
f011309e:	b0 00                	mov    $0x0,%al
f01130a0:	89 d7                	mov    %edx,%edi
f01130a2:	f3 aa                	rep stos %al,%es:(%edi)
f01130a4:	83 ec 0c             	sub    $0xc,%esp
f01130a7:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01130ad:	50                   	push   %eax
f01130ae:	e8 bd dc fe ff       	call   f0100d70 <execute_command>
f01130b3:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01130b6:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01130bd:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01130c4:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01130cb:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01130d2:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01130d9:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01130e0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01130e7:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01130ee:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01130f5:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01130fc:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0113103:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f011310a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011310d:	8a 00                	mov    (%eax),%al
f011310f:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0113115:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113118:	8a 00                	mov    (%eax),%al
f011311a:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0113120:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113123:	8a 00                	mov    (%eax),%al
f0113125:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011312b:	e8 3d a0 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113130:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0113133:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113136:	89 d0                	mov    %edx,%eax
f0113138:	01 c0                	add    %eax,%eax
f011313a:	01 d0                	add    %edx,%eax
f011313c:	01 c0                	add    %eax,%eax
f011313e:	50                   	push   %eax
f011313f:	68 00 00 10 00       	push   $0x100000
f0113144:	6a 00                	push   $0x0
f0113146:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113149:	e8 62 59 ff ff       	call   f0108ab0 <copy_paste_chunk>
f011314e:	83 c4 10             	add    $0x10,%esp
f0113151:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113154:	e8 14 a0 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113159:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011315c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113163:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0113167:	75 08                	jne    f0113171 <test_copy_paste_chunk+0x4a2>
f0113169:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011316c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011316f:	74 2b                	je     f011319c <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113171:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113174:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113177:	83 ec 0c             	sub    $0xc,%esp
f011317a:	50                   	push   %eax
f011317b:	ff 75 88             	pushl  -0x78(%ebp)
f011317e:	68 08 9a 13 f0       	push   $0xf0139a08
f0113183:	68 93 02 00 00       	push   $0x293
f0113188:	68 de 8e 13 f0       	push   $0xf0138ede
f011318d:	e8 81 d2 fe ff       	call   f0100413 <_warn>
f0113192:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113195:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011319c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131a0:	74 04                	je     f01131a6 <test_copy_paste_chunk+0x4d7>
f01131a2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131a6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01131ad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131b0:	8a 00                	mov    (%eax),%al
f01131b2:	3c 61                	cmp    $0x61,%al
f01131b4:	75 75                	jne    f011322b <test_copy_paste_chunk+0x55c>
f01131b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131b9:	8a 00                	mov    (%eax),%al
f01131bb:	3c 78                	cmp    $0x78,%al
f01131bd:	75 6c                	jne    f011322b <test_copy_paste_chunk+0x55c>
f01131bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01131c2:	8a 00                	mov    (%eax),%al
f01131c4:	3c 62                	cmp    $0x62,%al
f01131c6:	75 63                	jne    f011322b <test_copy_paste_chunk+0x55c>
f01131c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01131cb:	8a 00                	mov    (%eax),%al
f01131cd:	3c 79                	cmp    $0x79,%al
f01131cf:	75 5a                	jne    f011322b <test_copy_paste_chunk+0x55c>
f01131d1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01131d4:	8a 00                	mov    (%eax),%al
f01131d6:	3c 63                	cmp    $0x63,%al
f01131d8:	75 51                	jne    f011322b <test_copy_paste_chunk+0x55c>
f01131da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01131dd:	8a 00                	mov    (%eax),%al
f01131df:	3c 7a                	cmp    $0x7a,%al
f01131e1:	75 48                	jne    f011322b <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01131e3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01131e6:	8a 00                	mov    (%eax),%al
f01131e8:	3c 64                	cmp    $0x64,%al
f01131ea:	75 3f                	jne    f011322b <test_copy_paste_chunk+0x55c>
f01131ec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01131ef:	8a 10                	mov    (%eax),%dl
f01131f1:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01131f7:	38 c2                	cmp    %al,%dl
f01131f9:	75 30                	jne    f011322b <test_copy_paste_chunk+0x55c>
f01131fb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01131fe:	8a 00                	mov    (%eax),%al
f0113200:	3c 65                	cmp    $0x65,%al
f0113202:	75 27                	jne    f011322b <test_copy_paste_chunk+0x55c>
f0113204:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113207:	8a 10                	mov    (%eax),%dl
f0113209:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f011320f:	38 c2                	cmp    %al,%dl
f0113211:	75 18                	jne    f011322b <test_copy_paste_chunk+0x55c>
f0113213:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113216:	8a 00                	mov    (%eax),%al
f0113218:	3c 66                	cmp    $0x66,%al
f011321a:	75 0f                	jne    f011322b <test_copy_paste_chunk+0x55c>
f011321c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011321f:	8a 10                	mov    (%eax),%dl
f0113221:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113227:	38 c2                	cmp    %al,%dl
f0113229:	74 21                	je     f011324c <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011322b:	83 ec 04             	sub    $0x4,%esp
f011322e:	68 6c 9a 13 f0       	push   $0xf0139a6c
f0113233:	68 9c 02 00 00       	push   $0x29c
f0113238:	68 de 8e 13 f0       	push   $0xf0138ede
f011323d:	e8 d1 d1 fe ff       	call   f0100413 <_warn>
f0113242:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113245:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011324c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113250:	74 04                	je     f0113256 <test_copy_paste_chunk+0x587>
f0113252:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113256:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f011325d:	83 ec 0c             	sub    $0xc,%esp
f0113260:	68 a6 9a 13 f0       	push   $0xf0139aa6
f0113265:	e8 a4 da fe ff       	call   f0100d0e <cprintf>
f011326a:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f011326d:	83 ec 0c             	sub    $0xc,%esp
f0113270:	68 b8 9a 13 f0       	push   $0xf0139ab8
f0113275:	e8 94 da fe ff       	call   f0100d0e <cprintf>
f011327a:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f011327d:	83 ec 04             	sub    $0x4,%esp
f0113280:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113286:	50                   	push   %eax
f0113287:	68 ee 9a 13 f0       	push   $0xf0139aee
f011328c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113292:	50                   	push   %eax
f0113293:	e8 f6 ec 01 00       	call   f0131f8e <strcconcat>
f0113298:	83 c4 10             	add    $0x10,%esp
f011329b:	83 ec 0c             	sub    $0xc,%esp
f011329e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132a4:	50                   	push   %eax
f01132a5:	e8 c6 da fe ff       	call   f0100d70 <execute_command>
f01132aa:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01132ad:	83 ec 04             	sub    $0x4,%esp
f01132b0:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132b6:	50                   	push   %eax
f01132b7:	68 f8 9a 13 f0       	push   $0xf0139af8
f01132bc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01132c2:	50                   	push   %eax
f01132c3:	e8 c6 ec 01 00       	call   f0131f8e <strcconcat>
f01132c8:	83 c4 10             	add    $0x10,%esp
f01132cb:	83 ec 0c             	sub    $0xc,%esp
f01132ce:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132d4:	50                   	push   %eax
f01132d5:	e8 96 da fe ff       	call   f0100d70 <execute_command>
f01132da:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01132dd:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01132e3:	bb 71 a0 13 f0       	mov    $0xf013a071,%ebx
f01132e8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132ed:	89 c7                	mov    %eax,%edi
f01132ef:	89 de                	mov    %ebx,%esi
f01132f1:	89 d1                	mov    %edx,%ecx
f01132f3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132f5:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01132fb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113300:	b0 00                	mov    $0x0,%al
f0113302:	89 d7                	mov    %edx,%edi
f0113304:	f3 aa                	rep stos %al,%es:(%edi)
f0113306:	83 ec 0c             	sub    $0xc,%esp
f0113309:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011330f:	50                   	push   %eax
f0113310:	e8 5b da fe ff       	call   f0100d70 <execute_command>
f0113315:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0113318:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011331e:	bb d5 a0 13 f0       	mov    $0xf013a0d5,%ebx
f0113323:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113328:	89 c7                	mov    %eax,%edi
f011332a:	89 de                	mov    %ebx,%esi
f011332c:	89 d1                	mov    %edx,%ecx
f011332e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113330:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113336:	b9 55 00 00 00       	mov    $0x55,%ecx
f011333b:	b0 00                	mov    $0x0,%al
f011333d:	89 d7                	mov    %edx,%edi
f011333f:	f3 aa                	rep stos %al,%es:(%edi)
f0113341:	83 ec 0c             	sub    $0xc,%esp
f0113344:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011334a:	50                   	push   %eax
f011334b:	e8 20 da fe ff       	call   f0100d70 <execute_command>
f0113350:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113353:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113359:	bb 39 a1 13 f0       	mov    $0xf013a139,%ebx
f011335e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113363:	89 c7                	mov    %eax,%edi
f0113365:	89 de                	mov    %ebx,%esi
f0113367:	89 d1                	mov    %edx,%ecx
f0113369:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011336b:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113371:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113376:	b0 00                	mov    $0x0,%al
f0113378:	89 d7                	mov    %edx,%edi
f011337a:	f3 aa                	rep stos %al,%es:(%edi)
f011337c:	83 ec 0c             	sub    $0xc,%esp
f011337f:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113385:	50                   	push   %eax
f0113386:	e8 e5 d9 fe ff       	call   f0100d70 <execute_command>
f011338b:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011338e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113394:	bb 9d a1 13 f0       	mov    $0xf013a19d,%ebx
f0113399:	ba 0f 00 00 00       	mov    $0xf,%edx
f011339e:	89 c7                	mov    %eax,%edi
f01133a0:	89 de                	mov    %ebx,%esi
f01133a2:	89 d1                	mov    %edx,%ecx
f01133a4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133a6:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01133ac:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133b1:	b0 00                	mov    $0x0,%al
f01133b3:	89 d7                	mov    %edx,%edi
f01133b5:	f3 aa                	rep stos %al,%es:(%edi)
f01133b7:	83 ec 0c             	sub    $0xc,%esp
f01133ba:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01133c0:	50                   	push   %eax
f01133c1:	e8 aa d9 fe ff       	call   f0100d70 <execute_command>
f01133c6:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01133c9:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01133cf:	bb 01 a2 13 f0       	mov    $0xf013a201,%ebx
f01133d4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133d9:	89 c7                	mov    %eax,%edi
f01133db:	89 de                	mov    %ebx,%esi
f01133dd:	89 d1                	mov    %edx,%ecx
f01133df:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133e1:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01133e7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133ec:	b0 00                	mov    $0x0,%al
f01133ee:	89 d7                	mov    %edx,%edi
f01133f0:	f3 aa                	rep stos %al,%es:(%edi)
f01133f2:	83 ec 0c             	sub    $0xc,%esp
f01133f5:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01133fb:	50                   	push   %eax
f01133fc:	e8 6f d9 fe ff       	call   f0100d70 <execute_command>
f0113401:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0113404:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011340a:	bb 65 a2 13 f0       	mov    $0xf013a265,%ebx
f011340f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113414:	89 c7                	mov    %eax,%edi
f0113416:	89 de                	mov    %ebx,%esi
f0113418:	89 d1                	mov    %edx,%ecx
f011341a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011341c:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113422:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113427:	b0 00                	mov    $0x0,%al
f0113429:	89 d7                	mov    %edx,%edi
f011342b:	f3 aa                	rep stos %al,%es:(%edi)
f011342d:	83 ec 0c             	sub    $0xc,%esp
f0113430:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113436:	50                   	push   %eax
f0113437:	e8 34 d9 fe ff       	call   f0100d70 <execute_command>
f011343c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011343f:	83 ec 04             	sub    $0x4,%esp
f0113442:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113448:	50                   	push   %eax
f0113449:	68 02 9b 13 f0       	push   $0xf0139b02
f011344e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113454:	50                   	push   %eax
f0113455:	e8 34 eb 01 00       	call   f0131f8e <strcconcat>
f011345a:	83 c4 10             	add    $0x10,%esp
f011345d:	83 ec 0c             	sub    $0xc,%esp
f0113460:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113466:	50                   	push   %eax
f0113467:	e8 04 d9 fe ff       	call   f0100d70 <execute_command>
f011346c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011346f:	83 ec 04             	sub    $0x4,%esp
f0113472:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113478:	50                   	push   %eax
f0113479:	68 0c 9b 13 f0       	push   $0xf0139b0c
f011347e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113484:	50                   	push   %eax
f0113485:	e8 04 eb 01 00       	call   f0131f8e <strcconcat>
f011348a:	83 c4 10             	add    $0x10,%esp
f011348d:	83 ec 0c             	sub    $0xc,%esp
f0113490:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113496:	50                   	push   %eax
f0113497:	e8 d4 d8 fe ff       	call   f0100d70 <execute_command>
f011349c:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011349f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01134a5:	bb c9 a2 13 f0       	mov    $0xf013a2c9,%ebx
f01134aa:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134af:	89 c7                	mov    %eax,%edi
f01134b1:	89 de                	mov    %ebx,%esi
f01134b3:	89 d1                	mov    %edx,%ecx
f01134b5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134b7:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01134bd:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134c2:	b0 00                	mov    $0x0,%al
f01134c4:	89 d7                	mov    %edx,%edi
f01134c6:	f3 aa                	rep stos %al,%es:(%edi)
f01134c8:	83 ec 0c             	sub    $0xc,%esp
f01134cb:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01134d1:	50                   	push   %eax
f01134d2:	e8 99 d8 fe ff       	call   f0100d70 <execute_command>
f01134d7:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01134da:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01134e0:	bb 2d a3 13 f0       	mov    $0xf013a32d,%ebx
f01134e5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134ea:	89 c7                	mov    %eax,%edi
f01134ec:	89 de                	mov    %ebx,%esi
f01134ee:	89 d1                	mov    %edx,%ecx
f01134f0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134f2:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01134f8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134fd:	b0 00                	mov    $0x0,%al
f01134ff:	89 d7                	mov    %edx,%edi
f0113501:	f3 aa                	rep stos %al,%es:(%edi)
f0113503:	83 ec 0c             	sub    $0xc,%esp
f0113506:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011350c:	50                   	push   %eax
f011350d:	e8 5e d8 fe ff       	call   f0100d70 <execute_command>
f0113512:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0113515:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011351b:	bb 91 a3 13 f0       	mov    $0xf013a391,%ebx
f0113520:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113525:	89 c7                	mov    %eax,%edi
f0113527:	89 de                	mov    %ebx,%esi
f0113529:	89 d1                	mov    %edx,%ecx
f011352b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011352d:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113533:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113538:	b0 00                	mov    $0x0,%al
f011353a:	89 d7                	mov    %edx,%edi
f011353c:	f3 aa                	rep stos %al,%es:(%edi)
f011353e:	83 ec 0c             	sub    $0xc,%esp
f0113541:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113547:	50                   	push   %eax
f0113548:	e8 23 d8 fe ff       	call   f0100d70 <execute_command>
f011354d:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113550:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113557:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011355e:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113565:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011356c:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113573:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f011357a:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113581:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113588:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011358f:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113596:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011359d:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01135a4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01135a7:	8a 00                	mov    (%eax),%al
f01135a9:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01135af:	e8 b9 9b ff ff       	call   f010d16d <sys_calculate_free_frames>
f01135b4:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01135b7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135ba:	89 d0                	mov    %edx,%eax
f01135bc:	01 c0                	add    %eax,%eax
f01135be:	01 d0                	add    %edx,%eax
f01135c0:	01 c0                	add    %eax,%eax
f01135c2:	50                   	push   %eax
f01135c3:	68 00 00 40 00       	push   $0x400000
f01135c8:	68 00 00 20 00       	push   $0x200000
f01135cd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01135d0:	e8 db 54 ff ff       	call   f0108ab0 <copy_paste_chunk>
f01135d5:	83 c4 10             	add    $0x10,%esp
f01135d8:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01135db:	e8 8d 9b ff ff       	call   f010d16d <sys_calculate_free_frames>
f01135e0:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01135e3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01135ea:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01135ee:	75 08                	jne    f01135f8 <test_copy_paste_chunk+0x929>
f01135f0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01135f3:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01135f6:	74 2b                	je     f0113623 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01135f8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01135fb:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01135fe:	83 ec 0c             	sub    $0xc,%esp
f0113601:	50                   	push   %eax
f0113602:	ff 75 80             	pushl  -0x80(%ebp)
f0113605:	68 18 9b 13 f0       	push   $0xf0139b18
f011360a:	68 cc 02 00 00       	push   $0x2cc
f011360f:	68 de 8e 13 f0       	push   $0xf0138ede
f0113614:	e8 fa cd fe ff       	call   f0100413 <_warn>
f0113619:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011361c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113623:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113627:	74 04                	je     f011362d <test_copy_paste_chunk+0x95e>
f0113629:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011362d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113634:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f011363b:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011363e:	83 ec 08             	sub    $0x8,%esp
f0113641:	6a 01                	push   $0x1
f0113643:	6a 07                	push   $0x7
f0113645:	6a 07                	push   $0x7
f0113647:	6a 07                	push   $0x7
f0113649:	6a 07                	push   $0x7
f011364b:	6a 01                	push   $0x1
f011364d:	68 00 20 00 00       	push   $0x2000
f0113652:	68 00 00 40 00       	push   $0x400000
f0113657:	68 00 00 20 00       	push   $0x200000
f011365c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011365f:	e8 67 32 00 00       	call   f01168cb <CCP>
f0113664:	83 c4 30             	add    $0x30,%esp
f0113667:	83 f8 01             	cmp    $0x1,%eax
f011366a:	74 2b                	je     f0113697 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011366c:	83 ec 04             	sub    $0x4,%esp
f011366f:	68 6c 9b 13 f0       	push   $0xf0139b6c
f0113674:	68 d5 02 00 00       	push   $0x2d5
f0113679:	68 de 8e 13 f0       	push   $0xf0138ede
f011367e:	e8 90 cd fe ff       	call   f0100413 <_warn>
f0113683:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113686:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011368d:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113694:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113697:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011369b:	74 04                	je     f01136a1 <test_copy_paste_chunk+0x9d2>
f011369d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136a1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01136a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136ab:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01136ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01136b1:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01136b4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01136b7:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01136ba:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136bd:	8a 00                	mov    (%eax),%al
f01136bf:	3c 61                	cmp    $0x61,%al
f01136c1:	75 69                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f01136c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136c6:	8a 00                	mov    (%eax),%al
f01136c8:	3c 61                	cmp    $0x61,%al
f01136ca:	75 60                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f01136cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136cf:	8a 00                	mov    (%eax),%al
f01136d1:	3c 79                	cmp    $0x79,%al
f01136d3:	75 57                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f01136d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01136d8:	8a 00                	mov    (%eax),%al
f01136da:	3c 62                	cmp    $0x62,%al
f01136dc:	75 4e                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f01136de:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01136e1:	8a 00                	mov    (%eax),%al
f01136e3:	3c 63                	cmp    $0x63,%al
f01136e5:	75 45                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f01136e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01136ea:	8a 00                	mov    (%eax),%al
f01136ec:	3c 7a                	cmp    $0x7a,%al
f01136ee:	75 3c                	jne    f011372c <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01136f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01136f3:	8a 00                	mov    (%eax),%al
f01136f5:	3c 77                	cmp    $0x77,%al
f01136f7:	75 33                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f01136f9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01136fc:	8a 00                	mov    (%eax),%al
f01136fe:	3c 64                	cmp    $0x64,%al
f0113700:	75 2a                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f0113702:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113705:	8a 00                	mov    (%eax),%al
f0113707:	3c 65                	cmp    $0x65,%al
f0113709:	75 21                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f011370b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011370e:	8a 00                	mov    (%eax),%al
f0113710:	3c 65                	cmp    $0x65,%al
f0113712:	75 18                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f0113714:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113717:	8a 00                	mov    (%eax),%al
f0113719:	3c 66                	cmp    $0x66,%al
f011371b:	75 0f                	jne    f011372c <test_copy_paste_chunk+0xa5d>
f011371d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113720:	8a 10                	mov    (%eax),%dl
f0113722:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113728:	38 c2                	cmp    %al,%dl
f011372a:	74 21                	je     f011374d <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011372c:	83 ec 04             	sub    $0x4,%esp
f011372f:	68 6c 9a 13 f0       	push   $0xf0139a6c
f0113734:	68 e3 02 00 00       	push   $0x2e3
f0113739:	68 de 8e 13 f0       	push   $0xf0138ede
f011373e:	e8 d0 cc fe ff       	call   f0100413 <_warn>
f0113743:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113746:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011374d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113751:	74 04                	je     f0113757 <test_copy_paste_chunk+0xa88>
f0113753:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113757:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011375e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113761:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113764:	e8 04 9a ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113769:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011376c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011376f:	89 c2                	mov    %eax,%edx
f0113771:	01 d2                	add    %edx,%edx
f0113773:	01 d0                	add    %edx,%eax
f0113775:	50                   	push   %eax
f0113776:	68 00 08 20 00       	push   $0x200800
f011377b:	68 00 08 40 00       	push   $0x400800
f0113780:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113783:	e8 28 53 ff ff       	call   f0108ab0 <copy_paste_chunk>
f0113788:	83 c4 10             	add    $0x10,%esp
f011378b:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011378e:	e8 da 99 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113793:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113796:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011379a:	75 08                	jne    f01137a4 <test_copy_paste_chunk+0xad5>
f011379c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011379f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01137a2:	74 2b                	je     f01137cf <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01137a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01137a7:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01137aa:	83 ec 0c             	sub    $0xc,%esp
f01137ad:	50                   	push   %eax
f01137ae:	ff 75 80             	pushl  -0x80(%ebp)
f01137b1:	68 18 9b 13 f0       	push   $0xf0139b18
f01137b6:	68 f3 02 00 00       	push   $0x2f3
f01137bb:	68 de 8e 13 f0       	push   $0xf0138ede
f01137c0:	e8 4e cc fe ff       	call   f0100413 <_warn>
f01137c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01137cf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137d3:	74 04                	je     f01137d9 <test_copy_paste_chunk+0xb0a>
f01137d5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137d9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01137e0:	83 ec 08             	sub    $0x8,%esp
f01137e3:	6a 01                	push   $0x1
f01137e5:	6a 07                	push   $0x7
f01137e7:	6a 07                	push   $0x7
f01137e9:	6a 07                	push   $0x7
f01137eb:	6a 07                	push   $0x7
f01137ed:	6a 01                	push   $0x1
f01137ef:	68 00 20 00 00       	push   $0x2000
f01137f4:	68 00 00 20 00       	push   $0x200000
f01137f9:	68 00 00 40 00       	push   $0x400000
f01137fe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113801:	e8 c5 30 00 00       	call   f01168cb <CCP>
f0113806:	83 c4 30             	add    $0x30,%esp
f0113809:	83 f8 01             	cmp    $0x1,%eax
f011380c:	74 21                	je     f011382f <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011380e:	83 ec 04             	sub    $0x4,%esp
f0113811:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0113816:	68 fb 02 00 00       	push   $0x2fb
f011381b:	68 de 8e 13 f0       	push   $0xf0138ede
f0113820:	e8 ee cb fe ff       	call   f0100413 <_warn>
f0113825:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113828:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011382f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113833:	74 04                	je     f0113839 <test_copy_paste_chunk+0xb6a>
f0113835:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113839:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113840:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113843:	8a 00                	mov    (%eax),%al
f0113845:	3c 61                	cmp    $0x61,%al
f0113847:	75 69                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f0113849:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011384c:	8a 00                	mov    (%eax),%al
f011384e:	3c 61                	cmp    $0x61,%al
f0113850:	75 60                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f0113852:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113855:	8a 00                	mov    (%eax),%al
f0113857:	3c 79                	cmp    $0x79,%al
f0113859:	75 57                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f011385b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011385e:	8a 00                	mov    (%eax),%al
f0113860:	3c 62                	cmp    $0x62,%al
f0113862:	75 4e                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f0113864:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113867:	8a 00                	mov    (%eax),%al
f0113869:	3c 7a                	cmp    $0x7a,%al
f011386b:	75 45                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f011386d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113870:	8a 00                	mov    (%eax),%al
f0113872:	3c 7a                	cmp    $0x7a,%al
f0113874:	75 3c                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113876:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113879:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011387b:	3c 64                	cmp    $0x64,%al
f011387d:	75 33                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011387f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113882:	8a 00                	mov    (%eax),%al
f0113884:	3c 64                	cmp    $0x64,%al
f0113886:	75 2a                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f0113888:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011388b:	8a 00                	mov    (%eax),%al
f011388d:	3c 65                	cmp    $0x65,%al
f011388f:	75 21                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f0113891:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113894:	8a 00                	mov    (%eax),%al
f0113896:	3c 78                	cmp    $0x78,%al
f0113898:	75 18                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f011389a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011389d:	8a 00                	mov    (%eax),%al
f011389f:	3c 66                	cmp    $0x66,%al
f01138a1:	75 0f                	jne    f01138b2 <test_copy_paste_chunk+0xbe3>
f01138a3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01138a6:	8a 10                	mov    (%eax),%dl
f01138a8:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01138ae:	38 c2                	cmp    %al,%dl
f01138b0:	74 21                	je     f01138d3 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01138b2:	83 ec 04             	sub    $0x4,%esp
f01138b5:	68 6c 9a 13 f0       	push   $0xf0139a6c
f01138ba:	68 04 03 00 00       	push   $0x304
f01138bf:	68 de 8e 13 f0       	push   $0xf0138ede
f01138c4:	e8 4a cb fe ff       	call   f0100413 <_warn>
f01138c9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138cc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01138d3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138d7:	74 04                	je     f01138dd <test_copy_paste_chunk+0xc0e>
f01138d9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01138dd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01138e4:	83 ec 0c             	sub    $0xc,%esp
f01138e7:	68 03 9c 13 f0       	push   $0xf0139c03
f01138ec:	e8 1d d4 fe ff       	call   f0100d0e <cprintf>
f01138f1:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01138f4:	83 ec 0c             	sub    $0xc,%esp
f01138f7:	68 14 9c 13 f0       	push   $0xf0139c14
f01138fc:	e8 0d d4 fe ff       	call   f0100d0e <cprintf>
f0113901:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113904:	83 ec 04             	sub    $0x4,%esp
f0113907:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011390d:	50                   	push   %eax
f011390e:	68 48 9c 13 f0       	push   $0xf0139c48
f0113913:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113919:	50                   	push   %eax
f011391a:	e8 6f e6 01 00       	call   f0131f8e <strcconcat>
f011391f:	83 c4 10             	add    $0x10,%esp
f0113922:	83 ec 0c             	sub    $0xc,%esp
f0113925:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011392b:	50                   	push   %eax
f011392c:	e8 3f d4 fe ff       	call   f0100d70 <execute_command>
f0113931:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113934:	83 ec 04             	sub    $0x4,%esp
f0113937:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011393d:	50                   	push   %eax
f011393e:	68 52 9c 13 f0       	push   $0xf0139c52
f0113943:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113949:	50                   	push   %eax
f011394a:	e8 3f e6 01 00       	call   f0131f8e <strcconcat>
f011394f:	83 c4 10             	add    $0x10,%esp
f0113952:	83 ec 0c             	sub    $0xc,%esp
f0113955:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011395b:	50                   	push   %eax
f011395c:	e8 0f d4 fe ff       	call   f0100d70 <execute_command>
f0113961:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113964:	83 ec 04             	sub    $0x4,%esp
f0113967:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011396d:	50                   	push   %eax
f011396e:	68 5c 9c 13 f0       	push   $0xf0139c5c
f0113973:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113979:	50                   	push   %eax
f011397a:	e8 0f e6 01 00       	call   f0131f8e <strcconcat>
f011397f:	83 c4 10             	add    $0x10,%esp
f0113982:	83 ec 0c             	sub    $0xc,%esp
f0113985:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011398b:	50                   	push   %eax
f011398c:	e8 df d3 fe ff       	call   f0100d70 <execute_command>
f0113991:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113994:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011399a:	bb f5 a3 13 f0       	mov    $0xf013a3f5,%ebx
f011399f:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139a4:	89 c7                	mov    %eax,%edi
f01139a6:	89 de                	mov    %ebx,%esi
f01139a8:	89 d1                	mov    %edx,%ecx
f01139aa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139ac:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01139b2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01139b7:	b0 00                	mov    $0x0,%al
f01139b9:	89 d7                	mov    %edx,%edi
f01139bb:	f3 aa                	rep stos %al,%es:(%edi)
f01139bd:	83 ec 0c             	sub    $0xc,%esp
f01139c0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01139c6:	50                   	push   %eax
f01139c7:	e8 a4 d3 fe ff       	call   f0100d70 <execute_command>
f01139cc:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01139cf:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01139d5:	bb 59 a4 13 f0       	mov    $0xf013a459,%ebx
f01139da:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139df:	89 c7                	mov    %eax,%edi
f01139e1:	89 de                	mov    %ebx,%esi
f01139e3:	89 d1                	mov    %edx,%ecx
f01139e5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139e7:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01139ed:	b9 55 00 00 00       	mov    $0x55,%ecx
f01139f2:	b0 00                	mov    $0x0,%al
f01139f4:	89 d7                	mov    %edx,%edi
f01139f6:	f3 aa                	rep stos %al,%es:(%edi)
f01139f8:	83 ec 0c             	sub    $0xc,%esp
f01139fb:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a01:	50                   	push   %eax
f0113a02:	e8 69 d3 fe ff       	call   f0100d70 <execute_command>
f0113a07:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113a0a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a10:	bb bd a4 13 f0       	mov    $0xf013a4bd,%ebx
f0113a15:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a1a:	89 c7                	mov    %eax,%edi
f0113a1c:	89 de                	mov    %ebx,%esi
f0113a1e:	89 d1                	mov    %edx,%ecx
f0113a20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a22:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113a28:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a2d:	b0 00                	mov    $0x0,%al
f0113a2f:	89 d7                	mov    %edx,%edi
f0113a31:	f3 aa                	rep stos %al,%es:(%edi)
f0113a33:	83 ec 0c             	sub    $0xc,%esp
f0113a36:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a3c:	50                   	push   %eax
f0113a3d:	e8 2e d3 fe ff       	call   f0100d70 <execute_command>
f0113a42:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a45:	e8 23 97 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113a4a:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113a4d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a50:	89 d0                	mov    %edx,%eax
f0113a52:	01 c0                	add    %eax,%eax
f0113a54:	01 d0                	add    %edx,%eax
f0113a56:	c1 e0 02             	shl    $0x2,%eax
f0113a59:	50                   	push   %eax
f0113a5a:	68 00 00 90 00       	push   $0x900000
f0113a5f:	68 00 00 80 00       	push   $0x800000
f0113a64:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113a67:	e8 44 50 ff ff       	call   f0108ab0 <copy_paste_chunk>
f0113a6c:	83 c4 10             	add    $0x10,%esp
f0113a6f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113a75:	e8 f3 96 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113a7a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113a7d:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113a84:	75 0b                	jne    f0113a91 <test_copy_paste_chunk+0xdc2>
f0113a86:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113a89:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113a8c:	83 f8 03             	cmp    $0x3,%eax
f0113a8f:	74 2e                	je     f0113abf <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113a91:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113a94:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113a97:	83 ec 0c             	sub    $0xc,%esp
f0113a9a:	50                   	push   %eax
f0113a9b:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113aa1:	68 18 9b 13 f0       	push   $0xf0139b18
f0113aa6:	68 22 03 00 00       	push   $0x322
f0113aab:	68 de 8e 13 f0       	push   $0xf0138ede
f0113ab0:	e8 5e c9 fe ff       	call   f0100413 <_warn>
f0113ab5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ab8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113abf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ac3:	74 04                	je     f0113ac9 <test_copy_paste_chunk+0xdfa>
f0113ac5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ac9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113ad0:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113ad7:	83 ec 08             	sub    $0x8,%esp
f0113ada:	6a 01                	push   $0x1
f0113adc:	6a 07                	push   $0x7
f0113ade:	6a 07                	push   $0x7
f0113ae0:	6a 07                	push   $0x7
f0113ae2:	6a 07                	push   $0x7
f0113ae4:	6a 01                	push   $0x1
f0113ae6:	68 00 30 00 00       	push   $0x3000
f0113aeb:	68 00 00 90 00       	push   $0x900000
f0113af0:	68 00 00 80 00       	push   $0x800000
f0113af5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113af8:	e8 ce 2d 00 00       	call   f01168cb <CCP>
f0113afd:	83 c4 30             	add    $0x30,%esp
f0113b00:	83 f8 01             	cmp    $0x1,%eax
f0113b03:	74 28                	je     f0113b2d <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113b05:	83 ec 04             	sub    $0x4,%esp
f0113b08:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0113b0d:	68 2b 03 00 00       	push   $0x32b
f0113b12:	68 de 8e 13 f0       	push   $0xf0138ede
f0113b17:	e8 f7 c8 fe ff       	call   f0100413 <_warn>
f0113b1c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b1f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113b26:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113b2d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b31:	74 04                	je     f0113b37 <test_copy_paste_chunk+0xe68>
f0113b33:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b37:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113b3e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113b42:	0f 84 9e 00 00 00    	je     f0113be6 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113b48:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113b4f:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113b56:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113b5d:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113b64:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113b6b:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113b72:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b75:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113b78:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113b7b:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113b7e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b81:	8a 00                	mov    (%eax),%al
f0113b83:	3c 61                	cmp    $0x61,%al
f0113b85:	75 2d                	jne    f0113bb4 <test_copy_paste_chunk+0xee5>
f0113b87:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b8a:	8a 00                	mov    (%eax),%al
f0113b8c:	3c 61                	cmp    $0x61,%al
f0113b8e:	75 24                	jne    f0113bb4 <test_copy_paste_chunk+0xee5>
f0113b90:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b93:	8a 00                	mov    (%eax),%al
f0113b95:	3c 79                	cmp    $0x79,%al
f0113b97:	75 1b                	jne    f0113bb4 <test_copy_paste_chunk+0xee5>
f0113b99:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113b9c:	8a 00                	mov    (%eax),%al
f0113b9e:	3c 62                	cmp    $0x62,%al
f0113ba0:	75 12                	jne    f0113bb4 <test_copy_paste_chunk+0xee5>
f0113ba2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113ba5:	8a 00                	mov    (%eax),%al
f0113ba7:	3c 63                	cmp    $0x63,%al
f0113ba9:	75 09                	jne    f0113bb4 <test_copy_paste_chunk+0xee5>
f0113bab:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113bae:	8a 00                	mov    (%eax),%al
f0113bb0:	3c 7a                	cmp    $0x7a,%al
f0113bb2:	74 21                	je     f0113bd5 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113bb4:	83 ec 04             	sub    $0x4,%esp
f0113bb7:	68 6c 9a 13 f0       	push   $0xf0139a6c
f0113bbc:	68 3d 03 00 00       	push   $0x33d
f0113bc1:	68 de 8e 13 f0       	push   $0xf0138ede
f0113bc6:	e8 48 c8 fe ff       	call   f0100413 <_warn>
f0113bcb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113bce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113bd5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113bd9:	74 04                	je     f0113bdf <test_copy_paste_chunk+0xf10>
f0113bdb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113bdf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113be6:	e8 82 95 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113beb:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113bee:	6a 00                	push   $0x0
f0113bf0:	6a 02                	push   $0x2
f0113bf2:	68 00 10 90 00       	push   $0x901000
f0113bf7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113bfa:	e8 59 2b 00 00       	call   f0116758 <SB>
f0113bff:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113c02:	6a 00                	push   $0x0
f0113c04:	6a 02                	push   $0x2
f0113c06:	68 00 20 90 00       	push   $0x902000
f0113c0b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c0e:	e8 45 2b 00 00       	call   f0116758 <SB>
f0113c13:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113c16:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c19:	c1 e0 03             	shl    $0x3,%eax
f0113c1c:	50                   	push   %eax
f0113c1d:	68 00 f0 bf 00       	push   $0xbff000
f0113c22:	68 00 10 90 00       	push   $0x901000
f0113c27:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c2a:	e8 81 4e ff ff       	call   f0108ab0 <copy_paste_chunk>
f0113c2f:	83 c4 10             	add    $0x10,%esp
f0113c32:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c38:	e8 30 95 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113c3d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113c40:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113c47:	75 0b                	jne    f0113c54 <test_copy_paste_chunk+0xf85>
f0113c49:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113c4c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113c4f:	83 f8 03             	cmp    $0x3,%eax
f0113c52:	74 2e                	je     f0113c82 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113c54:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113c57:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113c5a:	83 ec 0c             	sub    $0xc,%esp
f0113c5d:	50                   	push   %eax
f0113c5e:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113c64:	68 18 9b 13 f0       	push   $0xf0139b18
f0113c69:	68 4d 03 00 00       	push   $0x34d
f0113c6e:	68 de 8e 13 f0       	push   $0xf0138ede
f0113c73:	e8 9b c7 fe ff       	call   f0100413 <_warn>
f0113c78:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c7b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113c82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c86:	74 04                	je     f0113c8c <test_copy_paste_chunk+0xfbd>
f0113c88:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c8c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113c93:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113c9a:	83 ec 08             	sub    $0x8,%esp
f0113c9d:	6a 01                	push   $0x1
f0113c9f:	6a 07                	push   $0x7
f0113ca1:	6a 03                	push   $0x3
f0113ca3:	6a 07                	push   $0x7
f0113ca5:	6a 03                	push   $0x3
f0113ca7:	6a 01                	push   $0x1
f0113ca9:	68 00 20 00 00       	push   $0x2000
f0113cae:	68 00 f0 bf 00       	push   $0xbff000
f0113cb3:	68 00 10 90 00       	push   $0x901000
f0113cb8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cbb:	e8 0b 2c 00 00       	call   f01168cb <CCP>
f0113cc0:	83 c4 30             	add    $0x30,%esp
f0113cc3:	83 f8 01             	cmp    $0x1,%eax
f0113cc6:	74 28                	je     f0113cf0 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113cc8:	83 ec 04             	sub    $0x4,%esp
f0113ccb:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0113cd0:	68 56 03 00 00       	push   $0x356
f0113cd5:	68 de 8e 13 f0       	push   $0xf0138ede
f0113cda:	e8 34 c7 fe ff       	call   f0100413 <_warn>
f0113cdf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ce2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113ce9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113cf0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113cf4:	74 04                	je     f0113cfa <test_copy_paste_chunk+0x102b>
f0113cf6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113cfa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113d01:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113d05:	74 72                	je     f0113d79 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113d07:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113d0e:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113d15:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113d1c:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113d23:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d26:	8a 00                	mov    (%eax),%al
f0113d28:	3c 62                	cmp    $0x62,%al
f0113d2a:	75 1b                	jne    f0113d47 <test_copy_paste_chunk+0x1078>
f0113d2c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d2f:	8a 00                	mov    (%eax),%al
f0113d31:	3c 62                	cmp    $0x62,%al
f0113d33:	75 12                	jne    f0113d47 <test_copy_paste_chunk+0x1078>
f0113d35:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d38:	8a 00                	mov    (%eax),%al
f0113d3a:	3c 7a                	cmp    $0x7a,%al
f0113d3c:	75 09                	jne    f0113d47 <test_copy_paste_chunk+0x1078>
f0113d3e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113d41:	8a 00                	mov    (%eax),%al
f0113d43:	3c 7a                	cmp    $0x7a,%al
f0113d45:	74 21                	je     f0113d68 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113d47:	83 ec 04             	sub    $0x4,%esp
f0113d4a:	68 6c 9a 13 f0       	push   $0xf0139a6c
f0113d4f:	68 62 03 00 00       	push   $0x362
f0113d54:	68 de 8e 13 f0       	push   $0xf0138ede
f0113d59:	e8 b5 c6 fe ff       	call   f0100413 <_warn>
f0113d5e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113d61:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113d68:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d6c:	74 04                	je     f0113d72 <test_copy_paste_chunk+0x10a3>
f0113d6e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113d72:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113d79:	83 ec 0c             	sub    $0xc,%esp
f0113d7c:	68 66 9c 13 f0       	push   $0xf0139c66
f0113d81:	e8 88 cf fe ff       	call   f0100d0e <cprintf>
f0113d86:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113d89:	83 ec 08             	sub    $0x8,%esp
f0113d8c:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113d8f:	68 78 9c 13 f0       	push   $0xf0139c78
f0113d94:	e8 75 cf fe ff       	call   f0100d0e <cprintf>
f0113d99:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113d9c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113da0:	75 10                	jne    f0113db2 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113da2:	83 ec 0c             	sub    $0xc,%esp
f0113da5:	68 ac 9c 13 f0       	push   $0xf0139cac
f0113daa:	e8 5f cf fe ff       	call   f0100d0e <cprintf>
f0113daf:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113db2:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f0113db7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113dba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113dbd:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113dc0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113dc5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113dc8:	5b                   	pop    %ebx
f0113dc9:	5e                   	pop    %esi
f0113dca:	5f                   	pop    %edi
f0113dcb:	5d                   	pop    %ebp
f0113dcc:	c3                   	ret    

f0113dcd <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113dcd:	55                   	push   %ebp
f0113dce:	89 e5                	mov    %esp,%ebp
f0113dd0:	57                   	push   %edi
f0113dd1:	56                   	push   %esi
f0113dd2:	53                   	push   %ebx
f0113dd3:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113dd9:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113ddf:	bb 78 99 13 f0       	mov    $0xf0139978,%ebx
f0113de4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113de9:	89 c7                	mov    %eax,%edi
f0113deb:	89 de                	mov    %ebx,%esi
f0113ded:	89 d1                	mov    %edx,%ecx
f0113def:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113df1:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113df7:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113dfc:	b0 00                	mov    $0x0,%al
f0113dfe:	89 d7                	mov    %edx,%edi
f0113e00:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113e02:	6a 00                	push   $0x0
f0113e04:	6a 0a                	push   $0xa
f0113e06:	6a 14                	push   $0x14
f0113e08:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e0e:	50                   	push   %eax
f0113e0f:	e8 20 56 ff ff       	call   f0109434 <env_create>
f0113e14:	83 c4 10             	add    $0x10,%esp
f0113e17:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113e1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113e20:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113e23:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e26:	8b 40 60             	mov    0x60(%eax),%eax
f0113e29:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113e2c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113e2f:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113e32:	83 ec 0c             	sub    $0xc,%esp
f0113e35:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e38:	e8 5a 2a 00 00       	call   f0116897 <ClearUserSpace>
f0113e3d:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113e40:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113e47:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113e4e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113e55:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113e59:	83 ec 0c             	sub    $0xc,%esp
f0113e5c:	68 24 a5 13 f0       	push   $0xf013a524
f0113e61:	e8 a8 ce fe ff       	call   f0100d0e <cprintf>
f0113e66:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113e69:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113e70:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113e77:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e7a:	8a 00                	mov    (%eax),%al
f0113e7c:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113e82:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e85:	8a 00                	mov    (%eax),%al
f0113e87:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e8d:	e8 db 92 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113e92:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113e95:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e98:	89 d0                	mov    %edx,%eax
f0113e9a:	01 c0                	add    %eax,%eax
f0113e9c:	01 d0                	add    %edx,%eax
f0113e9e:	01 c0                	add    %eax,%eax
f0113ea0:	83 ec 0c             	sub    $0xc,%esp
f0113ea3:	6a 02                	push   $0x2
f0113ea5:	50                   	push   %eax
f0113ea6:	68 00 40 10 f0       	push   $0xf0104000
f0113eab:	68 00 00 10 f0       	push   $0xf0100000
f0113eb0:	ff 75 cc             	pushl  -0x34(%ebp)
f0113eb3:	e8 2b 4e ff ff       	call   f0108ce3 <share_chunk>
f0113eb8:	83 c4 20             	add    $0x20,%esp
f0113ebb:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ebe:	e8 aa 92 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113ec3:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113ec6:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113eca:	75 08                	jne    f0113ed4 <test_share_chunk+0x107>
f0113ecc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ecf:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113ed2:	74 28                	je     f0113efc <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113ed4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ed7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113eda:	83 ec 0c             	sub    $0xc,%esp
f0113edd:	50                   	push   %eax
f0113ede:	ff 75 b0             	pushl  -0x50(%ebp)
f0113ee1:	68 50 a5 13 f0       	push   $0xf013a550
f0113ee6:	68 9e 03 00 00       	push   $0x39e
f0113eeb:	68 de 8e 13 f0       	push   $0xf0138ede
f0113ef0:	e8 1e c5 fe ff       	call   f0100413 <_warn>
f0113ef5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ef8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113efc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f00:	74 04                	je     f0113f06 <test_share_chunk+0x139>
f0113f02:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113f06:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113f0a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f0d:	c1 e0 03             	shl    $0x3,%eax
f0113f10:	83 ec 08             	sub    $0x8,%esp
f0113f13:	68 fd 00 00 00       	push   $0xfd
f0113f18:	6a 07                	push   $0x7
f0113f1a:	6a 03                	push   $0x3
f0113f1c:	6a 07                	push   $0x7
f0113f1e:	6a 03                	push   $0x3
f0113f20:	6a 01                	push   $0x1
f0113f22:	50                   	push   %eax
f0113f23:	68 00 40 10 f0       	push   $0xf0104000
f0113f28:	68 00 00 10 f0       	push   $0xf0100000
f0113f2d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f30:	e8 96 29 00 00       	call   f01168cb <CCP>
f0113f35:	83 c4 30             	add    $0x30,%esp
f0113f38:	85 c0                	test   %eax,%eax
f0113f3a:	75 1e                	jne    f0113f5a <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f3c:	83 ec 04             	sub    $0x4,%esp
f0113f3f:	68 ac a5 13 f0       	push   $0xf013a5ac
f0113f44:	68 a6 03 00 00       	push   $0x3a6
f0113f49:	68 de 8e 13 f0       	push   $0xf0138ede
f0113f4e:	e8 c0 c4 fe ff       	call   f0100413 <_warn>
f0113f53:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f56:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f5a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f5e:	74 04                	je     f0113f64 <test_share_chunk+0x197>
f0113f60:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113f64:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f67:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113f6a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f6d:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113f70:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f73:	8a 00                	mov    (%eax),%al
f0113f75:	3c 41                	cmp    $0x41,%al
f0113f77:	75 09                	jne    f0113f82 <test_share_chunk+0x1b5>
f0113f79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f7c:	8a 00                	mov    (%eax),%al
f0113f7e:	3c 42                	cmp    $0x42,%al
f0113f80:	74 1e                	je     f0113fa0 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f82:	83 ec 04             	sub    $0x4,%esp
f0113f85:	68 f4 a5 13 f0       	push   $0xf013a5f4
f0113f8a:	68 b0 03 00 00       	push   $0x3b0
f0113f8f:	68 de 8e 13 f0       	push   $0xf0138ede
f0113f94:	e8 7a c4 fe ff       	call   f0100413 <_warn>
f0113f99:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f9c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fa0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fa4:	74 04                	je     f0113faa <test_share_chunk+0x1dd>
f0113fa6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113faa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113fae:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113fb4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fb7:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113fb9:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113fbf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fc2:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113fc4:	83 ec 0c             	sub    $0xc,%esp
f0113fc7:	68 29 a6 13 f0       	push   $0xf013a629
f0113fcc:	e8 3d cd fe ff       	call   f0100d0e <cprintf>
f0113fd1:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113fd4:	83 ec 0c             	sub    $0xc,%esp
f0113fd7:	68 38 a6 13 f0       	push   $0xf013a638
f0113fdc:	e8 2d cd fe ff       	call   f0100d0e <cprintf>
f0113fe1:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113fe4:	e8 84 91 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0113fe9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113fec:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113fef:	c1 e0 05             	shl    $0x5,%eax
f0113ff2:	83 ec 0c             	sub    $0xc,%esp
f0113ff5:	68 02 0e 00 00       	push   $0xe02
f0113ffa:	50                   	push   %eax
f0113ffb:	68 00 00 00 40       	push   $0x40000000
f0114000:	68 00 00 00 f0       	push   $0xf0000000
f0114005:	ff 75 cc             	pushl  -0x34(%ebp)
f0114008:	e8 d6 4c ff ff       	call   f0108ce3 <share_chunk>
f011400d:	83 c4 20             	add    $0x20,%esp
f0114010:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114013:	e8 55 91 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114018:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f011401b:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011401f:	75 1f                	jne    f0114040 <test_share_chunk+0x273>
f0114021:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114024:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114027:	89 c1                	mov    %eax,%ecx
f0114029:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011402c:	c1 e0 05             	shl    $0x5,%eax
f011402f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114032:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114039:	99                   	cltd   
f011403a:	f7 fb                	idiv   %ebx
f011403c:	39 c1                	cmp    %eax,%ecx
f011403e:	74 28                	je     f0114068 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114040:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114043:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114046:	83 ec 0c             	sub    $0xc,%esp
f0114049:	50                   	push   %eax
f011404a:	ff 75 a8             	pushl  -0x58(%ebp)
f011404d:	68 74 a6 13 f0       	push   $0xf013a674
f0114052:	68 c8 03 00 00       	push   $0x3c8
f0114057:	68 de 8e 13 f0       	push   $0xf0138ede
f011405c:	e8 b2 c3 fe ff       	call   f0100413 <_warn>
f0114061:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114064:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114068:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011406c:	74 04                	je     f0114072 <test_share_chunk+0x2a5>
f011406e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114072:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114076:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011407d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114080:	c1 e0 05             	shl    $0x5,%eax
f0114083:	83 ec 08             	sub    $0x8,%esp
f0114086:	6a 02                	push   $0x2
f0114088:	6a 07                	push   $0x7
f011408a:	6a 03                	push   $0x3
f011408c:	68 07 0e 00 00       	push   $0xe07
f0114091:	68 03 0e 00 00       	push   $0xe03
f0114096:	6a ff                	push   $0xffffffff
f0114098:	50                   	push   %eax
f0114099:	68 00 00 00 40       	push   $0x40000000
f011409e:	68 00 00 00 f0       	push   $0xf0000000
f01140a3:	ff 75 cc             	pushl  -0x34(%ebp)
f01140a6:	e8 20 28 00 00       	call   f01168cb <CCP>
f01140ab:	83 c4 30             	add    $0x30,%esp
f01140ae:	85 c0                	test   %eax,%eax
f01140b0:	75 25                	jne    f01140d7 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01140b2:	83 ec 04             	sub    $0x4,%esp
f01140b5:	68 ac a5 13 f0       	push   $0xf013a5ac
f01140ba:	68 d1 03 00 00       	push   $0x3d1
f01140bf:	68 de 8e 13 f0       	push   $0xf0138ede
f01140c4:	e8 4a c3 fe ff       	call   f0100413 <_warn>
f01140c9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140cc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01140d0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01140d7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140da:	89 d0                	mov    %edx,%eax
f01140dc:	01 c0                	add    %eax,%eax
f01140de:	01 d0                	add    %edx,%eax
f01140e0:	c1 e0 02             	shl    $0x2,%eax
f01140e3:	83 ec 08             	sub    $0x8,%esp
f01140e6:	6a 02                	push   $0x2
f01140e8:	6a 07                	push   $0x7
f01140ea:	6a 03                	push   $0x3
f01140ec:	68 07 0e 00 00       	push   $0xe07
f01140f1:	68 03 0e 00 00       	push   $0xe03
f01140f6:	6a 02                	push   $0x2
f01140f8:	50                   	push   %eax
f01140f9:	68 00 00 00 40       	push   $0x40000000
f01140fe:	68 00 00 00 f0       	push   $0xf0000000
f0114103:	ff 75 cc             	pushl  -0x34(%ebp)
f0114106:	e8 c0 27 00 00       	call   f01168cb <CCP>
f011410b:	83 c4 30             	add    $0x30,%esp
f011410e:	85 c0                	test   %eax,%eax
f0114110:	75 1e                	jne    f0114130 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114112:	83 ec 04             	sub    $0x4,%esp
f0114115:	68 ac a5 13 f0       	push   $0xf013a5ac
f011411a:	68 d8 03 00 00       	push   $0x3d8
f011411f:	68 de 8e 13 f0       	push   $0xf0138ede
f0114124:	e8 ea c2 fe ff       	call   f0100413 <_warn>
f0114129:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011412c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114130:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114134:	74 04                	je     f011413a <test_share_chunk+0x36d>
f0114136:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011413a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f011413e:	b8 bc 08 86 f0       	mov    $0xf08608bc,%eax
f0114143:	05 00 00 00 10       	add    $0x10000000,%eax
f0114148:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011414b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011414e:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114153:	83 ec 08             	sub    $0x8,%esp
f0114156:	6a 02                	push   $0x2
f0114158:	6a 07                	push   $0x7
f011415a:	6a 03                	push   $0x3
f011415c:	68 07 0e 00 00       	push   $0xe07
f0114161:	68 03 0e 00 00       	push   $0xe03
f0114166:	6a 02                	push   $0x2
f0114168:	50                   	push   %eax
f0114169:	68 00 00 0a 40       	push   $0x400a0000
f011416e:	68 00 00 0a f0       	push   $0xf00a0000
f0114173:	ff 75 cc             	pushl  -0x34(%ebp)
f0114176:	e8 50 27 00 00       	call   f01168cb <CCP>
f011417b:	83 c4 30             	add    $0x30,%esp
f011417e:	85 c0                	test   %eax,%eax
f0114180:	75 1e                	jne    f01141a0 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114182:	83 ec 04             	sub    $0x4,%esp
f0114185:	68 ac a5 13 f0       	push   $0xf013a5ac
f011418a:	68 e2 03 00 00       	push   $0x3e2
f011418f:	68 de 8e 13 f0       	push   $0xf0138ede
f0114194:	e8 7a c2 fe ff       	call   f0100413 <_warn>
f0114199:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011419c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141a0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141a4:	74 04                	je     f01141aa <test_share_chunk+0x3dd>
f01141a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141aa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01141ae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01141b2:	0f 84 a4 00 00 00    	je     f011425c <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01141b8:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01141bf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141c2:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01141c5:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01141cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141cf:	8a 00                	mov    (%eax),%al
f01141d1:	3c 41                	cmp    $0x41,%al
f01141d3:	75 09                	jne    f01141de <test_share_chunk+0x411>
f01141d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01141d8:	8a 00                	mov    (%eax),%al
f01141da:	3c 41                	cmp    $0x41,%al
f01141dc:	74 1e                	je     f01141fc <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01141de:	83 ec 04             	sub    $0x4,%esp
f01141e1:	68 f4 a5 13 f0       	push   $0xf013a5f4
f01141e6:	68 ef 03 00 00       	push   $0x3ef
f01141eb:	68 de 8e 13 f0       	push   $0xf0138ede
f01141f0:	e8 1e c2 fe ff       	call   f0100413 <_warn>
f01141f5:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01141f8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01141fc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114200:	74 04                	je     f0114206 <test_share_chunk+0x439>
f0114202:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114206:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f011420a:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114211:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114214:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0114217:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f011421e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114221:	8a 00                	mov    (%eax),%al
f0114223:	3c 43                	cmp    $0x43,%al
f0114225:	75 09                	jne    f0114230 <test_share_chunk+0x463>
f0114227:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011422a:	8a 00                	mov    (%eax),%al
f011422c:	3c 43                	cmp    $0x43,%al
f011422e:	74 1e                	je     f011424e <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114230:	83 ec 04             	sub    $0x4,%esp
f0114233:	68 f4 a5 13 f0       	push   $0xf013a5f4
f0114238:	68 fa 03 00 00       	push   $0x3fa
f011423d:	68 de 8e 13 f0       	push   $0xf0138ede
f0114242:	e8 cc c1 fe ff       	call   f0100413 <_warn>
f0114247:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011424a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011424e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114252:	74 04                	je     f0114258 <test_share_chunk+0x48b>
f0114254:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114258:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011425c:	83 ec 0c             	sub    $0xc,%esp
f011425f:	68 03 9c 13 f0       	push   $0xf0139c03
f0114264:	e8 a5 ca fe ff       	call   f0100d0e <cprintf>
f0114269:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f011426c:	83 ec 0c             	sub    $0xc,%esp
f011426f:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0114274:	e8 95 ca fe ff       	call   f0100d0e <cprintf>
f0114279:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011427c:	e8 ec 8e ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114281:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114284:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114287:	89 d0                	mov    %edx,%eax
f0114289:	c1 e0 03             	shl    $0x3,%eax
f011428c:	01 d0                	add    %edx,%eax
f011428e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0114295:	01 d0                	add    %edx,%eax
f0114297:	c1 e0 03             	shl    $0x3,%eax
f011429a:	83 ec 0c             	sub    $0xc,%esp
f011429d:	6a 06                	push   $0x6
f011429f:	50                   	push   %eax
f01142a0:	6a 00                	push   $0x0
f01142a2:	68 00 00 00 40       	push   $0x40000000
f01142a7:	ff 75 cc             	pushl  -0x34(%ebp)
f01142aa:	e8 34 4a ff ff       	call   f0108ce3 <share_chunk>
f01142af:	83 c4 20             	add    $0x20,%esp
f01142b2:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01142b5:	e8 b3 8e ff ff       	call   f010d16d <sys_calculate_free_frames>
f01142ba:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01142bd:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01142c1:	75 0b                	jne    f01142ce <test_share_chunk+0x501>
f01142c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142c6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142c9:	83 f8 01             	cmp    $0x1,%eax
f01142cc:	74 28                	je     f01142f6 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01142ce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142d1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142d4:	83 ec 0c             	sub    $0xc,%esp
f01142d7:	50                   	push   %eax
f01142d8:	ff 75 a0             	pushl  -0x60(%ebp)
f01142db:	68 74 a6 13 f0       	push   $0xf013a674
f01142e0:	68 10 04 00 00       	push   $0x410
f01142e5:	68 de 8e 13 f0       	push   $0xf0138ede
f01142ea:	e8 24 c1 fe ff       	call   f0100413 <_warn>
f01142ef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142f2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142f6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142fa:	74 04                	je     f0114300 <test_share_chunk+0x533>
f01142fc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114300:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114304:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011430b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011430e:	05 00 80 02 00       	add    $0x28000,%eax
f0114313:	c1 e0 02             	shl    $0x2,%eax
f0114316:	83 ec 08             	sub    $0x8,%esp
f0114319:	6a 02                	push   $0x2
f011431b:	6a 07                	push   $0x7
f011431d:	6a 03                	push   $0x3
f011431f:	6a 07                	push   $0x7
f0114321:	6a 07                	push   $0x7
f0114323:	6a ff                	push   $0xffffffff
f0114325:	50                   	push   %eax
f0114326:	6a 00                	push   $0x0
f0114328:	68 00 00 00 40       	push   $0x40000000
f011432d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114330:	e8 96 25 00 00       	call   f01168cb <CCP>
f0114335:	83 c4 30             	add    $0x30,%esp
f0114338:	85 c0                	test   %eax,%eax
f011433a:	75 25                	jne    f0114361 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011433c:	83 ec 04             	sub    $0x4,%esp
f011433f:	68 ac a5 13 f0       	push   $0xf013a5ac
f0114344:	68 19 04 00 00       	push   $0x419
f0114349:	68 de 8e 13 f0       	push   $0xf0138ede
f011434e:	e8 c0 c0 fe ff       	call   f0100413 <_warn>
f0114353:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114356:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011435a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114361:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114364:	89 d0                	mov    %edx,%eax
f0114366:	01 c0                	add    %eax,%eax
f0114368:	01 d0                	add    %edx,%eax
f011436a:	c1 e0 02             	shl    $0x2,%eax
f011436d:	83 ec 08             	sub    $0x8,%esp
f0114370:	6a 02                	push   $0x2
f0114372:	6a 07                	push   $0x7
f0114374:	6a 03                	push   $0x3
f0114376:	6a 07                	push   $0x7
f0114378:	6a 07                	push   $0x7
f011437a:	6a 03                	push   $0x3
f011437c:	50                   	push   %eax
f011437d:	6a 00                	push   $0x0
f011437f:	68 00 00 00 40       	push   $0x40000000
f0114384:	ff 75 cc             	pushl  -0x34(%ebp)
f0114387:	e8 3f 25 00 00       	call   f01168cb <CCP>
f011438c:	83 c4 30             	add    $0x30,%esp
f011438f:	85 c0                	test   %eax,%eax
f0114391:	75 1e                	jne    f01143b1 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114393:	83 ec 04             	sub    $0x4,%esp
f0114396:	68 ac a5 13 f0       	push   $0xf013a5ac
f011439b:	68 20 04 00 00       	push   $0x420
f01143a0:	68 de 8e 13 f0       	push   $0xf0138ede
f01143a5:	e8 69 c0 fe ff       	call   f0100413 <_warn>
f01143aa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143b5:	74 04                	je     f01143bb <test_share_chunk+0x5ee>
f01143b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143bf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143c2:	89 d0                	mov    %edx,%eax
f01143c4:	01 c0                	add    %eax,%eax
f01143c6:	01 d0                	add    %edx,%eax
f01143c8:	c1 e0 02             	shl    $0x2,%eax
f01143cb:	f7 d8                	neg    %eax
f01143cd:	05 00 00 0a 00       	add    $0xa0000,%eax
f01143d2:	83 ec 08             	sub    $0x8,%esp
f01143d5:	6a 02                	push   $0x2
f01143d7:	6a 07                	push   $0x7
f01143d9:	6a 03                	push   $0x3
f01143db:	6a 07                	push   $0x7
f01143dd:	6a 07                	push   $0x7
f01143df:	6a 02                	push   $0x2
f01143e1:	50                   	push   %eax
f01143e2:	68 00 30 00 00       	push   $0x3000
f01143e7:	68 00 30 00 40       	push   $0x40003000
f01143ec:	ff 75 cc             	pushl  -0x34(%ebp)
f01143ef:	e8 d7 24 00 00       	call   f01168cb <CCP>
f01143f4:	83 c4 30             	add    $0x30,%esp
f01143f7:	85 c0                	test   %eax,%eax
f01143f9:	75 1e                	jne    f0114419 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143fb:	83 ec 04             	sub    $0x4,%esp
f01143fe:	68 ac a5 13 f0       	push   $0xf013a5ac
f0114403:	68 28 04 00 00       	push   $0x428
f0114408:	68 de 8e 13 f0       	push   $0xf0138ede
f011440d:	e8 01 c0 fe ff       	call   f0100413 <_warn>
f0114412:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114415:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114419:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011441d:	74 04                	je     f0114423 <test_share_chunk+0x656>
f011441f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114423:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114427:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011442a:	c1 e0 02             	shl    $0x2,%eax
f011442d:	83 ec 08             	sub    $0x8,%esp
f0114430:	6a 02                	push   $0x2
f0114432:	6a 07                	push   $0x7
f0114434:	6a 03                	push   $0x3
f0114436:	6a 07                	push   $0x7
f0114438:	6a 07                	push   $0x7
f011443a:	6a 03                	push   $0x3
f011443c:	50                   	push   %eax
f011443d:	68 00 00 0a 00       	push   $0xa0000
f0114442:	68 00 00 0a 40       	push   $0x400a0000
f0114447:	ff 75 cc             	pushl  -0x34(%ebp)
f011444a:	e8 7c 24 00 00       	call   f01168cb <CCP>
f011444f:	83 c4 30             	add    $0x30,%esp
f0114452:	85 c0                	test   %eax,%eax
f0114454:	75 1e                	jne    f0114474 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114456:	83 ec 04             	sub    $0x4,%esp
f0114459:	68 ac a5 13 f0       	push   $0xf013a5ac
f011445e:	68 30 04 00 00       	push   $0x430
f0114463:	68 de 8e 13 f0       	push   $0xf0138ede
f0114468:	e8 a6 bf fe ff       	call   f0100413 <_warn>
f011446d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114470:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114474:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114478:	74 04                	je     f011447e <test_share_chunk+0x6b1>
f011447a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011447e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114482:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114486:	0f 84 92 00 00 00    	je     f011451e <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f011448c:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114493:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011449a:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01144a1:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01144a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01144ab:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01144ae:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01144b5:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01144bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144bf:	8a 00                	mov    (%eax),%al
f01144c1:	3c 41                	cmp    $0x41,%al
f01144c3:	75 2d                	jne    f01144f2 <test_share_chunk+0x725>
f01144c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01144c8:	8a 00                	mov    (%eax),%al
f01144ca:	3c 41                	cmp    $0x41,%al
f01144cc:	75 24                	jne    f01144f2 <test_share_chunk+0x725>
f01144ce:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01144d1:	8a 00                	mov    (%eax),%al
f01144d3:	3c 41                	cmp    $0x41,%al
f01144d5:	75 1b                	jne    f01144f2 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01144d7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01144da:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01144dc:	3c 44                	cmp    $0x44,%al
f01144de:	75 12                	jne    f01144f2 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01144e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01144e3:	8a 00                	mov    (%eax),%al
f01144e5:	3c 44                	cmp    $0x44,%al
f01144e7:	75 09                	jne    f01144f2 <test_share_chunk+0x725>
f01144e9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01144ec:	8a 00                	mov    (%eax),%al
f01144ee:	3c 44                	cmp    $0x44,%al
f01144f0:	74 1e                	je     f0114510 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01144f2:	83 ec 04             	sub    $0x4,%esp
f01144f5:	68 f4 a5 13 f0       	push   $0xf013a5f4
f01144fa:	68 42 04 00 00       	push   $0x442
f01144ff:	68 de 8e 13 f0       	push   $0xf0138ede
f0114504:	e8 0a bf fe ff       	call   f0100413 <_warn>
f0114509:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011450c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114510:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114514:	74 04                	je     f011451a <test_share_chunk+0x74d>
f0114516:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011451a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f011451e:	83 ec 0c             	sub    $0xc,%esp
f0114521:	68 66 9c 13 f0       	push   $0xf0139c66
f0114526:	e8 e3 c7 fe ff       	call   f0100d0e <cprintf>
f011452b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f011452e:	83 ec 0c             	sub    $0xc,%esp
f0114531:	68 00 a7 13 f0       	push   $0xf013a700
f0114536:	e8 d3 c7 fe ff       	call   f0100d0e <cprintf>
f011453b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011453e:	e8 2a 8c ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114543:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114546:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114549:	89 d0                	mov    %edx,%eax
f011454b:	01 c0                	add    %eax,%eax
f011454d:	01 d0                	add    %edx,%eax
f011454f:	01 c0                	add    %eax,%eax
f0114551:	01 d0                	add    %edx,%eax
f0114553:	83 ec 0c             	sub    $0xc,%esp
f0114556:	6a 04                	push   $0x4
f0114558:	50                   	push   %eax
f0114559:	68 00 fc 3f 00       	push   $0x3ffc00
f011455e:	68 00 fc 09 00       	push   $0x9fc00
f0114563:	ff 75 cc             	pushl  -0x34(%ebp)
f0114566:	e8 78 47 ff ff       	call   f0108ce3 <share_chunk>
f011456b:	83 c4 20             	add    $0x20,%esp
f011456e:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114571:	e8 f7 8b ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114576:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114579:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011457d:	75 0b                	jne    f011458a <test_share_chunk+0x7bd>
f011457f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114582:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114585:	83 f8 01             	cmp    $0x1,%eax
f0114588:	74 28                	je     f01145b2 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011458a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011458d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114590:	83 ec 0c             	sub    $0xc,%esp
f0114593:	50                   	push   %eax
f0114594:	ff 75 8c             	pushl  -0x74(%ebp)
f0114597:	68 74 a6 13 f0       	push   $0xf013a674
f011459c:	68 58 04 00 00       	push   $0x458
f01145a1:	68 de 8e 13 f0       	push   $0xf0138ede
f01145a6:	e8 68 be fe ff       	call   f0100413 <_warn>
f01145ab:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145ae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01145b2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145b6:	74 04                	je     f01145bc <test_share_chunk+0x7ef>
f01145b8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145bc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01145c0:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01145c7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145ca:	89 d0                	mov    %edx,%eax
f01145cc:	01 c0                	add    %eax,%eax
f01145ce:	01 d0                	add    %edx,%eax
f01145d0:	c1 e0 02             	shl    $0x2,%eax
f01145d3:	83 ec 08             	sub    $0x8,%esp
f01145d6:	6a 02                	push   $0x2
f01145d8:	6a 07                	push   $0x7
f01145da:	6a 07                	push   $0x7
f01145dc:	6a 07                	push   $0x7
f01145de:	6a 05                	push   $0x5
f01145e0:	6a ff                	push   $0xffffffff
f01145e2:	50                   	push   %eax
f01145e3:	68 00 f0 3f 00       	push   $0x3ff000
f01145e8:	68 00 f0 09 00       	push   $0x9f000
f01145ed:	ff 75 cc             	pushl  -0x34(%ebp)
f01145f0:	e8 d6 22 00 00       	call   f01168cb <CCP>
f01145f5:	83 c4 30             	add    $0x30,%esp
f01145f8:	85 c0                	test   %eax,%eax
f01145fa:	75 25                	jne    f0114621 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01145fc:	83 ec 04             	sub    $0x4,%esp
f01145ff:	68 ac a5 13 f0       	push   $0xf013a5ac
f0114604:	68 61 04 00 00       	push   $0x461
f0114609:	68 de 8e 13 f0       	push   $0xf0138ede
f011460e:	e8 00 be fe ff       	call   f0100413 <_warn>
f0114613:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114616:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011461a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114621:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114625:	74 04                	je     f011462b <test_share_chunk+0x85e>
f0114627:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011462b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011462f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114632:	c1 e0 02             	shl    $0x2,%eax
f0114635:	83 ec 08             	sub    $0x8,%esp
f0114638:	6a 02                	push   $0x2
f011463a:	6a 07                	push   $0x7
f011463c:	6a 07                	push   $0x7
f011463e:	6a 07                	push   $0x7
f0114640:	6a 05                	push   $0x5
f0114642:	6a 03                	push   $0x3
f0114644:	50                   	push   %eax
f0114645:	68 00 f0 3f 00       	push   $0x3ff000
f011464a:	68 00 f0 09 00       	push   $0x9f000
f011464f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114652:	e8 74 22 00 00       	call   f01168cb <CCP>
f0114657:	83 c4 30             	add    $0x30,%esp
f011465a:	85 c0                	test   %eax,%eax
f011465c:	75 1e                	jne    f011467c <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011465e:	83 ec 04             	sub    $0x4,%esp
f0114661:	68 ac a5 13 f0       	push   $0xf013a5ac
f0114666:	68 6a 04 00 00       	push   $0x46a
f011466b:	68 de 8e 13 f0       	push   $0xf0138ede
f0114670:	e8 9e bd fe ff       	call   f0100413 <_warn>
f0114675:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114678:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011467c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114680:	74 04                	je     f0114686 <test_share_chunk+0x8b9>
f0114682:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114686:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011468a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011468d:	c1 e0 03             	shl    $0x3,%eax
f0114690:	83 ec 08             	sub    $0x8,%esp
f0114693:	6a 02                	push   $0x2
f0114695:	6a 07                	push   $0x7
f0114697:	6a 07                	push   $0x7
f0114699:	6a 07                	push   $0x7
f011469b:	6a 05                	push   $0x5
f011469d:	6a 04                	push   $0x4
f011469f:	50                   	push   %eax
f01146a0:	68 00 00 40 00       	push   $0x400000
f01146a5:	68 00 00 0a 00       	push   $0xa0000
f01146aa:	ff 75 cc             	pushl  -0x34(%ebp)
f01146ad:	e8 19 22 00 00       	call   f01168cb <CCP>
f01146b2:	83 c4 30             	add    $0x30,%esp
f01146b5:	85 c0                	test   %eax,%eax
f01146b7:	75 1e                	jne    f01146d7 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146b9:	83 ec 04             	sub    $0x4,%esp
f01146bc:	68 ac a5 13 f0       	push   $0xf013a5ac
f01146c1:	68 72 04 00 00       	push   $0x472
f01146c6:	68 de 8e 13 f0       	push   $0xf0138ede
f01146cb:	e8 43 bd fe ff       	call   f0100413 <_warn>
f01146d0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146d3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146d7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146db:	74 04                	je     f01146e1 <test_share_chunk+0x914>
f01146dd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146e1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01146e5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01146e9:	0f 84 b2 00 00 00    	je     f01147a1 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01146ef:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01146f6:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01146fd:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0114704:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f011470b:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114712:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0114719:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114720:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114727:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011472a:	8a 00                	mov    (%eax),%al
f011472c:	3c 44                	cmp    $0x44,%al
f011472e:	75 45                	jne    f0114775 <test_share_chunk+0x9a8>
f0114730:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114733:	8a 00                	mov    (%eax),%al
f0114735:	3c 44                	cmp    $0x44,%al
f0114737:	75 3c                	jne    f0114775 <test_share_chunk+0x9a8>
f0114739:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011473c:	8a 00                	mov    (%eax),%al
f011473e:	3c 44                	cmp    $0x44,%al
f0114740:	75 33                	jne    f0114775 <test_share_chunk+0x9a8>
f0114742:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114745:	8a 00                	mov    (%eax),%al
f0114747:	3c 44                	cmp    $0x44,%al
f0114749:	75 2a                	jne    f0114775 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011474b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011474e:	8a 10                	mov    (%eax),%dl
f0114750:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114753:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114755:	38 c2                	cmp    %al,%dl
f0114757:	75 1c                	jne    f0114775 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114759:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011475c:	8a 10                	mov    (%eax),%dl
f011475e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114761:	8a 00                	mov    (%eax),%al
f0114763:	38 c2                	cmp    %al,%dl
f0114765:	75 0e                	jne    f0114775 <test_share_chunk+0x9a8>
f0114767:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011476a:	8a 10                	mov    (%eax),%dl
f011476c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011476f:	8a 00                	mov    (%eax),%al
f0114771:	38 c2                	cmp    %al,%dl
f0114773:	74 1e                	je     f0114793 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114775:	83 ec 04             	sub    $0x4,%esp
f0114778:	68 f4 a5 13 f0       	push   $0xf013a5f4
f011477d:	68 87 04 00 00       	push   $0x487
f0114782:	68 de 8e 13 f0       	push   $0xf0138ede
f0114787:	e8 87 bc fe ff       	call   f0100413 <_warn>
f011478c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011478f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114793:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114797:	74 04                	je     f011479d <test_share_chunk+0x9d0>
f0114799:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011479d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01147a1:	83 ec 0c             	sub    $0xc,%esp
f01147a4:	68 38 a7 13 f0       	push   $0xf013a738
f01147a9:	e8 60 c5 fe ff       	call   f0100d0e <cprintf>
f01147ae:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01147b1:	83 ec 08             	sub    $0x8,%esp
f01147b4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01147b7:	68 48 a7 13 f0       	push   $0xf013a748
f01147bc:	e8 4d c5 fe ff       	call   f0100d0e <cprintf>
f01147c1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01147c4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01147c8:	75 10                	jne    f01147da <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01147ca:	83 ec 0c             	sub    $0xc,%esp
f01147cd:	68 78 a7 13 f0       	push   $0xf013a778
f01147d2:	e8 37 c5 fe ff       	call   f0100d0e <cprintf>
f01147d7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01147da:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f01147df:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01147e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147e5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01147e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01147ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01147f0:	5b                   	pop    %ebx
f01147f1:	5e                   	pop    %esi
f01147f2:	5f                   	pop    %edi
f01147f3:	5d                   	pop    %ebp
f01147f4:	c3                   	ret    

f01147f5 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01147f5:	55                   	push   %ebp
f01147f6:	89 e5                	mov    %esp,%ebp
f01147f8:	57                   	push   %edi
f01147f9:	56                   	push   %esi
f01147fa:	53                   	push   %ebx
f01147fb:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114801:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114807:	bb 78 99 13 f0       	mov    $0xf0139978,%ebx
f011480c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114811:	89 c7                	mov    %eax,%edi
f0114813:	89 de                	mov    %ebx,%esi
f0114815:	89 d1                	mov    %edx,%ecx
f0114817:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114819:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011481f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114824:	b0 00                	mov    $0x0,%al
f0114826:	89 d7                	mov    %edx,%edi
f0114828:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011482a:	6a 00                	push   $0x0
f011482c:	6a 0a                	push   $0xa
f011482e:	6a 14                	push   $0x14
f0114830:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114836:	50                   	push   %eax
f0114837:	e8 f8 4b ff ff       	call   f0109434 <env_create>
f011483c:	83 c4 10             	add    $0x10,%esp
f011483f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114842:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114845:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114848:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f011484b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011484e:	8b 40 60             	mov    0x60(%eax),%eax
f0114851:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114854:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114857:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011485a:	83 ec 0c             	sub    $0xc,%esp
f011485d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114860:	e8 32 20 00 00       	call   f0116897 <ClearUserSpace>
f0114865:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114868:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011486f:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0114876:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011487d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114881:	83 ec 0c             	sub    $0xc,%esp
f0114884:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0114889:	e8 80 c4 fe ff       	call   f0100d0e <cprintf>
f011488e:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114891:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114898:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f011489f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01148a2:	8a 00                	mov    (%eax),%al
f01148a4:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01148aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01148ad:	8a 00                	mov    (%eax),%al
f01148af:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01148b5:	83 ec 08             	sub    $0x8,%esp
f01148b8:	68 00 f0 bf ef       	push   $0xefbff000
f01148bd:	ff 75 d0             	pushl  -0x30(%ebp)
f01148c0:	e8 b3 1f 00 00       	call   f0116878 <GP>
f01148c5:	83 c4 10             	add    $0x10,%esp
f01148c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01148cb:	e8 9d 88 ff ff       	call   f010d16d <sys_calculate_free_frames>
f01148d0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01148d3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148d6:	c1 e0 02             	shl    $0x2,%eax
f01148d9:	6a 02                	push   $0x2
f01148db:	50                   	push   %eax
f01148dc:	68 00 f0 bf ef       	push   $0xefbff000
f01148e1:	ff 75 d0             	pushl  -0x30(%ebp)
f01148e4:	e8 a3 45 ff ff       	call   f0108e8c <allocate_chunk>
f01148e9:	83 c4 10             	add    $0x10,%esp
f01148ec:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01148ef:	e8 79 88 ff ff       	call   f010d16d <sys_calculate_free_frames>
f01148f4:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01148f7:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01148fb:	75 08                	jne    f0114905 <test_allocate_chunk+0x110>
f01148fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114900:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114903:	74 2a                	je     f011492f <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114905:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114908:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011490b:	83 ec 08             	sub    $0x8,%esp
f011490e:	6a 00                	push   $0x0
f0114910:	50                   	push   %eax
f0114911:	ff 75 b0             	pushl  -0x50(%ebp)
f0114914:	68 e0 a7 13 f0       	push   $0xf013a7e0
f0114919:	68 c3 04 00 00       	push   $0x4c3
f011491e:	68 de 8e 13 f0       	push   $0xf0138ede
f0114923:	e8 eb ba fe ff       	call   f0100413 <_warn>
f0114928:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011492b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011492f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114933:	74 04                	je     f0114939 <test_allocate_chunk+0x144>
f0114935:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114939:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011493d:	e8 2b 88 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114942:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114945:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114948:	01 c0                	add    %eax,%eax
f011494a:	89 c1                	mov    %eax,%ecx
f011494c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011494f:	89 d0                	mov    %edx,%eax
f0114951:	c1 e0 02             	shl    $0x2,%eax
f0114954:	01 d0                	add    %edx,%eax
f0114956:	f7 d8                	neg    %eax
f0114958:	2d 00 00 40 10       	sub    $0x10400000,%eax
f011495d:	6a 02                	push   $0x2
f011495f:	51                   	push   %ecx
f0114960:	50                   	push   %eax
f0114961:	ff 75 d0             	pushl  -0x30(%ebp)
f0114964:	e8 23 45 ff ff       	call   f0108e8c <allocate_chunk>
f0114969:	83 c4 10             	add    $0x10,%esp
f011496c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011496f:	e8 f9 87 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114974:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114977:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011497b:	75 08                	jne    f0114985 <test_allocate_chunk+0x190>
f011497d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114980:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114983:	74 2a                	je     f01149af <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114985:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114988:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011498b:	83 ec 08             	sub    $0x8,%esp
f011498e:	6a 00                	push   $0x0
f0114990:	50                   	push   %eax
f0114991:	ff 75 b0             	pushl  -0x50(%ebp)
f0114994:	68 e0 a7 13 f0       	push   $0xf013a7e0
f0114999:	68 d1 04 00 00       	push   $0x4d1
f011499e:	68 de 8e 13 f0       	push   $0xf0138ede
f01149a3:	e8 6b ba fe ff       	call   f0100413 <_warn>
f01149a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01149af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149b3:	74 04                	je     f01149b9 <test_allocate_chunk+0x1c4>
f01149b5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01149b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01149bd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01149c0:	c1 e0 02             	shl    $0x2,%eax
f01149c3:	83 ec 08             	sub    $0x8,%esp
f01149c6:	6a 03                	push   $0x3
f01149c8:	6a 00                	push   $0x0
f01149ca:	6a 00                	push   $0x0
f01149cc:	68 ff 0f 00 00       	push   $0xfff
f01149d1:	ff 75 b8             	pushl  -0x48(%ebp)
f01149d4:	6a 01                	push   $0x1
f01149d6:	50                   	push   %eax
f01149d7:	68 00 f0 bf ef       	push   $0xefbff000
f01149dc:	6a 00                	push   $0x0
f01149de:	ff 75 d0             	pushl  -0x30(%ebp)
f01149e1:	e8 e5 1e 00 00       	call   f01168cb <CCP>
f01149e6:	83 c4 30             	add    $0x30,%esp
f01149e9:	85 c0                	test   %eax,%eax
f01149eb:	75 1e                	jne    f0114a0b <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01149ed:	83 ec 04             	sub    $0x4,%esp
f01149f0:	68 48 a8 13 f0       	push   $0xf013a848
f01149f5:	68 d9 04 00 00       	push   $0x4d9
f01149fa:	68 de 8e 13 f0       	push   $0xf0138ede
f01149ff:	e8 0f ba fe ff       	call   f0100413 <_warn>
f0114a04:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a0b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a0f:	74 04                	je     f0114a15 <test_allocate_chunk+0x220>
f0114a11:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a15:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114a19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a1c:	8a 10                	mov    (%eax),%dl
f0114a1e:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114a24:	38 c2                	cmp    %al,%dl
f0114a26:	75 0f                	jne    f0114a37 <test_allocate_chunk+0x242>
f0114a28:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114a2b:	8a 10                	mov    (%eax),%dl
f0114a2d:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114a33:	38 c2                	cmp    %al,%dl
f0114a35:	74 1e                	je     f0114a55 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114a37:	83 ec 04             	sub    $0x4,%esp
f0114a3a:	68 94 a8 13 f0       	push   $0xf013a894
f0114a3f:	68 e1 04 00 00       	push   $0x4e1
f0114a44:	68 de 8e 13 f0       	push   $0xf0138ede
f0114a49:	e8 c5 b9 fe ff       	call   f0100413 <_warn>
f0114a4e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a51:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a55:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a59:	74 04                	je     f0114a5f <test_allocate_chunk+0x26a>
f0114a5b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a5f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114a63:	83 ec 0c             	sub    $0xc,%esp
f0114a66:	68 29 a6 13 f0       	push   $0xf013a629
f0114a6b:	e8 9e c2 fe ff       	call   f0100d0e <cprintf>
f0114a70:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114a73:	83 ec 0c             	sub    $0xc,%esp
f0114a76:	68 cc a8 13 f0       	push   $0xf013a8cc
f0114a7b:	e8 8e c2 fe ff       	call   f0100d0e <cprintf>
f0114a80:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a83:	e8 e5 86 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114a88:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114a8b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a8e:	c1 e0 05             	shl    $0x5,%eax
f0114a91:	68 02 0e 00 00       	push   $0xe02
f0114a96:	50                   	push   %eax
f0114a97:	6a 00                	push   $0x0
f0114a99:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a9c:	e8 eb 43 ff ff       	call   f0108e8c <allocate_chunk>
f0114aa1:	83 c4 10             	add    $0x10,%esp
f0114aa4:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114aa7:	e8 c1 86 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114aac:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114aaf:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114ab3:	75 36                	jne    f0114aeb <test_allocate_chunk+0x2f6>
f0114ab5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ab8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114abb:	89 c1                	mov    %eax,%ecx
f0114abd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ac0:	c1 e0 05             	shl    $0x5,%eax
f0114ac3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ac6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114acd:	99                   	cltd   
f0114ace:	f7 fe                	idiv   %esi
f0114ad0:	89 c3                	mov    %eax,%ebx
f0114ad2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ad5:	c1 e0 05             	shl    $0x5,%eax
f0114ad8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114adb:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ae2:	99                   	cltd   
f0114ae3:	f7 fe                	idiv   %esi
f0114ae5:	01 d8                	add    %ebx,%eax
f0114ae7:	39 c1                	cmp    %eax,%ecx
f0114ae9:	74 54                	je     f0114b3f <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114aeb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114aee:	c1 e0 05             	shl    $0x5,%eax
f0114af1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114af4:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114afb:	99                   	cltd   
f0114afc:	f7 ff                	idiv   %edi
f0114afe:	89 c1                	mov    %eax,%ecx
f0114b00:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b03:	c1 e0 05             	shl    $0x5,%eax
f0114b06:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b09:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b10:	99                   	cltd   
f0114b11:	f7 fe                	idiv   %esi
f0114b13:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114b16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b19:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b1c:	83 ec 08             	sub    $0x8,%esp
f0114b1f:	52                   	push   %edx
f0114b20:	50                   	push   %eax
f0114b21:	ff 75 a8             	pushl  -0x58(%ebp)
f0114b24:	68 0c a9 13 f0       	push   $0xf013a90c
f0114b29:	68 f6 04 00 00       	push   $0x4f6
f0114b2e:	68 de 8e 13 f0       	push   $0xf0138ede
f0114b33:	e8 db b8 fe ff       	call   f0100413 <_warn>
f0114b38:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b3b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b3f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b43:	74 04                	je     f0114b49 <test_allocate_chunk+0x354>
f0114b45:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b49:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114b4d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114b54:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b57:	c1 e0 05             	shl    $0x5,%eax
f0114b5a:	83 ec 08             	sub    $0x8,%esp
f0114b5d:	6a 03                	push   $0x3
f0114b5f:	6a 00                	push   $0x0
f0114b61:	6a 00                	push   $0x0
f0114b63:	68 07 0e 00 00       	push   $0xe07
f0114b68:	68 03 0e 00 00       	push   $0xe03
f0114b6d:	6a 01                	push   $0x1
f0114b6f:	50                   	push   %eax
f0114b70:	6a 00                	push   $0x0
f0114b72:	6a 00                	push   $0x0
f0114b74:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b77:	e8 4f 1d 00 00       	call   f01168cb <CCP>
f0114b7c:	83 c4 30             	add    $0x30,%esp
f0114b7f:	85 c0                	test   %eax,%eax
f0114b81:	75 25                	jne    f0114ba8 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114b83:	83 ec 04             	sub    $0x4,%esp
f0114b86:	68 48 a8 13 f0       	push   $0xf013a848
f0114b8b:	68 ff 04 00 00       	push   $0x4ff
f0114b90:	68 de 8e 13 f0       	push   $0xf0138ede
f0114b95:	e8 79 b8 fe ff       	call   f0100413 <_warn>
f0114b9a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b9d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114ba1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114ba8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bac:	74 04                	je     f0114bb2 <test_allocate_chunk+0x3bd>
f0114bae:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bb2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114bb6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114bba:	74 5a                	je     f0114c16 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114bbc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114bbf:	01 c0                	add    %eax,%eax
f0114bc1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114bc4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bc7:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114bca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114bcd:	01 c0                	add    %eax,%eax
f0114bcf:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114bd2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bd5:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114bd8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bdb:	8a 00                	mov    (%eax),%al
f0114bdd:	3c 4b                	cmp    $0x4b,%al
f0114bdf:	75 09                	jne    f0114bea <test_allocate_chunk+0x3f5>
f0114be1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114be4:	8a 00                	mov    (%eax),%al
f0114be6:	3c 4d                	cmp    $0x4d,%al
f0114be8:	74 1e                	je     f0114c08 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114bea:	83 ec 04             	sub    $0x4,%esp
f0114bed:	68 94 a8 13 f0       	push   $0xf013a894
f0114bf2:	68 0d 05 00 00       	push   $0x50d
f0114bf7:	68 de 8e 13 f0       	push   $0xf0138ede
f0114bfc:	e8 12 b8 fe ff       	call   f0100413 <_warn>
f0114c01:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114c04:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114c08:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c0c:	74 04                	je     f0114c12 <test_allocate_chunk+0x41d>
f0114c0e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114c12:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114c16:	83 ec 0c             	sub    $0xc,%esp
f0114c19:	68 03 9c 13 f0       	push   $0xf0139c03
f0114c1e:	e8 eb c0 fe ff       	call   f0100d0e <cprintf>
f0114c23:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114c26:	83 ec 0c             	sub    $0xc,%esp
f0114c29:	68 6c a9 13 f0       	push   $0xf013a96c
f0114c2e:	e8 db c0 fe ff       	call   f0100d0e <cprintf>
f0114c33:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c36:	e8 32 85 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114c3b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114c3e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c41:	c1 e0 06             	shl    $0x6,%eax
f0114c44:	89 c2                	mov    %eax,%edx
f0114c46:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c49:	c1 e0 05             	shl    $0x5,%eax
f0114c4c:	6a 00                	push   $0x0
f0114c4e:	52                   	push   %edx
f0114c4f:	50                   	push   %eax
f0114c50:	ff 75 d0             	pushl  -0x30(%ebp)
f0114c53:	e8 34 42 ff ff       	call   f0108e8c <allocate_chunk>
f0114c58:	83 c4 10             	add    $0x10,%esp
f0114c5b:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c5e:	e8 0a 85 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114c63:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114c66:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114c6a:	75 36                	jne    f0114ca2 <test_allocate_chunk+0x4ad>
f0114c6c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c6f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c72:	89 c1                	mov    %eax,%ecx
f0114c74:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c77:	c1 e0 06             	shl    $0x6,%eax
f0114c7a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c7d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114c84:	99                   	cltd   
f0114c85:	f7 ff                	idiv   %edi
f0114c87:	89 c3                	mov    %eax,%ebx
f0114c89:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c8c:	c1 e0 06             	shl    $0x6,%eax
f0114c8f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114c92:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c99:	99                   	cltd   
f0114c9a:	f7 fe                	idiv   %esi
f0114c9c:	01 d8                	add    %ebx,%eax
f0114c9e:	39 c1                	cmp    %eax,%ecx
f0114ca0:	74 54                	je     f0114cf6 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114ca2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ca5:	c1 e0 06             	shl    $0x6,%eax
f0114ca8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114cab:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114cb2:	99                   	cltd   
f0114cb3:	f7 fb                	idiv   %ebx
f0114cb5:	89 c1                	mov    %eax,%ecx
f0114cb7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cba:	c1 e0 06             	shl    $0x6,%eax
f0114cbd:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114cc0:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114cc7:	99                   	cltd   
f0114cc8:	f7 ff                	idiv   %edi
f0114cca:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114ccd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cd0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114cd3:	83 ec 08             	sub    $0x8,%esp
f0114cd6:	52                   	push   %edx
f0114cd7:	50                   	push   %eax
f0114cd8:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114cdb:	68 0c a9 13 f0       	push   $0xf013a90c
f0114ce0:	68 23 05 00 00       	push   $0x523
f0114ce5:	68 de 8e 13 f0       	push   $0xf0138ede
f0114cea:	e8 24 b7 fe ff       	call   f0100413 <_warn>
f0114cef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114cf2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114cf6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114cfa:	74 04                	je     f0114d00 <test_allocate_chunk+0x50b>
f0114cfc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d00:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114d04:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114d0b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d0e:	c1 e0 06             	shl    $0x6,%eax
f0114d11:	89 c2                	mov    %eax,%edx
f0114d13:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d16:	c1 e0 05             	shl    $0x5,%eax
f0114d19:	83 ec 08             	sub    $0x8,%esp
f0114d1c:	6a 03                	push   $0x3
f0114d1e:	6a 00                	push   $0x0
f0114d20:	6a 00                	push   $0x0
f0114d22:	68 07 0e 00 00       	push   $0xe07
f0114d27:	6a 01                	push   $0x1
f0114d29:	6a 01                	push   $0x1
f0114d2b:	52                   	push   %edx
f0114d2c:	50                   	push   %eax
f0114d2d:	6a 00                	push   $0x0
f0114d2f:	ff 75 d0             	pushl  -0x30(%ebp)
f0114d32:	e8 94 1b 00 00       	call   f01168cb <CCP>
f0114d37:	83 c4 30             	add    $0x30,%esp
f0114d3a:	85 c0                	test   %eax,%eax
f0114d3c:	75 25                	jne    f0114d63 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114d3e:	83 ec 04             	sub    $0x4,%esp
f0114d41:	68 48 a8 13 f0       	push   $0xf013a848
f0114d46:	68 2c 05 00 00       	push   $0x52c
f0114d4b:	68 de 8e 13 f0       	push   $0xf0138ede
f0114d50:	e8 be b6 fe ff       	call   f0100413 <_warn>
f0114d55:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114d58:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114d5c:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114d63:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d67:	74 04                	je     f0114d6d <test_allocate_chunk+0x578>
f0114d69:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114d6d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114d71:	83 ec 0c             	sub    $0xc,%esp
f0114d74:	68 66 9c 13 f0       	push   $0xf0139c66
f0114d79:	e8 90 bf fe ff       	call   f0100d0e <cprintf>
f0114d7e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114d81:	83 ec 0c             	sub    $0xc,%esp
f0114d84:	68 ac a9 13 f0       	push   $0xf013a9ac
f0114d89:	e8 80 bf fe ff       	call   f0100d0e <cprintf>
f0114d8e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114d91:	e8 d7 83 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114d96:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114d99:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d9c:	c1 e0 06             	shl    $0x6,%eax
f0114d9f:	68 06 0e 00 00       	push   $0xe06
f0114da4:	50                   	push   %eax
f0114da5:	68 00 00 00 80       	push   $0x80000000
f0114daa:	ff 75 d0             	pushl  -0x30(%ebp)
f0114dad:	e8 da 40 ff ff       	call   f0108e8c <allocate_chunk>
f0114db2:	83 c4 10             	add    $0x10,%esp
f0114db5:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114db8:	e8 b0 83 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114dbd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114dc0:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114dc4:	75 36                	jne    f0114dfc <test_allocate_chunk+0x607>
f0114dc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114dc9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114dcc:	89 c1                	mov    %eax,%ecx
f0114dce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114dd1:	c1 e0 06             	shl    $0x6,%eax
f0114dd4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114dd7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114dde:	99                   	cltd   
f0114ddf:	f7 fb                	idiv   %ebx
f0114de1:	89 c3                	mov    %eax,%ebx
f0114de3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114de6:	c1 e0 06             	shl    $0x6,%eax
f0114de9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114dec:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114df3:	99                   	cltd   
f0114df4:	f7 fe                	idiv   %esi
f0114df6:	01 d8                	add    %ebx,%eax
f0114df8:	39 c1                	cmp    %eax,%ecx
f0114dfa:	74 54                	je     f0114e50 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114dfc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114dff:	c1 e0 06             	shl    $0x6,%eax
f0114e02:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114e05:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114e0c:	99                   	cltd   
f0114e0d:	f7 ff                	idiv   %edi
f0114e0f:	89 c1                	mov    %eax,%ecx
f0114e11:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e14:	c1 e0 06             	shl    $0x6,%eax
f0114e17:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e1a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e21:	99                   	cltd   
f0114e22:	f7 fb                	idiv   %ebx
f0114e24:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114e27:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e2a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e2d:	83 ec 08             	sub    $0x8,%esp
f0114e30:	52                   	push   %edx
f0114e31:	50                   	push   %eax
f0114e32:	ff 75 9c             	pushl  -0x64(%ebp)
f0114e35:	68 0c a9 13 f0       	push   $0xf013a90c
f0114e3a:	68 42 05 00 00       	push   $0x542
f0114e3f:	68 de 8e 13 f0       	push   $0xf0138ede
f0114e44:	e8 ca b5 fe ff       	call   f0100413 <_warn>
f0114e49:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e4c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e50:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e54:	74 04                	je     f0114e5a <test_allocate_chunk+0x665>
f0114e56:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e5a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114e5e:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114e65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e68:	c1 e0 06             	shl    $0x6,%eax
f0114e6b:	83 ec 08             	sub    $0x8,%esp
f0114e6e:	6a 03                	push   $0x3
f0114e70:	6a 00                	push   $0x0
f0114e72:	6a 00                	push   $0x0
f0114e74:	68 07 0e 00 00       	push   $0xe07
f0114e79:	68 07 0e 00 00       	push   $0xe07
f0114e7e:	6a 01                	push   $0x1
f0114e80:	50                   	push   %eax
f0114e81:	68 00 00 00 80       	push   $0x80000000
f0114e86:	6a 00                	push   $0x0
f0114e88:	ff 75 d0             	pushl  -0x30(%ebp)
f0114e8b:	e8 3b 1a 00 00       	call   f01168cb <CCP>
f0114e90:	83 c4 30             	add    $0x30,%esp
f0114e93:	85 c0                	test   %eax,%eax
f0114e95:	75 25                	jne    f0114ebc <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114e97:	83 ec 04             	sub    $0x4,%esp
f0114e9a:	68 48 a8 13 f0       	push   $0xf013a848
f0114e9f:	68 4b 05 00 00       	push   $0x54b
f0114ea4:	68 de 8e 13 f0       	push   $0xf0138ede
f0114ea9:	e8 65 b5 fe ff       	call   f0100413 <_warn>
f0114eae:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114eb1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114eb5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114ebc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ec0:	74 04                	je     f0114ec6 <test_allocate_chunk+0x6d1>
f0114ec2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ec6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114eca:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114ece:	74 6f                	je     f0114f3f <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114ed0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114ed3:	01 c0                	add    %eax,%eax
f0114ed5:	05 00 00 00 80       	add    $0x80000000,%eax
f0114eda:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114edd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ee0:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114ee3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ee6:	89 d0                	mov    %edx,%eax
f0114ee8:	c1 e0 02             	shl    $0x2,%eax
f0114eeb:	01 d0                	add    %edx,%eax
f0114eed:	01 c0                	add    %eax,%eax
f0114eef:	01 d0                	add    %edx,%eax
f0114ef1:	01 c0                	add    %eax,%eax
f0114ef3:	05 00 00 00 80       	add    $0x80000000,%eax
f0114ef8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114efb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114efe:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114f01:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f04:	8a 00                	mov    (%eax),%al
f0114f06:	3c 4b                	cmp    $0x4b,%al
f0114f08:	75 09                	jne    f0114f13 <test_allocate_chunk+0x71e>
f0114f0a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f0d:	8a 00                	mov    (%eax),%al
f0114f0f:	3c 4d                	cmp    $0x4d,%al
f0114f11:	74 1e                	je     f0114f31 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114f13:	83 ec 04             	sub    $0x4,%esp
f0114f16:	68 94 a8 13 f0       	push   $0xf013a894
f0114f1b:	68 59 05 00 00       	push   $0x559
f0114f20:	68 de 8e 13 f0       	push   $0xf0138ede
f0114f25:	e8 e9 b4 fe ff       	call   f0100413 <_warn>
f0114f2a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114f2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114f31:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f35:	74 04                	je     f0114f3b <test_allocate_chunk+0x746>
f0114f37:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114f3b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114f3f:	83 ec 0c             	sub    $0xc,%esp
f0114f42:	68 38 a7 13 f0       	push   $0xf013a738
f0114f47:	e8 c2 bd fe ff       	call   f0100d0e <cprintf>
f0114f4c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114f4f:	83 ec 0c             	sub    $0xc,%esp
f0114f52:	68 e8 a9 13 f0       	push   $0xf013a9e8
f0114f57:	e8 b2 bd fe ff       	call   f0100d0e <cprintf>
f0114f5c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114f5f:	e8 09 82 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114f64:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114f67:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114f6a:	89 d0                	mov    %edx,%eax
f0114f6c:	01 c0                	add    %eax,%eax
f0114f6e:	01 d0                	add    %edx,%eax
f0114f70:	01 c0                	add    %eax,%eax
f0114f72:	01 d0                	add    %edx,%eax
f0114f74:	68 04 0e 00 00       	push   $0xe04
f0114f79:	50                   	push   %eax
f0114f7a:	68 00 fc 3f 40       	push   $0x403ffc00
f0114f7f:	ff 75 d0             	pushl  -0x30(%ebp)
f0114f82:	e8 05 3f ff ff       	call   f0108e8c <allocate_chunk>
f0114f87:	83 c4 10             	add    $0x10,%esp
f0114f8a:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114f8d:	e8 db 81 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0114f92:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114f95:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114f99:	75 0b                	jne    f0114fa6 <test_allocate_chunk+0x7b1>
f0114f9b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f9e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114fa1:	83 f8 05             	cmp    $0x5,%eax
f0114fa4:	74 2a                	je     f0114fd0 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114fa6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114fa9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114fac:	83 ec 08             	sub    $0x8,%esp
f0114faf:	6a 05                	push   $0x5
f0114fb1:	50                   	push   %eax
f0114fb2:	ff 75 98             	pushl  -0x68(%ebp)
f0114fb5:	68 0c a9 13 f0       	push   $0xf013a90c
f0114fba:	68 70 05 00 00       	push   $0x570
f0114fbf:	68 de 8e 13 f0       	push   $0xf0138ede
f0114fc4:	e8 4a b4 fe ff       	call   f0100413 <_warn>
f0114fc9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fcc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114fd0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fd4:	74 04                	je     f0114fda <test_allocate_chunk+0x7e5>
f0114fd6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114fda:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114fde:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114fe5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114fe8:	89 d0                	mov    %edx,%eax
f0114fea:	01 c0                	add    %eax,%eax
f0114fec:	01 d0                	add    %edx,%eax
f0114fee:	c1 e0 02             	shl    $0x2,%eax
f0114ff1:	83 ec 08             	sub    $0x8,%esp
f0114ff4:	6a 03                	push   $0x3
f0114ff6:	6a 00                	push   $0x0
f0114ff8:	6a 00                	push   $0x0
f0114ffa:	68 07 0e 00 00       	push   $0xe07
f0114fff:	68 05 0e 00 00       	push   $0xe05
f0115004:	6a 01                	push   $0x1
f0115006:	50                   	push   %eax
f0115007:	68 00 f0 3f 40       	push   $0x403ff000
f011500c:	6a 00                	push   $0x0
f011500e:	ff 75 d0             	pushl  -0x30(%ebp)
f0115011:	e8 b5 18 00 00       	call   f01168cb <CCP>
f0115016:	83 c4 30             	add    $0x30,%esp
f0115019:	85 c0                	test   %eax,%eax
f011501b:	75 25                	jne    f0115042 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011501d:	83 ec 04             	sub    $0x4,%esp
f0115020:	68 48 a8 13 f0       	push   $0xf013a848
f0115025:	68 79 05 00 00       	push   $0x579
f011502a:	68 de 8e 13 f0       	push   $0xf0138ede
f011502f:	e8 df b3 fe ff       	call   f0100413 <_warn>
f0115034:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115037:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011503b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115042:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115046:	74 04                	je     f011504c <test_allocate_chunk+0x857>
f0115048:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011504c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0115050:	83 ec 0c             	sub    $0xc,%esp
f0115053:	68 1f aa 13 f0       	push   $0xf013aa1f
f0115058:	e8 b1 bc fe ff       	call   f0100d0e <cprintf>
f011505d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0115060:	83 ec 08             	sub    $0x8,%esp
f0115063:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115066:	68 30 aa 13 f0       	push   $0xf013aa30
f011506b:	e8 9e bc fe ff       	call   f0100d0e <cprintf>
f0115070:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115073:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115077:	75 10                	jne    f0115089 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0115079:	83 ec 0c             	sub    $0xc,%esp
f011507c:	68 64 aa 13 f0       	push   $0xf013aa64
f0115081:	e8 88 bc fe ff       	call   f0100d0e <cprintf>
f0115086:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115089:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f011508e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0115091:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115094:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115097:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011509c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011509f:	5b                   	pop    %ebx
f01150a0:	5e                   	pop    %esi
f01150a1:	5f                   	pop    %edi
f01150a2:	5d                   	pop    %ebp
f01150a3:	c3                   	ret    

f01150a4 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01150a4:	55                   	push   %ebp
f01150a5:	89 e5                	mov    %esp,%ebp
f01150a7:	57                   	push   %edi
f01150a8:	56                   	push   %esi
f01150a9:	53                   	push   %ebx
f01150aa:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01150b0:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01150b3:	bb 78 99 13 f0       	mov    $0xf0139978,%ebx
f01150b8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01150bd:	89 c7                	mov    %eax,%edi
f01150bf:	89 de                	mov    %ebx,%esi
f01150c1:	89 d1                	mov    %edx,%ecx
f01150c3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01150c5:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01150c8:	b9 23 00 00 00       	mov    $0x23,%ecx
f01150cd:	b0 00                	mov    $0x0,%al
f01150cf:	89 d7                	mov    %edx,%edi
f01150d1:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01150d3:	6a 00                	push   $0x0
f01150d5:	6a 0a                	push   $0xa
f01150d7:	6a 14                	push   $0x14
f01150d9:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01150dc:	50                   	push   %eax
f01150dd:	e8 52 43 ff ff       	call   f0109434 <env_create>
f01150e2:	83 c4 10             	add    $0x10,%esp
f01150e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01150e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01150eb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01150ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01150f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01150f4:	8b 40 60             	mov    0x60(%eax),%eax
f01150f7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01150fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150fd:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115100:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115107:	75 70 20 
f011510a:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115111:	00 00 00 
f0115114:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115117:	b9 03 00 00 00       	mov    $0x3,%ecx
f011511c:	b8 00 00 00 00       	mov    $0x0,%eax
f0115121:	89 d7                	mov    %edx,%edi
f0115123:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115125:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115128:	8b 40 4c             	mov    0x4c(%eax),%eax
f011512b:	83 ec 08             	sub    $0x8,%esp
f011512e:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115134:	52                   	push   %edx
f0115135:	50                   	push   %eax
f0115136:	e8 5b cd 01 00       	call   f0131e96 <ltostr>
f011513b:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011513e:	83 ec 04             	sub    $0x4,%esp
f0115141:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115147:	50                   	push   %eax
f0115148:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011514e:	50                   	push   %eax
f011514f:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115155:	50                   	push   %eax
f0115156:	e8 33 ce 01 00       	call   f0131f8e <strcconcat>
f011515b:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011515e:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115165:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011516c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0115173:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011517a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f011517e:	83 ec 0c             	sub    $0xc,%esp
f0115181:	ff 75 d8             	pushl  -0x28(%ebp)
f0115184:	e8 0e 17 00 00       	call   f0116897 <ClearUserSpace>
f0115189:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011518c:	83 ec 0c             	sub    $0xc,%esp
f011518f:	68 a4 aa 13 f0       	push   $0xf013aaa4
f0115194:	e8 75 bb fe ff       	call   f0100d0e <cprintf>
f0115199:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011519c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011519f:	c1 e0 03             	shl    $0x3,%eax
f01151a2:	83 ec 04             	sub    $0x4,%esp
f01151a5:	50                   	push   %eax
f01151a6:	6a 00                	push   $0x0
f01151a8:	ff 75 d8             	pushl  -0x28(%ebp)
f01151ab:	e8 76 3f ff ff       	call   f0109126 <calculate_required_frames>
f01151b0:	83 c4 10             	add    $0x10,%esp
f01151b3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01151b6:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01151ba:	74 23                	je     f01151df <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01151bc:	83 ec 0c             	sub    $0xc,%esp
f01151bf:	6a 03                	push   $0x3
f01151c1:	ff 75 c8             	pushl  -0x38(%ebp)
f01151c4:	68 d8 aa 13 f0       	push   $0xf013aad8
f01151c9:	68 b2 05 00 00       	push   $0x5b2
f01151ce:	68 de 8e 13 f0       	push   $0xf0138ede
f01151d3:	e8 3b b2 fe ff       	call   f0100413 <_warn>
f01151d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151df:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151e3:	74 04                	je     f01151e9 <test_calculate_required_frames+0x145>
f01151e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151e9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01151ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01151f0:	c1 e0 02             	shl    $0x2,%eax
f01151f3:	83 ec 04             	sub    $0x4,%esp
f01151f6:	50                   	push   %eax
f01151f7:	6a 00                	push   $0x0
f01151f9:	ff 75 d8             	pushl  -0x28(%ebp)
f01151fc:	e8 25 3f ff ff       	call   f0109126 <calculate_required_frames>
f0115201:	83 c4 10             	add    $0x10,%esp
f0115204:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0115207:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f011520e:	74 26                	je     f0115236 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115210:	83 ec 0c             	sub    $0xc,%esp
f0115213:	68 01 04 00 00       	push   $0x401
f0115218:	ff 75 c8             	pushl  -0x38(%ebp)
f011521b:	68 d8 aa 13 f0       	push   $0xf013aad8
f0115220:	68 bc 05 00 00       	push   $0x5bc
f0115225:	68 de 8e 13 f0       	push   $0xf0138ede
f011522a:	e8 e4 b1 fe ff       	call   f0100413 <_warn>
f011522f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115232:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115236:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011523a:	74 04                	je     f0115240 <test_calculate_required_frames+0x19c>
f011523c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115240:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115244:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115247:	c1 e0 0a             	shl    $0xa,%eax
f011524a:	83 ec 04             	sub    $0x4,%esp
f011524d:	50                   	push   %eax
f011524e:	6a 00                	push   $0x0
f0115250:	ff 75 d8             	pushl  -0x28(%ebp)
f0115253:	e8 ce 3e ff ff       	call   f0109126 <calculate_required_frames>
f0115258:	83 c4 10             	add    $0x10,%esp
f011525b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f011525e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115261:	c1 e0 0a             	shl    $0xa,%eax
f0115264:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115267:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011526e:	99                   	cltd   
f011526f:	f7 fb                	idiv   %ebx
f0115271:	89 c1                	mov    %eax,%ecx
f0115273:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115276:	c1 e0 0a             	shl    $0xa,%eax
f0115279:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011527c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115283:	99                   	cltd   
f0115284:	f7 fe                	idiv   %esi
f0115286:	01 c8                	add    %ecx,%eax
f0115288:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011528b:	74 4c                	je     f01152d9 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f011528d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115290:	c1 e0 0a             	shl    $0xa,%eax
f0115293:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115296:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011529d:	99                   	cltd   
f011529e:	f7 fb                	idiv   %ebx
f01152a0:	89 c1                	mov    %eax,%ecx
f01152a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152a5:	c1 e0 0a             	shl    $0xa,%eax
f01152a8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01152ab:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01152b2:	99                   	cltd   
f01152b3:	f7 fe                	idiv   %esi
f01152b5:	01 c8                	add    %ecx,%eax
f01152b7:	83 ec 0c             	sub    $0xc,%esp
f01152ba:	50                   	push   %eax
f01152bb:	ff 75 c8             	pushl  -0x38(%ebp)
f01152be:	68 d8 aa 13 f0       	push   $0xf013aad8
f01152c3:	68 c6 05 00 00       	push   $0x5c6
f01152c8:	68 de 8e 13 f0       	push   $0xf0138ede
f01152cd:	e8 41 b1 fe ff       	call   f0100413 <_warn>
f01152d2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152d9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152dd:	74 04                	je     f01152e3 <test_calculate_required_frames+0x23f>
f01152df:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152e3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01152e7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01152ea:	89 d0                	mov    %edx,%eax
f01152ec:	01 c0                	add    %eax,%eax
f01152ee:	01 d0                	add    %edx,%eax
f01152f0:	01 c0                	add    %eax,%eax
f01152f2:	83 ec 04             	sub    $0x4,%esp
f01152f5:	50                   	push   %eax
f01152f6:	68 00 10 00 00       	push   $0x1000
f01152fb:	ff 75 d8             	pushl  -0x28(%ebp)
f01152fe:	e8 23 3e ff ff       	call   f0109126 <calculate_required_frames>
f0115303:	83 c4 10             	add    $0x10,%esp
f0115306:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115309:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011530d:	74 23                	je     f0115332 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011530f:	83 ec 0c             	sub    $0xc,%esp
f0115312:	6a 03                	push   $0x3
f0115314:	ff 75 c8             	pushl  -0x38(%ebp)
f0115317:	68 d8 aa 13 f0       	push   $0xf013aad8
f011531c:	68 d2 05 00 00       	push   $0x5d2
f0115321:	68 de 8e 13 f0       	push   $0xf0138ede
f0115326:	e8 e8 b0 fe ff       	call   f0100413 <_warn>
f011532b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011532e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115332:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115336:	74 04                	je     f011533c <test_calculate_required_frames+0x298>
f0115338:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011533c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115340:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115343:	89 c2                	mov    %eax,%edx
f0115345:	01 d2                	add    %edx,%edx
f0115347:	01 d0                	add    %edx,%eax
f0115349:	83 ec 04             	sub    $0x4,%esp
f011534c:	50                   	push   %eax
f011534d:	68 00 18 00 00       	push   $0x1800
f0115352:	ff 75 d8             	pushl  -0x28(%ebp)
f0115355:	e8 cc 3d ff ff       	call   f0109126 <calculate_required_frames>
f011535a:	83 c4 10             	add    $0x10,%esp
f011535d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115360:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115364:	74 23                	je     f0115389 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115366:	83 ec 0c             	sub    $0xc,%esp
f0115369:	6a 03                	push   $0x3
f011536b:	ff 75 c8             	pushl  -0x38(%ebp)
f011536e:	68 d8 aa 13 f0       	push   $0xf013aad8
f0115373:	68 dc 05 00 00       	push   $0x5dc
f0115378:	68 de 8e 13 f0       	push   $0xf0138ede
f011537d:	e8 91 b0 fe ff       	call   f0100413 <_warn>
f0115382:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115385:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115389:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011538d:	74 04                	je     f0115393 <test_calculate_required_frames+0x2ef>
f011538f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115393:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115397:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011539a:	89 d0                	mov    %edx,%eax
f011539c:	c1 e0 02             	shl    $0x2,%eax
f011539f:	01 d0                	add    %edx,%eax
f01153a1:	01 c0                	add    %eax,%eax
f01153a3:	83 ec 04             	sub    $0x4,%esp
f01153a6:	50                   	push   %eax
f01153a7:	68 00 00 40 00       	push   $0x400000
f01153ac:	ff 75 d8             	pushl  -0x28(%ebp)
f01153af:	e8 72 3d ff ff       	call   f0109126 <calculate_required_frames>
f01153b4:	83 c4 10             	add    $0x10,%esp
f01153b7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01153ba:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01153c1:	74 26                	je     f01153e9 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01153c3:	83 ec 0c             	sub    $0xc,%esp
f01153c6:	68 03 0a 00 00       	push   $0xa03
f01153cb:	ff 75 c8             	pushl  -0x38(%ebp)
f01153ce:	68 d8 aa 13 f0       	push   $0xf013aad8
f01153d3:	68 e6 05 00 00       	push   $0x5e6
f01153d8:	68 de 8e 13 f0       	push   $0xf0138ede
f01153dd:	e8 31 b0 fe ff       	call   f0100413 <_warn>
f01153e2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153e5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153e9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153ed:	74 04                	je     f01153f3 <test_calculate_required_frames+0x34f>
f01153ef:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153f3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01153f7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153fa:	01 c0                	add    %eax,%eax
f01153fc:	83 ec 04             	sub    $0x4,%esp
f01153ff:	50                   	push   %eax
f0115400:	68 00 00 70 00       	push   $0x700000
f0115405:	ff 75 d8             	pushl  -0x28(%ebp)
f0115408:	e8 19 3d ff ff       	call   f0109126 <calculate_required_frames>
f011540d:	83 c4 10             	add    $0x10,%esp
f0115410:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0115413:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f011541a:	74 26                	je     f0115442 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f011541c:	83 ec 0c             	sub    $0xc,%esp
f011541f:	68 02 02 00 00       	push   $0x202
f0115424:	ff 75 c8             	pushl  -0x38(%ebp)
f0115427:	68 d8 aa 13 f0       	push   $0xf013aad8
f011542c:	68 f2 05 00 00       	push   $0x5f2
f0115431:	68 de 8e 13 f0       	push   $0xf0138ede
f0115436:	e8 d8 af fe ff       	call   f0100413 <_warn>
f011543b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011543e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115442:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115446:	74 04                	je     f011544c <test_calculate_required_frames+0x3a8>
f0115448:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011544c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115450:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115453:	83 ec 04             	sub    $0x4,%esp
f0115456:	50                   	push   %eax
f0115457:	68 ff ff 3f 00       	push   $0x3fffff
f011545c:	ff 75 d8             	pushl  -0x28(%ebp)
f011545f:	e8 c2 3c ff ff       	call   f0109126 <calculate_required_frames>
f0115464:	83 c4 10             	add    $0x10,%esp
f0115467:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f011546a:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f011546e:	74 23                	je     f0115493 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115470:	83 ec 0c             	sub    $0xc,%esp
f0115473:	6a 04                	push   $0x4
f0115475:	ff 75 c8             	pushl  -0x38(%ebp)
f0115478:	68 d8 aa 13 f0       	push   $0xf013aad8
f011547d:	68 fc 05 00 00       	push   $0x5fc
f0115482:	68 de 8e 13 f0       	push   $0xf0138ede
f0115487:	e8 87 af fe ff       	call   f0100413 <_warn>
f011548c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011548f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115493:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115497:	74 04                	je     f011549d <test_calculate_required_frames+0x3f9>
f0115499:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011549d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01154a1:	83 ec 0c             	sub    $0xc,%esp
f01154a4:	68 29 a6 13 f0       	push   $0xf013a629
f01154a9:	e8 60 b8 fe ff       	call   f0100d0e <cprintf>
f01154ae:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01154b1:	83 ec 0c             	sub    $0xc,%esp
f01154b4:	68 30 ab 13 f0       	push   $0xf013ab30
f01154b9:	e8 50 b8 fe ff       	call   f0100d0e <cprintf>
f01154be:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01154c1:	83 ec 04             	sub    $0x4,%esp
f01154c4:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01154ca:	50                   	push   %eax
f01154cb:	68 e2 99 13 f0       	push   $0xf01399e2
f01154d0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01154d6:	50                   	push   %eax
f01154d7:	e8 b2 ca 01 00       	call   f0131f8e <strcconcat>
f01154dc:	83 c4 10             	add    $0x10,%esp
f01154df:	83 ec 0c             	sub    $0xc,%esp
f01154e2:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01154e8:	50                   	push   %eax
f01154e9:	e8 82 b8 fe ff       	call   f0100d70 <execute_command>
f01154ee:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01154f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154f4:	c1 e0 03             	shl    $0x3,%eax
f01154f7:	83 ec 04             	sub    $0x4,%esp
f01154fa:	50                   	push   %eax
f01154fb:	6a 00                	push   $0x0
f01154fd:	ff 75 d8             	pushl  -0x28(%ebp)
f0115500:	e8 21 3c ff ff       	call   f0109126 <calculate_required_frames>
f0115505:	83 c4 10             	add    $0x10,%esp
f0115508:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f011550b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115512:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115515:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115518:	74 24                	je     f011553e <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011551a:	83 ec 0c             	sub    $0xc,%esp
f011551d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115520:	ff 75 c8             	pushl  -0x38(%ebp)
f0115523:	68 d8 aa 13 f0       	push   $0xf013aad8
f0115528:	68 10 06 00 00       	push   $0x610
f011552d:	68 de 8e 13 f0       	push   $0xf0138ede
f0115532:	e8 dc ae fe ff       	call   f0100413 <_warn>
f0115537:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011553a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011553e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115542:	74 04                	je     f0115548 <test_calculate_required_frames+0x4a4>
f0115544:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115548:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011554c:	83 ec 04             	sub    $0x4,%esp
f011554f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115555:	50                   	push   %eax
f0115556:	68 ef 99 13 f0       	push   $0xf01399ef
f011555b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115561:	50                   	push   %eax
f0115562:	e8 27 ca 01 00       	call   f0131f8e <strcconcat>
f0115567:	83 c4 10             	add    $0x10,%esp
f011556a:	83 ec 0c             	sub    $0xc,%esp
f011556d:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115573:	50                   	push   %eax
f0115574:	e8 f7 b7 fe ff       	call   f0100d70 <execute_command>
f0115579:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011557c:	83 ec 04             	sub    $0x4,%esp
f011557f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115585:	50                   	push   %eax
f0115586:	68 64 ab 13 f0       	push   $0xf013ab64
f011558b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115591:	50                   	push   %eax
f0115592:	e8 f7 c9 01 00       	call   f0131f8e <strcconcat>
f0115597:	83 c4 10             	add    $0x10,%esp
f011559a:	83 ec 0c             	sub    $0xc,%esp
f011559d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01155a3:	50                   	push   %eax
f01155a4:	e8 c7 b7 fe ff       	call   f0100d70 <execute_command>
f01155a9:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01155ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155af:	c1 e0 03             	shl    $0x3,%eax
f01155b2:	83 ec 04             	sub    $0x4,%esp
f01155b5:	50                   	push   %eax
f01155b6:	6a 00                	push   $0x0
f01155b8:	ff 75 d8             	pushl  -0x28(%ebp)
f01155bb:	e8 66 3b ff ff       	call   f0109126 <calculate_required_frames>
f01155c0:	83 c4 10             	add    $0x10,%esp
f01155c3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01155c6:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01155cd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01155d0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155d3:	74 24                	je     f01155f9 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01155d5:	83 ec 0c             	sub    $0xc,%esp
f01155d8:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155db:	ff 75 c8             	pushl  -0x38(%ebp)
f01155de:	68 d8 aa 13 f0       	push   $0xf013aad8
f01155e3:	68 1e 06 00 00       	push   $0x61e
f01155e8:	68 de 8e 13 f0       	push   $0xf0138ede
f01155ed:	e8 21 ae fe ff       	call   f0100413 <_warn>
f01155f2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155f5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155f9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155fd:	74 04                	je     f0115603 <test_calculate_required_frames+0x55f>
f01155ff:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115603:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115607:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011560a:	c1 e0 0a             	shl    $0xa,%eax
f011560d:	83 ec 04             	sub    $0x4,%esp
f0115610:	50                   	push   %eax
f0115611:	6a 00                	push   $0x0
f0115613:	ff 75 d8             	pushl  -0x28(%ebp)
f0115616:	e8 0b 3b ff ff       	call   f0109126 <calculate_required_frames>
f011561b:	83 c4 10             	add    $0x10,%esp
f011561e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115621:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115624:	c1 e0 0a             	shl    $0xa,%eax
f0115627:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011562a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115631:	99                   	cltd   
f0115632:	f7 fb                	idiv   %ebx
f0115634:	89 c1                	mov    %eax,%ecx
f0115636:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115639:	c1 e0 0a             	shl    $0xa,%eax
f011563c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011563f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115646:	99                   	cltd   
f0115647:	f7 fe                	idiv   %esi
f0115649:	01 c8                	add    %ecx,%eax
f011564b:	83 e8 05             	sub    $0x5,%eax
f011564e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115651:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115654:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115657:	74 24                	je     f011567d <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115659:	83 ec 0c             	sub    $0xc,%esp
f011565c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011565f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115662:	68 d8 aa 13 f0       	push   $0xf013aad8
f0115667:	68 29 06 00 00       	push   $0x629
f011566c:	68 de 8e 13 f0       	push   $0xf0138ede
f0115671:	e8 9d ad fe ff       	call   f0100413 <_warn>
f0115676:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115679:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011567d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115681:	74 04                	je     f0115687 <test_calculate_required_frames+0x5e3>
f0115683:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115687:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011568b:	83 ec 04             	sub    $0x4,%esp
f011568e:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115694:	50                   	push   %eax
f0115695:	68 70 ab 13 f0       	push   $0xf013ab70
f011569a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156a0:	50                   	push   %eax
f01156a1:	e8 e8 c8 01 00       	call   f0131f8e <strcconcat>
f01156a6:	83 c4 10             	add    $0x10,%esp
f01156a9:	83 ec 0c             	sub    $0xc,%esp
f01156ac:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01156b2:	50                   	push   %eax
f01156b3:	e8 b8 b6 fe ff       	call   f0100d70 <execute_command>
f01156b8:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01156bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156be:	89 c2                	mov    %eax,%edx
f01156c0:	01 d2                	add    %edx,%edx
f01156c2:	01 d0                	add    %edx,%eax
f01156c4:	83 ec 04             	sub    $0x4,%esp
f01156c7:	50                   	push   %eax
f01156c8:	68 00 18 00 00       	push   $0x1800
f01156cd:	ff 75 d8             	pushl  -0x28(%ebp)
f01156d0:	e8 51 3a ff ff       	call   f0109126 <calculate_required_frames>
f01156d5:	83 c4 10             	add    $0x10,%esp
f01156d8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01156db:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01156e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01156e5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156e8:	74 24                	je     f011570e <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01156ea:	83 ec 0c             	sub    $0xc,%esp
f01156ed:	ff 75 c4             	pushl  -0x3c(%ebp)
f01156f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01156f3:	68 d8 aa 13 f0       	push   $0xf013aad8
f01156f8:	68 38 06 00 00       	push   $0x638
f01156fd:	68 de 8e 13 f0       	push   $0xf0138ede
f0115702:	e8 0c ad fe ff       	call   f0100413 <_warn>
f0115707:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011570a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011570e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115712:	74 04                	je     f0115718 <test_calculate_required_frames+0x674>
f0115714:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115718:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011571c:	83 ec 04             	sub    $0x4,%esp
f011571f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115725:	50                   	push   %eax
f0115726:	68 48 9c 13 f0       	push   $0xf0139c48
f011572b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115731:	50                   	push   %eax
f0115732:	e8 57 c8 01 00       	call   f0131f8e <strcconcat>
f0115737:	83 c4 10             	add    $0x10,%esp
f011573a:	83 ec 0c             	sub    $0xc,%esp
f011573d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115743:	50                   	push   %eax
f0115744:	e8 27 b6 fe ff       	call   f0100d70 <execute_command>
f0115749:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011574c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011574f:	89 d0                	mov    %edx,%eax
f0115751:	c1 e0 02             	shl    $0x2,%eax
f0115754:	01 d0                	add    %edx,%eax
f0115756:	01 c0                	add    %eax,%eax
f0115758:	83 ec 04             	sub    $0x4,%esp
f011575b:	50                   	push   %eax
f011575c:	68 00 00 40 00       	push   $0x400000
f0115761:	ff 75 d8             	pushl  -0x28(%ebp)
f0115764:	e8 bd 39 ff ff       	call   f0109126 <calculate_required_frames>
f0115769:	83 c4 10             	add    $0x10,%esp
f011576c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011576f:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115776:	74 26                	je     f011579e <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115778:	83 ec 0c             	sub    $0xc,%esp
f011577b:	68 03 0a 00 00       	push   $0xa03
f0115780:	ff 75 c8             	pushl  -0x38(%ebp)
f0115783:	68 d8 aa 13 f0       	push   $0xf013aad8
f0115788:	68 44 06 00 00       	push   $0x644
f011578d:	68 de 8e 13 f0       	push   $0xf0138ede
f0115792:	e8 7c ac fe ff       	call   f0100413 <_warn>
f0115797:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011579a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011579e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157a2:	74 04                	je     f01157a8 <test_calculate_required_frames+0x704>
f01157a4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01157ac:	83 ec 04             	sub    $0x4,%esp
f01157af:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157b5:	50                   	push   %eax
f01157b6:	68 52 9c 13 f0       	push   $0xf0139c52
f01157bb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157c1:	50                   	push   %eax
f01157c2:	e8 c7 c7 01 00       	call   f0131f8e <strcconcat>
f01157c7:	83 c4 10             	add    $0x10,%esp
f01157ca:	83 ec 0c             	sub    $0xc,%esp
f01157cd:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157d3:	50                   	push   %eax
f01157d4:	e8 97 b5 fe ff       	call   f0100d70 <execute_command>
f01157d9:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01157dc:	83 ec 04             	sub    $0x4,%esp
f01157df:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01157e5:	50                   	push   %eax
f01157e6:	68 78 ab 13 f0       	push   $0xf013ab78
f01157eb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157f1:	50                   	push   %eax
f01157f2:	e8 97 c7 01 00       	call   f0131f8e <strcconcat>
f01157f7:	83 c4 10             	add    $0x10,%esp
f01157fa:	83 ec 0c             	sub    $0xc,%esp
f01157fd:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115803:	50                   	push   %eax
f0115804:	e8 67 b5 fe ff       	call   f0100d70 <execute_command>
f0115809:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011580c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011580f:	01 c0                	add    %eax,%eax
f0115811:	83 ec 04             	sub    $0x4,%esp
f0115814:	50                   	push   %eax
f0115815:	68 00 00 70 00       	push   $0x700000
f011581a:	ff 75 d8             	pushl  -0x28(%ebp)
f011581d:	e8 04 39 ff ff       	call   f0109126 <calculate_required_frames>
f0115822:	83 c4 10             	add    $0x10,%esp
f0115825:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115828:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f011582f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115832:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115835:	74 24                	je     f011585b <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115837:	83 ec 0c             	sub    $0xc,%esp
f011583a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011583d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115840:	68 d8 aa 13 f0       	push   $0xf013aad8
f0115845:	68 54 06 00 00       	push   $0x654
f011584a:	68 de 8e 13 f0       	push   $0xf0138ede
f011584f:	e8 bf ab fe ff       	call   f0100413 <_warn>
f0115854:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115857:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011585b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011585f:	74 04                	je     f0115865 <test_calculate_required_frames+0x7c1>
f0115861:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115865:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115869:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011586c:	83 ec 04             	sub    $0x4,%esp
f011586f:	50                   	push   %eax
f0115870:	68 ff ff 3f 00       	push   $0x3fffff
f0115875:	ff 75 d8             	pushl  -0x28(%ebp)
f0115878:	e8 a9 38 ff ff       	call   f0109126 <calculate_required_frames>
f011587d:	83 c4 10             	add    $0x10,%esp
f0115880:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115883:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011588a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011588d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115890:	74 24                	je     f01158b6 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115892:	83 ec 0c             	sub    $0xc,%esp
f0115895:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115898:	ff 75 c8             	pushl  -0x38(%ebp)
f011589b:	68 d8 aa 13 f0       	push   $0xf013aad8
f01158a0:	68 5f 06 00 00       	push   $0x65f
f01158a5:	68 de 8e 13 f0       	push   $0xf0138ede
f01158aa:	e8 64 ab fe ff       	call   f0100413 <_warn>
f01158af:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01158b6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158ba:	74 04                	je     f01158c0 <test_calculate_required_frames+0x81c>
f01158bc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01158c0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01158c4:	83 ec 0c             	sub    $0xc,%esp
f01158c7:	68 03 9c 13 f0       	push   $0xf0139c03
f01158cc:	e8 3d b4 fe ff       	call   f0100d0e <cprintf>
f01158d1:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01158d4:	83 ec 08             	sub    $0x8,%esp
f01158d7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01158da:	68 84 ab 13 f0       	push   $0xf013ab84
f01158df:	e8 2a b4 fe ff       	call   f0100d0e <cprintf>
f01158e4:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01158e7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01158eb:	75 10                	jne    f01158fd <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01158ed:	83 ec 0c             	sub    $0xc,%esp
f01158f0:	68 c4 ab 13 f0       	push   $0xf013abc4
f01158f5:	e8 14 b4 fe ff       	call   f0100d0e <cprintf>
f01158fa:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01158fd:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f0115902:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115905:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115908:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011590b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115910:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115913:	5b                   	pop    %ebx
f0115914:	5e                   	pop    %esi
f0115915:	5f                   	pop    %edi
f0115916:	5d                   	pop    %ebp
f0115917:	c3                   	ret    

f0115918 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115918:	55                   	push   %ebp
f0115919:	89 e5                	mov    %esp,%ebp
f011591b:	57                   	push   %edi
f011591c:	56                   	push   %esi
f011591d:	53                   	push   %ebx
f011591e:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115924:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115927:	bb 78 99 13 f0       	mov    $0xf0139978,%ebx
f011592c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115931:	89 c7                	mov    %eax,%edi
f0115933:	89 de                	mov    %ebx,%esi
f0115935:	89 d1                	mov    %edx,%ecx
f0115937:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115939:	8d 55 9d             	lea    -0x63(%ebp),%edx
f011593c:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115941:	b0 00                	mov    $0x0,%al
f0115943:	89 d7                	mov    %edx,%edi
f0115945:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115947:	6a 00                	push   $0x0
f0115949:	6a 0a                	push   $0xa
f011594b:	6a 14                	push   $0x14
f011594d:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115950:	50                   	push   %eax
f0115951:	e8 de 3a ff ff       	call   f0109434 <env_create>
f0115956:	83 c4 10             	add    $0x10,%esp
f0115959:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011595c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011595f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115962:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115965:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115968:	8b 40 60             	mov    0x60(%eax),%eax
f011596b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011596e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115971:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115974:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011597b:	75 70 20 
f011597e:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115985:	00 00 00 
f0115988:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011598b:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115990:	b8 00 00 00 00       	mov    $0x0,%eax
f0115995:	89 d7                	mov    %edx,%edi
f0115997:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115999:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011599c:	8b 40 4c             	mov    0x4c(%eax),%eax
f011599f:	83 ec 08             	sub    $0x8,%esp
f01159a2:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01159a8:	52                   	push   %edx
f01159a9:	50                   	push   %eax
f01159aa:	e8 e7 c4 01 00       	call   f0131e96 <ltostr>
f01159af:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01159b2:	83 ec 04             	sub    $0x4,%esp
f01159b5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01159bb:	50                   	push   %eax
f01159bc:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01159c2:	50                   	push   %eax
f01159c3:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01159c9:	50                   	push   %eax
f01159ca:	e8 bf c5 01 00       	call   f0131f8e <strcconcat>
f01159cf:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01159d2:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01159d9:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01159e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01159e7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01159eb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01159f2:	00 00 00 
	uint32 num_tables = 0;
f01159f5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01159fc:	00 00 00 
	ClearUserSpace(proc_directory);
f01159ff:	83 ec 0c             	sub    $0xc,%esp
f0115a02:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a05:	e8 8d 0e 00 00       	call   f0116897 <ClearUserSpace>
f0115a0a:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115a0d:	83 ec 0c             	sub    $0xc,%esp
f0115a10:	68 a4 aa 13 f0       	push   $0xf013aaa4
f0115a15:	e8 f4 b2 fe ff       	call   f0100d0e <cprintf>
f0115a1a:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115a1d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a20:	c1 e0 03             	shl    $0x3,%eax
f0115a23:	89 c2                	mov    %eax,%edx
f0115a25:	83 ec 0c             	sub    $0xc,%esp
f0115a28:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a2e:	50                   	push   %eax
f0115a2f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a35:	50                   	push   %eax
f0115a36:	52                   	push   %edx
f0115a37:	6a 00                	push   $0x0
f0115a39:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a3c:	e8 a5 35 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115a41:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a44:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a4a:	85 c0                	test   %eax,%eax
f0115a4c:	74 27                	je     f0115a75 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a4e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a54:	83 ec 0c             	sub    $0xc,%esp
f0115a57:	6a 00                	push   $0x0
f0115a59:	50                   	push   %eax
f0115a5a:	68 10 ac 13 f0       	push   $0xf013ac10
f0115a5f:	68 94 06 00 00       	push   $0x694
f0115a64:	68 de 8e 13 f0       	push   $0xf0138ede
f0115a69:	e8 a5 a9 fe ff       	call   f0100413 <_warn>
f0115a6e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a71:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a75:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a7b:	85 c0                	test   %eax,%eax
f0115a7d:	74 27                	je     f0115aa6 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a7f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a85:	83 ec 0c             	sub    $0xc,%esp
f0115a88:	6a 00                	push   $0x0
f0115a8a:	50                   	push   %eax
f0115a8b:	68 70 ac 13 f0       	push   $0xf013ac70
f0115a90:	68 99 06 00 00       	push   $0x699
f0115a95:	68 de 8e 13 f0       	push   $0xf0138ede
f0115a9a:	e8 74 a9 fe ff       	call   f0100413 <_warn>
f0115a9f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115aa2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115aa6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115aaa:	74 04                	je     f0115ab0 <test_calculate_allocated_space+0x198>
f0115aac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ab0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115ab4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115abb:	00 00 00 
		num_pages = 0;
f0115abe:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ac5:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115ac8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115acb:	c1 e0 02             	shl    $0x2,%eax
f0115ace:	89 c2                	mov    %eax,%edx
f0115ad0:	83 ec 0c             	sub    $0xc,%esp
f0115ad3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ad9:	50                   	push   %eax
f0115ada:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ae0:	50                   	push   %eax
f0115ae1:	52                   	push   %edx
f0115ae2:	6a 00                	push   $0x0
f0115ae4:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ae7:	e8 fa 34 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115aec:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115aef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115af5:	85 c0                	test   %eax,%eax
f0115af7:	74 27                	je     f0115b20 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115af9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115aff:	83 ec 0c             	sub    $0xc,%esp
f0115b02:	6a 00                	push   $0x0
f0115b04:	50                   	push   %eax
f0115b05:	68 10 ac 13 f0       	push   $0xf013ac10
f0115b0a:	68 a5 06 00 00       	push   $0x6a5
f0115b0f:	68 de 8e 13 f0       	push   $0xf0138ede
f0115b14:	e8 fa a8 fe ff       	call   f0100413 <_warn>
f0115b19:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b1c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b20:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b26:	85 c0                	test   %eax,%eax
f0115b28:	74 27                	je     f0115b51 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b2a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b30:	83 ec 0c             	sub    $0xc,%esp
f0115b33:	6a 00                	push   $0x0
f0115b35:	50                   	push   %eax
f0115b36:	68 70 ac 13 f0       	push   $0xf013ac70
f0115b3b:	68 aa 06 00 00       	push   $0x6aa
f0115b40:	68 de 8e 13 f0       	push   $0xf0138ede
f0115b45:	e8 c9 a8 fe ff       	call   f0100413 <_warn>
f0115b4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b51:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b55:	74 04                	je     f0115b5b <test_calculate_allocated_space+0x243>
f0115b57:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b5b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115b5f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b66:	00 00 00 
		num_pages = 0;
f0115b69:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b70:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115b73:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b76:	c1 e0 0a             	shl    $0xa,%eax
f0115b79:	89 c2                	mov    %eax,%edx
f0115b7b:	83 ec 0c             	sub    $0xc,%esp
f0115b7e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b84:	50                   	push   %eax
f0115b85:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b8b:	50                   	push   %eax
f0115b8c:	52                   	push   %edx
f0115b8d:	6a 00                	push   $0x0
f0115b8f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b92:	e8 4f 34 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115b97:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ba0:	85 c0                	test   %eax,%eax
f0115ba2:	74 27                	je     f0115bcb <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ba4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115baa:	83 ec 0c             	sub    $0xc,%esp
f0115bad:	6a 00                	push   $0x0
f0115baf:	50                   	push   %eax
f0115bb0:	68 10 ac 13 f0       	push   $0xf013ac10
f0115bb5:	68 b6 06 00 00       	push   $0x6b6
f0115bba:	68 de 8e 13 f0       	push   $0xf0138ede
f0115bbf:	e8 4f a8 fe ff       	call   f0100413 <_warn>
f0115bc4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bc7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115bcb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bd1:	85 c0                	test   %eax,%eax
f0115bd3:	74 27                	je     f0115bfc <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115bd5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bdb:	83 ec 0c             	sub    $0xc,%esp
f0115bde:	6a 00                	push   $0x0
f0115be0:	50                   	push   %eax
f0115be1:	68 70 ac 13 f0       	push   $0xf013ac70
f0115be6:	68 bb 06 00 00       	push   $0x6bb
f0115beb:	68 de 8e 13 f0       	push   $0xf0138ede
f0115bf0:	e8 1e a8 fe ff       	call   f0100413 <_warn>
f0115bf5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bf8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115bfc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c00:	74 04                	je     f0115c06 <test_calculate_allocated_space+0x2ee>
f0115c02:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c06:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115c0a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c11:	00 00 00 
		num_pages = 0;
f0115c14:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c1b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115c1e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115c21:	89 d0                	mov    %edx,%eax
f0115c23:	01 c0                	add    %eax,%eax
f0115c25:	01 d0                	add    %edx,%eax
f0115c27:	01 c0                	add    %eax,%eax
f0115c29:	05 00 10 00 00       	add    $0x1000,%eax
f0115c2e:	89 c2                	mov    %eax,%edx
f0115c30:	83 ec 0c             	sub    $0xc,%esp
f0115c33:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c39:	50                   	push   %eax
f0115c3a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c40:	50                   	push   %eax
f0115c41:	52                   	push   %edx
f0115c42:	68 00 10 00 00       	push   $0x1000
f0115c47:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c4a:	e8 97 33 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115c4f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c52:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c58:	85 c0                	test   %eax,%eax
f0115c5a:	74 27                	je     f0115c83 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c5c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c62:	83 ec 0c             	sub    $0xc,%esp
f0115c65:	6a 00                	push   $0x0
f0115c67:	50                   	push   %eax
f0115c68:	68 10 ac 13 f0       	push   $0xf013ac10
f0115c6d:	68 c8 06 00 00       	push   $0x6c8
f0115c72:	68 de 8e 13 f0       	push   $0xf0138ede
f0115c77:	e8 97 a7 fe ff       	call   f0100413 <_warn>
f0115c7c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c7f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c83:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c89:	85 c0                	test   %eax,%eax
f0115c8b:	74 27                	je     f0115cb4 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c8d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c93:	83 ec 0c             	sub    $0xc,%esp
f0115c96:	6a 00                	push   $0x0
f0115c98:	50                   	push   %eax
f0115c99:	68 70 ac 13 f0       	push   $0xf013ac70
f0115c9e:	68 cd 06 00 00       	push   $0x6cd
f0115ca3:	68 de 8e 13 f0       	push   $0xf0138ede
f0115ca8:	e8 66 a7 fe ff       	call   f0100413 <_warn>
f0115cad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cb0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115cb4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115cb8:	74 04                	je     f0115cbe <test_calculate_allocated_space+0x3a6>
f0115cba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cbe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115cc2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cc9:	00 00 00 
		num_pages = 0;
f0115ccc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115cd3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115cd6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115cd9:	89 c2                	mov    %eax,%edx
f0115cdb:	01 d2                	add    %edx,%edx
f0115cdd:	01 d0                	add    %edx,%eax
f0115cdf:	05 00 18 00 00       	add    $0x1800,%eax
f0115ce4:	89 c2                	mov    %eax,%edx
f0115ce6:	83 ec 0c             	sub    $0xc,%esp
f0115ce9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cef:	50                   	push   %eax
f0115cf0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115cf6:	50                   	push   %eax
f0115cf7:	52                   	push   %edx
f0115cf8:	68 00 18 00 00       	push   $0x1800
f0115cfd:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d00:	e8 e1 32 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115d05:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d0e:	85 c0                	test   %eax,%eax
f0115d10:	74 27                	je     f0115d39 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d12:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d18:	83 ec 0c             	sub    $0xc,%esp
f0115d1b:	6a 00                	push   $0x0
f0115d1d:	50                   	push   %eax
f0115d1e:	68 10 ac 13 f0       	push   $0xf013ac10
f0115d23:	68 d9 06 00 00       	push   $0x6d9
f0115d28:	68 de 8e 13 f0       	push   $0xf0138ede
f0115d2d:	e8 e1 a6 fe ff       	call   f0100413 <_warn>
f0115d32:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d35:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d3f:	85 c0                	test   %eax,%eax
f0115d41:	74 27                	je     f0115d6a <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d43:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d49:	83 ec 0c             	sub    $0xc,%esp
f0115d4c:	6a 00                	push   $0x0
f0115d4e:	50                   	push   %eax
f0115d4f:	68 70 ac 13 f0       	push   $0xf013ac70
f0115d54:	68 de 06 00 00       	push   $0x6de
f0115d59:	68 de 8e 13 f0       	push   $0xf0138ede
f0115d5e:	e8 b0 a6 fe ff       	call   f0100413 <_warn>
f0115d63:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d66:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d6a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d6e:	74 04                	je     f0115d74 <test_calculate_allocated_space+0x45c>
f0115d70:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d74:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115d78:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d7f:	00 00 00 
		num_pages = 0;
f0115d82:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d89:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115d8c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115d8f:	89 d0                	mov    %edx,%eax
f0115d91:	c1 e0 02             	shl    $0x2,%eax
f0115d94:	01 d0                	add    %edx,%eax
f0115d96:	01 c0                	add    %eax,%eax
f0115d98:	05 00 00 40 00       	add    $0x400000,%eax
f0115d9d:	89 c2                	mov    %eax,%edx
f0115d9f:	83 ec 0c             	sub    $0xc,%esp
f0115da2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115da8:	50                   	push   %eax
f0115da9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115daf:	50                   	push   %eax
f0115db0:	52                   	push   %edx
f0115db1:	68 00 00 40 00       	push   $0x400000
f0115db6:	ff 75 d8             	pushl  -0x28(%ebp)
f0115db9:	e8 28 32 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115dbe:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115dc1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dc7:	85 c0                	test   %eax,%eax
f0115dc9:	74 27                	je     f0115df2 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115dcb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dd1:	83 ec 0c             	sub    $0xc,%esp
f0115dd4:	6a 00                	push   $0x0
f0115dd6:	50                   	push   %eax
f0115dd7:	68 10 ac 13 f0       	push   $0xf013ac10
f0115ddc:	68 ea 06 00 00       	push   $0x6ea
f0115de1:	68 de 8e 13 f0       	push   $0xf0138ede
f0115de6:	e8 28 a6 fe ff       	call   f0100413 <_warn>
f0115deb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115df2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115df8:	85 c0                	test   %eax,%eax
f0115dfa:	74 27                	je     f0115e23 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115dfc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e02:	83 ec 0c             	sub    $0xc,%esp
f0115e05:	6a 00                	push   $0x0
f0115e07:	50                   	push   %eax
f0115e08:	68 70 ac 13 f0       	push   $0xf013ac70
f0115e0d:	68 ef 06 00 00       	push   $0x6ef
f0115e12:	68 de 8e 13 f0       	push   $0xf0138ede
f0115e17:	e8 f7 a5 fe ff       	call   f0100413 <_warn>
f0115e1c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e1f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e23:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e27:	74 04                	je     f0115e2d <test_calculate_allocated_space+0x515>
f0115e29:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e2d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115e31:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e38:	00 00 00 
		num_pages = 0;
f0115e3b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e42:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115e45:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115e48:	05 00 00 38 00       	add    $0x380000,%eax
f0115e4d:	01 c0                	add    %eax,%eax
f0115e4f:	89 c2                	mov    %eax,%edx
f0115e51:	83 ec 0c             	sub    $0xc,%esp
f0115e54:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e5a:	50                   	push   %eax
f0115e5b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e61:	50                   	push   %eax
f0115e62:	52                   	push   %edx
f0115e63:	68 00 00 70 00       	push   $0x700000
f0115e68:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e6b:	e8 76 31 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115e70:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e73:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e79:	85 c0                	test   %eax,%eax
f0115e7b:	74 27                	je     f0115ea4 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e7d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e83:	83 ec 0c             	sub    $0xc,%esp
f0115e86:	6a 00                	push   $0x0
f0115e88:	50                   	push   %eax
f0115e89:	68 10 ac 13 f0       	push   $0xf013ac10
f0115e8e:	68 fc 06 00 00       	push   $0x6fc
f0115e93:	68 de 8e 13 f0       	push   $0xf0138ede
f0115e98:	e8 76 a5 fe ff       	call   f0100413 <_warn>
f0115e9d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ea0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ea4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115eaa:	85 c0                	test   %eax,%eax
f0115eac:	74 27                	je     f0115ed5 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115eae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115eb4:	83 ec 0c             	sub    $0xc,%esp
f0115eb7:	6a 00                	push   $0x0
f0115eb9:	50                   	push   %eax
f0115eba:	68 70 ac 13 f0       	push   $0xf013ac70
f0115ebf:	68 01 07 00 00       	push   $0x701
f0115ec4:	68 de 8e 13 f0       	push   $0xf0138ede
f0115ec9:	e8 45 a5 fe ff       	call   f0100413 <_warn>
f0115ece:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ed1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115ed5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ed9:	74 04                	je     f0115edf <test_calculate_allocated_space+0x5c7>
f0115edb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115edf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115ee3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115eea:	00 00 00 
		num_pages = 0;
f0115eed:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ef4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115ef7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115efa:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115eff:	89 c2                	mov    %eax,%edx
f0115f01:	83 ec 0c             	sub    $0xc,%esp
f0115f04:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f0a:	50                   	push   %eax
f0115f0b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f11:	50                   	push   %eax
f0115f12:	52                   	push   %edx
f0115f13:	68 ff ff 3f 00       	push   $0x3fffff
f0115f18:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f1b:	e8 c6 30 ff ff       	call   f0108fe6 <calculate_allocated_space>
f0115f20:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f23:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f29:	85 c0                	test   %eax,%eax
f0115f2b:	74 27                	je     f0115f54 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f2d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f33:	83 ec 0c             	sub    $0xc,%esp
f0115f36:	6a 00                	push   $0x0
f0115f38:	50                   	push   %eax
f0115f39:	68 10 ac 13 f0       	push   $0xf013ac10
f0115f3e:	68 0d 07 00 00       	push   $0x70d
f0115f43:	68 de 8e 13 f0       	push   $0xf0138ede
f0115f48:	e8 c6 a4 fe ff       	call   f0100413 <_warn>
f0115f4d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f50:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f54:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f5a:	85 c0                	test   %eax,%eax
f0115f5c:	74 27                	je     f0115f85 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f5e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f64:	83 ec 0c             	sub    $0xc,%esp
f0115f67:	6a 00                	push   $0x0
f0115f69:	50                   	push   %eax
f0115f6a:	68 70 ac 13 f0       	push   $0xf013ac70
f0115f6f:	68 12 07 00 00       	push   $0x712
f0115f74:	68 de 8e 13 f0       	push   $0xf0138ede
f0115f79:	e8 95 a4 fe ff       	call   f0100413 <_warn>
f0115f7e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115f85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f89:	74 04                	je     f0115f8f <test_calculate_allocated_space+0x677>
f0115f8b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115f8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115f93:	83 ec 0c             	sub    $0xc,%esp
f0115f96:	68 29 a6 13 f0       	push   $0xf013a629
f0115f9b:	e8 6e ad fe ff       	call   f0100d0e <cprintf>
f0115fa0:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115fa3:	83 ec 0c             	sub    $0xc,%esp
f0115fa6:	68 30 ab 13 f0       	push   $0xf013ab30
f0115fab:	e8 5e ad fe ff       	call   f0100d0e <cprintf>
f0115fb0:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115fb3:	83 ec 04             	sub    $0x4,%esp
f0115fb6:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115fbc:	50                   	push   %eax
f0115fbd:	68 e2 99 13 f0       	push   $0xf01399e2
f0115fc2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115fc8:	50                   	push   %eax
f0115fc9:	e8 c0 bf 01 00       	call   f0131f8e <strcconcat>
f0115fce:	83 c4 10             	add    $0x10,%esp
f0115fd1:	83 ec 0c             	sub    $0xc,%esp
f0115fd4:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115fda:	50                   	push   %eax
f0115fdb:	e8 90 ad fe ff       	call   f0100d70 <execute_command>
f0115fe0:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115fe3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fea:	00 00 00 
		num_pages = 0;
f0115fed:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ff4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115ff7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ffa:	c1 e0 03             	shl    $0x3,%eax
f0115ffd:	89 c2                	mov    %eax,%edx
f0115fff:	83 ec 0c             	sub    $0xc,%esp
f0116002:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116008:	50                   	push   %eax
f0116009:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011600f:	50                   	push   %eax
f0116010:	52                   	push   %edx
f0116011:	6a 00                	push   $0x0
f0116013:	ff 75 d8             	pushl  -0x28(%ebp)
f0116016:	e8 cb 2f ff ff       	call   f0108fe6 <calculate_allocated_space>
f011601b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011601e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0116025:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011602c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116032:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116035:	74 28                	je     f011605f <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116037:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011603d:	83 ec 0c             	sub    $0xc,%esp
f0116040:	ff 75 c8             	pushl  -0x38(%ebp)
f0116043:	50                   	push   %eax
f0116044:	68 10 ac 13 f0       	push   $0xf013ac10
f0116049:	68 29 07 00 00       	push   $0x729
f011604e:	68 de 8e 13 f0       	push   $0xf0138ede
f0116053:	e8 bb a3 fe ff       	call   f0100413 <_warn>
f0116058:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011605b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011605f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116065:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116068:	74 28                	je     f0116092 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011606a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116070:	83 ec 0c             	sub    $0xc,%esp
f0116073:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116076:	50                   	push   %eax
f0116077:	68 70 ac 13 f0       	push   $0xf013ac70
f011607c:	68 2e 07 00 00       	push   $0x72e
f0116081:	68 de 8e 13 f0       	push   $0xf0138ede
f0116086:	e8 88 a3 fe ff       	call   f0100413 <_warn>
f011608b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011608e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116092:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116096:	74 04                	je     f011609c <test_calculate_allocated_space+0x784>
f0116098:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011609c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01160a0:	83 ec 04             	sub    $0x4,%esp
f01160a3:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01160a9:	50                   	push   %eax
f01160aa:	68 ef 99 13 f0       	push   $0xf01399ef
f01160af:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160b5:	50                   	push   %eax
f01160b6:	e8 d3 be 01 00       	call   f0131f8e <strcconcat>
f01160bb:	83 c4 10             	add    $0x10,%esp
f01160be:	83 ec 0c             	sub    $0xc,%esp
f01160c1:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01160c7:	50                   	push   %eax
f01160c8:	e8 a3 ac fe ff       	call   f0100d70 <execute_command>
f01160cd:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01160d0:	83 ec 04             	sub    $0x4,%esp
f01160d3:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160d9:	50                   	push   %eax
f01160da:	68 64 ab 13 f0       	push   $0xf013ab64
f01160df:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160e5:	50                   	push   %eax
f01160e6:	e8 a3 be 01 00       	call   f0131f8e <strcconcat>
f01160eb:	83 c4 10             	add    $0x10,%esp
f01160ee:	83 ec 0c             	sub    $0xc,%esp
f01160f1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160f7:	50                   	push   %eax
f01160f8:	e8 73 ac fe ff       	call   f0100d70 <execute_command>
f01160fd:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0116100:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116107:	00 00 00 
		num_pages = 0;
f011610a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116111:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0116114:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116117:	c1 e0 03             	shl    $0x3,%eax
f011611a:	89 c2                	mov    %eax,%edx
f011611c:	83 ec 0c             	sub    $0xc,%esp
f011611f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116125:	50                   	push   %eax
f0116126:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011612c:	50                   	push   %eax
f011612d:	52                   	push   %edx
f011612e:	6a 00                	push   $0x0
f0116130:	ff 75 d8             	pushl  -0x28(%ebp)
f0116133:	e8 ae 2e ff ff       	call   f0108fe6 <calculate_allocated_space>
f0116138:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011613b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0116142:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116149:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011614f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116152:	74 28                	je     f011617c <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116154:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011615a:	83 ec 0c             	sub    $0xc,%esp
f011615d:	ff 75 c8             	pushl  -0x38(%ebp)
f0116160:	50                   	push   %eax
f0116161:	68 10 ac 13 f0       	push   $0xf013ac10
f0116166:	68 3f 07 00 00       	push   $0x73f
f011616b:	68 de 8e 13 f0       	push   $0xf0138ede
f0116170:	e8 9e a2 fe ff       	call   f0100413 <_warn>
f0116175:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116178:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011617c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116182:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116185:	74 28                	je     f01161af <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116187:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011618d:	83 ec 0c             	sub    $0xc,%esp
f0116190:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116193:	50                   	push   %eax
f0116194:	68 70 ac 13 f0       	push   $0xf013ac70
f0116199:	68 44 07 00 00       	push   $0x744
f011619e:	68 de 8e 13 f0       	push   $0xf0138ede
f01161a3:	e8 6b a2 fe ff       	call   f0100413 <_warn>
f01161a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161b3:	74 04                	je     f01161b9 <test_calculate_allocated_space+0x8a1>
f01161b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01161bd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01161c4:	00 00 00 
		num_pages = 0;
f01161c7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01161ce:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01161d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01161d4:	c1 e0 0a             	shl    $0xa,%eax
f01161d7:	89 c2                	mov    %eax,%edx
f01161d9:	83 ec 0c             	sub    $0xc,%esp
f01161dc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161e2:	50                   	push   %eax
f01161e3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161e9:	50                   	push   %eax
f01161ea:	52                   	push   %edx
f01161eb:	6a 00                	push   $0x0
f01161ed:	ff 75 d8             	pushl  -0x28(%ebp)
f01161f0:	e8 f1 2d ff ff       	call   f0108fe6 <calculate_allocated_space>
f01161f5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01161f8:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01161ff:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116206:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011620c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011620f:	74 28                	je     f0116239 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116211:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116217:	83 ec 0c             	sub    $0xc,%esp
f011621a:	ff 75 c8             	pushl  -0x38(%ebp)
f011621d:	50                   	push   %eax
f011621e:	68 10 ac 13 f0       	push   $0xf013ac10
f0116223:	68 52 07 00 00       	push   $0x752
f0116228:	68 de 8e 13 f0       	push   $0xf0138ede
f011622d:	e8 e1 a1 fe ff       	call   f0100413 <_warn>
f0116232:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116235:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116239:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011623f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116242:	74 28                	je     f011626c <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116244:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011624a:	83 ec 0c             	sub    $0xc,%esp
f011624d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116250:	50                   	push   %eax
f0116251:	68 70 ac 13 f0       	push   $0xf013ac70
f0116256:	68 57 07 00 00       	push   $0x757
f011625b:	68 de 8e 13 f0       	push   $0xf0138ede
f0116260:	e8 ae a1 fe ff       	call   f0100413 <_warn>
f0116265:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116268:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011626c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116270:	74 04                	je     f0116276 <test_calculate_allocated_space+0x95e>
f0116272:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116276:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011627a:	83 ec 04             	sub    $0x4,%esp
f011627d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116283:	50                   	push   %eax
f0116284:	68 70 ab 13 f0       	push   $0xf013ab70
f0116289:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011628f:	50                   	push   %eax
f0116290:	e8 f9 bc 01 00       	call   f0131f8e <strcconcat>
f0116295:	83 c4 10             	add    $0x10,%esp
f0116298:	83 ec 0c             	sub    $0xc,%esp
f011629b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01162a1:	50                   	push   %eax
f01162a2:	e8 c9 aa fe ff       	call   f0100d70 <execute_command>
f01162a7:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01162aa:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01162b1:	00 00 00 
		num_pages = 0;
f01162b4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01162bb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01162be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01162c1:	89 c2                	mov    %eax,%edx
f01162c3:	01 d2                	add    %edx,%edx
f01162c5:	01 d0                	add    %edx,%eax
f01162c7:	05 00 18 00 00       	add    $0x1800,%eax
f01162cc:	89 c2                	mov    %eax,%edx
f01162ce:	83 ec 0c             	sub    $0xc,%esp
f01162d1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162d7:	50                   	push   %eax
f01162d8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162de:	50                   	push   %eax
f01162df:	52                   	push   %edx
f01162e0:	68 00 18 00 00       	push   $0x1800
f01162e5:	ff 75 d8             	pushl  -0x28(%ebp)
f01162e8:	e8 f9 2c ff ff       	call   f0108fe6 <calculate_allocated_space>
f01162ed:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01162f0:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01162f7:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01162fe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116304:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116307:	74 28                	je     f0116331 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116309:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011630f:	83 ec 0c             	sub    $0xc,%esp
f0116312:	ff 75 c8             	pushl  -0x38(%ebp)
f0116315:	50                   	push   %eax
f0116316:	68 10 ac 13 f0       	push   $0xf013ac10
f011631b:	68 68 07 00 00       	push   $0x768
f0116320:	68 de 8e 13 f0       	push   $0xf0138ede
f0116325:	e8 e9 a0 fe ff       	call   f0100413 <_warn>
f011632a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011632d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116331:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116337:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011633a:	74 28                	je     f0116364 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011633c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116342:	83 ec 0c             	sub    $0xc,%esp
f0116345:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116348:	50                   	push   %eax
f0116349:	68 70 ac 13 f0       	push   $0xf013ac70
f011634e:	68 6d 07 00 00       	push   $0x76d
f0116353:	68 de 8e 13 f0       	push   $0xf0138ede
f0116358:	e8 b6 a0 fe ff       	call   f0100413 <_warn>
f011635d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116360:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116364:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116368:	74 04                	je     f011636e <test_calculate_allocated_space+0xa56>
f011636a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011636e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116372:	83 ec 04             	sub    $0x4,%esp
f0116375:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011637b:	50                   	push   %eax
f011637c:	68 48 9c 13 f0       	push   $0xf0139c48
f0116381:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116387:	50                   	push   %eax
f0116388:	e8 01 bc 01 00       	call   f0131f8e <strcconcat>
f011638d:	83 c4 10             	add    $0x10,%esp
f0116390:	83 ec 0c             	sub    $0xc,%esp
f0116393:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116399:	50                   	push   %eax
f011639a:	e8 d1 a9 fe ff       	call   f0100d70 <execute_command>
f011639f:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01163a2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01163a9:	00 00 00 
		num_pages = 0;
f01163ac:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01163b3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01163b6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01163b9:	89 d0                	mov    %edx,%eax
f01163bb:	c1 e0 02             	shl    $0x2,%eax
f01163be:	01 d0                	add    %edx,%eax
f01163c0:	01 c0                	add    %eax,%eax
f01163c2:	05 00 00 40 00       	add    $0x400000,%eax
f01163c7:	89 c2                	mov    %eax,%edx
f01163c9:	83 ec 0c             	sub    $0xc,%esp
f01163cc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163d2:	50                   	push   %eax
f01163d3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163d9:	50                   	push   %eax
f01163da:	52                   	push   %edx
f01163db:	68 00 00 40 00       	push   $0x400000
f01163e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01163e3:	e8 fe 2b ff ff       	call   f0108fe6 <calculate_allocated_space>
f01163e8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01163eb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01163f2:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01163f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163ff:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116402:	74 28                	je     f011642c <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116404:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011640a:	83 ec 0c             	sub    $0xc,%esp
f011640d:	ff 75 c8             	pushl  -0x38(%ebp)
f0116410:	50                   	push   %eax
f0116411:	68 10 ac 13 f0       	push   $0xf013ac10
f0116416:	68 7d 07 00 00       	push   $0x77d
f011641b:	68 de 8e 13 f0       	push   $0xf0138ede
f0116420:	e8 ee 9f fe ff       	call   f0100413 <_warn>
f0116425:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116428:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011642c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116432:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116435:	74 28                	je     f011645f <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116437:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011643d:	83 ec 0c             	sub    $0xc,%esp
f0116440:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116443:	50                   	push   %eax
f0116444:	68 70 ac 13 f0       	push   $0xf013ac70
f0116449:	68 82 07 00 00       	push   $0x782
f011644e:	68 de 8e 13 f0       	push   $0xf0138ede
f0116453:	e8 bb 9f fe ff       	call   f0100413 <_warn>
f0116458:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011645b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011645f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116463:	74 04                	je     f0116469 <test_calculate_allocated_space+0xb51>
f0116465:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116469:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011646d:	83 ec 04             	sub    $0x4,%esp
f0116470:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116476:	50                   	push   %eax
f0116477:	68 52 9c 13 f0       	push   $0xf0139c52
f011647c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116482:	50                   	push   %eax
f0116483:	e8 06 bb 01 00       	call   f0131f8e <strcconcat>
f0116488:	83 c4 10             	add    $0x10,%esp
f011648b:	83 ec 0c             	sub    $0xc,%esp
f011648e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116494:	50                   	push   %eax
f0116495:	e8 d6 a8 fe ff       	call   f0100d70 <execute_command>
f011649a:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011649d:	83 ec 04             	sub    $0x4,%esp
f01164a0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164a6:	50                   	push   %eax
f01164a7:	68 78 ab 13 f0       	push   $0xf013ab78
f01164ac:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01164b2:	50                   	push   %eax
f01164b3:	e8 d6 ba 01 00       	call   f0131f8e <strcconcat>
f01164b8:	83 c4 10             	add    $0x10,%esp
f01164bb:	83 ec 0c             	sub    $0xc,%esp
f01164be:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164c4:	50                   	push   %eax
f01164c5:	e8 a6 a8 fe ff       	call   f0100d70 <execute_command>
f01164ca:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01164cd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01164d4:	00 00 00 
		num_pages = 0;
f01164d7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01164de:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01164e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01164e4:	05 00 00 38 00       	add    $0x380000,%eax
f01164e9:	01 c0                	add    %eax,%eax
f01164eb:	89 c2                	mov    %eax,%edx
f01164ed:	83 ec 0c             	sub    $0xc,%esp
f01164f0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01164f6:	50                   	push   %eax
f01164f7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01164fd:	50                   	push   %eax
f01164fe:	52                   	push   %edx
f01164ff:	68 00 00 70 00       	push   $0x700000
f0116504:	ff 75 d8             	pushl  -0x28(%ebp)
f0116507:	e8 da 2a ff ff       	call   f0108fe6 <calculate_allocated_space>
f011650c:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011650f:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116516:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011651d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116523:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116526:	74 28                	je     f0116550 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116528:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011652e:	83 ec 0c             	sub    $0xc,%esp
f0116531:	ff 75 c8             	pushl  -0x38(%ebp)
f0116534:	50                   	push   %eax
f0116535:	68 10 ac 13 f0       	push   $0xf013ac10
f011653a:	68 94 07 00 00       	push   $0x794
f011653f:	68 de 8e 13 f0       	push   $0xf0138ede
f0116544:	e8 ca 9e fe ff       	call   f0100413 <_warn>
f0116549:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011654c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116550:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116556:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116559:	74 28                	je     f0116583 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011655b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116561:	83 ec 0c             	sub    $0xc,%esp
f0116564:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116567:	50                   	push   %eax
f0116568:	68 70 ac 13 f0       	push   $0xf013ac70
f011656d:	68 99 07 00 00       	push   $0x799
f0116572:	68 de 8e 13 f0       	push   $0xf0138ede
f0116577:	e8 97 9e fe ff       	call   f0100413 <_warn>
f011657c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011657f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116583:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116587:	74 04                	je     f011658d <test_calculate_allocated_space+0xc75>
f0116589:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011658d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0116591:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116598:	00 00 00 
		num_pages = 0;
f011659b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01165a2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01165a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01165a8:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01165ad:	89 c2                	mov    %eax,%edx
f01165af:	83 ec 0c             	sub    $0xc,%esp
f01165b2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01165b8:	50                   	push   %eax
f01165b9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01165bf:	50                   	push   %eax
f01165c0:	52                   	push   %edx
f01165c1:	68 ff ff 3f 00       	push   $0x3fffff
f01165c6:	ff 75 d8             	pushl  -0x28(%ebp)
f01165c9:	e8 18 2a ff ff       	call   f0108fe6 <calculate_allocated_space>
f01165ce:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01165d1:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01165d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01165df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165e5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01165e8:	74 28                	je     f0116612 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01165ea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165f0:	83 ec 0c             	sub    $0xc,%esp
f01165f3:	ff 75 c8             	pushl  -0x38(%ebp)
f01165f6:	50                   	push   %eax
f01165f7:	68 10 ac 13 f0       	push   $0xf013ac10
f01165fc:	68 a7 07 00 00       	push   $0x7a7
f0116601:	68 de 8e 13 f0       	push   $0xf0138ede
f0116606:	e8 08 9e fe ff       	call   f0100413 <_warn>
f011660b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011660e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116612:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116618:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011661b:	74 28                	je     f0116645 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011661d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116623:	83 ec 0c             	sub    $0xc,%esp
f0116626:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116629:	50                   	push   %eax
f011662a:	68 70 ac 13 f0       	push   $0xf013ac70
f011662f:	68 ac 07 00 00       	push   $0x7ac
f0116634:	68 de 8e 13 f0       	push   $0xf0138ede
f0116639:	e8 d5 9d fe ff       	call   f0100413 <_warn>
f011663e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116641:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116645:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116649:	74 04                	je     f011664f <test_calculate_allocated_space+0xd37>
f011664b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011664f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116653:	83 ec 0c             	sub    $0xc,%esp
f0116656:	68 03 9c 13 f0       	push   $0xf0139c03
f011665b:	e8 ae a6 fe ff       	call   f0100d0e <cprintf>
f0116660:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116663:	83 ec 08             	sub    $0x8,%esp
f0116666:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116669:	68 cc ac 13 f0       	push   $0xf013accc
f011666e:	e8 9b a6 fe ff       	call   f0100d0e <cprintf>
f0116673:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116676:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011667a:	75 10                	jne    f011668c <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011667c:	83 ec 0c             	sub    $0xc,%esp
f011667f:	68 0c ad 13 f0       	push   $0xf013ad0c
f0116684:	e8 85 a6 fe ff       	call   f0100d0e <cprintf>
f0116689:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011668c:	a1 a8 07 86 f0       	mov    0xf08607a8,%eax
f0116691:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116694:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116697:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011669a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011669f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01166a2:	5b                   	pop    %ebx
f01166a3:	5e                   	pop    %esi
f01166a4:	5f                   	pop    %edi
f01166a5:	5d                   	pop    %ebp
f01166a6:	c3                   	ret    

f01166a7 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01166a7:	55                   	push   %ebp
f01166a8:	89 e5                	mov    %esp,%ebp
f01166aa:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01166ad:	8b 45 10             	mov    0x10(%ebp),%eax
f01166b0:	ba 01 00 00 00       	mov    $0x1,%edx
f01166b5:	88 c1                	mov    %al,%cl
f01166b7:	d3 e2                	shl    %cl,%edx
f01166b9:	89 d0                	mov    %edx,%eax
f01166bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01166be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166c1:	c1 e8 16             	shr    $0x16,%eax
f01166c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01166ce:	01 d0                	add    %edx,%eax
f01166d0:	8b 00                	mov    (%eax),%eax
f01166d2:	83 e0 01             	and    $0x1,%eax
f01166d5:	85 c0                	test   %eax,%eax
f01166d7:	75 07                	jne    f01166e0 <CB+0x39>
f01166d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01166de:	eb 76                	jmp    f0116756 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01166e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166e3:	c1 e8 16             	shr    $0x16,%eax
f01166e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01166f0:	01 d0                	add    %edx,%eax
f01166f2:	8b 00                	mov    (%eax),%eax
f01166f4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01166f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01166fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01166ff:	c1 e8 0c             	shr    $0xc,%eax
f0116702:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116705:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f011670a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011670d:	72 17                	jb     f0116726 <CB+0x7f>
f011670f:	ff 75 f0             	pushl  -0x10(%ebp)
f0116712:	68 58 ad 13 f0       	push   $0xf013ad58
f0116717:	68 c7 07 00 00       	push   $0x7c7
f011671c:	68 de 8e 13 f0       	push   $0xf0138ede
f0116721:	e8 df 9a fe ff       	call   f0100205 <_panic>
f0116726:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116729:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011672e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116731:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116734:	c1 e8 0c             	shr    $0xc,%eax
f0116737:	25 ff 03 00 00       	and    $0x3ff,%eax
f011673c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116743:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116746:	01 d0                	add    %edx,%eax
f0116748:	8b 00                	mov    (%eax),%eax
f011674a:	23 45 f4             	and    -0xc(%ebp),%eax
f011674d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116750:	0f 94 c0             	sete   %al
f0116753:	0f b6 c0             	movzbl %al,%eax
}
f0116756:	c9                   	leave  
f0116757:	c3                   	ret    

f0116758 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116758:	55                   	push   %ebp
f0116759:	89 e5                	mov    %esp,%ebp
f011675b:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011675e:	68 87 ad 13 f0       	push   $0xf013ad87
f0116763:	68 96 ad 13 f0       	push   $0xf013ad96
f0116768:	68 cc 07 00 00       	push   $0x7cc
f011676d:	68 de 8e 13 f0       	push   $0xf0138ede
f0116772:	e8 8e 9a fe ff       	call   f0100205 <_panic>

f0116777 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116777:	55                   	push   %ebp
f0116778:	89 e5                	mov    %esp,%ebp
f011677a:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011677d:	68 87 ad 13 f0       	push   $0xf013ad87
f0116782:	68 96 ad 13 f0       	push   $0xf013ad96
f0116787:	68 d6 07 00 00       	push   $0x7d6
f011678c:	68 de 8e 13 f0       	push   $0xf0138ede
f0116791:	e8 6f 9a fe ff       	call   f0100205 <_panic>

f0116796 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0116796:	55                   	push   %ebp
f0116797:	89 e5                	mov    %esp,%ebp
f0116799:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011679c:	68 87 ad 13 f0       	push   $0xf013ad87
f01167a1:	68 96 ad 13 f0       	push   $0xf013ad96
f01167a6:	68 e5 07 00 00       	push   $0x7e5
f01167ab:	68 de 8e 13 f0       	push   $0xf0138ede
f01167b0:	e8 50 9a fe ff       	call   f0100205 <_panic>

f01167b5 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f01167b5:	55                   	push   %ebp
f01167b6:	89 e5                	mov    %esp,%ebp
f01167b8:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01167bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167be:	c1 e8 16             	shr    $0x16,%eax
f01167c1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01167cb:	01 d0                	add    %edx,%eax
f01167cd:	8b 00                	mov    (%eax),%eax
f01167cf:	83 e0 01             	and    $0x1,%eax
f01167d2:	85 c0                	test   %eax,%eax
f01167d4:	75 07                	jne    f01167dd <CE+0x28>
f01167d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01167db:	eb 7a                	jmp    f0116857 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01167dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167e0:	c1 e8 16             	shr    $0x16,%eax
f01167e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01167ed:	01 d0                	add    %edx,%eax
f01167ef:	8b 00                	mov    (%eax),%eax
f01167f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01167f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01167f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01167fc:	c1 e8 0c             	shr    $0xc,%eax
f01167ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116802:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0116807:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f011680a:	72 17                	jb     f0116823 <CE+0x6e>
f011680c:	ff 75 f4             	pushl  -0xc(%ebp)
f011680f:	68 58 ad 13 f0       	push   $0xf013ad58
f0116814:	68 ee 07 00 00       	push   $0x7ee
f0116819:	68 de 8e 13 f0       	push   $0xf0138ede
f011681e:	e8 e2 99 fe ff       	call   f0100205 <_panic>
f0116823:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116826:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011682b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f011682e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116831:	c1 e8 0c             	shr    $0xc,%eax
f0116834:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116839:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116840:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116843:	01 d0                	add    %edx,%eax
f0116845:	8b 00                	mov    (%eax),%eax
f0116847:	85 c0                	test   %eax,%eax
f0116849:	74 07                	je     f0116852 <CE+0x9d>
f011684b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116850:	eb 05                	jmp    f0116857 <CE+0xa2>
	return 1;
f0116852:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116857:	c9                   	leave  
f0116858:	c3                   	ret    

f0116859 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116859:	55                   	push   %ebp
f011685a:	89 e5                	mov    %esp,%ebp
f011685c:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011685f:	68 87 ad 13 f0       	push   $0xf013ad87
f0116864:	68 96 ad 13 f0       	push   $0xf013ad96
f0116869:	68 f5 07 00 00       	push   $0x7f5
f011686e:	68 de 8e 13 f0       	push   $0xf0138ede
f0116873:	e8 8d 99 fe ff       	call   f0100205 <_panic>

f0116878 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116878:	55                   	push   %ebp
f0116879:	89 e5                	mov    %esp,%ebp
f011687b:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011687e:	68 87 ad 13 f0       	push   $0xf013ad87
f0116883:	68 96 ad 13 f0       	push   $0xf013ad96
f0116888:	68 05 08 00 00       	push   $0x805
f011688d:	68 de 8e 13 f0       	push   $0xf0138ede
f0116892:	e8 6e 99 fe ff       	call   f0100205 <_panic>

f0116897 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0116897:	55                   	push   %ebp
f0116898:	89 e5                	mov    %esp,%ebp
f011689a:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011689d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01168a4:	eb 18                	jmp    f01168be <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f01168a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01168a9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01168b3:	01 d0                	add    %edx,%eax
f01168b5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01168bb:	ff 45 fc             	incl   -0x4(%ebp)
f01168be:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01168c1:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01168c6:	76 de                	jbe    f01168a6 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01168c8:	90                   	nop
f01168c9:	c9                   	leave  
f01168ca:	c3                   	ret    

f01168cb <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01168cb:	55                   	push   %ebp
f01168cc:	89 e5                	mov    %esp,%ebp
f01168ce:	83 ec 38             	sub    $0x38,%esp
f01168d1:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01168d4:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01168d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168da:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168df:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01168e2:	8b 45 10             	mov    0x10(%ebp),%eax
f01168e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01168ed:	e9 ea 01 00 00       	jmp    f0116adc <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01168f2:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01168f6:	74 44                	je     f011693c <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01168f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01168fb:	83 ec 04             	sub    $0x4,%esp
f01168fe:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116901:	52                   	push   %edx
f0116902:	50                   	push   %eax
f0116903:	ff 75 08             	pushl  0x8(%ebp)
f0116906:	e8 27 05 ff ff       	call   f0106e32 <get_frame_info>
f011690b:	83 c4 10             	add    $0x10,%esp
f011690e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116911:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116914:	85 c0                	test   %eax,%eax
f0116916:	75 24                	jne    f011693c <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116918:	83 ec 04             	sub    $0x4,%esp
f011691b:	68 ac ad 13 f0       	push   $0xf013adac
f0116920:	68 22 08 00 00       	push   $0x822
f0116925:	68 de 8e 13 f0       	push   $0xf0138ede
f011692a:	e8 e4 9a fe ff       	call   f0100413 <_warn>
f011692f:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116932:	b8 00 00 00 00       	mov    $0x0,%eax
f0116937:	e9 b6 01 00 00       	jmp    f0116af2 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f011693c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011693f:	83 ec 04             	sub    $0x4,%esp
f0116942:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116945:	52                   	push   %edx
f0116946:	50                   	push   %eax
f0116947:	ff 75 08             	pushl  0x8(%ebp)
f011694a:	e8 e3 04 ff ff       	call   f0106e32 <get_frame_info>
f011694f:	83 c4 10             	add    $0x10,%esp
f0116952:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116955:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116958:	85 c0                	test   %eax,%eax
f011695a:	75 24                	jne    f0116980 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011695c:	83 ec 04             	sub    $0x4,%esp
f011695f:	68 d8 ad 13 f0       	push   $0xf013add8
f0116964:	68 29 08 00 00       	push   $0x829
f0116969:	68 de 8e 13 f0       	push   $0xf0138ede
f011696e:	e8 a0 9a fe ff       	call   f0100413 <_warn>
f0116973:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116976:	b8 00 00 00 00       	mov    $0x0,%eax
f011697b:	e9 72 01 00 00       	jmp    f0116af2 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116980:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116984:	75 70                	jne    f01169f6 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116986:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116989:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011698c:	c1 ea 0c             	shr    $0xc,%edx
f011698f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116995:	c1 e2 02             	shl    $0x2,%edx
f0116998:	01 d0                	add    %edx,%eax
f011699a:	8b 00                	mov    (%eax),%eax
f011699c:	c1 e8 0c             	shr    $0xc,%eax
f011699f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f01169a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01169a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01169a8:	c1 ea 0c             	shr    $0xc,%edx
f01169ab:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01169b1:	c1 e2 02             	shl    $0x2,%edx
f01169b4:	01 d0                	add    %edx,%eax
f01169b6:	8b 00                	mov    (%eax),%eax
f01169b8:	c1 e8 0c             	shr    $0xc,%eax
f01169bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01169be:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01169c1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01169c4:	74 30                	je     f01169f6 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01169c6:	83 ec 04             	sub    $0x4,%esp
f01169c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01169cc:	ff 75 e8             	pushl  -0x18(%ebp)
f01169cf:	ff 75 f0             	pushl  -0x10(%ebp)
f01169d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01169d5:	68 04 ae 13 f0       	push   $0xf013ae04
f01169da:	68 33 08 00 00       	push   $0x833
f01169df:	68 de 8e 13 f0       	push   $0xf0138ede
f01169e4:	e8 2a 9a fe ff       	call   f0100413 <_warn>
f01169e9:	83 c4 20             	add    $0x20,%esp
				return 0;
f01169ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01169f1:	e9 fc 00 00 00       	jmp    f0116af2 <CCP+0x227>
			}
		}
		if (ref != -1)
f01169f6:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01169fa:	74 52                	je     f0116a4e <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01169fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116a00:	74 0e                	je     f0116a10 <CCP+0x145>
f0116a02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116a05:	8b 40 08             	mov    0x8(%eax),%eax
f0116a08:	0f b7 c0             	movzwl %ax,%eax
f0116a0b:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116a0e:	74 3e                	je     f0116a4e <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116a10:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116a14:	74 0b                	je     f0116a21 <CCP+0x156>
f0116a16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116a19:	8b 40 08             	mov    0x8(%eax),%eax
f0116a1c:	0f b7 c0             	movzwl %ax,%eax
f0116a1f:	eb 05                	jmp    f0116a26 <CCP+0x15b>
f0116a21:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a26:	83 ec 0c             	sub    $0xc,%esp
f0116a29:	50                   	push   %eax
f0116a2a:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a2d:	68 60 ae 13 f0       	push   $0xf013ae60
f0116a32:	68 3b 08 00 00       	push   $0x83b
f0116a37:	68 de 8e 13 f0       	push   $0xf0138ede
f0116a3c:	e8 d2 99 fe ff       	call   f0100413 <_warn>
f0116a41:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116a44:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a49:	e9 a4 00 00 00       	jmp    f0116af2 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116a4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a51:	ff 75 20             	pushl  0x20(%ebp)
f0116a54:	ff 75 1c             	pushl  0x1c(%ebp)
f0116a57:	50                   	push   %eax
f0116a58:	ff 75 08             	pushl  0x8(%ebp)
f0116a5b:	e8 17 fd ff ff       	call   f0116777 <CPs>
f0116a60:	83 c4 10             	add    $0x10,%esp
f0116a63:	85 c0                	test   %eax,%eax
f0116a65:	7f 21                	jg     f0116a88 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116a67:	83 ec 04             	sub    $0x4,%esp
f0116a6a:	68 d0 ae 13 f0       	push   $0xf013aed0
f0116a6f:	68 41 08 00 00       	push   $0x841
f0116a74:	68 de 8e 13 f0       	push   $0xf0138ede
f0116a79:	e8 95 99 fe ff       	call   f0100413 <_warn>
f0116a7e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116a81:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a86:	eb 6a                	jmp    f0116af2 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116a88:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116a8c:	74 3a                	je     f0116ac8 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116a91:	ff 75 28             	pushl  0x28(%ebp)
f0116a94:	ff 75 24             	pushl  0x24(%ebp)
f0116a97:	50                   	push   %eax
f0116a98:	ff 75 08             	pushl  0x8(%ebp)
f0116a9b:	e8 d7 fc ff ff       	call   f0116777 <CPs>
f0116aa0:	83 c4 10             	add    $0x10,%esp
f0116aa3:	85 c0                	test   %eax,%eax
f0116aa5:	7f 21                	jg     f0116ac8 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116aa7:	83 ec 04             	sub    $0x4,%esp
f0116aaa:	68 18 af 13 f0       	push   $0xf013af18
f0116aaf:	68 48 08 00 00       	push   $0x848
f0116ab4:	68 de 8e 13 f0       	push   $0xf0138ede
f0116ab9:	e8 55 99 fe ff       	call   f0100413 <_warn>
f0116abe:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116ac1:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ac6:	eb 2a                	jmp    f0116af2 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116ac8:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116acc:	74 07                	je     f0116ad5 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116ace:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116ad5:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116adc:	8b 55 10             	mov    0x10(%ebp),%edx
f0116adf:	8b 45 14             	mov    0x14(%ebp),%eax
f0116ae2:	01 d0                	add    %edx,%eax
f0116ae4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116ae7:	0f 87 05 fe ff ff    	ja     f01168f2 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116aed:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116af2:	c9                   	leave  
f0116af3:	c3                   	ret    

f0116af4 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116af4:	55                   	push   %ebp
f0116af5:	89 e5                	mov    %esp,%ebp
f0116af7:	57                   	push   %edi
f0116af8:	56                   	push   %esi
f0116af9:	53                   	push   %ebx
f0116afa:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0116b00:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f0116b05:	84 c0                	test   %al,%al
f0116b07:	0f 84 b4 09 00 00    	je     f01174c1 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116b0d:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f0116b14:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116b1a:	bb b8 b1 13 f0       	mov    $0xf013b1b8,%ebx
f0116b1f:	ba 04 00 00 00       	mov    $0x4,%edx
f0116b24:	89 c7                	mov    %eax,%edi
f0116b26:	89 de                	mov    %ebx,%esi
f0116b28:	89 d1                	mov    %edx,%ecx
f0116b2a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116b2c:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116b32:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b3c:	89 d7                	mov    %edx,%edi
f0116b3e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116b40:	83 ec 0c             	sub    $0xc,%esp
f0116b43:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116b49:	50                   	push   %eax
f0116b4a:	e8 21 a2 fe ff       	call   f0100d70 <execute_command>
f0116b4f:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116b52:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116b58:	bb 1c b2 13 f0       	mov    $0xf013b21c,%ebx
f0116b5d:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116b62:	89 c7                	mov    %eax,%edi
f0116b64:	89 de                	mov    %ebx,%esi
f0116b66:	89 d1                	mov    %edx,%ecx
f0116b68:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116b6a:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116b70:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116b75:	b0 00                	mov    $0x0,%al
f0116b77:	89 d7                	mov    %edx,%edi
f0116b79:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116b7b:	83 ec 0c             	sub    $0xc,%esp
f0116b7e:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116b84:	50                   	push   %eax
f0116b85:	e8 e6 a1 fe ff       	call   f0100d70 <execute_command>
f0116b8a:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116b8d:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116b93:	bb 80 b2 13 f0       	mov    $0xf013b280,%ebx
f0116b98:	ba 17 00 00 00       	mov    $0x17,%edx
f0116b9d:	89 c7                	mov    %eax,%edi
f0116b9f:	89 de                	mov    %ebx,%esi
f0116ba1:	89 d1                	mov    %edx,%ecx
f0116ba3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116ba5:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116bab:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116bb0:	b0 00                	mov    $0x0,%al
f0116bb2:	89 d7                	mov    %edx,%edi
f0116bb4:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116bb6:	83 ec 0c             	sub    $0xc,%esp
f0116bb9:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116bbf:	50                   	push   %eax
f0116bc0:	e8 ab a1 fe ff       	call   f0100d70 <execute_command>
f0116bc5:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116bc8:	83 ec 04             	sub    $0x4,%esp
f0116bcb:	6a 00                	push   $0x0
f0116bcd:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116bd0:	50                   	push   %eax
f0116bd1:	68 00 10 00 00       	push   $0x1000
f0116bd6:	e8 00 35 ff ff       	call   f010a0db <envid2env>
f0116bdb:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116bde:	83 ec 04             	sub    $0x4,%esp
f0116be1:	6a 00                	push   $0x0
f0116be3:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116be6:	50                   	push   %eax
f0116be7:	68 01 10 00 00       	push   $0x1001
f0116bec:	e8 ea 34 ff ff       	call   f010a0db <envid2env>
f0116bf1:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116bf4:	83 ec 04             	sub    $0x4,%esp
f0116bf7:	6a 00                	push   $0x0
f0116bf9:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116bfc:	50                   	push   %eax
f0116bfd:	68 02 10 00 00       	push   $0x1002
f0116c02:	e8 d4 34 ff ff       	call   f010a0db <envid2env>
f0116c07:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116c0a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c0d:	85 c0                	test   %eax,%eax
f0116c0f:	74 0e                	je     f0116c1f <test_priority_normal_and_higher+0x12b>
f0116c11:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c14:	85 c0                	test   %eax,%eax
f0116c16:	74 07                	je     f0116c1f <test_priority_normal_and_higher+0x12b>
f0116c18:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c1b:	85 c0                	test   %eax,%eax
f0116c1d:	75 14                	jne    f0116c33 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116c1f:	83 ec 04             	sub    $0x4,%esp
f0116c22:	68 58 af 13 f0       	push   $0xf013af58
f0116c27:	6a 26                	push   $0x26
f0116c29:	68 71 af 13 f0       	push   $0xf013af71
f0116c2e:	e8 d2 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116c33:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c36:	8b 40 74             	mov    0x74(%eax),%eax
f0116c39:	83 f8 14             	cmp    $0x14,%eax
f0116c3c:	75 16                	jne    f0116c54 <test_priority_normal_and_higher+0x160>
f0116c3e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c41:	8b 40 74             	mov    0x74(%eax),%eax
f0116c44:	83 f8 0f             	cmp    $0xf,%eax
f0116c47:	75 0b                	jne    f0116c54 <test_priority_normal_and_higher+0x160>
f0116c49:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c4c:	8b 40 74             	mov    0x74(%eax),%eax
f0116c4f:	83 f8 0a             	cmp    $0xa,%eax
f0116c52:	74 14                	je     f0116c68 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116c54:	83 ec 04             	sub    $0x4,%esp
f0116c57:	68 8c af 13 f0       	push   $0xf013af8c
f0116c5c:	6a 29                	push   $0x29
f0116c5e:	68 71 af 13 f0       	push   $0xf013af71
f0116c63:	e8 9d 95 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116c68:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116c6f:	eb 44                	jmp    f0116cb5 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116c71:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c74:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c77:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116c7a:	89 d0                	mov    %edx,%eax
f0116c7c:	01 c0                	add    %eax,%eax
f0116c7e:	01 d0                	add    %edx,%eax
f0116c80:	c1 e0 03             	shl    $0x3,%eax
f0116c83:	01 c8                	add    %ecx,%eax
f0116c85:	8b 10                	mov    (%eax),%edx
f0116c87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116c8a:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116c91:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c94:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c97:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116c9a:	89 d0                	mov    %edx,%eax
f0116c9c:	01 c0                	add    %eax,%eax
f0116c9e:	01 d0                	add    %edx,%eax
f0116ca0:	c1 e0 03             	shl    $0x3,%eax
f0116ca3:	01 c8                	add    %ecx,%eax
f0116ca5:	8b 50 08             	mov    0x8(%eax),%edx
f0116ca8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116cab:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116cb2:	ff 45 e4             	incl   -0x1c(%ebp)
f0116cb5:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116cb9:	7e b6                	jle    f0116c71 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116cbb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116cc2:	eb 44                	jmp    f0116d08 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116cc4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cc7:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cca:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116ccd:	89 d0                	mov    %edx,%eax
f0116ccf:	01 c0                	add    %eax,%eax
f0116cd1:	01 d0                	add    %edx,%eax
f0116cd3:	c1 e0 03             	shl    $0x3,%eax
f0116cd6:	01 c8                	add    %ecx,%eax
f0116cd8:	8b 10                	mov    (%eax),%edx
f0116cda:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116cdd:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116ce4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ce7:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cea:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116ced:	89 d0                	mov    %edx,%eax
f0116cef:	01 c0                	add    %eax,%eax
f0116cf1:	01 d0                	add    %edx,%eax
f0116cf3:	c1 e0 03             	shl    $0x3,%eax
f0116cf6:	01 c8                	add    %ecx,%eax
f0116cf8:	8b 50 08             	mov    0x8(%eax),%edx
f0116cfb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116cfe:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116d05:	ff 45 e0             	incl   -0x20(%ebp)
f0116d08:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116d0c:	7e b6                	jle    f0116cc4 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116d0e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116d15:	eb 44                	jmp    f0116d5b <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d17:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d1a:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d1d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116d20:	89 d0                	mov    %edx,%eax
f0116d22:	01 c0                	add    %eax,%eax
f0116d24:	01 d0                	add    %edx,%eax
f0116d26:	c1 e0 03             	shl    $0x3,%eax
f0116d29:	01 c8                	add    %ecx,%eax
f0116d2b:	8b 10                	mov    (%eax),%edx
f0116d2d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d30:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116d37:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d3a:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d3d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116d40:	89 d0                	mov    %edx,%eax
f0116d42:	01 c0                	add    %eax,%eax
f0116d44:	01 d0                	add    %edx,%eax
f0116d46:	c1 e0 03             	shl    $0x3,%eax
f0116d49:	01 c8                	add    %ecx,%eax
f0116d4b:	8b 50 08             	mov    0x8(%eax),%edx
f0116d4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d51:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116d58:	ff 45 dc             	incl   -0x24(%ebp)
f0116d5b:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116d5f:	7e b6                	jle    f0116d17 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116d61:	e8 07 64 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116d66:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116d69:	e8 86 d0 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116d6e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116d71:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d74:	83 ec 08             	sub    $0x8,%esp
f0116d77:	6a 03                	push   $0x3
f0116d79:	50                   	push   %eax
f0116d7a:	e8 3a 48 ff ff       	call   f010b5b9 <set_program_priority>
f0116d7f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116d82:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d85:	83 ec 08             	sub    $0x8,%esp
f0116d88:	6a 03                	push   $0x3
f0116d8a:	50                   	push   %eax
f0116d8b:	e8 29 48 ff ff       	call   f010b5b9 <set_program_priority>
f0116d90:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116d93:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d96:	83 ec 08             	sub    $0x8,%esp
f0116d99:	6a 03                	push   $0x3
f0116d9b:	50                   	push   %eax
f0116d9c:	e8 18 48 ff ff       	call   f010b5b9 <set_program_priority>
f0116da1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116da4:	e8 4b d0 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116da9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116dac:	74 14                	je     f0116dc2 <test_priority_normal_and_higher+0x2ce>
f0116dae:	83 ec 04             	sub    $0x4,%esp
f0116db1:	68 d8 af 13 f0       	push   $0xf013afd8
f0116db6:	6a 45                	push   $0x45
f0116db8:	68 71 af 13 f0       	push   $0xf013af71
f0116dbd:	e8 43 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116dc2:	e8 a6 63 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116dc7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116dca:	74 14                	je     f0116de0 <test_priority_normal_and_higher+0x2ec>
f0116dcc:	83 ec 04             	sub    $0x4,%esp
f0116dcf:	68 d8 af 13 f0       	push   $0xf013afd8
f0116dd4:	6a 46                	push   $0x46
f0116dd6:	68 71 af 13 f0       	push   $0xf013af71
f0116ddb:	e8 25 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116de0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116de3:	8b 40 74             	mov    0x74(%eax),%eax
f0116de6:	83 f8 14             	cmp    $0x14,%eax
f0116de9:	75 16                	jne    f0116e01 <test_priority_normal_and_higher+0x30d>
f0116deb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116dee:	8b 40 74             	mov    0x74(%eax),%eax
f0116df1:	83 f8 0f             	cmp    $0xf,%eax
f0116df4:	75 0b                	jne    f0116e01 <test_priority_normal_and_higher+0x30d>
f0116df6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116df9:	8b 40 74             	mov    0x74(%eax),%eax
f0116dfc:	83 f8 0a             	cmp    $0xa,%eax
f0116dff:	74 14                	je     f0116e15 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116e01:	83 ec 04             	sub    $0x4,%esp
f0116e04:	68 04 b0 13 f0       	push   $0xf013b004
f0116e09:	6a 49                	push   $0x49
f0116e0b:	68 71 af 13 f0       	push   $0xf013af71
f0116e10:	e8 f0 93 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116e15:	e8 53 63 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116e1a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e1d:	e8 d2 cf fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116e22:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116e25:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e28:	83 ec 08             	sub    $0x8,%esp
f0116e2b:	6a 04                	push   $0x4
f0116e2d:	50                   	push   %eax
f0116e2e:	e8 86 47 ff ff       	call   f010b5b9 <set_program_priority>
f0116e33:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116e36:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e39:	83 ec 08             	sub    $0x8,%esp
f0116e3c:	6a 04                	push   $0x4
f0116e3e:	50                   	push   %eax
f0116e3f:	e8 75 47 ff ff       	call   f010b5b9 <set_program_priority>
f0116e44:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116e47:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e4a:	83 ec 08             	sub    $0x8,%esp
f0116e4d:	6a 04                	push   $0x4
f0116e4f:	50                   	push   %eax
f0116e50:	e8 64 47 ff ff       	call   f010b5b9 <set_program_priority>
f0116e55:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e58:	e8 97 cf fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116e5d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116e60:	74 14                	je     f0116e76 <test_priority_normal_and_higher+0x382>
f0116e62:	83 ec 04             	sub    $0x4,%esp
f0116e65:	68 d8 af 13 f0       	push   $0xf013afd8
f0116e6a:	6a 53                	push   $0x53
f0116e6c:	68 71 af 13 f0       	push   $0xf013af71
f0116e71:	e8 8f 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116e76:	e8 f2 62 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116e7b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e7e:	74 14                	je     f0116e94 <test_priority_normal_and_higher+0x3a0>
f0116e80:	83 ec 04             	sub    $0x4,%esp
f0116e83:	68 58 b0 13 f0       	push   $0xf013b058
f0116e88:	6a 54                	push   $0x54
f0116e8a:	68 71 af 13 f0       	push   $0xf013af71
f0116e8f:	e8 71 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116e94:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e97:	8b 40 74             	mov    0x74(%eax),%eax
f0116e9a:	83 f8 14             	cmp    $0x14,%eax
f0116e9d:	75 16                	jne    f0116eb5 <test_priority_normal_and_higher+0x3c1>
f0116e9f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ea2:	8b 40 74             	mov    0x74(%eax),%eax
f0116ea5:	83 f8 0f             	cmp    $0xf,%eax
f0116ea8:	75 0b                	jne    f0116eb5 <test_priority_normal_and_higher+0x3c1>
f0116eaa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ead:	8b 40 74             	mov    0x74(%eax),%eax
f0116eb0:	83 f8 14             	cmp    $0x14,%eax
f0116eb3:	74 14                	je     f0116ec9 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116eb5:	83 ec 04             	sub    $0x4,%esp
f0116eb8:	68 88 b0 13 f0       	push   $0xf013b088
f0116ebd:	6a 57                	push   $0x57
f0116ebf:	68 71 af 13 f0       	push   $0xf013af71
f0116ec4:	e8 3c 93 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ec9:	e8 9f 62 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116ece:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ed1:	e8 1e cf fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116ed6:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116ed9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116edc:	83 ec 08             	sub    $0x8,%esp
f0116edf:	6a 04                	push   $0x4
f0116ee1:	50                   	push   %eax
f0116ee2:	e8 d2 46 ff ff       	call   f010b5b9 <set_program_priority>
f0116ee7:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116eea:	e8 05 cf fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116eef:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116ef2:	74 14                	je     f0116f08 <test_priority_normal_and_higher+0x414>
f0116ef4:	83 ec 04             	sub    $0x4,%esp
f0116ef7:	68 d8 af 13 f0       	push   $0xf013afd8
f0116efc:	6a 5f                	push   $0x5f
f0116efe:	68 71 af 13 f0       	push   $0xf013af71
f0116f03:	e8 fd 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116f08:	e8 60 62 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116f0d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116f10:	74 14                	je     f0116f26 <test_priority_normal_and_higher+0x432>
f0116f12:	83 ec 04             	sub    $0x4,%esp
f0116f15:	68 d8 af 13 f0       	push   $0xf013afd8
f0116f1a:	6a 60                	push   $0x60
f0116f1c:	68 71 af 13 f0       	push   $0xf013af71
f0116f21:	e8 df 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116f26:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f29:	8b 40 74             	mov    0x74(%eax),%eax
f0116f2c:	83 f8 14             	cmp    $0x14,%eax
f0116f2f:	75 16                	jne    f0116f47 <test_priority_normal_and_higher+0x453>
f0116f31:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f34:	8b 40 74             	mov    0x74(%eax),%eax
f0116f37:	83 f8 0f             	cmp    $0xf,%eax
f0116f3a:	75 0b                	jne    f0116f47 <test_priority_normal_and_higher+0x453>
f0116f3c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f3f:	8b 40 74             	mov    0x74(%eax),%eax
f0116f42:	83 f8 14             	cmp    $0x14,%eax
f0116f45:	74 14                	je     f0116f5b <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116f47:	83 ec 04             	sub    $0x4,%esp
f0116f4a:	68 d0 b0 13 f0       	push   $0xf013b0d0
f0116f4f:	6a 63                	push   $0x63
f0116f51:	68 71 af 13 f0       	push   $0xf013af71
f0116f56:	e8 aa 92 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116f5b:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116f62:	eb 1b                	jmp    f0116f7f <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116f64:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f67:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f6a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116f6d:	89 d0                	mov    %edx,%eax
f0116f6f:	01 c0                	add    %eax,%eax
f0116f71:	01 d0                	add    %edx,%eax
f0116f73:	c1 e0 03             	shl    $0x3,%eax
f0116f76:	01 c8                	add    %ecx,%eax
f0116f78:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116f7c:	ff 45 d8             	incl   -0x28(%ebp)
f0116f7f:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116f83:	7e df                	jle    f0116f64 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116f85:	e8 e3 61 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116f8a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f8d:	e8 62 ce fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116f92:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116f95:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f98:	83 ec 08             	sub    $0x8,%esp
f0116f9b:	6a 04                	push   $0x4
f0116f9d:	50                   	push   %eax
f0116f9e:	e8 16 46 ff ff       	call   f010b5b9 <set_program_priority>
f0116fa3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116fa6:	e8 49 ce fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0116fab:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116fae:	74 14                	je     f0116fc4 <test_priority_normal_and_higher+0x4d0>
f0116fb0:	83 ec 04             	sub    $0x4,%esp
f0116fb3:	68 d8 af 13 f0       	push   $0xf013afd8
f0116fb8:	6a 70                	push   $0x70
f0116fba:	68 71 af 13 f0       	push   $0xf013af71
f0116fbf:	e8 41 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116fc4:	e8 a4 61 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0116fc9:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116fcc:	74 14                	je     f0116fe2 <test_priority_normal_and_higher+0x4ee>
f0116fce:	83 ec 04             	sub    $0x4,%esp
f0116fd1:	68 d8 af 13 f0       	push   $0xf013afd8
f0116fd6:	6a 71                	push   $0x71
f0116fd8:	68 71 af 13 f0       	push   $0xf013af71
f0116fdd:	e8 23 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116fe2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116fe5:	8b 40 74             	mov    0x74(%eax),%eax
f0116fe8:	83 f8 14             	cmp    $0x14,%eax
f0116feb:	75 16                	jne    f0117003 <test_priority_normal_and_higher+0x50f>
f0116fed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ff0:	8b 40 74             	mov    0x74(%eax),%eax
f0116ff3:	83 f8 0f             	cmp    $0xf,%eax
f0116ff6:	75 0b                	jne    f0117003 <test_priority_normal_and_higher+0x50f>
f0116ff8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ffb:	8b 40 74             	mov    0x74(%eax),%eax
f0116ffe:	83 f8 14             	cmp    $0x14,%eax
f0117001:	74 14                	je     f0117017 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0117003:	83 ec 04             	sub    $0x4,%esp
f0117006:	68 d0 b0 13 f0       	push   $0xf013b0d0
f011700b:	6a 74                	push   $0x74
f011700d:	68 71 af 13 f0       	push   $0xf013af71
f0117012:	e8 ee 91 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0117017:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f011701e:	eb 1b                	jmp    f011703b <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117020:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117023:	8b 48 78             	mov    0x78(%eax),%ecx
f0117026:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117029:	89 d0                	mov    %edx,%eax
f011702b:	01 c0                	add    %eax,%eax
f011702d:	01 d0                	add    %edx,%eax
f011702f:	c1 e0 03             	shl    $0x3,%eax
f0117032:	01 c8                	add    %ecx,%eax
f0117034:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0117038:	ff 45 d4             	incl   -0x2c(%ebp)
f011703b:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011703f:	7e df                	jle    f0117020 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117041:	e8 27 61 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117046:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117049:	e8 a6 cd fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011704e:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117051:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117054:	83 ec 08             	sub    $0x8,%esp
f0117057:	6a 05                	push   $0x5
f0117059:	50                   	push   %eax
f011705a:	e8 5a 45 ff ff       	call   f010b5b9 <set_program_priority>
f011705f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117062:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117065:	83 ec 08             	sub    $0x8,%esp
f0117068:	6a 05                	push   $0x5
f011706a:	50                   	push   %eax
f011706b:	e8 49 45 ff ff       	call   f010b5b9 <set_program_priority>
f0117070:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117073:	e8 7c cd fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117078:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011707b:	74 14                	je     f0117091 <test_priority_normal_and_higher+0x59d>
f011707d:	83 ec 04             	sub    $0x4,%esp
f0117080:	68 d8 af 13 f0       	push   $0xf013afd8
f0117085:	6a 7f                	push   $0x7f
f0117087:	68 71 af 13 f0       	push   $0xf013af71
f011708c:	e8 74 91 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117091:	e8 d7 60 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117096:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117099:	74 17                	je     f01170b2 <test_priority_normal_and_higher+0x5be>
f011709b:	83 ec 04             	sub    $0x4,%esp
f011709e:	68 d8 af 13 f0       	push   $0xf013afd8
f01170a3:	68 80 00 00 00       	push   $0x80
f01170a8:	68 71 af 13 f0       	push   $0xf013af71
f01170ad:	e8 53 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01170b2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170b5:	8b 40 74             	mov    0x74(%eax),%eax
f01170b8:	83 f8 14             	cmp    $0x14,%eax
f01170bb:	75 16                	jne    f01170d3 <test_priority_normal_and_higher+0x5df>
f01170bd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170c0:	8b 40 74             	mov    0x74(%eax),%eax
f01170c3:	83 f8 1e             	cmp    $0x1e,%eax
f01170c6:	75 0b                	jne    f01170d3 <test_priority_normal_and_higher+0x5df>
f01170c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170cb:	8b 40 74             	mov    0x74(%eax),%eax
f01170ce:	83 f8 28             	cmp    $0x28,%eax
f01170d1:	74 17                	je     f01170ea <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01170d3:	83 ec 04             	sub    $0x4,%esp
f01170d6:	68 0c b1 13 f0       	push   $0xf013b10c
f01170db:	68 83 00 00 00       	push   $0x83
f01170e0:	68 71 af 13 f0       	push   $0xf013af71
f01170e5:	e8 1b 91 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f01170ea:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01170f1:	eb 1b                	jmp    f011710e <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01170f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170f6:	8b 48 78             	mov    0x78(%eax),%ecx
f01170f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01170fc:	89 d0                	mov    %edx,%eax
f01170fe:	01 c0                	add    %eax,%eax
f0117100:	01 d0                	add    %edx,%eax
f0117102:	c1 e0 03             	shl    $0x3,%eax
f0117105:	01 c8                	add    %ecx,%eax
f0117107:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011710b:	ff 45 d0             	incl   -0x30(%ebp)
f011710e:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117112:	7e df                	jle    f01170f3 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117114:	e8 54 60 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117119:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011711c:	e8 d3 cc fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117121:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117124:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117127:	83 ec 08             	sub    $0x8,%esp
f011712a:	6a 05                	push   $0x5
f011712c:	50                   	push   %eax
f011712d:	e8 87 44 ff ff       	call   f010b5b9 <set_program_priority>
f0117132:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117135:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117138:	83 ec 08             	sub    $0x8,%esp
f011713b:	6a 04                	push   $0x4
f011713d:	50                   	push   %eax
f011713e:	e8 76 44 ff ff       	call   f010b5b9 <set_program_priority>
f0117143:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117146:	e8 a9 cc fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011714b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011714e:	74 17                	je     f0117167 <test_priority_normal_and_higher+0x673>
f0117150:	83 ec 04             	sub    $0x4,%esp
f0117153:	68 d8 af 13 f0       	push   $0xf013afd8
f0117158:	68 8e 00 00 00       	push   $0x8e
f011715d:	68 71 af 13 f0       	push   $0xf013af71
f0117162:	e8 9e 90 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117167:	e8 01 60 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011716c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011716f:	74 17                	je     f0117188 <test_priority_normal_and_higher+0x694>
f0117171:	83 ec 04             	sub    $0x4,%esp
f0117174:	68 d8 af 13 f0       	push   $0xf013afd8
f0117179:	68 8f 00 00 00       	push   $0x8f
f011717e:	68 71 af 13 f0       	push   $0xf013af71
f0117183:	e8 7d 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117188:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011718b:	8b 40 74             	mov    0x74(%eax),%eax
f011718e:	83 f8 14             	cmp    $0x14,%eax
f0117191:	75 16                	jne    f01171a9 <test_priority_normal_and_higher+0x6b5>
f0117193:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117196:	8b 40 74             	mov    0x74(%eax),%eax
f0117199:	83 f8 1e             	cmp    $0x1e,%eax
f011719c:	75 0b                	jne    f01171a9 <test_priority_normal_and_higher+0x6b5>
f011719e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171a1:	8b 40 74             	mov    0x74(%eax),%eax
f01171a4:	83 f8 28             	cmp    $0x28,%eax
f01171a7:	74 17                	je     f01171c0 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f01171a9:	83 ec 04             	sub    $0x4,%esp
f01171ac:	68 0c b1 13 f0       	push   $0xf013b10c
f01171b1:	68 92 00 00 00       	push   $0x92
f01171b6:	68 71 af 13 f0       	push   $0xf013af71
f01171bb:	e8 45 90 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f01171c0:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01171c7:	eb 1b                	jmp    f01171e4 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01171c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171cc:	8b 48 78             	mov    0x78(%eax),%ecx
f01171cf:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01171d2:	89 d0                	mov    %edx,%eax
f01171d4:	01 c0                	add    %eax,%eax
f01171d6:	01 d0                	add    %edx,%eax
f01171d8:	c1 e0 03             	shl    $0x3,%eax
f01171db:	01 c8                	add    %ecx,%eax
f01171dd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01171e1:	ff 45 cc             	incl   -0x34(%ebp)
f01171e4:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01171e8:	7e df                	jle    f01171c9 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01171ea:	e8 7e 5f ff ff       	call   f010d16d <sys_calculate_free_frames>
f01171ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01171f2:	e8 fd cb fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01171f7:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01171fa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171fd:	83 ec 08             	sub    $0x8,%esp
f0117200:	6a 05                	push   $0x5
f0117202:	50                   	push   %eax
f0117203:	e8 b1 43 ff ff       	call   f010b5b9 <set_program_priority>
f0117208:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011720b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011720e:	83 ec 08             	sub    $0x8,%esp
f0117211:	6a 04                	push   $0x4
f0117213:	50                   	push   %eax
f0117214:	e8 a0 43 ff ff       	call   f010b5b9 <set_program_priority>
f0117219:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011721c:	e8 d3 cb fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117221:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117224:	74 17                	je     f011723d <test_priority_normal_and_higher+0x749>
f0117226:	83 ec 04             	sub    $0x4,%esp
f0117229:	68 d8 af 13 f0       	push   $0xf013afd8
f011722e:	68 9d 00 00 00       	push   $0x9d
f0117233:	68 71 af 13 f0       	push   $0xf013af71
f0117238:	e8 c8 8f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011723d:	e8 2b 5f ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117242:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117245:	74 17                	je     f011725e <test_priority_normal_and_higher+0x76a>
f0117247:	83 ec 04             	sub    $0x4,%esp
f011724a:	68 d8 af 13 f0       	push   $0xf013afd8
f011724f:	68 9e 00 00 00       	push   $0x9e
f0117254:	68 71 af 13 f0       	push   $0xf013af71
f0117259:	e8 a7 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011725e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117261:	8b 40 74             	mov    0x74(%eax),%eax
f0117264:	83 f8 14             	cmp    $0x14,%eax
f0117267:	75 16                	jne    f011727f <test_priority_normal_and_higher+0x78b>
f0117269:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011726c:	8b 40 74             	mov    0x74(%eax),%eax
f011726f:	83 f8 3c             	cmp    $0x3c,%eax
f0117272:	75 0b                	jne    f011727f <test_priority_normal_and_higher+0x78b>
f0117274:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117277:	8b 40 74             	mov    0x74(%eax),%eax
f011727a:	83 f8 28             	cmp    $0x28,%eax
f011727d:	74 17                	je     f0117296 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f011727f:	83 ec 04             	sub    $0x4,%esp
f0117282:	68 0c b1 13 f0       	push   $0xf013b10c
f0117287:	68 a1 00 00 00       	push   $0xa1
f011728c:	68 71 af 13 f0       	push   $0xf013af71
f0117291:	e8 6f 8f fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0117296:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f011729d:	eb 1b                	jmp    f01172ba <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f011729f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172a2:	8b 48 78             	mov    0x78(%eax),%ecx
f01172a5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01172a8:	89 d0                	mov    %edx,%eax
f01172aa:	01 c0                	add    %eax,%eax
f01172ac:	01 d0                	add    %edx,%eax
f01172ae:	c1 e0 03             	shl    $0x3,%eax
f01172b1:	01 c8                	add    %ecx,%eax
f01172b3:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01172b7:	ff 45 c8             	incl   -0x38(%ebp)
f01172ba:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01172be:	7e df                	jle    f011729f <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01172c0:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01172c7:	eb 1b                	jmp    f01172e4 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01172c9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172cc:	8b 48 78             	mov    0x78(%eax),%ecx
f01172cf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01172d2:	89 d0                	mov    %edx,%eax
f01172d4:	01 c0                	add    %eax,%eax
f01172d6:	01 d0                	add    %edx,%eax
f01172d8:	c1 e0 03             	shl    $0x3,%eax
f01172db:	01 c8                	add    %ecx,%eax
f01172dd:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01172e1:	ff 45 c4             	incl   -0x3c(%ebp)
f01172e4:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01172e8:	7e df                	jle    f01172c9 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01172ea:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01172f1:	eb 7a                	jmp    f011736d <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01172f3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01172f6:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01172fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117300:	8b 58 78             	mov    0x78(%eax),%ebx
f0117303:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117306:	89 d0                	mov    %edx,%eax
f0117308:	01 c0                	add    %eax,%eax
f011730a:	01 d0                	add    %edx,%eax
f011730c:	c1 e0 03             	shl    $0x3,%eax
f011730f:	01 d8                	add    %ebx,%eax
f0117311:	8b 00                	mov    (%eax),%eax
f0117313:	39 c1                	cmp    %eax,%ecx
f0117315:	74 17                	je     f011732e <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0117317:	83 ec 04             	sub    $0x4,%esp
f011731a:	68 48 b1 13 f0       	push   $0xf013b148
f011731f:	68 af 00 00 00       	push   $0xaf
f0117324:	68 71 af 13 f0       	push   $0xf013af71
f0117329:	e8 d7 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011732e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117331:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117338:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011733b:	8b 58 78             	mov    0x78(%eax),%ebx
f011733e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117341:	89 d0                	mov    %edx,%eax
f0117343:	01 c0                	add    %eax,%eax
f0117345:	01 d0                	add    %edx,%eax
f0117347:	c1 e0 03             	shl    $0x3,%eax
f011734a:	01 d8                	add    %ebx,%eax
f011734c:	8b 40 08             	mov    0x8(%eax),%eax
f011734f:	39 c1                	cmp    %eax,%ecx
f0117351:	74 17                	je     f011736a <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0117353:	83 ec 04             	sub    $0x4,%esp
f0117356:	68 48 b1 13 f0       	push   $0xf013b148
f011735b:	68 b2 00 00 00       	push   $0xb2
f0117360:	68 71 af 13 f0       	push   $0xf013af71
f0117365:	e8 9b 8e fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011736a:	ff 45 c0             	incl   -0x40(%ebp)
f011736d:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117371:	7e 80                	jle    f01172f3 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117373:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011737a:	eb 7a                	jmp    f01173f6 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011737c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011737f:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117386:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117389:	8b 58 78             	mov    0x78(%eax),%ebx
f011738c:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011738f:	89 d0                	mov    %edx,%eax
f0117391:	01 c0                	add    %eax,%eax
f0117393:	01 d0                	add    %edx,%eax
f0117395:	c1 e0 03             	shl    $0x3,%eax
f0117398:	01 d8                	add    %ebx,%eax
f011739a:	8b 00                	mov    (%eax),%eax
f011739c:	39 c1                	cmp    %eax,%ecx
f011739e:	74 17                	je     f01173b7 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f01173a0:	83 ec 04             	sub    $0x4,%esp
f01173a3:	68 48 b1 13 f0       	push   $0xf013b148
f01173a8:	68 b8 00 00 00       	push   $0xb8
f01173ad:	68 71 af 13 f0       	push   $0xf013af71
f01173b2:	e8 4e 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01173b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01173ba:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01173c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173c4:	8b 58 78             	mov    0x78(%eax),%ebx
f01173c7:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01173ca:	89 d0                	mov    %edx,%eax
f01173cc:	01 c0                	add    %eax,%eax
f01173ce:	01 d0                	add    %edx,%eax
f01173d0:	c1 e0 03             	shl    $0x3,%eax
f01173d3:	01 d8                	add    %ebx,%eax
f01173d5:	8b 40 08             	mov    0x8(%eax),%eax
f01173d8:	39 c1                	cmp    %eax,%ecx
f01173da:	74 17                	je     f01173f3 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f01173dc:	83 ec 04             	sub    $0x4,%esp
f01173df:	68 48 b1 13 f0       	push   $0xf013b148
f01173e4:	68 bb 00 00 00       	push   $0xbb
f01173e9:	68 71 af 13 f0       	push   $0xf013af71
f01173ee:	e8 12 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01173f3:	ff 45 bc             	incl   -0x44(%ebp)
f01173f6:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01173fa:	7e 80                	jle    f011737c <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01173fc:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117403:	eb 7a                	jmp    f011747f <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117405:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117408:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011740f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117412:	8b 58 78             	mov    0x78(%eax),%ebx
f0117415:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117418:	89 d0                	mov    %edx,%eax
f011741a:	01 c0                	add    %eax,%eax
f011741c:	01 d0                	add    %edx,%eax
f011741e:	c1 e0 03             	shl    $0x3,%eax
f0117421:	01 d8                	add    %ebx,%eax
f0117423:	8b 00                	mov    (%eax),%eax
f0117425:	39 c1                	cmp    %eax,%ecx
f0117427:	74 17                	je     f0117440 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0117429:	83 ec 04             	sub    $0x4,%esp
f011742c:	68 48 b1 13 f0       	push   $0xf013b148
f0117431:	68 c1 00 00 00       	push   $0xc1
f0117436:	68 71 af 13 f0       	push   $0xf013af71
f011743b:	e8 c5 8d fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117440:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117443:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011744a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011744d:	8b 58 78             	mov    0x78(%eax),%ebx
f0117450:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117453:	89 d0                	mov    %edx,%eax
f0117455:	01 c0                	add    %eax,%eax
f0117457:	01 d0                	add    %edx,%eax
f0117459:	c1 e0 03             	shl    $0x3,%eax
f011745c:	01 d8                	add    %ebx,%eax
f011745e:	8b 40 08             	mov    0x8(%eax),%eax
f0117461:	39 c1                	cmp    %eax,%ecx
f0117463:	74 17                	je     f011747c <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0117465:	83 ec 04             	sub    $0x4,%esp
f0117468:	68 48 b1 13 f0       	push   $0xf013b148
f011746d:	68 c4 00 00 00       	push   $0xc4
f0117472:	68 71 af 13 f0       	push   $0xf013af71
f0117477:	e8 89 8d fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011747c:	ff 45 b8             	incl   -0x48(%ebp)
f011747f:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117483:	7e 80                	jle    f0117405 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117485:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011748c:	75 6e 61 
f011748f:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117496:	6c 00 00 
f0117499:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011749f:	b9 17 00 00 00       	mov    $0x17,%ecx
f01174a4:	b8 00 00 00 00       	mov    $0x0,%eax
f01174a9:	89 d7                	mov    %edx,%edi
f01174ab:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01174ad:	83 ec 0c             	sub    $0xc,%esp
f01174b0:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01174b6:	50                   	push   %eax
f01174b7:	e8 b4 98 fe ff       	call   f0100d70 <execute_command>
f01174bc:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01174bf:	eb 10                	jmp    f01174d1 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01174c1:	83 ec 0c             	sub    $0xc,%esp
f01174c4:	68 7c b1 13 f0       	push   $0xf013b17c
f01174c9:	e8 40 98 fe ff       	call   f0100d0e <cprintf>
f01174ce:	83 c4 10             	add    $0x10,%esp
	}
}
f01174d1:	90                   	nop
f01174d2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01174d5:	5b                   	pop    %ebx
f01174d6:	5e                   	pop    %esi
f01174d7:	5f                   	pop    %edi
f01174d8:	5d                   	pop    %ebp
f01174d9:	c3                   	ret    

f01174da <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01174da:	55                   	push   %ebp
f01174db:	89 e5                	mov    %esp,%ebp
f01174dd:	57                   	push   %edi
f01174de:	56                   	push   %esi
f01174df:	53                   	push   %ebx
f01174e0:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01174e6:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01174eb:	84 c0                	test   %al,%al
f01174ed:	0f 84 be 09 00 00    	je     f0117eb1 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01174f3:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01174fa:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117500:	bb b8 b1 13 f0       	mov    $0xf013b1b8,%ebx
f0117505:	ba 04 00 00 00       	mov    $0x4,%edx
f011750a:	89 c7                	mov    %eax,%edi
f011750c:	89 de                	mov    %ebx,%esi
f011750e:	89 d1                	mov    %edx,%ecx
f0117510:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117512:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117518:	b9 15 00 00 00       	mov    $0x15,%ecx
f011751d:	b8 00 00 00 00       	mov    $0x0,%eax
f0117522:	89 d7                	mov    %edx,%edi
f0117524:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117526:	83 ec 0c             	sub    $0xc,%esp
f0117529:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011752f:	50                   	push   %eax
f0117530:	e8 3b 98 fe ff       	call   f0100d70 <execute_command>
f0117535:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117538:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011753e:	bb 74 b4 13 f0       	mov    $0xf013b474,%ebx
f0117543:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117548:	89 c7                	mov    %eax,%edi
f011754a:	89 de                	mov    %ebx,%esi
f011754c:	89 d1                	mov    %edx,%ecx
f011754e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117550:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117556:	b9 57 00 00 00       	mov    $0x57,%ecx
f011755b:	b0 00                	mov    $0x0,%al
f011755d:	89 d7                	mov    %edx,%edi
f011755f:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117561:	83 ec 0c             	sub    $0xc,%esp
f0117564:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011756a:	50                   	push   %eax
f011756b:	e8 00 98 fe ff       	call   f0100d70 <execute_command>
f0117570:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117573:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117579:	bb d8 b4 13 f0       	mov    $0xf013b4d8,%ebx
f011757e:	ba 17 00 00 00       	mov    $0x17,%edx
f0117583:	89 c7                	mov    %eax,%edi
f0117585:	89 de                	mov    %ebx,%esi
f0117587:	89 d1                	mov    %edx,%ecx
f0117589:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011758b:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117591:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117596:	b0 00                	mov    $0x0,%al
f0117598:	89 d7                	mov    %edx,%edi
f011759a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011759c:	83 ec 0c             	sub    $0xc,%esp
f011759f:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01175a5:	50                   	push   %eax
f01175a6:	e8 c5 97 fe ff       	call   f0100d70 <execute_command>
f01175ab:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01175ae:	83 ec 04             	sub    $0x4,%esp
f01175b1:	6a 00                	push   $0x0
f01175b3:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01175b6:	50                   	push   %eax
f01175b7:	68 00 10 00 00       	push   $0x1000
f01175bc:	e8 1a 2b ff ff       	call   f010a0db <envid2env>
f01175c1:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01175c4:	83 ec 04             	sub    $0x4,%esp
f01175c7:	6a 00                	push   $0x0
f01175c9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01175cc:	50                   	push   %eax
f01175cd:	68 01 10 00 00       	push   $0x1001
f01175d2:	e8 04 2b ff ff       	call   f010a0db <envid2env>
f01175d7:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01175da:	83 ec 04             	sub    $0x4,%esp
f01175dd:	6a 00                	push   $0x0
f01175df:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01175e2:	50                   	push   %eax
f01175e3:	68 02 10 00 00       	push   $0x1002
f01175e8:	e8 ee 2a ff ff       	call   f010a0db <envid2env>
f01175ed:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01175f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01175f3:	85 c0                	test   %eax,%eax
f01175f5:	74 0e                	je     f0117605 <test_priority_normal_and_lower+0x12b>
f01175f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175fa:	85 c0                	test   %eax,%eax
f01175fc:	74 07                	je     f0117605 <test_priority_normal_and_lower+0x12b>
f01175fe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117601:	85 c0                	test   %eax,%eax
f0117603:	75 17                	jne    f011761c <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117605:	83 ec 04             	sub    $0x4,%esp
f0117608:	68 58 af 13 f0       	push   $0xf013af58
f011760d:	68 eb 00 00 00       	push   $0xeb
f0117612:	68 71 af 13 f0       	push   $0xf013af71
f0117617:	e8 e9 8b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011761c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011761f:	8b 40 74             	mov    0x74(%eax),%eax
f0117622:	83 f8 14             	cmp    $0x14,%eax
f0117625:	75 16                	jne    f011763d <test_priority_normal_and_lower+0x163>
f0117627:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011762a:	8b 40 74             	mov    0x74(%eax),%eax
f011762d:	83 f8 1e             	cmp    $0x1e,%eax
f0117630:	75 0b                	jne    f011763d <test_priority_normal_and_lower+0x163>
f0117632:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117635:	8b 40 74             	mov    0x74(%eax),%eax
f0117638:	83 f8 28             	cmp    $0x28,%eax
f011763b:	74 17                	je     f0117654 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f011763d:	83 ec 04             	sub    $0x4,%esp
f0117640:	68 8c af 13 f0       	push   $0xf013af8c
f0117645:	68 ee 00 00 00       	push   $0xee
f011764a:	68 71 af 13 f0       	push   $0xf013af71
f011764f:	e8 b1 8b fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0117654:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011765b:	eb 44                	jmp    f01176a1 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011765d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117660:	8b 48 78             	mov    0x78(%eax),%ecx
f0117663:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117666:	89 d0                	mov    %edx,%eax
f0117668:	01 c0                	add    %eax,%eax
f011766a:	01 d0                	add    %edx,%eax
f011766c:	c1 e0 03             	shl    $0x3,%eax
f011766f:	01 c8                	add    %ecx,%eax
f0117671:	8b 10                	mov    (%eax),%edx
f0117673:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117676:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011767d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117680:	8b 48 78             	mov    0x78(%eax),%ecx
f0117683:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117686:	89 d0                	mov    %edx,%eax
f0117688:	01 c0                	add    %eax,%eax
f011768a:	01 d0                	add    %edx,%eax
f011768c:	c1 e0 03             	shl    $0x3,%eax
f011768f:	01 c8                	add    %ecx,%eax
f0117691:	8b 50 08             	mov    0x8(%eax),%edx
f0117694:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117697:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011769e:	ff 45 e4             	incl   -0x1c(%ebp)
f01176a1:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01176a5:	7e b6                	jle    f011765d <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01176a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01176ae:	eb 44                	jmp    f01176f4 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01176b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176b3:	8b 48 78             	mov    0x78(%eax),%ecx
f01176b6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01176b9:	89 d0                	mov    %edx,%eax
f01176bb:	01 c0                	add    %eax,%eax
f01176bd:	01 d0                	add    %edx,%eax
f01176bf:	c1 e0 03             	shl    $0x3,%eax
f01176c2:	01 c8                	add    %ecx,%eax
f01176c4:	8b 10                	mov    (%eax),%edx
f01176c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01176c9:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01176d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176d3:	8b 48 78             	mov    0x78(%eax),%ecx
f01176d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01176d9:	89 d0                	mov    %edx,%eax
f01176db:	01 c0                	add    %eax,%eax
f01176dd:	01 d0                	add    %edx,%eax
f01176df:	c1 e0 03             	shl    $0x3,%eax
f01176e2:	01 c8                	add    %ecx,%eax
f01176e4:	8b 50 08             	mov    0x8(%eax),%edx
f01176e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01176ea:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01176f1:	ff 45 e0             	incl   -0x20(%ebp)
f01176f4:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01176f8:	7e b6                	jle    f01176b0 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01176fa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117701:	eb 44                	jmp    f0117747 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117703:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117706:	8b 48 78             	mov    0x78(%eax),%ecx
f0117709:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011770c:	89 d0                	mov    %edx,%eax
f011770e:	01 c0                	add    %eax,%eax
f0117710:	01 d0                	add    %edx,%eax
f0117712:	c1 e0 03             	shl    $0x3,%eax
f0117715:	01 c8                	add    %ecx,%eax
f0117717:	8b 10                	mov    (%eax),%edx
f0117719:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011771c:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117723:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117726:	8b 48 78             	mov    0x78(%eax),%ecx
f0117729:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011772c:	89 d0                	mov    %edx,%eax
f011772e:	01 c0                	add    %eax,%eax
f0117730:	01 d0                	add    %edx,%eax
f0117732:	c1 e0 03             	shl    $0x3,%eax
f0117735:	01 c8                	add    %ecx,%eax
f0117737:	8b 50 08             	mov    0x8(%eax),%edx
f011773a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011773d:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117744:	ff 45 dc             	incl   -0x24(%ebp)
f0117747:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011774b:	7e b6                	jle    f0117703 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011774d:	e8 1b 5a ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117752:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117755:	e8 9a c6 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011775a:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011775d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117760:	83 ec 08             	sub    $0x8,%esp
f0117763:	6a 03                	push   $0x3
f0117765:	50                   	push   %eax
f0117766:	e8 4e 3e ff ff       	call   f010b5b9 <set_program_priority>
f011776b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011776e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117771:	83 ec 08             	sub    $0x8,%esp
f0117774:	6a 03                	push   $0x3
f0117776:	50                   	push   %eax
f0117777:	e8 3d 3e ff ff       	call   f010b5b9 <set_program_priority>
f011777c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011777f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117782:	83 ec 08             	sub    $0x8,%esp
f0117785:	6a 03                	push   $0x3
f0117787:	50                   	push   %eax
f0117788:	e8 2c 3e ff ff       	call   f010b5b9 <set_program_priority>
f011778d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117790:	e8 5f c6 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117795:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117798:	74 17                	je     f01177b1 <test_priority_normal_and_lower+0x2d7>
f011779a:	83 ec 04             	sub    $0x4,%esp
f011779d:	68 d8 af 13 f0       	push   $0xf013afd8
f01177a2:	68 0a 01 00 00       	push   $0x10a
f01177a7:	68 71 af 13 f0       	push   $0xf013af71
f01177ac:	e8 54 8a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01177b1:	e8 b7 59 ff ff       	call   f010d16d <sys_calculate_free_frames>
f01177b6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01177b9:	74 17                	je     f01177d2 <test_priority_normal_and_lower+0x2f8>
f01177bb:	83 ec 04             	sub    $0x4,%esp
f01177be:	68 d8 af 13 f0       	push   $0xf013afd8
f01177c3:	68 0b 01 00 00       	push   $0x10b
f01177c8:	68 71 af 13 f0       	push   $0xf013af71
f01177cd:	e8 33 8a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01177d2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177d5:	8b 40 74             	mov    0x74(%eax),%eax
f01177d8:	83 f8 14             	cmp    $0x14,%eax
f01177db:	75 16                	jne    f01177f3 <test_priority_normal_and_lower+0x319>
f01177dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177e0:	8b 40 74             	mov    0x74(%eax),%eax
f01177e3:	83 f8 1e             	cmp    $0x1e,%eax
f01177e6:	75 0b                	jne    f01177f3 <test_priority_normal_and_lower+0x319>
f01177e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177eb:	8b 40 74             	mov    0x74(%eax),%eax
f01177ee:	83 f8 28             	cmp    $0x28,%eax
f01177f1:	74 17                	je     f011780a <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01177f3:	83 ec 04             	sub    $0x4,%esp
f01177f6:	68 04 b0 13 f0       	push   $0xf013b004
f01177fb:	68 0e 01 00 00       	push   $0x10e
f0117800:	68 71 af 13 f0       	push   $0xf013af71
f0117805:	e8 fb 89 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f011780a:	e8 5e 59 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011780f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117812:	e8 dd c5 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117817:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011781a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011781d:	83 ec 08             	sub    $0x8,%esp
f0117820:	6a 02                	push   $0x2
f0117822:	50                   	push   %eax
f0117823:	e8 91 3d ff ff       	call   f010b5b9 <set_program_priority>
f0117828:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011782b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011782e:	83 ec 08             	sub    $0x8,%esp
f0117831:	6a 02                	push   $0x2
f0117833:	50                   	push   %eax
f0117834:	e8 80 3d ff ff       	call   f010b5b9 <set_program_priority>
f0117839:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011783c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011783f:	83 ec 08             	sub    $0x8,%esp
f0117842:	6a 02                	push   $0x2
f0117844:	50                   	push   %eax
f0117845:	e8 6f 3d ff ff       	call   f010b5b9 <set_program_priority>
f011784a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011784d:	e8 a2 c5 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117852:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117855:	74 17                	je     f011786e <test_priority_normal_and_lower+0x394>
f0117857:	83 ec 04             	sub    $0x4,%esp
f011785a:	68 d8 af 13 f0       	push   $0xf013afd8
f011785f:	68 18 01 00 00       	push   $0x118
f0117864:	68 71 af 13 f0       	push   $0xf013af71
f0117869:	e8 97 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011786e:	e8 fa 58 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117873:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117876:	74 21                	je     f0117899 <test_priority_normal_and_lower+0x3bf>
f0117878:	e8 f0 58 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011787d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117880:	29 c2                	sub    %eax,%edx
f0117882:	89 d0                	mov    %edx,%eax
f0117884:	50                   	push   %eax
f0117885:	68 58 b0 13 f0       	push   $0xf013b058
f011788a:	68 19 01 00 00       	push   $0x119
f011788f:	68 71 af 13 f0       	push   $0xf013af71
f0117894:	e8 6c 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117899:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011789c:	8b 40 74             	mov    0x74(%eax),%eax
f011789f:	83 f8 0a             	cmp    $0xa,%eax
f01178a2:	75 16                	jne    f01178ba <test_priority_normal_and_lower+0x3e0>
f01178a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178a7:	8b 40 74             	mov    0x74(%eax),%eax
f01178aa:	83 f8 0f             	cmp    $0xf,%eax
f01178ad:	75 0b                	jne    f01178ba <test_priority_normal_and_lower+0x3e0>
f01178af:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01178b2:	8b 40 74             	mov    0x74(%eax),%eax
f01178b5:	83 f8 14             	cmp    $0x14,%eax
f01178b8:	74 17                	je     f01178d1 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f01178ba:	83 ec 04             	sub    $0x4,%esp
f01178bd:	68 88 b0 13 f0       	push   $0xf013b088
f01178c2:	68 1c 01 00 00       	push   $0x11c
f01178c7:	68 71 af 13 f0       	push   $0xf013af71
f01178cc:	e8 34 89 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01178d1:	e8 97 58 ff ff       	call   f010d16d <sys_calculate_free_frames>
f01178d6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178d9:	e8 16 c5 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01178de:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01178e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178e4:	83 ec 08             	sub    $0x8,%esp
f01178e7:	6a 02                	push   $0x2
f01178e9:	50                   	push   %eax
f01178ea:	e8 ca 3c ff ff       	call   f010b5b9 <set_program_priority>
f01178ef:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01178f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178f5:	83 ec 08             	sub    $0x8,%esp
f01178f8:	6a 02                	push   $0x2
f01178fa:	50                   	push   %eax
f01178fb:	e8 b9 3c ff ff       	call   f010b5b9 <set_program_priority>
f0117900:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117903:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117906:	83 ec 08             	sub    $0x8,%esp
f0117909:	6a 02                	push   $0x2
f011790b:	50                   	push   %eax
f011790c:	e8 a8 3c ff ff       	call   f010b5b9 <set_program_priority>
f0117911:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117914:	e8 db c4 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117919:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011791c:	74 17                	je     f0117935 <test_priority_normal_and_lower+0x45b>
f011791e:	83 ec 04             	sub    $0x4,%esp
f0117921:	68 d8 af 13 f0       	push   $0xf013afd8
f0117926:	68 26 01 00 00       	push   $0x126
f011792b:	68 71 af 13 f0       	push   $0xf013af71
f0117930:	e8 d0 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117935:	e8 33 58 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011793a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011793d:	74 21                	je     f0117960 <test_priority_normal_and_lower+0x486>
f011793f:	e8 29 58 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117944:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117947:	29 c2                	sub    %eax,%edx
f0117949:	89 d0                	mov    %edx,%eax
f011794b:	50                   	push   %eax
f011794c:	68 58 b0 13 f0       	push   $0xf013b058
f0117951:	68 27 01 00 00       	push   $0x127
f0117956:	68 71 af 13 f0       	push   $0xf013af71
f011795b:	e8 a5 88 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117960:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117963:	8b 40 74             	mov    0x74(%eax),%eax
f0117966:	83 f8 0a             	cmp    $0xa,%eax
f0117969:	75 16                	jne    f0117981 <test_priority_normal_and_lower+0x4a7>
f011796b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011796e:	8b 40 74             	mov    0x74(%eax),%eax
f0117971:	83 f8 0f             	cmp    $0xf,%eax
f0117974:	75 0b                	jne    f0117981 <test_priority_normal_and_lower+0x4a7>
f0117976:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117979:	8b 40 74             	mov    0x74(%eax),%eax
f011797c:	83 f8 0a             	cmp    $0xa,%eax
f011797f:	74 17                	je     f0117998 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117981:	83 ec 04             	sub    $0x4,%esp
f0117984:	68 88 b0 13 f0       	push   $0xf013b088
f0117989:	68 2a 01 00 00       	push   $0x12a
f011798e:	68 71 af 13 f0       	push   $0xf013af71
f0117993:	e8 6d 88 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f0117998:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011799f:	eb 7a                	jmp    f0117a1b <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01179a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01179a4:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01179ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179ae:	8b 58 78             	mov    0x78(%eax),%ebx
f01179b1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01179b4:	89 d0                	mov    %edx,%eax
f01179b6:	01 c0                	add    %eax,%eax
f01179b8:	01 d0                	add    %edx,%eax
f01179ba:	c1 e0 03             	shl    $0x3,%eax
f01179bd:	01 d8                	add    %ebx,%eax
f01179bf:	8b 00                	mov    (%eax),%eax
f01179c1:	39 c1                	cmp    %eax,%ecx
f01179c3:	74 17                	je     f01179dc <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01179c5:	83 ec 04             	sub    $0x4,%esp
f01179c8:	68 48 b1 13 f0       	push   $0xf013b148
f01179cd:	68 2f 01 00 00       	push   $0x12f
f01179d2:	68 71 af 13 f0       	push   $0xf013af71
f01179d7:	e8 29 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01179dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01179df:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01179e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179e9:	8b 58 78             	mov    0x78(%eax),%ebx
f01179ec:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01179ef:	89 d0                	mov    %edx,%eax
f01179f1:	01 c0                	add    %eax,%eax
f01179f3:	01 d0                	add    %edx,%eax
f01179f5:	c1 e0 03             	shl    $0x3,%eax
f01179f8:	01 d8                	add    %ebx,%eax
f01179fa:	8b 40 08             	mov    0x8(%eax),%eax
f01179fd:	39 c1                	cmp    %eax,%ecx
f01179ff:	74 17                	je     f0117a18 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0117a01:	83 ec 04             	sub    $0x4,%esp
f0117a04:	68 48 b1 13 f0       	push   $0xf013b148
f0117a09:	68 32 01 00 00       	push   $0x132
f0117a0e:	68 71 af 13 f0       	push   $0xf013af71
f0117a13:	e8 ed 87 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117a18:	ff 45 d8             	incl   -0x28(%ebp)
f0117a1b:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117a1f:	7e 80                	jle    f01179a1 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117a21:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117a28:	eb 7a                	jmp    f0117aa4 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a2a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117a2d:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117a34:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a37:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a3a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117a3d:	89 d0                	mov    %edx,%eax
f0117a3f:	01 c0                	add    %eax,%eax
f0117a41:	01 d0                	add    %edx,%eax
f0117a43:	c1 e0 03             	shl    $0x3,%eax
f0117a46:	01 d8                	add    %ebx,%eax
f0117a48:	8b 00                	mov    (%eax),%eax
f0117a4a:	39 c1                	cmp    %eax,%ecx
f0117a4c:	74 17                	je     f0117a65 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117a4e:	83 ec 04             	sub    $0x4,%esp
f0117a51:	68 48 b1 13 f0       	push   $0xf013b148
f0117a56:	68 38 01 00 00       	push   $0x138
f0117a5b:	68 71 af 13 f0       	push   $0xf013af71
f0117a60:	e8 a0 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a65:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117a68:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117a6f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a72:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a75:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117a78:	89 d0                	mov    %edx,%eax
f0117a7a:	01 c0                	add    %eax,%eax
f0117a7c:	01 d0                	add    %edx,%eax
f0117a7e:	c1 e0 03             	shl    $0x3,%eax
f0117a81:	01 d8                	add    %ebx,%eax
f0117a83:	8b 40 08             	mov    0x8(%eax),%eax
f0117a86:	39 c1                	cmp    %eax,%ecx
f0117a88:	74 17                	je     f0117aa1 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117a8a:	83 ec 04             	sub    $0x4,%esp
f0117a8d:	68 48 b1 13 f0       	push   $0xf013b148
f0117a92:	68 3b 01 00 00       	push   $0x13b
f0117a97:	68 71 af 13 f0       	push   $0xf013af71
f0117a9c:	e8 64 87 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117aa1:	ff 45 d4             	incl   -0x2c(%ebp)
f0117aa4:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117aa8:	7e 80                	jle    f0117a2a <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117aaa:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117ab1:	eb 7a                	jmp    f0117b2d <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117ab3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117ab6:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117abd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ac0:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ac3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117ac6:	89 d0                	mov    %edx,%eax
f0117ac8:	01 c0                	add    %eax,%eax
f0117aca:	01 d0                	add    %edx,%eax
f0117acc:	c1 e0 03             	shl    $0x3,%eax
f0117acf:	01 d8                	add    %ebx,%eax
f0117ad1:	8b 00                	mov    (%eax),%eax
f0117ad3:	39 c1                	cmp    %eax,%ecx
f0117ad5:	74 17                	je     f0117aee <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117ad7:	83 ec 04             	sub    $0x4,%esp
f0117ada:	68 48 b1 13 f0       	push   $0xf013b148
f0117adf:	68 41 01 00 00       	push   $0x141
f0117ae4:	68 71 af 13 f0       	push   $0xf013af71
f0117ae9:	e8 17 87 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117aee:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117af1:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117af8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117afb:	8b 58 78             	mov    0x78(%eax),%ebx
f0117afe:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117b01:	89 d0                	mov    %edx,%eax
f0117b03:	01 c0                	add    %eax,%eax
f0117b05:	01 d0                	add    %edx,%eax
f0117b07:	c1 e0 03             	shl    $0x3,%eax
f0117b0a:	01 d8                	add    %ebx,%eax
f0117b0c:	8b 40 08             	mov    0x8(%eax),%eax
f0117b0f:	39 c1                	cmp    %eax,%ecx
f0117b11:	74 17                	je     f0117b2a <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0117b13:	83 ec 04             	sub    $0x4,%esp
f0117b16:	68 48 b1 13 f0       	push   $0xf013b148
f0117b1b:	68 44 01 00 00       	push   $0x144
f0117b20:	68 71 af 13 f0       	push   $0xf013af71
f0117b25:	e8 db 86 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117b2a:	ff 45 d0             	incl   -0x30(%ebp)
f0117b2d:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117b31:	7e 80                	jle    f0117ab3 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117b33:	e8 35 56 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117b38:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b3b:	e8 b4 c2 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117b40:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117b43:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b46:	83 ec 08             	sub    $0x8,%esp
f0117b49:	6a 01                	push   $0x1
f0117b4b:	50                   	push   %eax
f0117b4c:	e8 68 3a ff ff       	call   f010b5b9 <set_program_priority>
f0117b51:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117b54:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b57:	83 ec 08             	sub    $0x8,%esp
f0117b5a:	6a 01                	push   $0x1
f0117b5c:	50                   	push   %eax
f0117b5d:	e8 57 3a ff ff       	call   f010b5b9 <set_program_priority>
f0117b62:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117b65:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b68:	83 ec 08             	sub    $0x8,%esp
f0117b6b:	6a 01                	push   $0x1
f0117b6d:	50                   	push   %eax
f0117b6e:	e8 46 3a ff ff       	call   f010b5b9 <set_program_priority>
f0117b73:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117b76:	e8 79 c2 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117b7b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117b7e:	74 17                	je     f0117b97 <test_priority_normal_and_lower+0x6bd>
f0117b80:	83 ec 04             	sub    $0x4,%esp
f0117b83:	68 d8 af 13 f0       	push   $0xf013afd8
f0117b88:	68 4d 01 00 00       	push   $0x14d
f0117b8d:	68 71 af 13 f0       	push   $0xf013af71
f0117b92:	e8 6e 86 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117b97:	e8 d1 55 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117b9c:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117b9f:	83 f8 0d             	cmp    $0xd,%eax
f0117ba2:	74 17                	je     f0117bbb <test_priority_normal_and_lower+0x6e1>
f0117ba4:	83 ec 04             	sub    $0x4,%esp
f0117ba7:	68 e4 b2 13 f0       	push   $0xf013b2e4
f0117bac:	68 4e 01 00 00       	push   $0x14e
f0117bb1:	68 71 af 13 f0       	push   $0xf013af71
f0117bb6:	e8 4a 86 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117bbb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117bbe:	8b 40 74             	mov    0x74(%eax),%eax
f0117bc1:	83 f8 05             	cmp    $0x5,%eax
f0117bc4:	75 16                	jne    f0117bdc <test_priority_normal_and_lower+0x702>
f0117bc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117bc9:	8b 40 74             	mov    0x74(%eax),%eax
f0117bcc:	83 f8 07             	cmp    $0x7,%eax
f0117bcf:	75 0b                	jne    f0117bdc <test_priority_normal_and_lower+0x702>
f0117bd1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117bd4:	8b 40 74             	mov    0x74(%eax),%eax
f0117bd7:	83 f8 05             	cmp    $0x5,%eax
f0117bda:	74 17                	je     f0117bf3 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117bdc:	83 ec 04             	sub    $0x4,%esp
f0117bdf:	68 2c b3 13 f0       	push   $0xf013b32c
f0117be4:	68 51 01 00 00       	push   $0x151
f0117be9:	68 71 af 13 f0       	push   $0xf013af71
f0117bee:	e8 12 86 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117bf3:	e8 75 55 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117bf8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117bfb:	e8 f4 c1 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117c00:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117c03:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c06:	83 ec 08             	sub    $0x8,%esp
f0117c09:	6a 01                	push   $0x1
f0117c0b:	50                   	push   %eax
f0117c0c:	e8 a8 39 ff ff       	call   f010b5b9 <set_program_priority>
f0117c11:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117c14:	e8 db c1 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117c19:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117c1c:	74 17                	je     f0117c35 <test_priority_normal_and_lower+0x75b>
f0117c1e:	83 ec 04             	sub    $0x4,%esp
f0117c21:	68 d8 af 13 f0       	push   $0xf013afd8
f0117c26:	68 57 01 00 00       	push   $0x157
f0117c2b:	68 71 af 13 f0       	push   $0xf013af71
f0117c30:	e8 d0 85 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117c35:	e8 33 55 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117c3a:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117c3d:	83 f8 03             	cmp    $0x3,%eax
f0117c40:	74 17                	je     f0117c59 <test_priority_normal_and_lower+0x77f>
f0117c42:	83 ec 04             	sub    $0x4,%esp
f0117c45:	68 d8 af 13 f0       	push   $0xf013afd8
f0117c4a:	68 58 01 00 00       	push   $0x158
f0117c4f:	68 71 af 13 f0       	push   $0xf013af71
f0117c54:	e8 ac 85 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117c59:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c5c:	8b 40 74             	mov    0x74(%eax),%eax
f0117c5f:	83 f8 02             	cmp    $0x2,%eax
f0117c62:	75 16                	jne    f0117c7a <test_priority_normal_and_lower+0x7a0>
f0117c64:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c67:	8b 40 74             	mov    0x74(%eax),%eax
f0117c6a:	83 f8 07             	cmp    $0x7,%eax
f0117c6d:	75 0b                	jne    f0117c7a <test_priority_normal_and_lower+0x7a0>
f0117c6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c72:	8b 40 74             	mov    0x74(%eax),%eax
f0117c75:	83 f8 05             	cmp    $0x5,%eax
f0117c78:	74 17                	je     f0117c91 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117c7a:	83 ec 04             	sub    $0x4,%esp
f0117c7d:	68 0c b1 13 f0       	push   $0xf013b10c
f0117c82:	68 5b 01 00 00       	push   $0x15b
f0117c87:	68 71 af 13 f0       	push   $0xf013af71
f0117c8c:	e8 74 85 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117c91:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117c98:	e9 80 00 00 00       	jmp    f0117d1d <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117c9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117ca0:	83 c0 08             	add    $0x8,%eax
f0117ca3:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117caa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cad:	8b 58 78             	mov    0x78(%eax),%ebx
f0117cb0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117cb3:	89 d0                	mov    %edx,%eax
f0117cb5:	01 c0                	add    %eax,%eax
f0117cb7:	01 d0                	add    %edx,%eax
f0117cb9:	c1 e0 03             	shl    $0x3,%eax
f0117cbc:	01 d8                	add    %ebx,%eax
f0117cbe:	8b 00                	mov    (%eax),%eax
f0117cc0:	39 c1                	cmp    %eax,%ecx
f0117cc2:	74 17                	je     f0117cdb <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117cc4:	83 ec 04             	sub    $0x4,%esp
f0117cc7:	68 5c b3 13 f0       	push   $0xf013b35c
f0117ccc:	68 60 01 00 00       	push   $0x160
f0117cd1:	68 71 af 13 f0       	push   $0xf013af71
f0117cd6:	e8 2a 85 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117cdb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117cde:	83 c0 08             	add    $0x8,%eax
f0117ce1:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117ce8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ceb:	8b 58 78             	mov    0x78(%eax),%ebx
f0117cee:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117cf1:	89 d0                	mov    %edx,%eax
f0117cf3:	01 c0                	add    %eax,%eax
f0117cf5:	01 d0                	add    %edx,%eax
f0117cf7:	c1 e0 03             	shl    $0x3,%eax
f0117cfa:	01 d8                	add    %ebx,%eax
f0117cfc:	8b 40 08             	mov    0x8(%eax),%eax
f0117cff:	39 c1                	cmp    %eax,%ecx
f0117d01:	74 17                	je     f0117d1a <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117d03:	83 ec 04             	sub    $0x4,%esp
f0117d06:	68 5c b3 13 f0       	push   $0xf013b35c
f0117d0b:	68 63 01 00 00       	push   $0x163
f0117d10:	68 71 af 13 f0       	push   $0xf013af71
f0117d15:	e8 eb 84 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117d1a:	ff 45 cc             	incl   -0x34(%ebp)
f0117d1d:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117d21:	0f 8e 76 ff ff ff    	jle    f0117c9d <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117d27:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117d2e:	e9 80 00 00 00       	jmp    f0117db3 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117d33:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117d36:	83 c0 03             	add    $0x3,%eax
f0117d39:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117d40:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d43:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d46:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117d49:	89 d0                	mov    %edx,%eax
f0117d4b:	01 c0                	add    %eax,%eax
f0117d4d:	01 d0                	add    %edx,%eax
f0117d4f:	c1 e0 03             	shl    $0x3,%eax
f0117d52:	01 d8                	add    %ebx,%eax
f0117d54:	8b 00                	mov    (%eax),%eax
f0117d56:	39 c1                	cmp    %eax,%ecx
f0117d58:	74 17                	je     f0117d71 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117d5a:	ff 75 c8             	pushl  -0x38(%ebp)
f0117d5d:	68 c8 b3 13 f0       	push   $0xf013b3c8
f0117d62:	68 69 01 00 00       	push   $0x169
f0117d67:	68 71 af 13 f0       	push   $0xf013af71
f0117d6c:	e8 94 84 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117d71:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117d74:	83 c0 03             	add    $0x3,%eax
f0117d77:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117d7e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d81:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d84:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117d87:	89 d0                	mov    %edx,%eax
f0117d89:	01 c0                	add    %eax,%eax
f0117d8b:	01 d0                	add    %edx,%eax
f0117d8d:	c1 e0 03             	shl    $0x3,%eax
f0117d90:	01 d8                	add    %ebx,%eax
f0117d92:	8b 40 08             	mov    0x8(%eax),%eax
f0117d95:	39 c1                	cmp    %eax,%ecx
f0117d97:	74 17                	je     f0117db0 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117d99:	83 ec 04             	sub    $0x4,%esp
f0117d9c:	68 5c b3 13 f0       	push   $0xf013b35c
f0117da1:	68 6c 01 00 00       	push   $0x16c
f0117da6:	68 71 af 13 f0       	push   $0xf013af71
f0117dab:	e8 55 84 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117db0:	ff 45 c8             	incl   -0x38(%ebp)
f0117db3:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117db7:	0f 8e 76 ff ff ff    	jle    f0117d33 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117dbd:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117dc4:	e9 80 00 00 00       	jmp    f0117e49 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117dc9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117dcc:	83 c0 05             	add    $0x5,%eax
f0117dcf:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117dd6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dd9:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ddc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117ddf:	89 d0                	mov    %edx,%eax
f0117de1:	01 c0                	add    %eax,%eax
f0117de3:	01 d0                	add    %edx,%eax
f0117de5:	c1 e0 03             	shl    $0x3,%eax
f0117de8:	01 d8                	add    %ebx,%eax
f0117dea:	8b 00                	mov    (%eax),%eax
f0117dec:	39 c1                	cmp    %eax,%ecx
f0117dee:	74 17                	je     f0117e07 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117df0:	83 ec 04             	sub    $0x4,%esp
f0117df3:	68 5c b3 13 f0       	push   $0xf013b35c
f0117df8:	68 72 01 00 00       	push   $0x172
f0117dfd:	68 71 af 13 f0       	push   $0xf013af71
f0117e02:	e8 fe 83 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117e07:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117e0a:	83 c0 05             	add    $0x5,%eax
f0117e0d:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117e14:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e17:	8b 58 78             	mov    0x78(%eax),%ebx
f0117e1a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117e1d:	89 d0                	mov    %edx,%eax
f0117e1f:	01 c0                	add    %eax,%eax
f0117e21:	01 d0                	add    %edx,%eax
f0117e23:	c1 e0 03             	shl    $0x3,%eax
f0117e26:	01 d8                	add    %ebx,%eax
f0117e28:	8b 40 08             	mov    0x8(%eax),%eax
f0117e2b:	39 c1                	cmp    %eax,%ecx
f0117e2d:	74 17                	je     f0117e46 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e2f:	83 ec 04             	sub    $0x4,%esp
f0117e32:	68 5c b3 13 f0       	push   $0xf013b35c
f0117e37:	68 75 01 00 00       	push   $0x175
f0117e3c:	68 71 af 13 f0       	push   $0xf013af71
f0117e41:	e8 bf 83 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117e46:	ff 45 c4             	incl   -0x3c(%ebp)
f0117e49:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117e4d:	0f 8e 76 ff ff ff    	jle    f0117dc9 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117e53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e56:	83 ec 08             	sub    $0x8,%esp
f0117e59:	6a 05                	push   $0x5
f0117e5b:	50                   	push   %eax
f0117e5c:	e8 58 37 ff ff       	call   f010b5b9 <set_program_priority>
f0117e61:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117e64:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e67:	83 ec 08             	sub    $0x8,%esp
f0117e6a:	6a 05                	push   $0x5
f0117e6c:	50                   	push   %eax
f0117e6d:	e8 47 37 ff ff       	call   f010b5b9 <set_program_priority>
f0117e72:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117e75:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117e7c:	75 6e 61 
f0117e7f:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117e86:	6c 00 00 
f0117e89:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117e8f:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117e94:	b8 00 00 00 00       	mov    $0x0,%eax
f0117e99:	89 d7                	mov    %edx,%edi
f0117e9b:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117e9d:	83 ec 0c             	sub    $0xc,%esp
f0117ea0:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117ea6:	50                   	push   %eax
f0117ea7:	e8 c4 8e fe ff       	call   f0100d70 <execute_command>
f0117eac:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117eaf:	eb 10                	jmp    f0117ec1 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117eb1:	83 ec 0c             	sub    $0xc,%esp
f0117eb4:	68 38 b4 13 f0       	push   $0xf013b438
f0117eb9:	e8 50 8e fe ff       	call   f0100d0e <cprintf>
f0117ebe:	83 c4 10             	add    $0x10,%esp
	}
}
f0117ec1:	90                   	nop
f0117ec2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117ec5:	5b                   	pop    %ebx
f0117ec6:	5e                   	pop    %esi
f0117ec7:	5f                   	pop    %edi
f0117ec8:	5d                   	pop    %ebp
f0117ec9:	c3                   	ret    

f0117eca <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117eca:	55                   	push   %ebp
f0117ecb:	89 e5                	mov    %esp,%ebp
f0117ecd:	a1 58 07 86 f0       	mov    0xf0860758,%eax
f0117ed2:	83 f8 03             	cmp    $0x3,%eax
f0117ed5:	75 04                	jne    f0117edb <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117ed7:	b0 01                	mov    $0x1,%al
f0117ed9:	eb 02                	jmp    f0117edd <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117edb:	b0 00                	mov    $0x0,%al
f0117edd:	5d                   	pop    %ebp
f0117ede:	c3                   	ret    

f0117edf <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117edf:	55                   	push   %ebp
f0117ee0:	89 e5                	mov    %esp,%ebp
f0117ee2:	57                   	push   %edi
f0117ee3:	53                   	push   %ebx
f0117ee4:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117eea:	83 ec 0c             	sub    $0xc,%esp
f0117eed:	68 3c b5 13 f0       	push   $0xf013b53c
f0117ef2:	e8 17 8e fe ff       	call   f0100d0e <cprintf>
f0117ef7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117efa:	83 ec 0c             	sub    $0xc,%esp
f0117efd:	68 6c b5 13 f0       	push   $0xf013b56c
f0117f02:	e8 07 8e fe ff       	call   f0100d0e <cprintf>
f0117f07:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117f0a:	83 ec 0c             	sub    $0xc,%esp
f0117f0d:	68 3c b5 13 f0       	push   $0xf013b53c
f0117f12:	e8 f7 8d fe ff       	call   f0100d0e <cprintf>
f0117f17:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117f1a:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117f1e:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117f22:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117f28:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117f2e:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117f35:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117f3c:	e8 2c 52 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117f41:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117f44:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117f4a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0117f54:	89 d7                	mov    %edx,%edi
f0117f56:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117f58:	e8 10 52 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0117f5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117f60:	e8 8f be fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0117f65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117f68:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117f6f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f77:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117f7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f82:	f7 75 d4             	divl   -0x2c(%ebp)
f0117f85:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f88:	29 d0                	sub    %edx,%eax
f0117f8a:	89 c1                	mov    %eax,%ecx
f0117f8c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117f93:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0117f98:	0f b6 d0             	movzbl %al,%edx
f0117f9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117f9e:	01 d0                	add    %edx,%eax
f0117fa0:	48                   	dec    %eax
f0117fa1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117fa4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117fa7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fac:	f7 75 cc             	divl   -0x34(%ebp)
f0117faf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117fb2:	29 d0                	sub    %edx,%eax
f0117fb4:	01 c1                	add    %eax,%ecx
f0117fb6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117fbd:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0117fc2:	0f b6 c0             	movzbl %al,%eax
f0117fc5:	c1 e0 04             	shl    $0x4,%eax
f0117fc8:	89 c2                	mov    %eax,%edx
f0117fca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117fcd:	01 d0                	add    %edx,%eax
f0117fcf:	48                   	dec    %eax
f0117fd0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117fd3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117fd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fdb:	f7 75 c4             	divl   -0x3c(%ebp)
f0117fde:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117fe1:	29 d0                	sub    %edx,%eax
f0117fe3:	01 c8                	add    %ecx,%eax
f0117fe5:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117fea:	29 c2                	sub    %eax,%edx
f0117fec:	89 d0                	mov    %edx,%eax
f0117fee:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117ff1:	83 ec 0c             	sub    $0xc,%esp
f0117ff4:	ff 75 bc             	pushl  -0x44(%ebp)
f0117ff7:	e8 6a fa fe ff       	call   f0107a66 <kmalloc>
f0117ffc:	83 c4 10             	add    $0x10,%esp
f0117fff:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0118005:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011800b:	85 c0                	test   %eax,%eax
f011800d:	74 14                	je     f0118023 <test_kmalloc+0x144>
f011800f:	83 ec 04             	sub    $0x4,%esp
f0118012:	68 c8 b5 13 f0       	push   $0xf013b5c8
f0118017:	6a 40                	push   $0x40
f0118019:	68 fa b5 13 f0       	push   $0xf013b5fa
f011801e:	e8 e2 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118023:	e8 cc bd fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118028:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011802b:	74 14                	je     f0118041 <test_kmalloc+0x162>
f011802d:	83 ec 04             	sub    $0x4,%esp
f0118030:	68 14 b6 13 f0       	push   $0xf013b614
f0118035:	6a 41                	push   $0x41
f0118037:	68 fa b5 13 f0       	push   $0xf013b5fa
f011803c:	e8 c4 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118041:	e8 27 51 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118046:	89 c2                	mov    %eax,%edx
f0118048:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011804b:	39 c2                	cmp    %eax,%edx
f011804d:	74 14                	je     f0118063 <test_kmalloc+0x184>
f011804f:	83 ec 04             	sub    $0x4,%esp
f0118052:	68 7c b6 13 f0       	push   $0xf013b67c
f0118057:	6a 42                	push   $0x42
f0118059:	68 fa b5 13 f0       	push   $0xf013b5fa
f011805e:	e8 a2 81 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118063:	83 ec 0c             	sub    $0xc,%esp
f0118066:	68 bc b6 13 f0       	push   $0xf013b6bc
f011806b:	e8 9e 8c fe ff       	call   f0100d0e <cprintf>
f0118070:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118073:	e8 f5 50 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118078:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011807b:	e8 74 bd fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118080:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118083:	83 ec 0c             	sub    $0xc,%esp
f0118086:	68 00 fc 1f 00       	push   $0x1ffc00
f011808b:	e8 d6 f9 fe ff       	call   f0107a66 <kmalloc>
f0118090:	83 c4 10             	add    $0x10,%esp
f0118093:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118099:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011809f:	89 c1                	mov    %eax,%ecx
f01180a1:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01180a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01180ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180b0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01180b3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01180bb:	f7 75 b8             	divl   -0x48(%ebp)
f01180be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180c1:	29 d0                	sub    %edx,%eax
f01180c3:	89 c3                	mov    %eax,%ebx
f01180c5:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01180cc:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01180d1:	0f b6 d0             	movzbl %al,%edx
f01180d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180d7:	01 d0                	add    %edx,%eax
f01180d9:	48                   	dec    %eax
f01180da:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01180dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01180e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01180e5:	f7 75 b0             	divl   -0x50(%ebp)
f01180e8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01180eb:	29 d0                	sub    %edx,%eax
f01180ed:	01 c3                	add    %eax,%ebx
f01180ef:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01180f6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01180fb:	0f b6 c0             	movzbl %al,%eax
f01180fe:	c1 e0 04             	shl    $0x4,%eax
f0118101:	89 c2                	mov    %eax,%edx
f0118103:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118106:	01 d0                	add    %edx,%eax
f0118108:	48                   	dec    %eax
f0118109:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011810c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011810f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118114:	f7 75 a8             	divl   -0x58(%ebp)
f0118117:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011811a:	29 d0                	sub    %edx,%eax
f011811c:	01 d8                	add    %ebx,%eax
f011811e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118123:	39 c1                	cmp    %eax,%ecx
f0118125:	74 14                	je     f011813b <test_kmalloc+0x25c>
f0118127:	83 ec 04             	sub    $0x4,%esp
f011812a:	68 e0 b6 13 f0       	push   $0xf013b6e0
f011812f:	6a 49                	push   $0x49
f0118131:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118136:	e8 ca 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011813b:	e8 b4 bc fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118140:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118143:	74 14                	je     f0118159 <test_kmalloc+0x27a>
f0118145:	83 ec 04             	sub    $0x4,%esp
f0118148:	68 14 b6 13 f0       	push   $0xf013b614
f011814d:	6a 4a                	push   $0x4a
f011814f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118154:	e8 ac 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118159:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011815c:	e8 0c 50 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118161:	29 c3                	sub    %eax,%ebx
f0118163:	89 d8                	mov    %ebx,%eax
f0118165:	3d 00 02 00 00       	cmp    $0x200,%eax
f011816a:	74 14                	je     f0118180 <test_kmalloc+0x2a1>
f011816c:	83 ec 04             	sub    $0x4,%esp
f011816f:	68 7c b6 13 f0       	push   $0xf013b67c
f0118174:	6a 4b                	push   $0x4b
f0118176:	68 fa b5 13 f0       	push   $0xf013b5fa
f011817b:	e8 85 80 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118180:	e8 e8 4f ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118185:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118188:	e8 67 bc fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011818d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118190:	83 ec 0c             	sub    $0xc,%esp
f0118193:	68 00 fc 1f 00       	push   $0x1ffc00
f0118198:	e8 c9 f8 fe ff       	call   f0107a66 <kmalloc>
f011819d:	83 c4 10             	add    $0x10,%esp
f01181a0:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01181a6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01181ac:	89 c1                	mov    %eax,%ecx
f01181ae:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01181b5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01181b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181bd:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01181c0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01181c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01181c8:	f7 75 a0             	divl   -0x60(%ebp)
f01181cb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01181ce:	29 d0                	sub    %edx,%eax
f01181d0:	89 c3                	mov    %eax,%ebx
f01181d2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01181d9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01181de:	0f b6 d0             	movzbl %al,%edx
f01181e1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01181e4:	01 d0                	add    %edx,%eax
f01181e6:	48                   	dec    %eax
f01181e7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01181ea:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01181ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01181f2:	f7 75 98             	divl   -0x68(%ebp)
f01181f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01181f8:	29 d0                	sub    %edx,%eax
f01181fa:	01 c3                	add    %eax,%ebx
f01181fc:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118203:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118208:	0f b6 c0             	movzbl %al,%eax
f011820b:	c1 e0 04             	shl    $0x4,%eax
f011820e:	89 c2                	mov    %eax,%edx
f0118210:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118213:	01 d0                	add    %edx,%eax
f0118215:	48                   	dec    %eax
f0118216:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118219:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011821c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118221:	f7 75 90             	divl   -0x70(%ebp)
f0118224:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118227:	29 d0                	sub    %edx,%eax
f0118229:	01 d8                	add    %ebx,%eax
f011822b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0118230:	39 c1                	cmp    %eax,%ecx
f0118232:	74 14                	je     f0118248 <test_kmalloc+0x369>
f0118234:	83 ec 04             	sub    $0x4,%esp
f0118237:	68 e0 b6 13 f0       	push   $0xf013b6e0
f011823c:	6a 51                	push   $0x51
f011823e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118243:	e8 bd 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118248:	e8 a7 bb fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011824d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118250:	74 14                	je     f0118266 <test_kmalloc+0x387>
f0118252:	83 ec 04             	sub    $0x4,%esp
f0118255:	68 14 b6 13 f0       	push   $0xf013b614
f011825a:	6a 52                	push   $0x52
f011825c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118261:	e8 9f 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118266:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118269:	e8 ff 4e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011826e:	29 c3                	sub    %eax,%ebx
f0118270:	89 d8                	mov    %ebx,%eax
f0118272:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118277:	74 14                	je     f011828d <test_kmalloc+0x3ae>
f0118279:	83 ec 04             	sub    $0x4,%esp
f011827c:	68 7c b6 13 f0       	push   $0xf013b67c
f0118281:	6a 53                	push   $0x53
f0118283:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118288:	e8 78 7f fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011828d:	e8 db 4e ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118292:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118295:	e8 5a bb fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011829a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011829d:	83 ec 0c             	sub    $0xc,%esp
f01182a0:	68 00 08 00 00       	push   $0x800
f01182a5:	e8 bc f7 fe ff       	call   f0107a66 <kmalloc>
f01182aa:	83 c4 10             	add    $0x10,%esp
f01182ad:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01182b3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01182b9:	89 c1                	mov    %eax,%ecx
f01182bb:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01182c2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01182c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182ca:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01182cd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01182d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01182d5:	f7 75 88             	divl   -0x78(%ebp)
f01182d8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01182db:	29 d0                	sub    %edx,%eax
f01182dd:	89 c3                	mov    %eax,%ebx
f01182df:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01182e6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01182eb:	0f b6 d0             	movzbl %al,%edx
f01182ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f01182f1:	01 d0                	add    %edx,%eax
f01182f3:	48                   	dec    %eax
f01182f4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01182fa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118300:	ba 00 00 00 00       	mov    $0x0,%edx
f0118305:	f7 75 80             	divl   -0x80(%ebp)
f0118308:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011830e:	29 d0                	sub    %edx,%eax
f0118310:	01 c3                	add    %eax,%ebx
f0118312:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118319:	10 00 00 
f011831c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118321:	0f b6 c0             	movzbl %al,%eax
f0118324:	c1 e0 04             	shl    $0x4,%eax
f0118327:	89 c2                	mov    %eax,%edx
f0118329:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011832f:	01 d0                	add    %edx,%eax
f0118331:	48                   	dec    %eax
f0118332:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118338:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011833e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118343:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118349:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011834f:	29 d0                	sub    %edx,%eax
f0118351:	01 d8                	add    %ebx,%eax
f0118353:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118358:	39 c1                	cmp    %eax,%ecx
f011835a:	74 14                	je     f0118370 <test_kmalloc+0x491>
f011835c:	83 ec 04             	sub    $0x4,%esp
f011835f:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0118364:	6a 59                	push   $0x59
f0118366:	68 fa b5 13 f0       	push   $0xf013b5fa
f011836b:	e8 95 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118370:	e8 7f ba fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118375:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118378:	74 14                	je     f011838e <test_kmalloc+0x4af>
f011837a:	83 ec 04             	sub    $0x4,%esp
f011837d:	68 14 b6 13 f0       	push   $0xf013b614
f0118382:	6a 5a                	push   $0x5a
f0118384:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118389:	e8 77 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011838e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118391:	e8 d7 4d ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118396:	29 c3                	sub    %eax,%ebx
f0118398:	89 d8                	mov    %ebx,%eax
f011839a:	83 f8 01             	cmp    $0x1,%eax
f011839d:	74 14                	je     f01183b3 <test_kmalloc+0x4d4>
f011839f:	83 ec 04             	sub    $0x4,%esp
f01183a2:	68 7c b6 13 f0       	push   $0xf013b67c
f01183a7:	6a 5b                	push   $0x5b
f01183a9:	68 fa b5 13 f0       	push   $0xf013b5fa
f01183ae:	e8 52 7e fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01183b3:	e8 b5 4d ff ff       	call   f010d16d <sys_calculate_free_frames>
f01183b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183bb:	e8 34 ba fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01183c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01183c3:	83 ec 0c             	sub    $0xc,%esp
f01183c6:	68 00 08 00 00       	push   $0x800
f01183cb:	e8 96 f6 fe ff       	call   f0107a66 <kmalloc>
f01183d0:	83 c4 10             	add    $0x10,%esp
f01183d3:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01183d9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01183df:	89 c1                	mov    %eax,%ecx
f01183e1:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01183e8:	10 00 00 
f01183eb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01183f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183f6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01183fc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118402:	ba 00 00 00 00       	mov    $0x0,%edx
f0118407:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011840d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118413:	29 d0                	sub    %edx,%eax
f0118415:	89 c3                	mov    %eax,%ebx
f0118417:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011841e:	10 00 00 
f0118421:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118426:	0f b6 d0             	movzbl %al,%edx
f0118429:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011842f:	01 d0                	add    %edx,%eax
f0118431:	48                   	dec    %eax
f0118432:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118438:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011843e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118443:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118449:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011844f:	29 d0                	sub    %edx,%eax
f0118451:	01 c3                	add    %eax,%ebx
f0118453:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011845a:	10 00 00 
f011845d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118462:	0f b6 c0             	movzbl %al,%eax
f0118465:	c1 e0 04             	shl    $0x4,%eax
f0118468:	89 c2                	mov    %eax,%edx
f011846a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118470:	01 d0                	add    %edx,%eax
f0118472:	48                   	dec    %eax
f0118473:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118479:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011847f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118484:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011848a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118490:	29 d0                	sub    %edx,%eax
f0118492:	01 d8                	add    %ebx,%eax
f0118494:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118499:	39 c1                	cmp    %eax,%ecx
f011849b:	74 14                	je     f01184b1 <test_kmalloc+0x5d2>
f011849d:	83 ec 04             	sub    $0x4,%esp
f01184a0:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01184a5:	6a 61                	push   $0x61
f01184a7:	68 fa b5 13 f0       	push   $0xf013b5fa
f01184ac:	e8 54 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01184b1:	e8 3e b9 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01184b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01184b9:	74 14                	je     f01184cf <test_kmalloc+0x5f0>
f01184bb:	83 ec 04             	sub    $0x4,%esp
f01184be:	68 14 b6 13 f0       	push   $0xf013b614
f01184c3:	6a 62                	push   $0x62
f01184c5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01184ca:	e8 36 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01184cf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01184d2:	e8 96 4c ff ff       	call   f010d16d <sys_calculate_free_frames>
f01184d7:	29 c3                	sub    %eax,%ebx
f01184d9:	89 d8                	mov    %ebx,%eax
f01184db:	83 f8 01             	cmp    $0x1,%eax
f01184de:	74 14                	je     f01184f4 <test_kmalloc+0x615>
f01184e0:	83 ec 04             	sub    $0x4,%esp
f01184e3:	68 7c b6 13 f0       	push   $0xf013b67c
f01184e8:	6a 63                	push   $0x63
f01184ea:	68 fa b5 13 f0       	push   $0xf013b5fa
f01184ef:	e8 11 7d fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01184f4:	e8 74 4c ff ff       	call   f010d16d <sys_calculate_free_frames>
f01184f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01184fc:	e8 f3 b8 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118501:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118504:	83 ec 0c             	sub    $0xc,%esp
f0118507:	68 00 1c 00 00       	push   $0x1c00
f011850c:	e8 55 f5 fe ff       	call   f0107a66 <kmalloc>
f0118511:	83 c4 10             	add    $0x10,%esp
f0118514:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011851a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118520:	89 c1                	mov    %eax,%ecx
f0118522:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118529:	10 00 00 
f011852c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118532:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118537:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011853d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118543:	ba 00 00 00 00       	mov    $0x0,%edx
f0118548:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011854e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118554:	29 d0                	sub    %edx,%eax
f0118556:	89 c3                	mov    %eax,%ebx
f0118558:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011855f:	10 00 00 
f0118562:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118567:	0f b6 d0             	movzbl %al,%edx
f011856a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118570:	01 d0                	add    %edx,%eax
f0118572:	48                   	dec    %eax
f0118573:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118579:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011857f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118584:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011858a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118590:	29 d0                	sub    %edx,%eax
f0118592:	01 c3                	add    %eax,%ebx
f0118594:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011859b:	10 00 00 
f011859e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01185a3:	0f b6 c0             	movzbl %al,%eax
f01185a6:	c1 e0 04             	shl    $0x4,%eax
f01185a9:	89 c2                	mov    %eax,%edx
f01185ab:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01185b1:	01 d0                	add    %edx,%eax
f01185b3:	48                   	dec    %eax
f01185b4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01185ba:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01185c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01185c5:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01185cb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01185d1:	29 d0                	sub    %edx,%eax
f01185d3:	01 d8                	add    %ebx,%eax
f01185d5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01185da:	39 c1                	cmp    %eax,%ecx
f01185dc:	74 14                	je     f01185f2 <test_kmalloc+0x713>
f01185de:	83 ec 04             	sub    $0x4,%esp
f01185e1:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01185e6:	6a 69                	push   $0x69
f01185e8:	68 fa b5 13 f0       	push   $0xf013b5fa
f01185ed:	e8 13 7c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01185f2:	e8 fd b7 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01185f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01185fa:	74 14                	je     f0118610 <test_kmalloc+0x731>
f01185fc:	83 ec 04             	sub    $0x4,%esp
f01185ff:	68 14 b6 13 f0       	push   $0xf013b614
f0118604:	6a 6a                	push   $0x6a
f0118606:	68 fa b5 13 f0       	push   $0xf013b5fa
f011860b:	e8 f5 7b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118610:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118613:	e8 55 4b ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118618:	29 c3                	sub    %eax,%ebx
f011861a:	89 d8                	mov    %ebx,%eax
f011861c:	83 f8 02             	cmp    $0x2,%eax
f011861f:	74 14                	je     f0118635 <test_kmalloc+0x756>
f0118621:	83 ec 04             	sub    $0x4,%esp
f0118624:	68 7c b6 13 f0       	push   $0xf013b67c
f0118629:	6a 6b                	push   $0x6b
f011862b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118630:	e8 d0 7b fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118635:	e8 33 4b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011863a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011863d:	e8 b2 b7 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118642:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118645:	83 ec 0c             	sub    $0xc,%esp
f0118648:	68 00 fc 2f 00       	push   $0x2ffc00
f011864d:	e8 14 f4 fe ff       	call   f0107a66 <kmalloc>
f0118652:	83 c4 10             	add    $0x10,%esp
f0118655:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011865b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118661:	89 c1                	mov    %eax,%ecx
f0118663:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011866a:	10 00 00 
f011866d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118673:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118678:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011867e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118684:	ba 00 00 00 00       	mov    $0x0,%edx
f0118689:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011868f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118695:	29 d0                	sub    %edx,%eax
f0118697:	89 c3                	mov    %eax,%ebx
f0118699:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01186a0:	10 00 00 
f01186a3:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01186a8:	0f b6 d0             	movzbl %al,%edx
f01186ab:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01186b1:	01 d0                	add    %edx,%eax
f01186b3:	48                   	dec    %eax
f01186b4:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01186ba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01186c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01186c5:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01186cb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01186d1:	29 d0                	sub    %edx,%eax
f01186d3:	01 c3                	add    %eax,%ebx
f01186d5:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01186dc:	10 00 00 
f01186df:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01186e4:	0f b6 c0             	movzbl %al,%eax
f01186e7:	c1 e0 04             	shl    $0x4,%eax
f01186ea:	89 c2                	mov    %eax,%edx
f01186ec:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01186f2:	01 d0                	add    %edx,%eax
f01186f4:	48                   	dec    %eax
f01186f5:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01186fb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118701:	ba 00 00 00 00       	mov    $0x0,%edx
f0118706:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011870c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118712:	29 d0                	sub    %edx,%eax
f0118714:	01 d8                	add    %ebx,%eax
f0118716:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011871b:	39 c1                	cmp    %eax,%ecx
f011871d:	74 14                	je     f0118733 <test_kmalloc+0x854>
f011871f:	83 ec 04             	sub    $0x4,%esp
f0118722:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0118727:	6a 71                	push   $0x71
f0118729:	68 fa b5 13 f0       	push   $0xf013b5fa
f011872e:	e8 d2 7a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118733:	e8 bc b6 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118738:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011873b:	74 14                	je     f0118751 <test_kmalloc+0x872>
f011873d:	83 ec 04             	sub    $0x4,%esp
f0118740:	68 14 b6 13 f0       	push   $0xf013b614
f0118745:	6a 72                	push   $0x72
f0118747:	68 fa b5 13 f0       	push   $0xf013b5fa
f011874c:	e8 b4 7a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118751:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118754:	e8 14 4a ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118759:	29 c3                	sub    %eax,%ebx
f011875b:	89 d8                	mov    %ebx,%eax
f011875d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118762:	74 14                	je     f0118778 <test_kmalloc+0x899>
f0118764:	83 ec 04             	sub    $0x4,%esp
f0118767:	68 7c b6 13 f0       	push   $0xf013b67c
f011876c:	6a 73                	push   $0x73
f011876e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118773:	e8 8d 7a fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118778:	e8 f0 49 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011877d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118780:	e8 6f b6 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118785:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118788:	83 ec 0c             	sub    $0xc,%esp
f011878b:	68 00 fc 5f 00       	push   $0x5ffc00
f0118790:	e8 d1 f2 fe ff       	call   f0107a66 <kmalloc>
f0118795:	83 c4 10             	add    $0x10,%esp
f0118798:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011879e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01187a4:	89 c1                	mov    %eax,%ecx
f01187a6:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01187ad:	10 00 00 
f01187b0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01187b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187bb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01187c1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01187cc:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01187d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187d8:	29 d0                	sub    %edx,%eax
f01187da:	89 c3                	mov    %eax,%ebx
f01187dc:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01187e3:	10 00 00 
f01187e6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01187eb:	0f b6 d0             	movzbl %al,%edx
f01187ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01187f4:	01 d0                	add    %edx,%eax
f01187f6:	48                   	dec    %eax
f01187f7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01187fd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118803:	ba 00 00 00 00       	mov    $0x0,%edx
f0118808:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011880e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118814:	29 d0                	sub    %edx,%eax
f0118816:	01 c3                	add    %eax,%ebx
f0118818:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011881f:	10 00 00 
f0118822:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118827:	0f b6 c0             	movzbl %al,%eax
f011882a:	c1 e0 04             	shl    $0x4,%eax
f011882d:	89 c2                	mov    %eax,%edx
f011882f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118835:	01 d0                	add    %edx,%eax
f0118837:	48                   	dec    %eax
f0118838:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011883e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118844:	ba 00 00 00 00       	mov    $0x0,%edx
f0118849:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011884f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118855:	29 d0                	sub    %edx,%eax
f0118857:	01 d8                	add    %ebx,%eax
f0118859:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011885e:	39 c1                	cmp    %eax,%ecx
f0118860:	74 14                	je     f0118876 <test_kmalloc+0x997>
f0118862:	83 ec 04             	sub    $0x4,%esp
f0118865:	68 e0 b6 13 f0       	push   $0xf013b6e0
f011886a:	6a 79                	push   $0x79
f011886c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118871:	e8 8f 79 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118876:	e8 79 b5 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011887b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011887e:	74 14                	je     f0118894 <test_kmalloc+0x9b5>
f0118880:	83 ec 04             	sub    $0x4,%esp
f0118883:	68 14 b6 13 f0       	push   $0xf013b614
f0118888:	6a 7a                	push   $0x7a
f011888a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011888f:	e8 71 79 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118894:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118897:	e8 d1 48 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011889c:	29 c3                	sub    %eax,%ebx
f011889e:	89 d8                	mov    %ebx,%eax
f01188a0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01188a5:	74 14                	je     f01188bb <test_kmalloc+0x9dc>
f01188a7:	83 ec 04             	sub    $0x4,%esp
f01188aa:	68 7c b6 13 f0       	push   $0xf013b67c
f01188af:	6a 7b                	push   $0x7b
f01188b1:	68 fa b5 13 f0       	push   $0xf013b5fa
f01188b6:	e8 4a 79 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01188bb:	e8 ad 48 ff ff       	call   f010d16d <sys_calculate_free_frames>
f01188c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01188c3:	e8 2c b5 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01188c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01188cb:	83 ec 0c             	sub    $0xc,%esp
f01188ce:	68 00 38 00 00       	push   $0x3800
f01188d3:	e8 8e f1 fe ff       	call   f0107a66 <kmalloc>
f01188d8:	83 c4 10             	add    $0x10,%esp
f01188db:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01188e1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01188e7:	89 c1                	mov    %eax,%ecx
f01188e9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01188f0:	10 00 00 
f01188f3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01188f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01188fe:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118904:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011890a:	ba 00 00 00 00       	mov    $0x0,%edx
f011890f:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118915:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011891b:	29 d0                	sub    %edx,%eax
f011891d:	89 c3                	mov    %eax,%ebx
f011891f:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118926:	10 00 00 
f0118929:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011892e:	0f b6 d0             	movzbl %al,%edx
f0118931:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118937:	01 d0                	add    %edx,%eax
f0118939:	48                   	dec    %eax
f011893a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118940:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118946:	ba 00 00 00 00       	mov    $0x0,%edx
f011894b:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118951:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118957:	29 d0                	sub    %edx,%eax
f0118959:	01 c3                	add    %eax,%ebx
f011895b:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118962:	10 00 00 
f0118965:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011896a:	0f b6 c0             	movzbl %al,%eax
f011896d:	c1 e0 04             	shl    $0x4,%eax
f0118970:	89 c2                	mov    %eax,%edx
f0118972:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118978:	01 d0                	add    %edx,%eax
f011897a:	48                   	dec    %eax
f011897b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118981:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118987:	ba 00 00 00 00       	mov    $0x0,%edx
f011898c:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118992:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118998:	29 d0                	sub    %edx,%eax
f011899a:	01 d8                	add    %ebx,%eax
f011899c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01189a1:	39 c1                	cmp    %eax,%ecx
f01189a3:	74 17                	je     f01189bc <test_kmalloc+0xadd>
f01189a5:	83 ec 04             	sub    $0x4,%esp
f01189a8:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01189ad:	68 81 00 00 00       	push   $0x81
f01189b2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01189b7:	e8 49 78 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189bc:	e8 33 b4 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01189c1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189c4:	74 17                	je     f01189dd <test_kmalloc+0xafe>
f01189c6:	83 ec 04             	sub    $0x4,%esp
f01189c9:	68 14 b6 13 f0       	push   $0xf013b614
f01189ce:	68 82 00 00 00       	push   $0x82
f01189d3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01189d8:	e8 28 78 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189dd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01189e0:	e8 88 47 ff ff       	call   f010d16d <sys_calculate_free_frames>
f01189e5:	29 c3                	sub    %eax,%ebx
f01189e7:	89 d8                	mov    %ebx,%eax
f01189e9:	83 f8 04             	cmp    $0x4,%eax
f01189ec:	74 17                	je     f0118a05 <test_kmalloc+0xb26>
f01189ee:	83 ec 04             	sub    $0x4,%esp
f01189f1:	68 7c b6 13 f0       	push   $0xf013b67c
f01189f6:	68 83 00 00 00       	push   $0x83
f01189fb:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118a00:	e8 00 78 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f0118a05:	83 ec 0c             	sub    $0xc,%esp
f0118a08:	68 46 b7 13 f0       	push   $0xf013b746
f0118a0d:	e8 fc 82 fe ff       	call   f0100d0e <cprintf>
f0118a12:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118a15:	e8 53 47 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118a1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118a1d:	e8 d2 b3 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118a22:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118a25:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0118a2c:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118a2f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118a35:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0118a3b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118a41:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118a44:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118a46:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118a4c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118a52:	01 c2                	add    %eax,%edx
f0118a54:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118a57:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118a59:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118a5f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118a65:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118a6c:	fd 0f 00 
			shortArr[0] = minShort;
f0118a6f:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118a75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a78:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118a7b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118a81:	01 c0                	add    %eax,%eax
f0118a83:	89 c2                	mov    %eax,%edx
f0118a85:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118a8b:	01 c2                	add    %eax,%edx
f0118a8d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118a91:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118a94:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118a9a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118aa0:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118aa7:	01 00 00 
			intArr[0] = minInt;
f0118aaa:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118ab0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118ab3:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118ab5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118abb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118ac2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118ac8:	01 c2                	add    %eax,%edx
f0118aca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118acd:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118acf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118ad5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118adb:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0118ae2:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118ae5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118aeb:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118aee:	88 10                	mov    %dl,(%eax)
f0118af0:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0118af6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118af9:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118afd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b03:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118b06:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118b09:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b0f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b16:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b1c:	01 c2                	add    %eax,%edx
f0118b1e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b21:	88 02                	mov    %al,(%edx)
f0118b23:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b29:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b30:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b36:	01 c2                	add    %eax,%edx
f0118b38:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118b3c:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118b40:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b46:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b4d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b53:	01 c2                	add    %eax,%edx
f0118b55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118b58:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118b5b:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118b62:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118b65:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118b6b:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118b71:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118b77:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118b7a:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118b7c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118b82:	89 c2                	mov    %eax,%edx
f0118b84:	c1 ea 1f             	shr    $0x1f,%edx
f0118b87:	01 d0                	add    %edx,%eax
f0118b89:	d1 f8                	sar    %eax
f0118b8b:	89 c2                	mov    %eax,%edx
f0118b8d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118b93:	01 c2                	add    %eax,%edx
f0118b95:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b98:	88 c1                	mov    %al,%cl
f0118b9a:	c0 e9 07             	shr    $0x7,%cl
f0118b9d:	01 c8                	add    %ecx,%eax
f0118b9f:	d0 f8                	sar    %al
f0118ba1:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118ba3:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118ba9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118baf:	01 c2                	add    %eax,%edx
f0118bb1:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118bb4:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118bb6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118bbc:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118bc2:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118bc9:	1b 00 00 
			shortArr2[0] = minShort;
f0118bcc:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0118bd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118bd5:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118bd8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118bde:	01 c0                	add    %eax,%eax
f0118be0:	89 c2                	mov    %eax,%edx
f0118be2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118be8:	01 c2                	add    %eax,%edx
f0118bea:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118bee:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118bf1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118bf7:	8a 00                	mov    (%eax),%al
f0118bf9:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118bfc:	75 15                	jne    f0118c13 <test_kmalloc+0xd34>
f0118bfe:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118c04:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c0a:	01 d0                	add    %edx,%eax
f0118c0c:	8a 00                	mov    (%eax),%al
f0118c0e:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118c11:	74 17                	je     f0118c2a <test_kmalloc+0xd4b>
f0118c13:	83 ec 04             	sub    $0x4,%esp
f0118c16:	68 50 b7 13 f0       	push   $0xf013b750
f0118c1b:	68 b2 00 00 00       	push   $0xb2
f0118c20:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118c25:	e8 db 75 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118c2a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c30:	66 8b 00             	mov    (%eax),%ax
f0118c33:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118c37:	75 1b                	jne    f0118c54 <test_kmalloc+0xd75>
f0118c39:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118c3f:	01 c0                	add    %eax,%eax
f0118c41:	89 c2                	mov    %eax,%edx
f0118c43:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c49:	01 d0                	add    %edx,%eax
f0118c4b:	66 8b 00             	mov    (%eax),%ax
f0118c4e:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118c52:	74 17                	je     f0118c6b <test_kmalloc+0xd8c>
f0118c54:	83 ec 04             	sub    $0x4,%esp
f0118c57:	68 50 b7 13 f0       	push   $0xf013b750
f0118c5c:	68 b3 00 00 00       	push   $0xb3
f0118c61:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118c66:	e8 9a 75 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118c6b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118c71:	8b 00                	mov    (%eax),%eax
f0118c73:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118c76:	75 1c                	jne    f0118c94 <test_kmalloc+0xdb5>
f0118c78:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118c7e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118c85:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118c8b:	01 d0                	add    %edx,%eax
f0118c8d:	8b 00                	mov    (%eax),%eax
f0118c8f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118c92:	74 17                	je     f0118cab <test_kmalloc+0xdcc>
f0118c94:	83 ec 04             	sub    $0x4,%esp
f0118c97:	68 50 b7 13 f0       	push   $0xf013b750
f0118c9c:	68 b4 00 00 00       	push   $0xb4
f0118ca1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118ca6:	e8 5a 75 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118cab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118cb1:	8a 00                	mov    (%eax),%al
f0118cb3:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118cb6:	75 1c                	jne    f0118cd4 <test_kmalloc+0xdf5>
f0118cb8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118cbe:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118cc5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ccb:	01 d0                	add    %edx,%eax
f0118ccd:	8a 00                	mov    (%eax),%al
f0118ccf:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118cd2:	74 17                	je     f0118ceb <test_kmalloc+0xe0c>
f0118cd4:	83 ec 04             	sub    $0x4,%esp
f0118cd7:	68 50 b7 13 f0       	push   $0xf013b750
f0118cdc:	68 b6 00 00 00       	push   $0xb6
f0118ce1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118ce6:	e8 1a 75 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118ceb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118cf1:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118cf5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118cf9:	75 1f                	jne    f0118d1a <test_kmalloc+0xe3b>
f0118cfb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d01:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d08:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d0e:	01 d0                	add    %edx,%eax
f0118d10:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118d14:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118d18:	74 17                	je     f0118d31 <test_kmalloc+0xe52>
f0118d1a:	83 ec 04             	sub    $0x4,%esp
f0118d1d:	68 50 b7 13 f0       	push   $0xf013b750
f0118d22:	68 b7 00 00 00       	push   $0xb7
f0118d27:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118d2c:	e8 d4 74 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118d31:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d37:	8b 40 04             	mov    0x4(%eax),%eax
f0118d3a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118d3d:	75 1d                	jne    f0118d5c <test_kmalloc+0xe7d>
f0118d3f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d45:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d4c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d52:	01 d0                	add    %edx,%eax
f0118d54:	8b 40 04             	mov    0x4(%eax),%eax
f0118d57:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118d5a:	74 17                	je     f0118d73 <test_kmalloc+0xe94>
f0118d5c:	83 ec 04             	sub    $0x4,%esp
f0118d5f:	68 50 b7 13 f0       	push   $0xf013b750
f0118d64:	68 b8 00 00 00       	push   $0xb8
f0118d69:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118d6e:	e8 92 74 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118d73:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d79:	8a 00                	mov    (%eax),%al
f0118d7b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118d7e:	75 40                	jne    f0118dc0 <test_kmalloc+0xee1>
f0118d80:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118d86:	89 c2                	mov    %eax,%edx
f0118d88:	c1 ea 1f             	shr    $0x1f,%edx
f0118d8b:	01 d0                	add    %edx,%eax
f0118d8d:	d1 f8                	sar    %eax
f0118d8f:	89 c2                	mov    %eax,%edx
f0118d91:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d97:	01 d0                	add    %edx,%eax
f0118d99:	8a 10                	mov    (%eax),%dl
f0118d9b:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118d9e:	88 c1                	mov    %al,%cl
f0118da0:	c0 e9 07             	shr    $0x7,%cl
f0118da3:	01 c8                	add    %ecx,%eax
f0118da5:	d0 f8                	sar    %al
f0118da7:	38 c2                	cmp    %al,%dl
f0118da9:	75 15                	jne    f0118dc0 <test_kmalloc+0xee1>
f0118dab:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118db1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118db7:	01 d0                	add    %edx,%eax
f0118db9:	8a 00                	mov    (%eax),%al
f0118dbb:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118dbe:	74 17                	je     f0118dd7 <test_kmalloc+0xef8>
f0118dc0:	83 ec 04             	sub    $0x4,%esp
f0118dc3:	68 50 b7 13 f0       	push   $0xf013b750
f0118dc8:	68 ba 00 00 00       	push   $0xba
f0118dcd:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118dd2:	e8 2e 74 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118dd7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118ddd:	66 8b 00             	mov    (%eax),%ax
f0118de0:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118de4:	75 1b                	jne    f0118e01 <test_kmalloc+0xf22>
f0118de6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118dec:	01 c0                	add    %eax,%eax
f0118dee:	89 c2                	mov    %eax,%edx
f0118df0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118df6:	01 d0                	add    %edx,%eax
f0118df8:	66 8b 00             	mov    (%eax),%ax
f0118dfb:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118dff:	74 17                	je     f0118e18 <test_kmalloc+0xf39>
f0118e01:	83 ec 04             	sub    $0x4,%esp
f0118e04:	68 50 b7 13 f0       	push   $0xf013b750
f0118e09:	68 bb 00 00 00       	push   $0xbb
f0118e0e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118e13:	e8 ed 73 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e18:	e8 50 43 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118e1d:	89 c2                	mov    %eax,%edx
f0118e1f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e22:	39 c2                	cmp    %eax,%edx
f0118e24:	74 17                	je     f0118e3d <test_kmalloc+0xf5e>
f0118e26:	83 ec 04             	sub    $0x4,%esp
f0118e29:	68 7c b6 13 f0       	push   $0xf013b67c
f0118e2e:	68 bd 00 00 00       	push   $0xbd
f0118e33:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118e38:	e8 c8 73 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e3d:	e8 b2 af fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118e42:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118e45:	74 17                	je     f0118e5e <test_kmalloc+0xf7f>
f0118e47:	83 ec 04             	sub    $0x4,%esp
f0118e4a:	68 14 b6 13 f0       	push   $0xf013b614
f0118e4f:	68 be 00 00 00       	push   $0xbe
f0118e54:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118e59:	e8 a7 73 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118e5e:	83 ec 0c             	sub    $0xc,%esp
f0118e61:	68 85 b7 13 f0       	push   $0xf013b785
f0118e66:	e8 a3 7e fe ff       	call   f0100d0e <cprintf>
f0118e6b:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118e6e:	e8 fa 42 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118e73:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e76:	e8 79 af fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118e7b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118e7e:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118e85:	10 00 00 
f0118e88:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118e8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e93:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118e99:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ea4:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118eaa:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118eb0:	29 d0                	sub    %edx,%eax
f0118eb2:	89 c1                	mov    %eax,%ecx
f0118eb4:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118ebb:	10 00 00 
f0118ebe:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118ec3:	0f b6 d0             	movzbl %al,%edx
f0118ec6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118ecc:	01 d0                	add    %edx,%eax
f0118ece:	48                   	dec    %eax
f0118ecf:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118ed5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118edb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ee0:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118ee6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118eec:	29 d0                	sub    %edx,%eax
f0118eee:	01 c1                	add    %eax,%ecx
f0118ef0:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118ef7:	10 00 00 
f0118efa:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0118eff:	0f b6 c0             	movzbl %al,%eax
f0118f02:	c1 e0 04             	shl    $0x4,%eax
f0118f05:	89 c2                	mov    %eax,%edx
f0118f07:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118f0d:	01 d0                	add    %edx,%eax
f0118f0f:	48                   	dec    %eax
f0118f10:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118f16:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f21:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118f27:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f2d:	29 d0                	sub    %edx,%eax
f0118f2f:	01 c8                	add    %ecx,%eax
f0118f31:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118f36:	29 c2                	sub    %eax,%edx
f0118f38:	89 d0                	mov    %edx,%eax
f0118f3a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118f40:	83 ec 0c             	sub    $0xc,%esp
f0118f43:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118f49:	e8 18 eb fe ff       	call   f0107a66 <kmalloc>
f0118f4e:	83 c4 10             	add    $0x10,%esp
f0118f51:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118f57:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118f5d:	85 c0                	test   %eax,%eax
f0118f5f:	74 17                	je     f0118f78 <test_kmalloc+0x1099>
f0118f61:	83 ec 04             	sub    $0x4,%esp
f0118f64:	68 c8 b5 13 f0       	push   $0xf013b5c8
f0118f69:	68 c8 00 00 00       	push   $0xc8
f0118f6e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118f73:	e8 8d 72 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f78:	e8 77 ae fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0118f7d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118f80:	74 17                	je     f0118f99 <test_kmalloc+0x10ba>
f0118f82:	83 ec 04             	sub    $0x4,%esp
f0118f85:	68 14 b6 13 f0       	push   $0xf013b614
f0118f8a:	68 c9 00 00 00       	push   $0xc9
f0118f8f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118f94:	e8 6c 72 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f99:	e8 cf 41 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0118f9e:	89 c2                	mov    %eax,%edx
f0118fa0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118fa3:	39 c2                	cmp    %eax,%edx
f0118fa5:	74 17                	je     f0118fbe <test_kmalloc+0x10df>
f0118fa7:	83 ec 04             	sub    $0x4,%esp
f0118faa:	68 7c b6 13 f0       	push   $0xf013b67c
f0118faf:	68 ca 00 00 00       	push   $0xca
f0118fb4:	68 fa b5 13 f0       	push   $0xf013b5fa
f0118fb9:	e8 47 72 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118fbe:	83 ec 0c             	sub    $0xc,%esp
f0118fc1:	68 8c b7 13 f0       	push   $0xf013b78c
f0118fc6:	e8 43 7d fe ff       	call   f0100d0e <cprintf>
f0118fcb:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118fce:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118fd4:	05 00 40 00 00       	add    $0x4000,%eax
f0118fd9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118fdf:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118fe6:	10 00 00 
f0118fe9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118fef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ff4:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118ffa:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119000:	ba 00 00 00 00       	mov    $0x0,%edx
f0119005:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011900b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119011:	29 d0                	sub    %edx,%eax
f0119013:	89 c1                	mov    %eax,%ecx
f0119015:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011901c:	10 00 00 
f011901f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119024:	0f b6 d0             	movzbl %al,%edx
f0119027:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011902d:	01 d0                	add    %edx,%eax
f011902f:	48                   	dec    %eax
f0119030:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0119036:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011903c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119041:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0119047:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011904d:	29 d0                	sub    %edx,%eax
f011904f:	01 c1                	add    %eax,%ecx
f0119051:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0119058:	10 00 00 
f011905b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119060:	0f b6 c0             	movzbl %al,%eax
f0119063:	c1 e0 04             	shl    $0x4,%eax
f0119066:	89 c2                	mov    %eax,%edx
f0119068:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011906e:	01 d0                	add    %edx,%eax
f0119070:	48                   	dec    %eax
f0119071:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0119077:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011907d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119082:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0119088:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011908e:	29 d0                	sub    %edx,%eax
f0119090:	01 c8                	add    %ecx,%eax
f0119092:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119097:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011909a:	eb 6a                	jmp    f0119106 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011909c:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01190a1:	83 ec 04             	sub    $0x4,%esp
f01190a4:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f01190aa:	52                   	push   %edx
f01190ab:	ff 75 f4             	pushl  -0xc(%ebp)
f01190ae:	50                   	push   %eax
f01190af:	e8 29 da fe ff       	call   f0106add <get_page_table>
f01190b4:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01190b7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01190bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01190c0:	c1 ea 0c             	shr    $0xc,%edx
f01190c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01190c9:	c1 e2 02             	shl    $0x2,%edx
f01190cc:	01 d0                	add    %edx,%eax
f01190ce:	8b 00                	mov    (%eax),%eax
f01190d0:	25 ff 0f 00 00       	and    $0xfff,%eax
f01190d5:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01190db:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01190e1:	83 e0 04             	and    $0x4,%eax
f01190e4:	85 c0                	test   %eax,%eax
f01190e6:	74 17                	je     f01190ff <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01190e8:	83 ec 04             	sub    $0x4,%esp
f01190eb:	68 94 b7 13 f0       	push   $0xf013b794
f01190f0:	68 d7 00 00 00       	push   $0xd7
f01190f5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01190fa:	e8 06 71 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01190ff:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0119106:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119109:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f011910f:	72 8b                	jb     f011909c <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119111:	83 ec 0c             	sub    $0xc,%esp
f0119114:	68 de b7 13 f0       	push   $0xf013b7de
f0119119:	e8 f0 7b fe ff       	call   f0100d0e <cprintf>
f011911e:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119121:	83 ec 0c             	sub    $0xc,%esp
f0119124:	68 e8 b7 13 f0       	push   $0xf013b7e8
f0119129:	e8 e0 7b fe ff       	call   f0100d0e <cprintf>
f011912e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119131:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119136:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119139:	5b                   	pop    %ebx
f011913a:	5f                   	pop    %edi
f011913b:	5d                   	pop    %ebp
f011913c:	c3                   	ret    

f011913d <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f011913d:	55                   	push   %ebp
f011913e:	89 e5                	mov    %esp,%ebp
f0119140:	57                   	push   %edi
f0119141:	53                   	push   %ebx
f0119142:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0119148:	83 ec 0c             	sub    $0xc,%esp
f011914b:	68 3c b5 13 f0       	push   $0xf013b53c
f0119150:	e8 b9 7b fe ff       	call   f0100d0e <cprintf>
f0119155:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119158:	83 ec 0c             	sub    $0xc,%esp
f011915b:	68 6c b5 13 f0       	push   $0xf013b56c
f0119160:	e8 a9 7b fe ff       	call   f0100d0e <cprintf>
f0119165:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119168:	83 ec 0c             	sub    $0xc,%esp
f011916b:	68 3c b5 13 f0       	push   $0xf013b53c
f0119170:	e8 99 7b fe ff       	call   f0100d0e <cprintf>
f0119175:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0119178:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f011917e:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119183:	b8 00 00 00 00       	mov    $0x0,%eax
f0119188:	89 d7                	mov    %edx,%edi
f011918a:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f011918c:	83 ec 0c             	sub    $0xc,%esp
f011918f:	68 24 b8 13 f0       	push   $0xf013b824
f0119194:	e8 75 7b fe ff       	call   f0100d0e <cprintf>
f0119199:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011919c:	e8 cc 3f ff ff       	call   f010d16d <sys_calculate_free_frames>
f01191a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01191a4:	e8 4b ac fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01191a9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01191ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01191b3:	eb 1f                	jmp    f01191d4 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01191b5:	83 ec 0c             	sub    $0xc,%esp
f01191b8:	68 00 00 20 00       	push   $0x200000
f01191bd:	e8 a4 e8 fe ff       	call   f0107a66 <kmalloc>
f01191c2:	83 c4 10             	add    $0x10,%esp
f01191c5:	89 c2                	mov    %eax,%edx
f01191c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01191ca:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01191d1:	ff 45 f4             	incl   -0xc(%ebp)
f01191d4:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01191d8:	7e db                	jle    f01191b5 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01191da:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01191e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01191e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01191e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01191ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01191ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01191f4:	f7 75 e8             	divl   -0x18(%ebp)
f01191f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01191fa:	29 d0                	sub    %edx,%eax
f01191fc:	89 c1                	mov    %eax,%ecx
f01191fe:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0119205:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011920a:	0f b6 d0             	movzbl %al,%edx
f011920d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119210:	01 d0                	add    %edx,%eax
f0119212:	48                   	dec    %eax
f0119213:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119216:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119219:	ba 00 00 00 00       	mov    $0x0,%edx
f011921e:	f7 75 e0             	divl   -0x20(%ebp)
f0119221:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119224:	29 d0                	sub    %edx,%eax
f0119226:	01 c1                	add    %eax,%ecx
f0119228:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f011922f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119234:	0f b6 c0             	movzbl %al,%eax
f0119237:	c1 e0 04             	shl    $0x4,%eax
f011923a:	89 c2                	mov    %eax,%edx
f011923c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011923f:	01 d0                	add    %edx,%eax
f0119241:	48                   	dec    %eax
f0119242:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119245:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119248:	ba 00 00 00 00       	mov    $0x0,%edx
f011924d:	f7 75 d8             	divl   -0x28(%ebp)
f0119250:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119253:	29 d0                	sub    %edx,%eax
f0119255:	01 c8                	add    %ecx,%eax
f0119257:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f011925c:	29 c2                	sub    %eax,%edx
f011925e:	89 d0                	mov    %edx,%eax
f0119260:	83 ec 0c             	sub    $0xc,%esp
f0119263:	50                   	push   %eax
f0119264:	e8 fd e7 fe ff       	call   f0107a66 <kmalloc>
f0119269:	83 c4 10             	add    $0x10,%esp
f011926c:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119272:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0119278:	89 c1                	mov    %eax,%ecx
f011927a:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0119281:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119284:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119289:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011928c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011928f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119294:	f7 75 d0             	divl   -0x30(%ebp)
f0119297:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011929a:	29 d0                	sub    %edx,%eax
f011929c:	89 c3                	mov    %eax,%ebx
f011929e:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01192a5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01192aa:	0f b6 d0             	movzbl %al,%edx
f01192ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01192b0:	01 d0                	add    %edx,%eax
f01192b2:	48                   	dec    %eax
f01192b3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01192b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01192b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01192be:	f7 75 c8             	divl   -0x38(%ebp)
f01192c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01192c4:	29 d0                	sub    %edx,%eax
f01192c6:	01 c3                	add    %eax,%ebx
f01192c8:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01192cf:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01192d4:	0f b6 c0             	movzbl %al,%eax
f01192d7:	c1 e0 04             	shl    $0x4,%eax
f01192da:	89 c2                	mov    %eax,%edx
f01192dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01192df:	01 d0                	add    %edx,%eax
f01192e1:	48                   	dec    %eax
f01192e2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01192e5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01192e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01192ed:	f7 75 c0             	divl   -0x40(%ebp)
f01192f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01192f3:	29 d0                	sub    %edx,%eax
f01192f5:	01 d8                	add    %ebx,%eax
f01192f7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01192fc:	39 c1                	cmp    %eax,%ecx
f01192fe:	0f 85 ed 04 00 00    	jne    f01197f1 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119304:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011930a:	89 c1                	mov    %eax,%ecx
f011930c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0119313:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119316:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011931b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011931e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119321:	ba 00 00 00 00       	mov    $0x0,%edx
f0119326:	f7 75 b8             	divl   -0x48(%ebp)
f0119329:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011932c:	29 d0                	sub    %edx,%eax
f011932e:	89 c3                	mov    %eax,%ebx
f0119330:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0119337:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011933c:	0f b6 d0             	movzbl %al,%edx
f011933f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119342:	01 d0                	add    %edx,%eax
f0119344:	48                   	dec    %eax
f0119345:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0119348:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011934b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119350:	f7 75 b0             	divl   -0x50(%ebp)
f0119353:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119356:	29 d0                	sub    %edx,%eax
f0119358:	01 c3                	add    %eax,%ebx
f011935a:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0119361:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119366:	0f b6 c0             	movzbl %al,%eax
f0119369:	c1 e0 04             	shl    $0x4,%eax
f011936c:	89 c2                	mov    %eax,%edx
f011936e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119371:	01 d0                	add    %edx,%eax
f0119373:	48                   	dec    %eax
f0119374:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0119377:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011937a:	ba 00 00 00 00       	mov    $0x0,%edx
f011937f:	f7 75 a8             	divl   -0x58(%ebp)
f0119382:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119385:	29 d0                	sub    %edx,%eax
f0119387:	01 d8                	add    %ebx,%eax
f0119389:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011938e:	39 c1                	cmp    %eax,%ecx
f0119390:	0f 85 5b 04 00 00    	jne    f01197f1 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119396:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f011939c:	89 c1                	mov    %eax,%ecx
f011939e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01193a5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01193a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193ad:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01193b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01193b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01193b8:	f7 75 a0             	divl   -0x60(%ebp)
f01193bb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01193be:	29 d0                	sub    %edx,%eax
f01193c0:	89 c3                	mov    %eax,%ebx
f01193c2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01193c9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01193ce:	0f b6 d0             	movzbl %al,%edx
f01193d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01193d4:	01 d0                	add    %edx,%eax
f01193d6:	48                   	dec    %eax
f01193d7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01193da:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01193e2:	f7 75 98             	divl   -0x68(%ebp)
f01193e5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193e8:	29 d0                	sub    %edx,%eax
f01193ea:	01 c3                	add    %eax,%ebx
f01193ec:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01193f3:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01193f8:	0f b6 c0             	movzbl %al,%eax
f01193fb:	c1 e0 04             	shl    $0x4,%eax
f01193fe:	89 c2                	mov    %eax,%edx
f0119400:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119403:	01 d0                	add    %edx,%eax
f0119405:	48                   	dec    %eax
f0119406:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0119409:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011940c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119411:	f7 75 90             	divl   -0x70(%ebp)
f0119414:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119417:	29 d0                	sub    %edx,%eax
f0119419:	01 d8                	add    %ebx,%eax
f011941b:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119420:	39 c1                	cmp    %eax,%ecx
f0119422:	0f 85 c9 03 00 00    	jne    f01197f1 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119428:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011942e:	89 c1                	mov    %eax,%ecx
f0119430:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0119437:	8b 45 88             	mov    -0x78(%ebp),%eax
f011943a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011943f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0119442:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119445:	ba 00 00 00 00       	mov    $0x0,%edx
f011944a:	f7 75 88             	divl   -0x78(%ebp)
f011944d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119450:	29 d0                	sub    %edx,%eax
f0119452:	89 c3                	mov    %eax,%ebx
f0119454:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011945b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119460:	0f b6 d0             	movzbl %al,%edx
f0119463:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119466:	01 d0                	add    %edx,%eax
f0119468:	48                   	dec    %eax
f0119469:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011946f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119475:	ba 00 00 00 00       	mov    $0x0,%edx
f011947a:	f7 75 80             	divl   -0x80(%ebp)
f011947d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119483:	29 d0                	sub    %edx,%eax
f0119485:	01 c3                	add    %eax,%ebx
f0119487:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011948e:	10 00 00 
f0119491:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119496:	0f b6 c0             	movzbl %al,%eax
f0119499:	c1 e0 04             	shl    $0x4,%eax
f011949c:	89 c2                	mov    %eax,%edx
f011949e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01194a4:	01 d0                	add    %edx,%eax
f01194a6:	48                   	dec    %eax
f01194a7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01194ad:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01194b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01194b8:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01194be:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01194c4:	29 d0                	sub    %edx,%eax
f01194c6:	01 d8                	add    %ebx,%eax
f01194c8:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01194cd:	39 c1                	cmp    %eax,%ecx
f01194cf:	0f 85 1c 03 00 00    	jne    f01197f1 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01194d5:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01194db:	89 c1                	mov    %eax,%ecx
f01194dd:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01194e4:	10 00 00 
f01194e7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01194ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194f2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01194f8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01194fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119503:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0119509:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011950f:	29 d0                	sub    %edx,%eax
f0119511:	89 c3                	mov    %eax,%ebx
f0119513:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011951a:	10 00 00 
f011951d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119522:	0f b6 d0             	movzbl %al,%edx
f0119525:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011952b:	01 d0                	add    %edx,%eax
f011952d:	48                   	dec    %eax
f011952e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119534:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011953a:	ba 00 00 00 00       	mov    $0x0,%edx
f011953f:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119545:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011954b:	29 d0                	sub    %edx,%eax
f011954d:	01 c3                	add    %eax,%ebx
f011954f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119556:	10 00 00 
f0119559:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011955e:	0f b6 c0             	movzbl %al,%eax
f0119561:	c1 e0 04             	shl    $0x4,%eax
f0119564:	89 c2                	mov    %eax,%edx
f0119566:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011956c:	01 d0                	add    %edx,%eax
f011956e:	48                   	dec    %eax
f011956f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119575:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011957b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119580:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119586:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011958c:	29 d0                	sub    %edx,%eax
f011958e:	01 d8                	add    %ebx,%eax
f0119590:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119595:	39 c1                	cmp    %eax,%ecx
f0119597:	0f 85 54 02 00 00    	jne    f01197f1 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011959d:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01195a3:	89 c1                	mov    %eax,%ecx
f01195a5:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01195ac:	10 00 00 
f01195af:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01195b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195ba:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01195c0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01195cb:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01195d1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195d7:	29 d0                	sub    %edx,%eax
f01195d9:	89 c3                	mov    %eax,%ebx
f01195db:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01195e2:	10 00 00 
f01195e5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01195ea:	0f b6 d0             	movzbl %al,%edx
f01195ed:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01195f3:	01 d0                	add    %edx,%eax
f01195f5:	48                   	dec    %eax
f01195f6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01195fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119602:	ba 00 00 00 00       	mov    $0x0,%edx
f0119607:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011960d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119613:	29 d0                	sub    %edx,%eax
f0119615:	01 c3                	add    %eax,%ebx
f0119617:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011961e:	10 00 00 
f0119621:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119626:	0f b6 c0             	movzbl %al,%eax
f0119629:	c1 e0 04             	shl    $0x4,%eax
f011962c:	89 c2                	mov    %eax,%edx
f011962e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119634:	01 d0                	add    %edx,%eax
f0119636:	48                   	dec    %eax
f0119637:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011963d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119643:	ba 00 00 00 00       	mov    $0x0,%edx
f0119648:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011964e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119654:	29 d0                	sub    %edx,%eax
f0119656:	01 d8                	add    %ebx,%eax
f0119658:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011965d:	39 c1                	cmp    %eax,%ecx
f011965f:	0f 85 8c 01 00 00    	jne    f01197f1 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119665:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011966b:	89 c1                	mov    %eax,%ecx
f011966d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119674:	10 00 00 
f0119677:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011967d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119682:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119688:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011968e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119693:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119699:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011969f:	29 d0                	sub    %edx,%eax
f01196a1:	89 c3                	mov    %eax,%ebx
f01196a3:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01196aa:	10 00 00 
f01196ad:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01196b2:	0f b6 d0             	movzbl %al,%edx
f01196b5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01196bb:	01 d0                	add    %edx,%eax
f01196bd:	48                   	dec    %eax
f01196be:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01196c4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01196ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01196cf:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01196d5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01196db:	29 d0                	sub    %edx,%eax
f01196dd:	01 c3                	add    %eax,%ebx
f01196df:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01196e6:	10 00 00 
f01196e9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01196ee:	0f b6 c0             	movzbl %al,%eax
f01196f1:	c1 e0 04             	shl    $0x4,%eax
f01196f4:	89 c2                	mov    %eax,%edx
f01196f6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01196fc:	01 d0                	add    %edx,%eax
f01196fe:	48                   	dec    %eax
f01196ff:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0119705:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011970b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119710:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0119716:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011971c:	29 d0                	sub    %edx,%eax
f011971e:	01 d8                	add    %ebx,%eax
f0119720:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119725:	39 c1                	cmp    %eax,%ecx
f0119727:	0f 85 c4 00 00 00    	jne    f01197f1 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f011972d:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119733:	89 c1                	mov    %eax,%ecx
f0119735:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011973c:	10 00 00 
f011973f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119745:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011974a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0119750:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119756:	ba 00 00 00 00       	mov    $0x0,%edx
f011975b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119761:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119767:	29 d0                	sub    %edx,%eax
f0119769:	89 c3                	mov    %eax,%ebx
f011976b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0119772:	10 00 00 
f0119775:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011977a:	0f b6 d0             	movzbl %al,%edx
f011977d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119783:	01 d0                	add    %edx,%eax
f0119785:	48                   	dec    %eax
f0119786:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011978c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119792:	ba 00 00 00 00       	mov    $0x0,%edx
f0119797:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011979d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01197a3:	29 d0                	sub    %edx,%eax
f01197a5:	01 c3                	add    %eax,%ebx
f01197a7:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01197ae:	10 00 00 
f01197b1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01197b6:	0f b6 c0             	movzbl %al,%eax
f01197b9:	c1 e0 04             	shl    $0x4,%eax
f01197bc:	89 c2                	mov    %eax,%edx
f01197be:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01197c4:	01 d0                	add    %edx,%eax
f01197c6:	48                   	dec    %eax
f01197c7:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01197cd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01197d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01197d8:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01197de:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01197e4:	29 d0                	sub    %edx,%eax
f01197e6:	01 d8                	add    %ebx,%eax
f01197e8:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01197ed:	39 c1                	cmp    %eax,%ecx
f01197ef:	74 17                	je     f0119808 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01197f1:	83 ec 04             	sub    $0x4,%esp
f01197f4:	68 74 b8 13 f0       	push   $0xf013b874
f01197f9:	68 03 01 00 00       	push   $0x103
f01197fe:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119803:	e8 fd 69 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119808:	e8 e7 a5 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011980d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119810:	74 17                	je     f0119829 <test_kmalloc_nextfit+0x6ec>
f0119812:	83 ec 04             	sub    $0x4,%esp
f0119815:	68 14 b6 13 f0       	push   $0xf013b614
f011981a:	68 05 01 00 00       	push   $0x105
f011981f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119824:	e8 dc 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0119829:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011982c:	e8 3c 39 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119831:	29 c3                	sub    %eax,%ebx
f0119833:	89 d9                	mov    %ebx,%ecx
f0119835:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011983c:	10 00 00 
f011983f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119845:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011984a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119850:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119856:	ba 00 00 00 00       	mov    $0x0,%edx
f011985b:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119861:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119867:	29 d0                	sub    %edx,%eax
f0119869:	89 c3                	mov    %eax,%ebx
f011986b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119872:	10 00 00 
f0119875:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011987a:	0f b6 d0             	movzbl %al,%edx
f011987d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119883:	01 d0                	add    %edx,%eax
f0119885:	48                   	dec    %eax
f0119886:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011988c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119892:	ba 00 00 00 00       	mov    $0x0,%edx
f0119897:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011989d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01198a3:	29 d0                	sub    %edx,%eax
f01198a5:	01 c3                	add    %eax,%ebx
f01198a7:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01198ae:	10 00 00 
f01198b1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01198b6:	0f b6 c0             	movzbl %al,%eax
f01198b9:	c1 e0 04             	shl    $0x4,%eax
f01198bc:	89 c2                	mov    %eax,%edx
f01198be:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01198c4:	01 d0                	add    %edx,%eax
f01198c6:	48                   	dec    %eax
f01198c7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01198cd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01198d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01198d8:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01198de:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01198e4:	29 d0                	sub    %edx,%eax
f01198e6:	01 d8                	add    %ebx,%eax
f01198e8:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01198ed:	29 c2                	sub    %eax,%edx
f01198ef:	89 d0                	mov    %edx,%eax
f01198f1:	c1 e8 0c             	shr    $0xc,%eax
f01198f4:	39 c1                	cmp    %eax,%ecx
f01198f6:	74 17                	je     f011990f <test_kmalloc_nextfit+0x7d2>
f01198f8:	83 ec 04             	sub    $0x4,%esp
f01198fb:	68 b7 b8 13 f0       	push   $0xf013b8b7
f0119900:	68 06 01 00 00       	push   $0x106
f0119905:	68 fa b5 13 f0       	push   $0xf013b5fa
f011990a:	e8 f6 68 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f011990f:	e8 e0 a4 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119914:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119917:	e8 51 38 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011991c:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f011991f:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0119925:	83 ec 0c             	sub    $0xc,%esp
f0119928:	50                   	push   %eax
f0119929:	e8 f8 e1 fe ff       	call   f0107b26 <kfree>
f011992e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119931:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0119937:	83 ec 0c             	sub    $0xc,%esp
f011993a:	50                   	push   %eax
f011993b:	e8 e6 e1 fe ff       	call   f0107b26 <kfree>
f0119940:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119943:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0119949:	83 ec 0c             	sub    $0xc,%esp
f011994c:	50                   	push   %eax
f011994d:	e8 d4 e1 fe ff       	call   f0107b26 <kfree>
f0119952:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119955:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f011995b:	83 ec 0c             	sub    $0xc,%esp
f011995e:	50                   	push   %eax
f011995f:	e8 c2 e1 fe ff       	call   f0107b26 <kfree>
f0119964:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119967:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011996d:	83 ec 0c             	sub    $0xc,%esp
f0119970:	50                   	push   %eax
f0119971:	e8 b0 e1 fe ff       	call   f0107b26 <kfree>
f0119976:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119979:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f011997f:	83 ec 0c             	sub    $0xc,%esp
f0119982:	50                   	push   %eax
f0119983:	e8 9e e1 fe ff       	call   f0107b26 <kfree>
f0119988:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011998b:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0119991:	83 ec 0c             	sub    $0xc,%esp
f0119994:	50                   	push   %eax
f0119995:	e8 8c e1 fe ff       	call   f0107b26 <kfree>
f011999a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011999d:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01199a3:	83 ec 0c             	sub    $0xc,%esp
f01199a6:	50                   	push   %eax
f01199a7:	e8 7a e1 fe ff       	call   f0107b26 <kfree>
f01199ac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01199af:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01199b5:	83 ec 0c             	sub    $0xc,%esp
f01199b8:	50                   	push   %eax
f01199b9:	e8 68 e1 fe ff       	call   f0107b26 <kfree>
f01199be:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01199c1:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01199c7:	83 ec 0c             	sub    $0xc,%esp
f01199ca:	50                   	push   %eax
f01199cb:	e8 56 e1 fe ff       	call   f0107b26 <kfree>
f01199d0:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199d3:	e8 1c a4 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01199d8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199db:	74 17                	je     f01199f4 <test_kmalloc_nextfit+0x8b7>
f01199dd:	83 ec 04             	sub    $0x4,%esp
f01199e0:	68 14 b6 13 f0       	push   $0xf013b614
f01199e5:	68 17 01 00 00       	push   $0x117
f01199ea:	68 fa b5 13 f0       	push   $0xf013b5fa
f01199ef:	e8 11 68 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01199f4:	e8 74 37 ff ff       	call   f010d16d <sys_calculate_free_frames>
f01199f9:	89 c2                	mov    %eax,%edx
f01199fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01199fe:	89 d1                	mov    %edx,%ecx
f0119a00:	29 c1                	sub    %eax,%ecx
f0119a02:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119a09:	10 00 00 
f0119a0c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119a12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a17:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0119a1d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119a23:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a28:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119a2e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119a34:	29 d0                	sub    %edx,%eax
f0119a36:	89 c3                	mov    %eax,%ebx
f0119a38:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119a3f:	10 00 00 
f0119a42:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119a47:	0f b6 d0             	movzbl %al,%edx
f0119a4a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119a50:	01 d0                	add    %edx,%eax
f0119a52:	48                   	dec    %eax
f0119a53:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119a59:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119a5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a64:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119a6a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119a70:	29 d0                	sub    %edx,%eax
f0119a72:	01 c3                	add    %eax,%ebx
f0119a74:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119a7b:	10 00 00 
f0119a7e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119a83:	0f b6 c0             	movzbl %al,%eax
f0119a86:	c1 e0 04             	shl    $0x4,%eax
f0119a89:	89 c2                	mov    %eax,%edx
f0119a8b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119a91:	01 d0                	add    %edx,%eax
f0119a93:	48                   	dec    %eax
f0119a94:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119a9a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119aa0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aa5:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0119aab:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119ab1:	29 d0                	sub    %edx,%eax
f0119ab3:	01 d8                	add    %ebx,%eax
f0119ab5:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119aba:	29 c2                	sub    %eax,%edx
f0119abc:	89 d0                	mov    %edx,%eax
f0119abe:	c1 e8 0c             	shr    $0xc,%eax
f0119ac1:	39 c1                	cmp    %eax,%ecx
f0119ac3:	74 17                	je     f0119adc <test_kmalloc_nextfit+0x99f>
f0119ac5:	83 ec 04             	sub    $0x4,%esp
f0119ac8:	68 c8 b8 13 f0       	push   $0xf013b8c8
f0119acd:	68 18 01 00 00       	push   $0x118
f0119ad2:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119ad7:	e8 29 67 fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119adc:	e8 13 a3 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119ae1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ae4:	e8 84 36 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119ae9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119aec:	83 ec 0c             	sub    $0xc,%esp
f0119aef:	68 00 fc 0f 00       	push   $0xffc00
f0119af4:	e8 6d df fe ff       	call   f0107a66 <kmalloc>
f0119af9:	83 c4 10             	add    $0x10,%esp
f0119afc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119b02:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119b09:	10 00 00 
f0119b0c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119b12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b17:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119b1d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119b23:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b28:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119b2e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119b34:	29 d0                	sub    %edx,%eax
f0119b36:	89 c1                	mov    %eax,%ecx
f0119b38:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119b3f:	10 00 00 
f0119b42:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119b47:	0f b6 d0             	movzbl %al,%edx
f0119b4a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119b50:	01 d0                	add    %edx,%eax
f0119b52:	48                   	dec    %eax
f0119b53:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119b59:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119b5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b64:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119b6a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119b70:	29 d0                	sub    %edx,%eax
f0119b72:	01 c1                	add    %eax,%ecx
f0119b74:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119b7b:	10 00 00 
f0119b7e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119b83:	0f b6 c0             	movzbl %al,%eax
f0119b86:	c1 e0 04             	shl    $0x4,%eax
f0119b89:	89 c2                	mov    %eax,%edx
f0119b8b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119b91:	01 d0                	add    %edx,%eax
f0119b93:	48                   	dec    %eax
f0119b94:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119b9a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119ba0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ba5:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119bab:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119bb1:	29 d0                	sub    %edx,%eax
f0119bb3:	01 c8                	add    %ecx,%eax
f0119bb5:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119bbb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119bc1:	39 c2                	cmp    %eax,%edx
f0119bc3:	74 17                	je     f0119bdc <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119bc5:	83 ec 04             	sub    $0x4,%esp
f0119bc8:	68 08 b9 13 f0       	push   $0xf013b908
f0119bcd:	68 1f 01 00 00       	push   $0x11f
f0119bd2:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119bd7:	e8 29 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bdc:	e8 13 a2 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119be1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119be4:	74 17                	je     f0119bfd <test_kmalloc_nextfit+0xac0>
f0119be6:	83 ec 04             	sub    $0x4,%esp
f0119be9:	68 14 b6 13 f0       	push   $0xf013b614
f0119bee:	68 20 01 00 00       	push   $0x120
f0119bf3:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119bf8:	e8 08 66 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119bfd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c00:	e8 68 35 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119c05:	29 c3                	sub    %eax,%ebx
f0119c07:	89 d8                	mov    %ebx,%eax
f0119c09:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c0e:	74 17                	je     f0119c27 <test_kmalloc_nextfit+0xaea>
f0119c10:	83 ec 04             	sub    $0x4,%esp
f0119c13:	68 b7 b8 13 f0       	push   $0xf013b8b7
f0119c18:	68 21 01 00 00       	push   $0x121
f0119c1d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119c22:	e8 de 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c27:	e8 c8 a1 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119c2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c2f:	e8 39 35 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119c34:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119c37:	83 ec 0c             	sub    $0xc,%esp
f0119c3a:	68 00 04 00 00       	push   $0x400
f0119c3f:	e8 22 de fe ff       	call   f0107a66 <kmalloc>
f0119c44:	83 c4 10             	add    $0x10,%esp
f0119c47:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119c4d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119c54:	10 00 00 
f0119c57:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119c5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c62:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119c68:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119c6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c73:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119c79:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119c7f:	29 d0                	sub    %edx,%eax
f0119c81:	89 c1                	mov    %eax,%ecx
f0119c83:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119c8a:	10 00 00 
f0119c8d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119c92:	0f b6 d0             	movzbl %al,%edx
f0119c95:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119c9b:	01 d0                	add    %edx,%eax
f0119c9d:	48                   	dec    %eax
f0119c9e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119ca4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119caa:	ba 00 00 00 00       	mov    $0x0,%edx
f0119caf:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119cb5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119cbb:	29 d0                	sub    %edx,%eax
f0119cbd:	01 c1                	add    %eax,%ecx
f0119cbf:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119cc6:	10 00 00 
f0119cc9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119cce:	0f b6 c0             	movzbl %al,%eax
f0119cd1:	c1 e0 04             	shl    $0x4,%eax
f0119cd4:	89 c2                	mov    %eax,%edx
f0119cd6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119cdc:	01 d0                	add    %edx,%eax
f0119cde:	48                   	dec    %eax
f0119cdf:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119ce5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119ceb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cf0:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119cf6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119cfc:	29 d0                	sub    %edx,%eax
f0119cfe:	01 c8                	add    %ecx,%eax
f0119d00:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119d06:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d0c:	39 c2                	cmp    %eax,%edx
f0119d0e:	74 17                	je     f0119d27 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0119d10:	83 ec 04             	sub    $0x4,%esp
f0119d13:	68 08 b9 13 f0       	push   $0xf013b908
f0119d18:	68 27 01 00 00       	push   $0x127
f0119d1d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119d22:	e8 de 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d27:	e8 c8 a0 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119d2c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d2f:	74 17                	je     f0119d48 <test_kmalloc_nextfit+0xc0b>
f0119d31:	83 ec 04             	sub    $0x4,%esp
f0119d34:	68 14 b6 13 f0       	push   $0xf013b614
f0119d39:	68 28 01 00 00       	push   $0x128
f0119d3e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119d43:	e8 bd 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d48:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d4b:	e8 1d 34 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119d50:	29 c3                	sub    %eax,%ebx
f0119d52:	89 d8                	mov    %ebx,%eax
f0119d54:	83 f8 01             	cmp    $0x1,%eax
f0119d57:	74 17                	je     f0119d70 <test_kmalloc_nextfit+0xc33>
f0119d59:	83 ec 04             	sub    $0x4,%esp
f0119d5c:	68 b7 b8 13 f0       	push   $0xf013b8b7
f0119d61:	68 29 01 00 00       	push   $0x129
f0119d66:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119d6b:	e8 95 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d70:	e8 7f a0 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119d75:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d78:	e8 f0 33 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119d7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119d80:	83 ec 0c             	sub    $0xc,%esp
f0119d83:	68 00 00 50 00       	push   $0x500000
f0119d88:	e8 d9 dc fe ff       	call   f0107a66 <kmalloc>
f0119d8d:	83 c4 10             	add    $0x10,%esp
f0119d90:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119d96:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119d9d:	10 00 00 
f0119da0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119da6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119dab:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119db1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119db7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dbc:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119dc2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119dc8:	29 d0                	sub    %edx,%eax
f0119dca:	89 c1                	mov    %eax,%ecx
f0119dcc:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119dd3:	10 00 00 
f0119dd6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119ddb:	0f b6 d0             	movzbl %al,%edx
f0119dde:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119de4:	01 d0                	add    %edx,%eax
f0119de6:	48                   	dec    %eax
f0119de7:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119ded:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119df3:	ba 00 00 00 00       	mov    $0x0,%edx
f0119df8:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119dfe:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119e04:	29 d0                	sub    %edx,%eax
f0119e06:	01 c1                	add    %eax,%ecx
f0119e08:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119e0f:	10 00 00 
f0119e12:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119e17:	0f b6 c0             	movzbl %al,%eax
f0119e1a:	c1 e0 04             	shl    $0x4,%eax
f0119e1d:	89 c2                	mov    %eax,%edx
f0119e1f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119e25:	01 d0                	add    %edx,%eax
f0119e27:	48                   	dec    %eax
f0119e28:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119e2e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119e34:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e39:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119e3f:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119e45:	29 d0                	sub    %edx,%eax
f0119e47:	01 c8                	add    %ecx,%eax
f0119e49:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119e4f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e55:	39 c2                	cmp    %eax,%edx
f0119e57:	74 17                	je     f0119e70 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119e59:	83 ec 04             	sub    $0x4,%esp
f0119e5c:	68 08 b9 13 f0       	push   $0xf013b908
f0119e61:	68 2f 01 00 00       	push   $0x12f
f0119e66:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119e6b:	e8 95 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e70:	e8 7f 9f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119e75:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e78:	74 17                	je     f0119e91 <test_kmalloc_nextfit+0xd54>
f0119e7a:	83 ec 04             	sub    $0x4,%esp
f0119e7d:	68 14 b6 13 f0       	push   $0xf013b614
f0119e82:	68 30 01 00 00       	push   $0x130
f0119e87:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119e8c:	e8 74 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119e91:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119e94:	e8 d4 32 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119e99:	29 c3                	sub    %eax,%ebx
f0119e9b:	89 d8                	mov    %ebx,%eax
f0119e9d:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119ea2:	74 17                	je     f0119ebb <test_kmalloc_nextfit+0xd7e>
f0119ea4:	83 ec 04             	sub    $0x4,%esp
f0119ea7:	68 b7 b8 13 f0       	push   $0xf013b8b7
f0119eac:	68 31 01 00 00       	push   $0x131
f0119eb1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119eb6:	e8 4a 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ebb:	e8 34 9f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119ec0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ec3:	e8 a5 32 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119ec8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119ecb:	83 ec 0c             	sub    $0xc,%esp
f0119ece:	68 00 00 10 00       	push   $0x100000
f0119ed3:	e8 8e db fe ff       	call   f0107a66 <kmalloc>
f0119ed8:	83 c4 10             	add    $0x10,%esp
f0119edb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119ee1:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119ee8:	10 00 00 
f0119eeb:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119ef1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ef6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119efc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119f02:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f07:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119f0d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119f13:	29 d0                	sub    %edx,%eax
f0119f15:	89 c1                	mov    %eax,%ecx
f0119f17:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119f1e:	10 00 00 
f0119f21:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119f26:	0f b6 d0             	movzbl %al,%edx
f0119f29:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119f2f:	01 d0                	add    %edx,%eax
f0119f31:	48                   	dec    %eax
f0119f32:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119f38:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119f3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f43:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119f49:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119f4f:	29 d0                	sub    %edx,%eax
f0119f51:	01 c1                	add    %eax,%ecx
f0119f53:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119f5a:	10 00 00 
f0119f5d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0119f62:	0f b6 c0             	movzbl %al,%eax
f0119f65:	c1 e0 04             	shl    $0x4,%eax
f0119f68:	89 c2                	mov    %eax,%edx
f0119f6a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119f70:	01 d0                	add    %edx,%eax
f0119f72:	48                   	dec    %eax
f0119f73:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119f79:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119f7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f84:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119f8a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119f90:	29 d0                	sub    %edx,%eax
f0119f92:	01 c8                	add    %ecx,%eax
f0119f94:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119f9a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fa0:	39 c2                	cmp    %eax,%edx
f0119fa2:	74 17                	je     f0119fbb <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119fa4:	83 ec 04             	sub    $0x4,%esp
f0119fa7:	68 08 b9 13 f0       	push   $0xf013b908
f0119fac:	68 37 01 00 00       	push   $0x137
f0119fb1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119fb6:	e8 4a 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fbb:	e8 34 9e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0119fc0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fc3:	74 17                	je     f0119fdc <test_kmalloc_nextfit+0xe9f>
f0119fc5:	83 ec 04             	sub    $0x4,%esp
f0119fc8:	68 14 b6 13 f0       	push   $0xf013b614
f0119fcd:	68 38 01 00 00       	push   $0x138
f0119fd2:	68 fa b5 13 f0       	push   $0xf013b5fa
f0119fd7:	e8 29 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119fdc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fdf:	e8 89 31 ff ff       	call   f010d16d <sys_calculate_free_frames>
f0119fe4:	29 c3                	sub    %eax,%ebx
f0119fe6:	89 d8                	mov    %ebx,%eax
f0119fe8:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119fed:	74 17                	je     f011a006 <test_kmalloc_nextfit+0xec9>
f0119fef:	83 ec 04             	sub    $0x4,%esp
f0119ff2:	68 b7 b8 13 f0       	push   $0xf013b8b7
f0119ff7:	68 39 01 00 00       	push   $0x139
f0119ffc:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a001:	e8 ff 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a006:	e8 e9 9d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a00b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a00e:	e8 5a 31 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a013:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011a016:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011a01c:	83 ec 0c             	sub    $0xc,%esp
f011a01f:	50                   	push   %eax
f011a020:	e8 01 db fe ff       	call   f0107b26 <kfree>
f011a025:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a028:	e8 c7 9d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a02d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a030:	74 17                	je     f011a049 <test_kmalloc_nextfit+0xf0c>
f011a032:	83 ec 04             	sub    $0x4,%esp
f011a035:	68 14 b6 13 f0       	push   $0xf013b614
f011a03a:	68 3e 01 00 00       	push   $0x13e
f011a03f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a044:	e8 bc 61 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a049:	e8 1f 31 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a04e:	89 c2                	mov    %eax,%edx
f011a050:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a053:	29 c2                	sub    %eax,%edx
f011a055:	89 d0                	mov    %edx,%eax
f011a057:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a05c:	74 17                	je     f011a075 <test_kmalloc_nextfit+0xf38>
f011a05e:	83 ec 04             	sub    $0x4,%esp
f011a061:	68 c8 b8 13 f0       	push   $0xf013b8c8
f011a066:	68 3f 01 00 00       	push   $0x13f
f011a06b:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a070:	e8 90 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a075:	e8 7a 9d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a07a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a07d:	e8 eb 30 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a082:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a085:	83 ec 0c             	sub    $0xc,%esp
f011a088:	68 00 04 00 00       	push   $0x400
f011a08d:	e8 d4 d9 fe ff       	call   f0107a66 <kmalloc>
f011a092:	83 c4 10             	add    $0x10,%esp
f011a095:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a09b:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011a0a2:	10 00 00 
f011a0a5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a0ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0b0:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011a0b6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a0bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0c1:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f011a0c7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a0cd:	29 d0                	sub    %edx,%eax
f011a0cf:	89 c1                	mov    %eax,%ecx
f011a0d1:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011a0d8:	10 00 00 
f011a0db:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a0e0:	0f b6 d0             	movzbl %al,%edx
f011a0e3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a0e9:	01 d0                	add    %edx,%eax
f011a0eb:	48                   	dec    %eax
f011a0ec:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011a0f2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a0f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0fd:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011a103:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a109:	29 d0                	sub    %edx,%eax
f011a10b:	01 c1                	add    %eax,%ecx
f011a10d:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011a114:	10 00 00 
f011a117:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a11c:	0f b6 c0             	movzbl %al,%eax
f011a11f:	c1 e0 04             	shl    $0x4,%eax
f011a122:	89 c2                	mov    %eax,%edx
f011a124:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a12a:	01 d0                	add    %edx,%eax
f011a12c:	48                   	dec    %eax
f011a12d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011a133:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a139:	ba 00 00 00 00       	mov    $0x0,%edx
f011a13e:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011a144:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a14a:	29 d0                	sub    %edx,%eax
f011a14c:	01 c8                	add    %ecx,%eax
f011a14e:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a154:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a15a:	39 c2                	cmp    %eax,%edx
f011a15c:	74 17                	je     f011a175 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f011a15e:	83 ec 04             	sub    $0x4,%esp
f011a161:	68 08 b9 13 f0       	push   $0xf013b908
f011a166:	68 45 01 00 00       	push   $0x145
f011a16b:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a170:	e8 90 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a175:	e8 7a 9c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a17a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a17d:	74 17                	je     f011a196 <test_kmalloc_nextfit+0x1059>
f011a17f:	83 ec 04             	sub    $0x4,%esp
f011a182:	68 14 b6 13 f0       	push   $0xf013b614
f011a187:	68 46 01 00 00       	push   $0x146
f011a18c:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a191:	e8 6f 60 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a196:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a199:	e8 cf 2f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a19e:	29 c3                	sub    %eax,%ebx
f011a1a0:	89 d8                	mov    %ebx,%eax
f011a1a2:	83 f8 01             	cmp    $0x1,%eax
f011a1a5:	74 17                	je     f011a1be <test_kmalloc_nextfit+0x1081>
f011a1a7:	83 ec 04             	sub    $0x4,%esp
f011a1aa:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011a1af:	68 47 01 00 00       	push   $0x147
f011a1b4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a1b9:	e8 47 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1be:	e8 31 9c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a1c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1c6:	e8 a2 2f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a1cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a1ce:	83 ec 0c             	sub    $0xc,%esp
f011a1d1:	68 00 e0 1f 00       	push   $0x1fe000
f011a1d6:	e8 8b d8 fe ff       	call   f0107a66 <kmalloc>
f011a1db:	83 c4 10             	add    $0x10,%esp
f011a1de:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a1e4:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011a1eb:	10 00 00 
f011a1ee:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011a1f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a1f9:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f011a1ff:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a205:	ba 00 00 00 00       	mov    $0x0,%edx
f011a20a:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011a210:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a216:	29 d0                	sub    %edx,%eax
f011a218:	89 c1                	mov    %eax,%ecx
f011a21a:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f011a221:	10 00 00 
f011a224:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a229:	0f b6 d0             	movzbl %al,%edx
f011a22c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011a232:	01 d0                	add    %edx,%eax
f011a234:	48                   	dec    %eax
f011a235:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f011a23b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a241:	ba 00 00 00 00       	mov    $0x0,%edx
f011a246:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f011a24c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a252:	29 d0                	sub    %edx,%eax
f011a254:	01 c1                	add    %eax,%ecx
f011a256:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f011a25d:	10 00 00 
f011a260:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a265:	0f b6 c0             	movzbl %al,%eax
f011a268:	c1 e0 04             	shl    $0x4,%eax
f011a26b:	89 c2                	mov    %eax,%edx
f011a26d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a273:	01 d0                	add    %edx,%eax
f011a275:	48                   	dec    %eax
f011a276:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f011a27c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a282:	ba 00 00 00 00       	mov    $0x0,%edx
f011a287:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011a28d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a293:	29 d0                	sub    %edx,%eax
f011a295:	01 c8                	add    %ecx,%eax
f011a297:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a29d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a2a3:	39 c2                	cmp    %eax,%edx
f011a2a5:	74 17                	je     f011a2be <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f011a2a7:	83 ec 04             	sub    $0x4,%esp
f011a2aa:	68 08 b9 13 f0       	push   $0xf013b908
f011a2af:	68 4d 01 00 00       	push   $0x14d
f011a2b4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a2b9:	e8 47 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2be:	e8 31 9b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a2c3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2c6:	74 17                	je     f011a2df <test_kmalloc_nextfit+0x11a2>
f011a2c8:	83 ec 04             	sub    $0x4,%esp
f011a2cb:	68 14 b6 13 f0       	push   $0xf013b614
f011a2d0:	68 4e 01 00 00       	push   $0x14e
f011a2d5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a2da:	e8 26 5f fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a2df:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a2e2:	e8 86 2e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a2e7:	29 c3                	sub    %eax,%ebx
f011a2e9:	89 d8                	mov    %ebx,%eax
f011a2eb:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a2f0:	74 17                	je     f011a309 <test_kmalloc_nextfit+0x11cc>
f011a2f2:	83 ec 04             	sub    $0x4,%esp
f011a2f5:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011a2fa:	68 50 01 00 00       	push   $0x150
f011a2ff:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a304:	e8 fc 5e fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a309:	e8 e6 9a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a30e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a311:	e8 57 2e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a316:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a319:	83 ec 0c             	sub    $0xc,%esp
f011a31c:	68 00 00 08 00       	push   $0x80000
f011a321:	e8 40 d7 fe ff       	call   f0107a66 <kmalloc>
f011a326:	83 c4 10             	add    $0x10,%esp
f011a329:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a32f:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f011a336:	10 00 00 
f011a339:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011a33f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a344:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f011a34a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a350:	ba 00 00 00 00       	mov    $0x0,%edx
f011a355:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f011a35b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a361:	29 d0                	sub    %edx,%eax
f011a363:	89 c1                	mov    %eax,%ecx
f011a365:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f011a36c:	10 00 00 
f011a36f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a374:	0f b6 d0             	movzbl %al,%edx
f011a377:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011a37d:	01 d0                	add    %edx,%eax
f011a37f:	48                   	dec    %eax
f011a380:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f011a386:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a38c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a391:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f011a397:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a39d:	29 d0                	sub    %edx,%eax
f011a39f:	01 c1                	add    %eax,%ecx
f011a3a1:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f011a3a8:	10 00 00 
f011a3ab:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a3b0:	0f b6 c0             	movzbl %al,%eax
f011a3b3:	c1 e0 04             	shl    $0x4,%eax
f011a3b6:	89 c2                	mov    %eax,%edx
f011a3b8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011a3be:	01 d0                	add    %edx,%eax
f011a3c0:	48                   	dec    %eax
f011a3c1:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f011a3c7:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a3cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3d2:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f011a3d8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a3de:	29 d0                	sub    %edx,%eax
f011a3e0:	01 c8                	add    %ecx,%eax
f011a3e2:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a3e8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3ee:	39 c2                	cmp    %eax,%edx
f011a3f0:	74 17                	je     f011a409 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011a3f2:	83 ec 04             	sub    $0x4,%esp
f011a3f5:	68 08 b9 13 f0       	push   $0xf013b908
f011a3fa:	68 56 01 00 00       	push   $0x156
f011a3ff:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a404:	e8 fc 5d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a409:	e8 e6 99 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a40e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a411:	74 17                	je     f011a42a <test_kmalloc_nextfit+0x12ed>
f011a413:	83 ec 04             	sub    $0x4,%esp
f011a416:	68 14 b6 13 f0       	push   $0xf013b614
f011a41b:	68 57 01 00 00       	push   $0x157
f011a420:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a425:	e8 db 5d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a42a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a42d:	e8 3b 2d ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a432:	29 c3                	sub    %eax,%ebx
f011a434:	89 d8                	mov    %ebx,%eax
f011a436:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a43b:	74 17                	je     f011a454 <test_kmalloc_nextfit+0x1317>
f011a43d:	83 ec 04             	sub    $0x4,%esp
f011a440:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011a445:	68 58 01 00 00       	push   $0x158
f011a44a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a44f:	e8 b1 5d fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a454:	83 ec 0c             	sub    $0xc,%esp
f011a457:	68 28 b9 13 f0       	push   $0xf013b928
f011a45c:	e8 ad 68 fe ff       	call   f0100d0e <cprintf>
f011a461:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a464:	e8 8b 99 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a469:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a46c:	e8 fc 2c ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a471:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a474:	83 ec 0c             	sub    $0xc,%esp
f011a477:	68 00 00 38 00       	push   $0x380000
f011a47c:	e8 e5 d5 fe ff       	call   f0107a66 <kmalloc>
f011a481:	83 c4 10             	add    $0x10,%esp
f011a484:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a48a:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a491:	10 00 00 
f011a494:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a49a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a49f:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a4a5:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a4ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4b0:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a4b6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a4bc:	29 d0                	sub    %edx,%eax
f011a4be:	89 c1                	mov    %eax,%ecx
f011a4c0:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a4c7:	10 00 00 
f011a4ca:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a4cf:	0f b6 d0             	movzbl %al,%edx
f011a4d2:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a4d8:	01 d0                	add    %edx,%eax
f011a4da:	48                   	dec    %eax
f011a4db:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a4e1:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a4e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4ec:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a4f2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a4f8:	29 d0                	sub    %edx,%eax
f011a4fa:	01 c1                	add    %eax,%ecx
f011a4fc:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a503:	10 00 00 
f011a506:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a50b:	0f b6 c0             	movzbl %al,%eax
f011a50e:	c1 e0 04             	shl    $0x4,%eax
f011a511:	89 c2                	mov    %eax,%edx
f011a513:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a519:	01 d0                	add    %edx,%eax
f011a51b:	48                   	dec    %eax
f011a51c:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a522:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a528:	ba 00 00 00 00       	mov    $0x0,%edx
f011a52d:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a533:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a539:	29 d0                	sub    %edx,%eax
f011a53b:	01 c8                	add    %ecx,%eax
f011a53d:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a543:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a549:	39 c2                	cmp    %eax,%edx
f011a54b:	74 17                	je     f011a564 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a54d:	83 ec 04             	sub    $0x4,%esp
f011a550:	68 08 b9 13 f0       	push   $0xf013b908
f011a555:	68 62 01 00 00       	push   $0x162
f011a55a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a55f:	e8 a1 5c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a564:	e8 8b 98 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a569:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a56c:	74 17                	je     f011a585 <test_kmalloc_nextfit+0x1448>
f011a56e:	83 ec 04             	sub    $0x4,%esp
f011a571:	68 14 b6 13 f0       	push   $0xf013b614
f011a576:	68 63 01 00 00       	push   $0x163
f011a57b:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a580:	e8 80 5c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a585:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a588:	e8 e0 2b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a58d:	29 c3                	sub    %eax,%ebx
f011a58f:	89 d8                	mov    %ebx,%eax
f011a591:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a596:	74 17                	je     f011a5af <test_kmalloc_nextfit+0x1472>
f011a598:	83 ec 04             	sub    $0x4,%esp
f011a59b:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011a5a0:	68 64 01 00 00       	push   $0x164
f011a5a5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a5aa:	e8 56 5c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a5af:	e8 40 98 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a5b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a5b7:	e8 b1 2b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a5bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a5bf:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a5c5:	83 ec 0c             	sub    $0xc,%esp
f011a5c8:	50                   	push   %eax
f011a5c9:	e8 58 d5 fe ff       	call   f0107b26 <kfree>
f011a5ce:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5d1:	e8 1e 98 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a5d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a5d9:	74 17                	je     f011a5f2 <test_kmalloc_nextfit+0x14b5>
f011a5db:	83 ec 04             	sub    $0x4,%esp
f011a5de:	68 14 b6 13 f0       	push   $0xf013b614
f011a5e3:	68 69 01 00 00       	push   $0x169
f011a5e8:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a5ed:	e8 13 5c fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a5f2:	e8 76 2b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a5f7:	89 c2                	mov    %eax,%edx
f011a5f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a5fc:	29 c2                	sub    %eax,%edx
f011a5fe:	89 d0                	mov    %edx,%eax
f011a600:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a605:	74 17                	je     f011a61e <test_kmalloc_nextfit+0x14e1>
f011a607:	83 ec 04             	sub    $0x4,%esp
f011a60a:	68 c8 b8 13 f0       	push   $0xf013b8c8
f011a60f:	68 6a 01 00 00       	push   $0x16a
f011a614:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a619:	e8 e7 5b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a61e:	e8 d1 97 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a623:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a626:	e8 42 2b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a62b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a62e:	83 ec 0c             	sub    $0xc,%esp
f011a631:	68 00 fc 3f 00       	push   $0x3ffc00
f011a636:	e8 2b d4 fe ff       	call   f0107a66 <kmalloc>
f011a63b:	83 c4 10             	add    $0x10,%esp
f011a63e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a644:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a64b:	10 00 00 
f011a64e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a654:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a659:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a65f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a665:	ba 00 00 00 00       	mov    $0x0,%edx
f011a66a:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a670:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a676:	29 d0                	sub    %edx,%eax
f011a678:	89 c1                	mov    %eax,%ecx
f011a67a:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a681:	10 00 00 
f011a684:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a689:	0f b6 d0             	movzbl %al,%edx
f011a68c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a692:	01 d0                	add    %edx,%eax
f011a694:	48                   	dec    %eax
f011a695:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a69b:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a6a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6a6:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a6ac:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a6b2:	29 d0                	sub    %edx,%eax
f011a6b4:	01 c1                	add    %eax,%ecx
f011a6b6:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a6bd:	10 00 00 
f011a6c0:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a6c5:	0f b6 c0             	movzbl %al,%eax
f011a6c8:	c1 e0 04             	shl    $0x4,%eax
f011a6cb:	89 c2                	mov    %eax,%edx
f011a6cd:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a6d3:	01 d0                	add    %edx,%eax
f011a6d5:	48                   	dec    %eax
f011a6d6:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a6dc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a6e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6e7:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a6ed:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a6f3:	29 d0                	sub    %edx,%eax
f011a6f5:	01 c8                	add    %ecx,%eax
f011a6f7:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a6fd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a703:	39 c2                	cmp    %eax,%edx
f011a705:	74 17                	je     f011a71e <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a707:	83 ec 04             	sub    $0x4,%esp
f011a70a:	68 08 b9 13 f0       	push   $0xf013b908
f011a70f:	68 70 01 00 00       	push   $0x170
f011a714:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a719:	e8 e7 5a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a71e:	e8 d1 96 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a723:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a726:	74 17                	je     f011a73f <test_kmalloc_nextfit+0x1602>
f011a728:	83 ec 04             	sub    $0x4,%esp
f011a72b:	68 14 b6 13 f0       	push   $0xf013b614
f011a730:	68 71 01 00 00       	push   $0x171
f011a735:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a73a:	e8 c6 5a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a73f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a742:	e8 26 2a ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a747:	29 c3                	sub    %eax,%ebx
f011a749:	89 d8                	mov    %ebx,%eax
f011a74b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a750:	74 17                	je     f011a769 <test_kmalloc_nextfit+0x162c>
f011a752:	83 ec 04             	sub    $0x4,%esp
f011a755:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011a75a:	68 72 01 00 00       	push   $0x172
f011a75f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a764:	e8 9c 5a fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a769:	83 ec 0c             	sub    $0xc,%esp
f011a76c:	68 64 b9 13 f0       	push   $0xf013b964
f011a771:	e8 98 65 fe ff       	call   f0100d0e <cprintf>
f011a776:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a779:	e8 76 96 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a77e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a781:	e8 e7 29 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a786:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a789:	83 ec 0c             	sub    $0xc,%esp
f011a78c:	68 00 00 60 00       	push   $0x600000
f011a791:	e8 d0 d2 fe ff       	call   f0107a66 <kmalloc>
f011a796:	83 c4 10             	add    $0x10,%esp
f011a799:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a79f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a7a5:	85 c0                	test   %eax,%eax
f011a7a7:	74 17                	je     f011a7c0 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a7a9:	83 ec 04             	sub    $0x4,%esp
f011a7ac:	68 08 b9 13 f0       	push   $0xf013b908
f011a7b1:	68 7c 01 00 00       	push   $0x17c
f011a7b6:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a7bb:	e8 45 5a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7c0:	e8 2f 96 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a7c5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a7c8:	74 17                	je     f011a7e1 <test_kmalloc_nextfit+0x16a4>
f011a7ca:	83 ec 04             	sub    $0x4,%esp
f011a7cd:	68 14 b6 13 f0       	push   $0xf013b614
f011a7d2:	68 7d 01 00 00       	push   $0x17d
f011a7d7:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a7dc:	e8 24 5a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a7e1:	e8 87 29 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a7e6:	89 c2                	mov    %eax,%edx
f011a7e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a7eb:	39 c2                	cmp    %eax,%edx
f011a7ed:	74 17                	je     f011a806 <test_kmalloc_nextfit+0x16c9>
f011a7ef:	83 ec 04             	sub    $0x4,%esp
f011a7f2:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011a7f7:	68 7e 01 00 00       	push   $0x17e
f011a7fc:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a801:	e8 ff 59 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a806:	83 ec 0c             	sub    $0xc,%esp
f011a809:	68 9c b9 13 f0       	push   $0xf013b99c
f011a80e:	e8 fb 64 fe ff       	call   f0100d0e <cprintf>
f011a813:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a816:	83 ec 0c             	sub    $0xc,%esp
f011a819:	68 d8 b9 13 f0       	push   $0xf013b9d8
f011a81e:	e8 eb 64 fe ff       	call   f0100d0e <cprintf>
f011a823:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a826:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a82b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a82e:	5b                   	pop    %ebx
f011a82f:	5f                   	pop    %edi
f011a830:	5d                   	pop    %ebp
f011a831:	c3                   	ret    

f011a832 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a832:	55                   	push   %ebp
f011a833:	89 e5                	mov    %esp,%ebp
f011a835:	57                   	push   %edi
f011a836:	53                   	push   %ebx
f011a837:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a83d:	83 ec 0c             	sub    $0xc,%esp
f011a840:	68 3c b5 13 f0       	push   $0xf013b53c
f011a845:	e8 c4 64 fe ff       	call   f0100d0e <cprintf>
f011a84a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a84d:	83 ec 0c             	sub    $0xc,%esp
f011a850:	68 6c b5 13 f0       	push   $0xf013b56c
f011a855:	e8 b4 64 fe ff       	call   f0100d0e <cprintf>
f011a85a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a85d:	83 ec 0c             	sub    $0xc,%esp
f011a860:	68 3c b5 13 f0       	push   $0xf013b53c
f011a865:	e8 a4 64 fe ff       	call   f0100d0e <cprintf>
f011a86a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a86d:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a873:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a878:	b8 00 00 00 00       	mov    $0x0,%eax
f011a87d:	89 d7                	mov    %edx,%edi
f011a87f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a881:	e8 e7 28 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a886:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a889:	e8 66 95 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a88e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a891:	83 ec 0c             	sub    $0xc,%esp
f011a894:	68 00 fc 2f 00       	push   $0x2ffc00
f011a899:	e8 c8 d1 fe ff       	call   f0107a66 <kmalloc>
f011a89e:	83 c4 10             	add    $0x10,%esp
f011a8a1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a8a7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a8ad:	89 c1                	mov    %eax,%ecx
f011a8af:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a8b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a8b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8be:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a8c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a8c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8c9:	f7 75 ec             	divl   -0x14(%ebp)
f011a8cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a8cf:	29 d0                	sub    %edx,%eax
f011a8d1:	89 c3                	mov    %eax,%ebx
f011a8d3:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a8da:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a8df:	0f b6 d0             	movzbl %al,%edx
f011a8e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a8e5:	01 d0                	add    %edx,%eax
f011a8e7:	48                   	dec    %eax
f011a8e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a8eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a8ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8f3:	f7 75 e4             	divl   -0x1c(%ebp)
f011a8f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a8f9:	29 d0                	sub    %edx,%eax
f011a8fb:	01 c3                	add    %eax,%ebx
f011a8fd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a904:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a909:	0f b6 c0             	movzbl %al,%eax
f011a90c:	c1 e0 04             	shl    $0x4,%eax
f011a90f:	89 c2                	mov    %eax,%edx
f011a911:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a914:	01 d0                	add    %edx,%eax
f011a916:	48                   	dec    %eax
f011a917:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a91a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a91d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a922:	f7 75 dc             	divl   -0x24(%ebp)
f011a925:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a928:	29 d0                	sub    %edx,%eax
f011a92a:	01 d8                	add    %ebx,%eax
f011a92c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a931:	39 c1                	cmp    %eax,%ecx
f011a933:	74 17                	je     f011a94c <test_kmalloc_bestfit1+0x11a>
f011a935:	83 ec 04             	sub    $0x4,%esp
f011a938:	68 14 ba 13 f0       	push   $0xf013ba14
f011a93d:	68 98 01 00 00       	push   $0x198
f011a942:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a947:	e8 b9 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a94c:	e8 a3 94 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a951:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a954:	74 17                	je     f011a96d <test_kmalloc_bestfit1+0x13b>
f011a956:	83 ec 04             	sub    $0x4,%esp
f011a959:	68 14 b6 13 f0       	push   $0xf013b614
f011a95e:	68 99 01 00 00       	push   $0x199
f011a963:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a968:	e8 98 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a96d:	e8 fb 27 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a972:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a975:	29 c2                	sub    %eax,%edx
f011a977:	89 d0                	mov    %edx,%eax
f011a979:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a97e:	74 17                	je     f011a997 <test_kmalloc_bestfit1+0x165>
f011a980:	83 ec 04             	sub    $0x4,%esp
f011a983:	68 44 ba 13 f0       	push   $0xf013ba44
f011a988:	68 9a 01 00 00       	push   $0x19a
f011a98d:	68 fa b5 13 f0       	push   $0xf013b5fa
f011a992:	e8 6e 58 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a997:	e8 d1 27 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011a99c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a99f:	e8 50 94 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011a9a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a9a7:	83 ec 0c             	sub    $0xc,%esp
f011a9aa:	68 00 fc 2f 00       	push   $0x2ffc00
f011a9af:	e8 b2 d0 fe ff       	call   f0107a66 <kmalloc>
f011a9b4:	83 c4 10             	add    $0x10,%esp
f011a9b7:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a9bd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a9c3:	89 c1                	mov    %eax,%ecx
f011a9c5:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a9cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a9cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a9d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a9da:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9df:	f7 75 d4             	divl   -0x2c(%ebp)
f011a9e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a9e5:	29 d0                	sub    %edx,%eax
f011a9e7:	89 c3                	mov    %eax,%ebx
f011a9e9:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a9f0:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011a9f5:	0f b6 d0             	movzbl %al,%edx
f011a9f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a9fb:	01 d0                	add    %edx,%eax
f011a9fd:	48                   	dec    %eax
f011a9fe:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011aa01:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aa04:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa09:	f7 75 cc             	divl   -0x34(%ebp)
f011aa0c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aa0f:	29 d0                	sub    %edx,%eax
f011aa11:	01 c3                	add    %eax,%ebx
f011aa13:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011aa1a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011aa1f:	0f b6 c0             	movzbl %al,%eax
f011aa22:	c1 e0 04             	shl    $0x4,%eax
f011aa25:	89 c2                	mov    %eax,%edx
f011aa27:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aa2a:	01 d0                	add    %edx,%eax
f011aa2c:	48                   	dec    %eax
f011aa2d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011aa30:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa33:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa38:	f7 75 c4             	divl   -0x3c(%ebp)
f011aa3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa3e:	29 d0                	sub    %edx,%eax
f011aa40:	01 d8                	add    %ebx,%eax
f011aa42:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011aa47:	39 c1                	cmp    %eax,%ecx
f011aa49:	74 17                	je     f011aa62 <test_kmalloc_bestfit1+0x230>
f011aa4b:	83 ec 04             	sub    $0x4,%esp
f011aa4e:	68 14 ba 13 f0       	push   $0xf013ba14
f011aa53:	68 a0 01 00 00       	push   $0x1a0
f011aa58:	68 fa b5 13 f0       	push   $0xf013b5fa
f011aa5d:	e8 a3 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa62:	e8 8d 93 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011aa67:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa6a:	74 17                	je     f011aa83 <test_kmalloc_bestfit1+0x251>
f011aa6c:	83 ec 04             	sub    $0x4,%esp
f011aa6f:	68 14 b6 13 f0       	push   $0xf013b614
f011aa74:	68 a1 01 00 00       	push   $0x1a1
f011aa79:	68 fa b5 13 f0       	push   $0xf013b5fa
f011aa7e:	e8 82 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aa83:	e8 e5 26 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011aa88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa8b:	29 c2                	sub    %eax,%edx
f011aa8d:	89 d0                	mov    %edx,%eax
f011aa8f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aa94:	74 17                	je     f011aaad <test_kmalloc_bestfit1+0x27b>
f011aa96:	83 ec 04             	sub    $0x4,%esp
f011aa99:	68 44 ba 13 f0       	push   $0xf013ba44
f011aa9e:	68 a2 01 00 00       	push   $0x1a2
f011aaa3:	68 fa b5 13 f0       	push   $0xf013b5fa
f011aaa8:	e8 58 57 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aaad:	e8 bb 26 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011aab2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aab5:	e8 3a 93 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011aaba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011aabd:	83 ec 0c             	sub    $0xc,%esp
f011aac0:	68 00 fc 1f 00       	push   $0x1ffc00
f011aac5:	e8 9c cf fe ff       	call   f0107a66 <kmalloc>
f011aaca:	83 c4 10             	add    $0x10,%esp
f011aacd:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011aad3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011aad9:	89 c1                	mov    %eax,%ecx
f011aadb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aae2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aae5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aaea:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aaed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aaf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaf5:	f7 75 bc             	divl   -0x44(%ebp)
f011aaf8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aafb:	29 d0                	sub    %edx,%eax
f011aafd:	89 c3                	mov    %eax,%ebx
f011aaff:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ab06:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ab0b:	0f b6 d0             	movzbl %al,%edx
f011ab0e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ab11:	01 d0                	add    %edx,%eax
f011ab13:	48                   	dec    %eax
f011ab14:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ab17:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ab1a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab1f:	f7 75 b4             	divl   -0x4c(%ebp)
f011ab22:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ab25:	29 d0                	sub    %edx,%eax
f011ab27:	01 c3                	add    %eax,%ebx
f011ab29:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ab30:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ab35:	0f b6 c0             	movzbl %al,%eax
f011ab38:	c1 e0 04             	shl    $0x4,%eax
f011ab3b:	89 c2                	mov    %eax,%edx
f011ab3d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ab40:	01 d0                	add    %edx,%eax
f011ab42:	48                   	dec    %eax
f011ab43:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ab46:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab49:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab4e:	f7 75 ac             	divl   -0x54(%ebp)
f011ab51:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab54:	29 d0                	sub    %edx,%eax
f011ab56:	01 d8                	add    %ebx,%eax
f011ab58:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011ab5d:	39 c1                	cmp    %eax,%ecx
f011ab5f:	74 17                	je     f011ab78 <test_kmalloc_bestfit1+0x346>
f011ab61:	83 ec 04             	sub    $0x4,%esp
f011ab64:	68 14 ba 13 f0       	push   $0xf013ba14
f011ab69:	68 a8 01 00 00       	push   $0x1a8
f011ab6e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ab73:	e8 8d 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab78:	e8 77 92 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ab7d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab80:	74 17                	je     f011ab99 <test_kmalloc_bestfit1+0x367>
f011ab82:	83 ec 04             	sub    $0x4,%esp
f011ab85:	68 14 b6 13 f0       	push   $0xf013b614
f011ab8a:	68 a9 01 00 00       	push   $0x1a9
f011ab8f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ab94:	e8 6c 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ab99:	e8 cf 25 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011ab9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aba1:	29 c2                	sub    %eax,%edx
f011aba3:	89 d0                	mov    %edx,%eax
f011aba5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011abaa:	74 17                	je     f011abc3 <test_kmalloc_bestfit1+0x391>
f011abac:	83 ec 04             	sub    $0x4,%esp
f011abaf:	68 44 ba 13 f0       	push   $0xf013ba44
f011abb4:	68 aa 01 00 00       	push   $0x1aa
f011abb9:	68 fa b5 13 f0       	push   $0xf013b5fa
f011abbe:	e8 42 56 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011abc3:	e8 a5 25 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011abc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abcb:	e8 24 92 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011abd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011abd3:	83 ec 0c             	sub    $0xc,%esp
f011abd6:	68 00 fc 1f 00       	push   $0x1ffc00
f011abdb:	e8 86 ce fe ff       	call   f0107a66 <kmalloc>
f011abe0:	83 c4 10             	add    $0x10,%esp
f011abe3:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011abe9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011abef:	89 c1                	mov    %eax,%ecx
f011abf1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011abf8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011abfb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac00:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ac03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac06:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac0b:	f7 75 a4             	divl   -0x5c(%ebp)
f011ac0e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac11:	29 d0                	sub    %edx,%eax
f011ac13:	89 c3                	mov    %eax,%ebx
f011ac15:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ac1c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ac21:	0f b6 d0             	movzbl %al,%edx
f011ac24:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac27:	01 d0                	add    %edx,%eax
f011ac29:	48                   	dec    %eax
f011ac2a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ac2d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac30:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac35:	f7 75 9c             	divl   -0x64(%ebp)
f011ac38:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac3b:	29 d0                	sub    %edx,%eax
f011ac3d:	01 c3                	add    %eax,%ebx
f011ac3f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ac46:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ac4b:	0f b6 c0             	movzbl %al,%eax
f011ac4e:	c1 e0 04             	shl    $0x4,%eax
f011ac51:	89 c2                	mov    %eax,%edx
f011ac53:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ac56:	01 d0                	add    %edx,%eax
f011ac58:	48                   	dec    %eax
f011ac59:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ac5c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac64:	f7 75 94             	divl   -0x6c(%ebp)
f011ac67:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac6a:	29 d0                	sub    %edx,%eax
f011ac6c:	01 d8                	add    %ebx,%eax
f011ac6e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ac73:	39 c1                	cmp    %eax,%ecx
f011ac75:	74 17                	je     f011ac8e <test_kmalloc_bestfit1+0x45c>
f011ac77:	83 ec 04             	sub    $0x4,%esp
f011ac7a:	68 14 ba 13 f0       	push   $0xf013ba14
f011ac7f:	68 b0 01 00 00       	push   $0x1b0
f011ac84:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ac89:	e8 77 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac8e:	e8 61 91 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ac93:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac96:	74 17                	je     f011acaf <test_kmalloc_bestfit1+0x47d>
f011ac98:	83 ec 04             	sub    $0x4,%esp
f011ac9b:	68 14 b6 13 f0       	push   $0xf013b614
f011aca0:	68 b1 01 00 00       	push   $0x1b1
f011aca5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011acaa:	e8 56 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011acaf:	e8 b9 24 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011acb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011acb7:	29 c2                	sub    %eax,%edx
f011acb9:	89 d0                	mov    %edx,%eax
f011acbb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011acc0:	74 17                	je     f011acd9 <test_kmalloc_bestfit1+0x4a7>
f011acc2:	83 ec 04             	sub    $0x4,%esp
f011acc5:	68 44 ba 13 f0       	push   $0xf013ba44
f011acca:	68 b2 01 00 00       	push   $0x1b2
f011accf:	68 fa b5 13 f0       	push   $0xf013b5fa
f011acd4:	e8 2c 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011acd9:	e8 8f 24 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011acde:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ace1:	e8 0e 91 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ace6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011ace9:	83 ec 0c             	sub    $0xc,%esp
f011acec:	68 00 fc 0f 00       	push   $0xffc00
f011acf1:	e8 70 cd fe ff       	call   f0107a66 <kmalloc>
f011acf6:	83 c4 10             	add    $0x10,%esp
f011acf9:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011acff:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ad05:	89 c1                	mov    %eax,%ecx
f011ad07:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ad0e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad16:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ad19:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad21:	f7 75 8c             	divl   -0x74(%ebp)
f011ad24:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad27:	29 d0                	sub    %edx,%eax
f011ad29:	89 c3                	mov    %eax,%ebx
f011ad2b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ad32:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ad37:	0f b6 d0             	movzbl %al,%edx
f011ad3a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad3d:	01 d0                	add    %edx,%eax
f011ad3f:	48                   	dec    %eax
f011ad40:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ad43:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad46:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad4b:	f7 75 84             	divl   -0x7c(%ebp)
f011ad4e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad51:	29 d0                	sub    %edx,%eax
f011ad53:	01 c3                	add    %eax,%ebx
f011ad55:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ad5c:	10 00 00 
f011ad5f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ad64:	0f b6 c0             	movzbl %al,%eax
f011ad67:	c1 e0 04             	shl    $0x4,%eax
f011ad6a:	89 c2                	mov    %eax,%edx
f011ad6c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ad72:	01 d0                	add    %edx,%eax
f011ad74:	48                   	dec    %eax
f011ad75:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ad7b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ad81:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad86:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ad8c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ad92:	29 d0                	sub    %edx,%eax
f011ad94:	01 d8                	add    %ebx,%eax
f011ad96:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ad9b:	39 c1                	cmp    %eax,%ecx
f011ad9d:	74 17                	je     f011adb6 <test_kmalloc_bestfit1+0x584>
f011ad9f:	83 ec 04             	sub    $0x4,%esp
f011ada2:	68 14 ba 13 f0       	push   $0xf013ba14
f011ada7:	68 b8 01 00 00       	push   $0x1b8
f011adac:	68 fa b5 13 f0       	push   $0xf013b5fa
f011adb1:	e8 4f 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adb6:	e8 39 90 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011adbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011adbe:	74 17                	je     f011add7 <test_kmalloc_bestfit1+0x5a5>
f011adc0:	83 ec 04             	sub    $0x4,%esp
f011adc3:	68 14 b6 13 f0       	push   $0xf013b614
f011adc8:	68 b9 01 00 00       	push   $0x1b9
f011adcd:	68 fa b5 13 f0       	push   $0xf013b5fa
f011add2:	e8 2e 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011add7:	e8 91 23 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011addc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011addf:	29 c2                	sub    %eax,%edx
f011ade1:	89 d0                	mov    %edx,%eax
f011ade3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ade8:	74 17                	je     f011ae01 <test_kmalloc_bestfit1+0x5cf>
f011adea:	83 ec 04             	sub    $0x4,%esp
f011aded:	68 44 ba 13 f0       	push   $0xf013ba44
f011adf2:	68 ba 01 00 00       	push   $0x1ba
f011adf7:	68 fa b5 13 f0       	push   $0xf013b5fa
f011adfc:	e8 04 54 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae01:	e8 67 23 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011ae06:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae09:	e8 e6 8f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ae0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011ae11:	83 ec 0c             	sub    $0xc,%esp
f011ae14:	68 00 fc 0f 00       	push   $0xffc00
f011ae19:	e8 48 cc fe ff       	call   f0107a66 <kmalloc>
f011ae1e:	83 c4 10             	add    $0x10,%esp
f011ae21:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ae27:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ae2d:	89 c1                	mov    %eax,%ecx
f011ae2f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae36:	10 00 00 
f011ae39:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae3f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae44:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ae4a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae50:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae55:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ae5b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae61:	29 d0                	sub    %edx,%eax
f011ae63:	89 c3                	mov    %eax,%ebx
f011ae65:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ae6c:	10 00 00 
f011ae6f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ae74:	0f b6 d0             	movzbl %al,%edx
f011ae77:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ae7d:	01 d0                	add    %edx,%eax
f011ae7f:	48                   	dec    %eax
f011ae80:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ae86:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ae8c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae91:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ae97:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ae9d:	29 d0                	sub    %edx,%eax
f011ae9f:	01 c3                	add    %eax,%ebx
f011aea1:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011aea8:	10 00 00 
f011aeab:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011aeb0:	0f b6 c0             	movzbl %al,%eax
f011aeb3:	c1 e0 04             	shl    $0x4,%eax
f011aeb6:	89 c2                	mov    %eax,%edx
f011aeb8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011aebe:	01 d0                	add    %edx,%eax
f011aec0:	48                   	dec    %eax
f011aec1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011aec7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aecd:	ba 00 00 00 00       	mov    $0x0,%edx
f011aed2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011aed8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aede:	29 d0                	sub    %edx,%eax
f011aee0:	01 d8                	add    %ebx,%eax
f011aee2:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aee7:	39 c1                	cmp    %eax,%ecx
f011aee9:	74 17                	je     f011af02 <test_kmalloc_bestfit1+0x6d0>
f011aeeb:	83 ec 04             	sub    $0x4,%esp
f011aeee:	68 14 ba 13 f0       	push   $0xf013ba14
f011aef3:	68 c0 01 00 00       	push   $0x1c0
f011aef8:	68 fa b5 13 f0       	push   $0xf013b5fa
f011aefd:	e8 03 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af02:	e8 ed 8e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011af07:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af0a:	74 17                	je     f011af23 <test_kmalloc_bestfit1+0x6f1>
f011af0c:	83 ec 04             	sub    $0x4,%esp
f011af0f:	68 14 b6 13 f0       	push   $0xf013b614
f011af14:	68 c1 01 00 00       	push   $0x1c1
f011af19:	68 fa b5 13 f0       	push   $0xf013b5fa
f011af1e:	e8 e2 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011af23:	e8 45 22 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011af28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af2b:	29 c2                	sub    %eax,%edx
f011af2d:	89 d0                	mov    %edx,%eax
f011af2f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011af34:	74 17                	je     f011af4d <test_kmalloc_bestfit1+0x71b>
f011af36:	83 ec 04             	sub    $0x4,%esp
f011af39:	68 44 ba 13 f0       	push   $0xf013ba44
f011af3e:	68 c2 01 00 00       	push   $0x1c2
f011af43:	68 fa b5 13 f0       	push   $0xf013b5fa
f011af48:	e8 b8 52 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011af4d:	e8 1b 22 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011af52:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af55:	e8 9a 8e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011af5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011af5d:	83 ec 0c             	sub    $0xc,%esp
f011af60:	68 00 fc 0f 00       	push   $0xffc00
f011af65:	e8 fc ca fe ff       	call   f0107a66 <kmalloc>
f011af6a:	83 c4 10             	add    $0x10,%esp
f011af6d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011af73:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011af79:	89 c1                	mov    %eax,%ecx
f011af7b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011af82:	10 00 00 
f011af85:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011af8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af90:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011af96:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011af9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011afa1:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011afa7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011afad:	29 d0                	sub    %edx,%eax
f011afaf:	89 c3                	mov    %eax,%ebx
f011afb1:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011afb8:	10 00 00 
f011afbb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011afc0:	0f b6 d0             	movzbl %al,%edx
f011afc3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011afc9:	01 d0                	add    %edx,%eax
f011afcb:	48                   	dec    %eax
f011afcc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011afd2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011afd8:	ba 00 00 00 00       	mov    $0x0,%edx
f011afdd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011afe3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011afe9:	29 d0                	sub    %edx,%eax
f011afeb:	01 c3                	add    %eax,%ebx
f011afed:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011aff4:	10 00 00 
f011aff7:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011affc:	0f b6 c0             	movzbl %al,%eax
f011afff:	c1 e0 04             	shl    $0x4,%eax
f011b002:	89 c2                	mov    %eax,%edx
f011b004:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b00a:	01 d0                	add    %edx,%eax
f011b00c:	48                   	dec    %eax
f011b00d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b013:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b019:	ba 00 00 00 00       	mov    $0x0,%edx
f011b01e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b024:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b02a:	29 d0                	sub    %edx,%eax
f011b02c:	01 d8                	add    %ebx,%eax
f011b02e:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011b033:	39 c1                	cmp    %eax,%ecx
f011b035:	74 17                	je     f011b04e <test_kmalloc_bestfit1+0x81c>
f011b037:	83 ec 04             	sub    $0x4,%esp
f011b03a:	68 14 ba 13 f0       	push   $0xf013ba14
f011b03f:	68 c8 01 00 00       	push   $0x1c8
f011b044:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b049:	e8 b7 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b04e:	e8 a1 8d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b053:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b056:	74 17                	je     f011b06f <test_kmalloc_bestfit1+0x83d>
f011b058:	83 ec 04             	sub    $0x4,%esp
f011b05b:	68 14 b6 13 f0       	push   $0xf013b614
f011b060:	68 c9 01 00 00       	push   $0x1c9
f011b065:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b06a:	e8 96 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b06f:	e8 f9 20 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b074:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b077:	29 c2                	sub    %eax,%edx
f011b079:	89 d0                	mov    %edx,%eax
f011b07b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b080:	74 17                	je     f011b099 <test_kmalloc_bestfit1+0x867>
f011b082:	83 ec 04             	sub    $0x4,%esp
f011b085:	68 44 ba 13 f0       	push   $0xf013ba44
f011b08a:	68 ca 01 00 00       	push   $0x1ca
f011b08f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b094:	e8 6c 51 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b099:	e8 cf 20 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b09e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0a1:	e8 4e 8d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b0a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011b0a9:	83 ec 0c             	sub    $0xc,%esp
f011b0ac:	68 00 fc 0f 00       	push   $0xffc00
f011b0b1:	e8 b0 c9 fe ff       	call   f0107a66 <kmalloc>
f011b0b6:	83 c4 10             	add    $0x10,%esp
f011b0b9:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011b0bf:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011b0c5:	89 c1                	mov    %eax,%ecx
f011b0c7:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b0ce:	10 00 00 
f011b0d1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b0d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b0dc:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b0e2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b0e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0ed:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b0f3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b0f9:	29 d0                	sub    %edx,%eax
f011b0fb:	89 c3                	mov    %eax,%ebx
f011b0fd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b104:	10 00 00 
f011b107:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b10c:	0f b6 d0             	movzbl %al,%edx
f011b10f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b115:	01 d0                	add    %edx,%eax
f011b117:	48                   	dec    %eax
f011b118:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b11e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b124:	ba 00 00 00 00       	mov    $0x0,%edx
f011b129:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b12f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b135:	29 d0                	sub    %edx,%eax
f011b137:	01 c3                	add    %eax,%ebx
f011b139:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b140:	10 00 00 
f011b143:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b148:	0f b6 c0             	movzbl %al,%eax
f011b14b:	c1 e0 04             	shl    $0x4,%eax
f011b14e:	89 c2                	mov    %eax,%edx
f011b150:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b156:	01 d0                	add    %edx,%eax
f011b158:	48                   	dec    %eax
f011b159:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b15f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b165:	ba 00 00 00 00       	mov    $0x0,%edx
f011b16a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b170:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b176:	29 d0                	sub    %edx,%eax
f011b178:	01 d8                	add    %ebx,%eax
f011b17a:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b17f:	39 c1                	cmp    %eax,%ecx
f011b181:	74 17                	je     f011b19a <test_kmalloc_bestfit1+0x968>
f011b183:	83 ec 04             	sub    $0x4,%esp
f011b186:	68 14 ba 13 f0       	push   $0xf013ba14
f011b18b:	68 d0 01 00 00       	push   $0x1d0
f011b190:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b195:	e8 6b 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b19a:	e8 55 8c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b19f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1a2:	74 17                	je     f011b1bb <test_kmalloc_bestfit1+0x989>
f011b1a4:	83 ec 04             	sub    $0x4,%esp
f011b1a7:	68 14 b6 13 f0       	push   $0xf013b614
f011b1ac:	68 d1 01 00 00       	push   $0x1d1
f011b1b1:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b1b6:	e8 4a 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b1bb:	e8 ad 1f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b1c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b1c3:	29 c2                	sub    %eax,%edx
f011b1c5:	89 d0                	mov    %edx,%eax
f011b1c7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b1cc:	74 17                	je     f011b1e5 <test_kmalloc_bestfit1+0x9b3>
f011b1ce:	83 ec 04             	sub    $0x4,%esp
f011b1d1:	68 44 ba 13 f0       	push   $0xf013ba44
f011b1d6:	68 d2 01 00 00       	push   $0x1d2
f011b1db:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b1e0:	e8 20 50 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1e5:	e8 83 1f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b1ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1ed:	e8 02 8c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b1f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b1f5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b1fb:	83 ec 0c             	sub    $0xc,%esp
f011b1fe:	50                   	push   %eax
f011b1ff:	e8 22 c9 fe ff       	call   f0107b26 <kfree>
f011b204:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b207:	e8 e8 8b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b20c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b20f:	74 17                	je     f011b228 <test_kmalloc_bestfit1+0x9f6>
f011b211:	83 ec 04             	sub    $0x4,%esp
f011b214:	68 14 b6 13 f0       	push   $0xf013b614
f011b219:	68 db 01 00 00       	push   $0x1db
f011b21e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b223:	e8 dd 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b228:	e8 40 1f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b22d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b230:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b235:	74 17                	je     f011b24e <test_kmalloc_bestfit1+0xa1c>
f011b237:	83 ec 04             	sub    $0x4,%esp
f011b23a:	68 57 ba 13 f0       	push   $0xf013ba57
f011b23f:	68 dc 01 00 00       	push   $0x1dc
f011b244:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b249:	e8 b7 4f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b24e:	e8 1a 1f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b253:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b256:	e8 99 8b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b25b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b25e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b264:	83 ec 0c             	sub    $0xc,%esp
f011b267:	50                   	push   %eax
f011b268:	e8 b9 c8 fe ff       	call   f0107b26 <kfree>
f011b26d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b270:	e8 7f 8b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b275:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b278:	74 17                	je     f011b291 <test_kmalloc_bestfit1+0xa5f>
f011b27a:	83 ec 04             	sub    $0x4,%esp
f011b27d:	68 14 b6 13 f0       	push   $0xf013b614
f011b282:	68 e2 01 00 00       	push   $0x1e2
f011b287:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b28c:	e8 74 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b291:	e8 d7 1e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b296:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b299:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b29e:	74 17                	je     f011b2b7 <test_kmalloc_bestfit1+0xa85>
f011b2a0:	83 ec 04             	sub    $0x4,%esp
f011b2a3:	68 57 ba 13 f0       	push   $0xf013ba57
f011b2a8:	68 e3 01 00 00       	push   $0x1e3
f011b2ad:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b2b2:	e8 4e 4f fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b2b7:	e8 b1 1e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b2bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2bf:	e8 30 8b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b2c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b2c7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b2cd:	83 ec 0c             	sub    $0xc,%esp
f011b2d0:	50                   	push   %eax
f011b2d1:	e8 50 c8 fe ff       	call   f0107b26 <kfree>
f011b2d6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2d9:	e8 16 8b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b2de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2e1:	74 17                	je     f011b2fa <test_kmalloc_bestfit1+0xac8>
f011b2e3:	83 ec 04             	sub    $0x4,%esp
f011b2e6:	68 14 b6 13 f0       	push   $0xf013b614
f011b2eb:	68 e9 01 00 00       	push   $0x1e9
f011b2f0:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b2f5:	e8 0b 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b2fa:	e8 6e 1e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b2ff:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b302:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b307:	74 17                	je     f011b320 <test_kmalloc_bestfit1+0xaee>
f011b309:	83 ec 04             	sub    $0x4,%esp
f011b30c:	68 57 ba 13 f0       	push   $0xf013ba57
f011b311:	68 ea 01 00 00       	push   $0x1ea
f011b316:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b31b:	e8 e5 4e fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b320:	e8 48 1e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b325:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b328:	e8 c7 8a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b32d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b330:	83 ec 0c             	sub    $0xc,%esp
f011b333:	68 00 00 08 00       	push   $0x80000
f011b338:	e8 29 c7 fe ff       	call   f0107a66 <kmalloc>
f011b33d:	83 c4 10             	add    $0x10,%esp
f011b340:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b346:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b34c:	89 c1                	mov    %eax,%ecx
f011b34e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b355:	10 00 00 
f011b358:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b35e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b363:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b369:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b36f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b374:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b37a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b380:	29 d0                	sub    %edx,%eax
f011b382:	89 c3                	mov    %eax,%ebx
f011b384:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b38b:	10 00 00 
f011b38e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b393:	0f b6 d0             	movzbl %al,%edx
f011b396:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b39c:	01 d0                	add    %edx,%eax
f011b39e:	48                   	dec    %eax
f011b39f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b3a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b3ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3b0:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b3b6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b3bc:	29 d0                	sub    %edx,%eax
f011b3be:	01 c3                	add    %eax,%ebx
f011b3c0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b3c7:	10 00 00 
f011b3ca:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b3cf:	0f b6 c0             	movzbl %al,%eax
f011b3d2:	c1 e0 04             	shl    $0x4,%eax
f011b3d5:	89 c2                	mov    %eax,%edx
f011b3d7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b3dd:	01 d0                	add    %edx,%eax
f011b3df:	48                   	dec    %eax
f011b3e0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b3e6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b3ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3f1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b3f7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b3fd:	29 d0                	sub    %edx,%eax
f011b3ff:	01 d8                	add    %ebx,%eax
f011b401:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b406:	39 c1                	cmp    %eax,%ecx
f011b408:	74 17                	je     f011b421 <test_kmalloc_bestfit1+0xbef>
f011b40a:	83 ec 04             	sub    $0x4,%esp
f011b40d:	68 14 ba 13 f0       	push   $0xf013ba14
f011b412:	68 f3 01 00 00       	push   $0x1f3
f011b417:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b41c:	e8 e4 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b421:	e8 ce 89 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b426:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b429:	74 17                	je     f011b442 <test_kmalloc_bestfit1+0xc10>
f011b42b:	83 ec 04             	sub    $0x4,%esp
f011b42e:	68 14 b6 13 f0       	push   $0xf013b614
f011b433:	68 f4 01 00 00       	push   $0x1f4
f011b438:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b43d:	e8 c3 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b442:	e8 26 1d ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b447:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b44a:	29 c2                	sub    %eax,%edx
f011b44c:	89 d0                	mov    %edx,%eax
f011b44e:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b453:	74 17                	je     f011b46c <test_kmalloc_bestfit1+0xc3a>
f011b455:	83 ec 04             	sub    $0x4,%esp
f011b458:	68 44 ba 13 f0       	push   $0xf013ba44
f011b45d:	68 f5 01 00 00       	push   $0x1f5
f011b462:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b467:	e8 99 4d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b46c:	e8 fc 1c ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b471:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b474:	e8 7b 89 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b479:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b47c:	83 ec 0c             	sub    $0xc,%esp
f011b47f:	68 00 fc 0f 00       	push   $0xffc00
f011b484:	e8 dd c5 fe ff       	call   f0107a66 <kmalloc>
f011b489:	83 c4 10             	add    $0x10,%esp
f011b48c:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b492:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b498:	89 c1                	mov    %eax,%ecx
f011b49a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b4a1:	10 00 00 
f011b4a4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b4aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b4af:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b4b5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b4bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4c0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b4c6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b4cc:	29 d0                	sub    %edx,%eax
f011b4ce:	89 c3                	mov    %eax,%ebx
f011b4d0:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b4d7:	10 00 00 
f011b4da:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b4df:	0f b6 d0             	movzbl %al,%edx
f011b4e2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b4e8:	01 d0                	add    %edx,%eax
f011b4ea:	48                   	dec    %eax
f011b4eb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b4f1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b4f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4fc:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b502:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b508:	29 d0                	sub    %edx,%eax
f011b50a:	01 c3                	add    %eax,%ebx
f011b50c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b513:	10 00 00 
f011b516:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b51b:	0f b6 c0             	movzbl %al,%eax
f011b51e:	c1 e0 04             	shl    $0x4,%eax
f011b521:	89 c2                	mov    %eax,%edx
f011b523:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b529:	01 d0                	add    %edx,%eax
f011b52b:	48                   	dec    %eax
f011b52c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b532:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b538:	ba 00 00 00 00       	mov    $0x0,%edx
f011b53d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b543:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b549:	29 d0                	sub    %edx,%eax
f011b54b:	01 d8                	add    %ebx,%eax
f011b54d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b552:	39 c1                	cmp    %eax,%ecx
f011b554:	74 17                	je     f011b56d <test_kmalloc_bestfit1+0xd3b>
f011b556:	83 ec 04             	sub    $0x4,%esp
f011b559:	68 14 ba 13 f0       	push   $0xf013ba14
f011b55e:	68 fb 01 00 00       	push   $0x1fb
f011b563:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b568:	e8 98 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b56d:	e8 82 88 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b572:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b575:	74 17                	je     f011b58e <test_kmalloc_bestfit1+0xd5c>
f011b577:	83 ec 04             	sub    $0x4,%esp
f011b57a:	68 14 b6 13 f0       	push   $0xf013b614
f011b57f:	68 fc 01 00 00       	push   $0x1fc
f011b584:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b589:	e8 77 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b58e:	e8 da 1b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b593:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b596:	29 c2                	sub    %eax,%edx
f011b598:	89 d0                	mov    %edx,%eax
f011b59a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b59f:	74 17                	je     f011b5b8 <test_kmalloc_bestfit1+0xd86>
f011b5a1:	83 ec 04             	sub    $0x4,%esp
f011b5a4:	68 44 ba 13 f0       	push   $0xf013ba44
f011b5a9:	68 fd 01 00 00       	push   $0x1fd
f011b5ae:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b5b3:	e8 4d 4c fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b5b8:	e8 b0 1b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b5bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5c0:	e8 2f 88 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b5c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b5c8:	83 ec 0c             	sub    $0xc,%esp
f011b5cb:	68 00 fc 03 00       	push   $0x3fc00
f011b5d0:	e8 91 c4 fe ff       	call   f0107a66 <kmalloc>
f011b5d5:	83 c4 10             	add    $0x10,%esp
f011b5d8:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b5de:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b5e4:	89 c1                	mov    %eax,%ecx
f011b5e6:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b5ed:	10 00 00 
f011b5f0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b5f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b5fb:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b601:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b607:	ba 00 00 00 00       	mov    $0x0,%edx
f011b60c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b612:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b618:	29 d0                	sub    %edx,%eax
f011b61a:	89 c3                	mov    %eax,%ebx
f011b61c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b623:	10 00 00 
f011b626:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b62b:	0f b6 d0             	movzbl %al,%edx
f011b62e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b634:	01 d0                	add    %edx,%eax
f011b636:	48                   	dec    %eax
f011b637:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b63d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b643:	ba 00 00 00 00       	mov    $0x0,%edx
f011b648:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b64e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b654:	29 d0                	sub    %edx,%eax
f011b656:	01 c3                	add    %eax,%ebx
f011b658:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b65f:	10 00 00 
f011b662:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b667:	0f b6 c0             	movzbl %al,%eax
f011b66a:	c1 e0 04             	shl    $0x4,%eax
f011b66d:	89 c2                	mov    %eax,%edx
f011b66f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b675:	01 d0                	add    %edx,%eax
f011b677:	48                   	dec    %eax
f011b678:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b67e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b684:	ba 00 00 00 00       	mov    $0x0,%edx
f011b689:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b68f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b695:	29 d0                	sub    %edx,%eax
f011b697:	01 d8                	add    %ebx,%eax
f011b699:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b69e:	39 c1                	cmp    %eax,%ecx
f011b6a0:	74 17                	je     f011b6b9 <test_kmalloc_bestfit1+0xe87>
f011b6a2:	83 ec 04             	sub    $0x4,%esp
f011b6a5:	68 14 ba 13 f0       	push   $0xf013ba14
f011b6aa:	68 03 02 00 00       	push   $0x203
f011b6af:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b6b4:	e8 4c 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6b9:	e8 36 87 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b6be:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b6c1:	74 17                	je     f011b6da <test_kmalloc_bestfit1+0xea8>
f011b6c3:	83 ec 04             	sub    $0x4,%esp
f011b6c6:	68 14 b6 13 f0       	push   $0xf013b614
f011b6cb:	68 04 02 00 00       	push   $0x204
f011b6d0:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b6d5:	e8 2b 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b6da:	e8 8e 1a ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b6df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b6e2:	29 c2                	sub    %eax,%edx
f011b6e4:	89 d0                	mov    %edx,%eax
f011b6e6:	83 f8 40             	cmp    $0x40,%eax
f011b6e9:	74 17                	je     f011b702 <test_kmalloc_bestfit1+0xed0>
f011b6eb:	83 ec 04             	sub    $0x4,%esp
f011b6ee:	68 44 ba 13 f0       	push   $0xf013ba44
f011b6f3:	68 05 02 00 00       	push   $0x205
f011b6f8:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b6fd:	e8 03 4b fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b702:	e8 66 1a ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b707:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b70a:	e8 e5 86 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b70f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b712:	83 ec 0c             	sub    $0xc,%esp
f011b715:	68 00 fc 3f 00       	push   $0x3ffc00
f011b71a:	e8 47 c3 fe ff       	call   f0107a66 <kmalloc>
f011b71f:	83 c4 10             	add    $0x10,%esp
f011b722:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b728:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b72e:	89 c1                	mov    %eax,%ecx
f011b730:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b737:	10 00 00 
f011b73a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b740:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b745:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b74b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b751:	ba 00 00 00 00       	mov    $0x0,%edx
f011b756:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b75c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b762:	29 d0                	sub    %edx,%eax
f011b764:	89 c3                	mov    %eax,%ebx
f011b766:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b76d:	10 00 00 
f011b770:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b775:	0f b6 d0             	movzbl %al,%edx
f011b778:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b77e:	01 d0                	add    %edx,%eax
f011b780:	48                   	dec    %eax
f011b781:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b787:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b78d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b792:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b798:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b79e:	29 d0                	sub    %edx,%eax
f011b7a0:	01 c3                	add    %eax,%ebx
f011b7a2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b7a9:	10 00 00 
f011b7ac:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b7b1:	0f b6 c0             	movzbl %al,%eax
f011b7b4:	c1 e0 04             	shl    $0x4,%eax
f011b7b7:	89 c2                	mov    %eax,%edx
f011b7b9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b7bf:	01 d0                	add    %edx,%eax
f011b7c1:	48                   	dec    %eax
f011b7c2:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b7c8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b7ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7d3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b7d9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b7df:	29 d0                	sub    %edx,%eax
f011b7e1:	01 d8                	add    %ebx,%eax
f011b7e3:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b7e8:	39 c1                	cmp    %eax,%ecx
f011b7ea:	74 17                	je     f011b803 <test_kmalloc_bestfit1+0xfd1>
f011b7ec:	83 ec 04             	sub    $0x4,%esp
f011b7ef:	68 14 ba 13 f0       	push   $0xf013ba14
f011b7f4:	68 0b 02 00 00       	push   $0x20b
f011b7f9:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b7fe:	e8 02 4a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b803:	e8 ec 85 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b808:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b80b:	74 17                	je     f011b824 <test_kmalloc_bestfit1+0xff2>
f011b80d:	83 ec 04             	sub    $0x4,%esp
f011b810:	68 14 b6 13 f0       	push   $0xf013b614
f011b815:	68 0c 02 00 00       	push   $0x20c
f011b81a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b81f:	e8 e1 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b824:	e8 44 19 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b829:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b82c:	29 c2                	sub    %eax,%edx
f011b82e:	89 d0                	mov    %edx,%eax
f011b830:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b835:	74 17                	je     f011b84e <test_kmalloc_bestfit1+0x101c>
f011b837:	83 ec 04             	sub    $0x4,%esp
f011b83a:	68 44 ba 13 f0       	push   $0xf013ba44
f011b83f:	68 0d 02 00 00       	push   $0x20d
f011b844:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b849:	e8 b7 49 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b84e:	e8 1a 19 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b853:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b856:	e8 99 85 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b85b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b85e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b864:	83 ec 0c             	sub    $0xc,%esp
f011b867:	50                   	push   %eax
f011b868:	e8 b9 c2 fe ff       	call   f0107b26 <kfree>
f011b86d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b870:	e8 7f 85 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b875:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b878:	74 17                	je     f011b891 <test_kmalloc_bestfit1+0x105f>
f011b87a:	83 ec 04             	sub    $0x4,%esp
f011b87d:	68 14 b6 13 f0       	push   $0xf013b614
f011b882:	68 16 02 00 00       	push   $0x216
f011b887:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b88c:	e8 74 49 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b891:	e8 d7 18 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b896:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b899:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b89e:	74 17                	je     f011b8b7 <test_kmalloc_bestfit1+0x1085>
f011b8a0:	83 ec 04             	sub    $0x4,%esp
f011b8a3:	68 57 ba 13 f0       	push   $0xf013ba57
f011b8a8:	68 17 02 00 00       	push   $0x217
f011b8ad:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b8b2:	e8 4e 49 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b8b7:	e8 b1 18 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b8bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8bf:	e8 30 85 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b8c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b8c7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b8cd:	83 ec 0c             	sub    $0xc,%esp
f011b8d0:	50                   	push   %eax
f011b8d1:	e8 50 c2 fe ff       	call   f0107b26 <kfree>
f011b8d6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8d9:	e8 16 85 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b8de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b8e1:	74 17                	je     f011b8fa <test_kmalloc_bestfit1+0x10c8>
f011b8e3:	83 ec 04             	sub    $0x4,%esp
f011b8e6:	68 14 b6 13 f0       	push   $0xf013b614
f011b8eb:	68 1d 02 00 00       	push   $0x21d
f011b8f0:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b8f5:	e8 0b 49 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b8fa:	e8 6e 18 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b8ff:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b902:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b907:	74 17                	je     f011b920 <test_kmalloc_bestfit1+0x10ee>
f011b909:	83 ec 04             	sub    $0x4,%esp
f011b90c:	68 57 ba 13 f0       	push   $0xf013ba57
f011b911:	68 1e 02 00 00       	push   $0x21e
f011b916:	68 fa b5 13 f0       	push   $0xf013b5fa
f011b91b:	e8 e5 48 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b920:	e8 48 18 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011b925:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b928:	e8 c7 84 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011b92d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b930:	83 ec 0c             	sub    $0xc,%esp
f011b933:	68 00 fc 1f 00       	push   $0x1ffc00
f011b938:	e8 29 c1 fe ff       	call   f0107a66 <kmalloc>
f011b93d:	83 c4 10             	add    $0x10,%esp
f011b940:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b946:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b94c:	89 c1                	mov    %eax,%ecx
f011b94e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b955:	10 00 00 
f011b958:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b95e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b963:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b969:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b96f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b974:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b97a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b980:	29 d0                	sub    %edx,%eax
f011b982:	89 c3                	mov    %eax,%ebx
f011b984:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b98b:	10 00 00 
f011b98e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b993:	0f b6 d0             	movzbl %al,%edx
f011b996:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b99c:	01 d0                	add    %edx,%eax
f011b99e:	48                   	dec    %eax
f011b99f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b9a5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b9ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9b0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b9b6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b9bc:	29 d0                	sub    %edx,%eax
f011b9be:	01 c3                	add    %eax,%ebx
f011b9c0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b9c7:	10 00 00 
f011b9ca:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011b9cf:	0f b6 c0             	movzbl %al,%eax
f011b9d2:	c1 e0 04             	shl    $0x4,%eax
f011b9d5:	89 c2                	mov    %eax,%edx
f011b9d7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b9dd:	01 d0                	add    %edx,%eax
f011b9df:	48                   	dec    %eax
f011b9e0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b9e6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b9ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9f1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b9f7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b9fd:	29 d0                	sub    %edx,%eax
f011b9ff:	01 d8                	add    %ebx,%eax
f011ba01:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011ba06:	39 c1                	cmp    %eax,%ecx
f011ba08:	74 17                	je     f011ba21 <test_kmalloc_bestfit1+0x11ef>
f011ba0a:	83 ec 04             	sub    $0x4,%esp
f011ba0d:	68 14 ba 13 f0       	push   $0xf013ba14
f011ba12:	68 27 02 00 00       	push   $0x227
f011ba17:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ba1c:	e8 e4 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba21:	e8 ce 83 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ba26:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ba29:	74 17                	je     f011ba42 <test_kmalloc_bestfit1+0x1210>
f011ba2b:	83 ec 04             	sub    $0x4,%esp
f011ba2e:	68 14 b6 13 f0       	push   $0xf013b614
f011ba33:	68 28 02 00 00       	push   $0x228
f011ba38:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ba3d:	e8 c3 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ba42:	e8 26 17 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011ba47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ba4a:	29 c2                	sub    %eax,%edx
f011ba4c:	89 d0                	mov    %edx,%eax
f011ba4e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba53:	74 17                	je     f011ba6c <test_kmalloc_bestfit1+0x123a>
f011ba55:	83 ec 04             	sub    $0x4,%esp
f011ba58:	68 44 ba 13 f0       	push   $0xf013ba44
f011ba5d:	68 29 02 00 00       	push   $0x229
f011ba62:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ba67:	e8 99 47 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011ba6c:	83 ec 0c             	sub    $0xc,%esp
f011ba6f:	68 64 ba 13 f0       	push   $0xf013ba64
f011ba74:	e8 95 52 fe ff       	call   f0100d0e <cprintf>
f011ba79:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ba7c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ba81:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ba84:	5b                   	pop    %ebx
f011ba85:	5f                   	pop    %edi
f011ba86:	5d                   	pop    %ebp
f011ba87:	c3                   	ret    

f011ba88 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ba88:	55                   	push   %ebp
f011ba89:	89 e5                	mov    %esp,%ebp
f011ba8b:	57                   	push   %edi
f011ba8c:	53                   	push   %ebx
f011ba8d:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ba93:	83 ec 0c             	sub    $0xc,%esp
f011ba96:	68 3c b5 13 f0       	push   $0xf013b53c
f011ba9b:	e8 6e 52 fe ff       	call   f0100d0e <cprintf>
f011baa0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011baa3:	83 ec 0c             	sub    $0xc,%esp
f011baa6:	68 6c b5 13 f0       	push   $0xf013b56c
f011baab:	e8 5e 52 fe ff       	call   f0100d0e <cprintf>
f011bab0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bab3:	83 ec 0c             	sub    $0xc,%esp
f011bab6:	68 3c b5 13 f0       	push   $0xf013b53c
f011babb:	e8 4e 52 fe ff       	call   f0100d0e <cprintf>
f011bac0:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011bac3:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011bac9:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bace:	b8 00 00 00 00       	mov    $0x0,%eax
f011bad3:	89 d7                	mov    %edx,%edi
f011bad5:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011bad7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011bade:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bae1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bae6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011bae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011baec:	ba 00 00 00 00       	mov    $0x0,%edx
f011baf1:	f7 75 f4             	divl   -0xc(%ebp)
f011baf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011baf7:	29 d0                	sub    %edx,%eax
f011baf9:	89 c1                	mov    %eax,%ecx
f011bafb:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bb02:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bb07:	0f b6 d0             	movzbl %al,%edx
f011bb0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bb0d:	01 d0                	add    %edx,%eax
f011bb0f:	48                   	dec    %eax
f011bb10:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011bb13:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bb16:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb1b:	f7 75 ec             	divl   -0x14(%ebp)
f011bb1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bb21:	29 d0                	sub    %edx,%eax
f011bb23:	01 c1                	add    %eax,%ecx
f011bb25:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011bb2c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bb31:	0f b6 c0             	movzbl %al,%eax
f011bb34:	c1 e0 04             	shl    $0x4,%eax
f011bb37:	89 c2                	mov    %eax,%edx
f011bb39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bb3c:	01 d0                	add    %edx,%eax
f011bb3e:	48                   	dec    %eax
f011bb3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011bb42:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bb45:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb4a:	f7 75 e4             	divl   -0x1c(%ebp)
f011bb4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bb50:	29 d0                	sub    %edx,%eax
f011bb52:	01 c8                	add    %ecx,%eax
f011bb54:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011bb59:	29 c2                	sub    %eax,%edx
f011bb5b:	89 d0                	mov    %edx,%eax
f011bb5d:	83 ec 0c             	sub    $0xc,%esp
f011bb60:	50                   	push   %eax
f011bb61:	e8 00 bf fe ff       	call   f0107a66 <kmalloc>
f011bb66:	83 c4 10             	add    $0x10,%esp
f011bb69:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011bb6f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bb75:	85 c0                	test   %eax,%eax
f011bb77:	74 17                	je     f011bb90 <test_kmalloc_bestfit2+0x108>
f011bb79:	83 ec 04             	sub    $0x4,%esp
f011bb7c:	68 ac ba 13 f0       	push   $0xf013baac
f011bb81:	68 3f 02 00 00       	push   $0x23f
f011bb86:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bb8b:	e8 75 46 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb90:	e8 d8 15 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bb95:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb98:	e8 57 82 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011bb9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011bba0:	83 ec 0c             	sub    $0xc,%esp
f011bba3:	68 00 fc 1f 00       	push   $0x1ffc00
f011bba8:	e8 b9 be fe ff       	call   f0107a66 <kmalloc>
f011bbad:	83 c4 10             	add    $0x10,%esp
f011bbb0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bbb6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bbbc:	89 c1                	mov    %eax,%ecx
f011bbbe:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bbc5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bbc8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbcd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bbd0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bbd3:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbd8:	f7 75 d4             	divl   -0x2c(%ebp)
f011bbdb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bbde:	29 d0                	sub    %edx,%eax
f011bbe0:	89 c3                	mov    %eax,%ebx
f011bbe2:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bbe9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bbee:	0f b6 d0             	movzbl %al,%edx
f011bbf1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bbf4:	01 d0                	add    %edx,%eax
f011bbf6:	48                   	dec    %eax
f011bbf7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bbfa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bbfd:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc02:	f7 75 cc             	divl   -0x34(%ebp)
f011bc05:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bc08:	29 d0                	sub    %edx,%eax
f011bc0a:	01 c3                	add    %eax,%ebx
f011bc0c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bc13:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bc18:	0f b6 c0             	movzbl %al,%eax
f011bc1b:	c1 e0 04             	shl    $0x4,%eax
f011bc1e:	89 c2                	mov    %eax,%edx
f011bc20:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bc23:	01 d0                	add    %edx,%eax
f011bc25:	48                   	dec    %eax
f011bc26:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bc29:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bc2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc31:	f7 75 c4             	divl   -0x3c(%ebp)
f011bc34:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bc37:	29 d0                	sub    %edx,%eax
f011bc39:	01 d8                	add    %ebx,%eax
f011bc3b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bc40:	39 c1                	cmp    %eax,%ecx
f011bc42:	74 17                	je     f011bc5b <test_kmalloc_bestfit2+0x1d3>
f011bc44:	83 ec 04             	sub    $0x4,%esp
f011bc47:	68 14 ba 13 f0       	push   $0xf013ba14
f011bc4c:	68 49 02 00 00       	push   $0x249
f011bc51:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bc56:	e8 aa 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc5b:	e8 94 81 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011bc60:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc63:	74 17                	je     f011bc7c <test_kmalloc_bestfit2+0x1f4>
f011bc65:	83 ec 04             	sub    $0x4,%esp
f011bc68:	68 14 b6 13 f0       	push   $0xf013b614
f011bc6d:	68 4a 02 00 00       	push   $0x24a
f011bc72:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bc77:	e8 89 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bc7c:	e8 ec 14 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bc81:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bc84:	29 c2                	sub    %eax,%edx
f011bc86:	89 d0                	mov    %edx,%eax
f011bc88:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bc8d:	74 17                	je     f011bca6 <test_kmalloc_bestfit2+0x21e>
f011bc8f:	83 ec 04             	sub    $0x4,%esp
f011bc92:	68 44 ba 13 f0       	push   $0xf013ba44
f011bc97:	68 4b 02 00 00       	push   $0x24b
f011bc9c:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bca1:	e8 5f 45 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bca6:	e8 c2 14 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bcab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcae:	e8 41 81 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011bcb3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bcb6:	83 ec 0c             	sub    $0xc,%esp
f011bcb9:	68 00 fc 1f 00       	push   $0x1ffc00
f011bcbe:	e8 a3 bd fe ff       	call   f0107a66 <kmalloc>
f011bcc3:	83 c4 10             	add    $0x10,%esp
f011bcc6:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bccc:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bcd2:	89 c1                	mov    %eax,%ecx
f011bcd4:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bcdb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bcde:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bce3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bce6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bce9:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcee:	f7 75 bc             	divl   -0x44(%ebp)
f011bcf1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bcf4:	29 d0                	sub    %edx,%eax
f011bcf6:	89 c3                	mov    %eax,%ebx
f011bcf8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bcff:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bd04:	0f b6 d0             	movzbl %al,%edx
f011bd07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bd0a:	01 d0                	add    %edx,%eax
f011bd0c:	48                   	dec    %eax
f011bd0d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bd10:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd13:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd18:	f7 75 b4             	divl   -0x4c(%ebp)
f011bd1b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd1e:	29 d0                	sub    %edx,%eax
f011bd20:	01 c3                	add    %eax,%ebx
f011bd22:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bd29:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bd2e:	0f b6 c0             	movzbl %al,%eax
f011bd31:	c1 e0 04             	shl    $0x4,%eax
f011bd34:	89 c2                	mov    %eax,%edx
f011bd36:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bd39:	01 d0                	add    %edx,%eax
f011bd3b:	48                   	dec    %eax
f011bd3c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bd3f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd42:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd47:	f7 75 ac             	divl   -0x54(%ebp)
f011bd4a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd4d:	29 d0                	sub    %edx,%eax
f011bd4f:	01 d8                	add    %ebx,%eax
f011bd51:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bd56:	39 c1                	cmp    %eax,%ecx
f011bd58:	74 17                	je     f011bd71 <test_kmalloc_bestfit2+0x2e9>
f011bd5a:	83 ec 04             	sub    $0x4,%esp
f011bd5d:	68 14 ba 13 f0       	push   $0xf013ba14
f011bd62:	68 51 02 00 00       	push   $0x251
f011bd67:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bd6c:	e8 94 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd71:	e8 7e 80 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011bd76:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd79:	74 17                	je     f011bd92 <test_kmalloc_bestfit2+0x30a>
f011bd7b:	83 ec 04             	sub    $0x4,%esp
f011bd7e:	68 14 b6 13 f0       	push   $0xf013b614
f011bd83:	68 52 02 00 00       	push   $0x252
f011bd88:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bd8d:	e8 73 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bd92:	e8 d6 13 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bd97:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd9a:	29 c2                	sub    %eax,%edx
f011bd9c:	89 d0                	mov    %edx,%eax
f011bd9e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bda3:	74 17                	je     f011bdbc <test_kmalloc_bestfit2+0x334>
f011bda5:	83 ec 04             	sub    $0x4,%esp
f011bda8:	68 44 ba 13 f0       	push   $0xf013ba44
f011bdad:	68 53 02 00 00       	push   $0x253
f011bdb2:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bdb7:	e8 49 44 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bdbc:	e8 ac 13 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bdc1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdc4:	e8 2b 80 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011bdc9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bdcc:	83 ec 0c             	sub    $0xc,%esp
f011bdcf:	68 00 08 00 00       	push   $0x800
f011bdd4:	e8 8d bc fe ff       	call   f0107a66 <kmalloc>
f011bdd9:	83 c4 10             	add    $0x10,%esp
f011bddc:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bde2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bde8:	89 c1                	mov    %eax,%ecx
f011bdea:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bdf1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bdf4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bdf9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bdfc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bdff:	ba 00 00 00 00       	mov    $0x0,%edx
f011be04:	f7 75 a4             	divl   -0x5c(%ebp)
f011be07:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011be0a:	29 d0                	sub    %edx,%eax
f011be0c:	89 c3                	mov    %eax,%ebx
f011be0e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011be15:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011be1a:	0f b6 d0             	movzbl %al,%edx
f011be1d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011be20:	01 d0                	add    %edx,%eax
f011be22:	48                   	dec    %eax
f011be23:	89 45 98             	mov    %eax,-0x68(%ebp)
f011be26:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be29:	ba 00 00 00 00       	mov    $0x0,%edx
f011be2e:	f7 75 9c             	divl   -0x64(%ebp)
f011be31:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be34:	29 d0                	sub    %edx,%eax
f011be36:	01 c3                	add    %eax,%ebx
f011be38:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011be3f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011be44:	0f b6 c0             	movzbl %al,%eax
f011be47:	c1 e0 04             	shl    $0x4,%eax
f011be4a:	89 c2                	mov    %eax,%edx
f011be4c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011be4f:	01 d0                	add    %edx,%eax
f011be51:	48                   	dec    %eax
f011be52:	89 45 90             	mov    %eax,-0x70(%ebp)
f011be55:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be58:	ba 00 00 00 00       	mov    $0x0,%edx
f011be5d:	f7 75 94             	divl   -0x6c(%ebp)
f011be60:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be63:	29 d0                	sub    %edx,%eax
f011be65:	01 d8                	add    %ebx,%eax
f011be67:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011be6c:	39 c1                	cmp    %eax,%ecx
f011be6e:	74 17                	je     f011be87 <test_kmalloc_bestfit2+0x3ff>
f011be70:	83 ec 04             	sub    $0x4,%esp
f011be73:	68 14 ba 13 f0       	push   $0xf013ba14
f011be78:	68 59 02 00 00       	push   $0x259
f011be7d:	68 fa b5 13 f0       	push   $0xf013b5fa
f011be82:	e8 7e 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be87:	e8 68 7f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011be8c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be8f:	74 17                	je     f011bea8 <test_kmalloc_bestfit2+0x420>
f011be91:	83 ec 04             	sub    $0x4,%esp
f011be94:	68 14 b6 13 f0       	push   $0xf013b614
f011be99:	68 5a 02 00 00       	push   $0x25a
f011be9e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bea3:	e8 5d 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bea8:	e8 c0 12 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bead:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011beb0:	29 c2                	sub    %eax,%edx
f011beb2:	89 d0                	mov    %edx,%eax
f011beb4:	83 f8 01             	cmp    $0x1,%eax
f011beb7:	74 17                	je     f011bed0 <test_kmalloc_bestfit2+0x448>
f011beb9:	83 ec 04             	sub    $0x4,%esp
f011bebc:	68 44 ba 13 f0       	push   $0xf013ba44
f011bec1:	68 5b 02 00 00       	push   $0x25b
f011bec6:	68 fa b5 13 f0       	push   $0xf013b5fa
f011becb:	e8 35 43 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bed0:	e8 98 12 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bed5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bed8:	e8 17 7f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011bedd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bee0:	83 ec 0c             	sub    $0xc,%esp
f011bee3:	68 00 08 00 00       	push   $0x800
f011bee8:	e8 79 bb fe ff       	call   f0107a66 <kmalloc>
f011beed:	83 c4 10             	add    $0x10,%esp
f011bef0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bef6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011befc:	89 c1                	mov    %eax,%ecx
f011befe:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bf05:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bf08:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf0d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bf10:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf13:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf18:	f7 75 8c             	divl   -0x74(%ebp)
f011bf1b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf1e:	29 d0                	sub    %edx,%eax
f011bf20:	89 c3                	mov    %eax,%ebx
f011bf22:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bf29:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bf2e:	0f b6 d0             	movzbl %al,%edx
f011bf31:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bf34:	01 d0                	add    %edx,%eax
f011bf36:	48                   	dec    %eax
f011bf37:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bf3a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf42:	f7 75 84             	divl   -0x7c(%ebp)
f011bf45:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf48:	29 d0                	sub    %edx,%eax
f011bf4a:	01 c3                	add    %eax,%ebx
f011bf4c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bf53:	10 00 00 
f011bf56:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011bf5b:	0f b6 c0             	movzbl %al,%eax
f011bf5e:	c1 e0 04             	shl    $0x4,%eax
f011bf61:	89 c2                	mov    %eax,%edx
f011bf63:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bf69:	01 d0                	add    %edx,%eax
f011bf6b:	48                   	dec    %eax
f011bf6c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bf72:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf78:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf7d:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bf83:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf89:	29 d0                	sub    %edx,%eax
f011bf8b:	01 d8                	add    %ebx,%eax
f011bf8d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bf92:	39 c1                	cmp    %eax,%ecx
f011bf94:	74 17                	je     f011bfad <test_kmalloc_bestfit2+0x525>
f011bf96:	83 ec 04             	sub    $0x4,%esp
f011bf99:	68 14 ba 13 f0       	push   $0xf013ba14
f011bf9e:	68 61 02 00 00       	push   $0x261
f011bfa3:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bfa8:	e8 58 42 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfad:	e8 42 7e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011bfb2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bfb5:	74 17                	je     f011bfce <test_kmalloc_bestfit2+0x546>
f011bfb7:	83 ec 04             	sub    $0x4,%esp
f011bfba:	68 14 b6 13 f0       	push   $0xf013b614
f011bfbf:	68 62 02 00 00       	push   $0x262
f011bfc4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bfc9:	e8 37 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bfce:	e8 9a 11 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bfd3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bfd6:	29 c2                	sub    %eax,%edx
f011bfd8:	89 d0                	mov    %edx,%eax
f011bfda:	83 f8 01             	cmp    $0x1,%eax
f011bfdd:	74 17                	je     f011bff6 <test_kmalloc_bestfit2+0x56e>
f011bfdf:	83 ec 04             	sub    $0x4,%esp
f011bfe2:	68 44 ba 13 f0       	push   $0xf013ba44
f011bfe7:	68 63 02 00 00       	push   $0x263
f011bfec:	68 fa b5 13 f0       	push   $0xf013b5fa
f011bff1:	e8 0f 42 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bff6:	e8 72 11 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011bffb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bffe:	e8 f1 7d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c003:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011c006:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c00c:	83 ec 0c             	sub    $0xc,%esp
f011c00f:	50                   	push   %eax
f011c010:	e8 11 bb fe ff       	call   f0107b26 <kfree>
f011c015:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c018:	e8 d7 7d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c01d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c020:	74 17                	je     f011c039 <test_kmalloc_bestfit2+0x5b1>
f011c022:	83 ec 04             	sub    $0x4,%esp
f011c025:	68 14 b6 13 f0       	push   $0xf013b614
f011c02a:	68 69 02 00 00       	push   $0x269
f011c02f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c034:	e8 cc 41 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011c039:	e8 2f 11 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c03e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c041:	83 f8 01             	cmp    $0x1,%eax
f011c044:	74 17                	je     f011c05d <test_kmalloc_bestfit2+0x5d5>
f011c046:	83 ec 04             	sub    $0x4,%esp
f011c049:	68 44 ba 13 f0       	push   $0xf013ba44
f011c04e:	68 6a 02 00 00       	push   $0x26a
f011c053:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c058:	e8 a8 41 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011c05d:	e8 0b 11 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c062:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c065:	e8 8a 7d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c06a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011c06d:	83 ec 0c             	sub    $0xc,%esp
f011c070:	68 00 1c 00 00       	push   $0x1c00
f011c075:	e8 ec b9 fe ff       	call   f0107a66 <kmalloc>
f011c07a:	83 c4 10             	add    $0x10,%esp
f011c07d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011c083:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c089:	89 c1                	mov    %eax,%ecx
f011c08b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c092:	10 00 00 
f011c095:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c09b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c0a0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c0a6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c0ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0b1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c0b7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c0bd:	29 d0                	sub    %edx,%eax
f011c0bf:	89 c3                	mov    %eax,%ebx
f011c0c1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c0c8:	10 00 00 
f011c0cb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c0d0:	0f b6 d0             	movzbl %al,%edx
f011c0d3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c0d9:	01 d0                	add    %edx,%eax
f011c0db:	48                   	dec    %eax
f011c0dc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c0e2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c0e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0ed:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c0f3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c0f9:	29 d0                	sub    %edx,%eax
f011c0fb:	01 c3                	add    %eax,%ebx
f011c0fd:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c104:	10 00 00 
f011c107:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c10c:	0f b6 c0             	movzbl %al,%eax
f011c10f:	c1 e0 04             	shl    $0x4,%eax
f011c112:	89 c2                	mov    %eax,%edx
f011c114:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c11a:	01 d0                	add    %edx,%eax
f011c11c:	48                   	dec    %eax
f011c11d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c123:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c129:	ba 00 00 00 00       	mov    $0x0,%edx
f011c12e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c134:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c13a:	29 d0                	sub    %edx,%eax
f011c13c:	01 d8                	add    %ebx,%eax
f011c13e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011c143:	39 c1                	cmp    %eax,%ecx
f011c145:	74 17                	je     f011c15e <test_kmalloc_bestfit2+0x6d6>
f011c147:	83 ec 04             	sub    $0x4,%esp
f011c14a:	68 14 ba 13 f0       	push   $0xf013ba14
f011c14f:	68 70 02 00 00       	push   $0x270
f011c154:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c159:	e8 a7 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c15e:	e8 91 7c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c163:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c166:	74 17                	je     f011c17f <test_kmalloc_bestfit2+0x6f7>
f011c168:	83 ec 04             	sub    $0x4,%esp
f011c16b:	68 14 b6 13 f0       	push   $0xf013b614
f011c170:	68 71 02 00 00       	push   $0x271
f011c175:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c17a:	e8 86 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011c17f:	e8 e9 0f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c184:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c187:	29 c2                	sub    %eax,%edx
f011c189:	89 d0                	mov    %edx,%eax
f011c18b:	83 f8 02             	cmp    $0x2,%eax
f011c18e:	74 17                	je     f011c1a7 <test_kmalloc_bestfit2+0x71f>
f011c190:	83 ec 04             	sub    $0x4,%esp
f011c193:	68 44 ba 13 f0       	push   $0xf013ba44
f011c198:	68 72 02 00 00       	push   $0x272
f011c19d:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c1a2:	e8 5e 40 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c1a7:	e8 c1 0f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c1ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1af:	e8 40 7c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c1b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011c1b7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c1bd:	83 ec 0c             	sub    $0xc,%esp
f011c1c0:	50                   	push   %eax
f011c1c1:	e8 60 b9 fe ff       	call   f0107b26 <kfree>
f011c1c6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1c9:	e8 26 7c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c1ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1d1:	74 17                	je     f011c1ea <test_kmalloc_bestfit2+0x762>
f011c1d3:	83 ec 04             	sub    $0x4,%esp
f011c1d6:	68 14 b6 13 f0       	push   $0xf013b614
f011c1db:	68 78 02 00 00       	push   $0x278
f011c1e0:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c1e5:	e8 1b 40 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011c1ea:	e8 7e 0f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c1ef:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c1f2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c1f7:	74 17                	je     f011c210 <test_kmalloc_bestfit2+0x788>
f011c1f9:	83 ec 04             	sub    $0x4,%esp
f011c1fc:	68 c8 b8 13 f0       	push   $0xf013b8c8
f011c201:	68 79 02 00 00       	push   $0x279
f011c206:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c20b:	e8 f5 3f fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c210:	e8 58 0f ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c215:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c218:	e8 d7 7b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c21d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c220:	83 ec 0c             	sub    $0xc,%esp
f011c223:	68 00 fc 2f 00       	push   $0x2ffc00
f011c228:	e8 39 b8 fe ff       	call   f0107a66 <kmalloc>
f011c22d:	83 c4 10             	add    $0x10,%esp
f011c230:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c236:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c23c:	89 c1                	mov    %eax,%ecx
f011c23e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c245:	10 00 00 
f011c248:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c24e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c253:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c259:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c25f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c264:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c26a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c270:	29 d0                	sub    %edx,%eax
f011c272:	89 c3                	mov    %eax,%ebx
f011c274:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c27b:	10 00 00 
f011c27e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c283:	0f b6 d0             	movzbl %al,%edx
f011c286:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c28c:	01 d0                	add    %edx,%eax
f011c28e:	48                   	dec    %eax
f011c28f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c295:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c29b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2a0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c2a6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c2ac:	29 d0                	sub    %edx,%eax
f011c2ae:	01 c3                	add    %eax,%ebx
f011c2b0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c2b7:	10 00 00 
f011c2ba:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c2bf:	0f b6 c0             	movzbl %al,%eax
f011c2c2:	c1 e0 04             	shl    $0x4,%eax
f011c2c5:	89 c2                	mov    %eax,%edx
f011c2c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c2cd:	01 d0                	add    %edx,%eax
f011c2cf:	48                   	dec    %eax
f011c2d0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c2d6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c2dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2e1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c2e7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c2ed:	29 d0                	sub    %edx,%eax
f011c2ef:	01 d8                	add    %ebx,%eax
f011c2f1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c2f6:	39 c1                	cmp    %eax,%ecx
f011c2f8:	74 17                	je     f011c311 <test_kmalloc_bestfit2+0x889>
f011c2fa:	83 ec 04             	sub    $0x4,%esp
f011c2fd:	68 14 ba 13 f0       	push   $0xf013ba14
f011c302:	68 7f 02 00 00       	push   $0x27f
f011c307:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c30c:	e8 f4 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c311:	e8 de 7a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c316:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c319:	74 17                	je     f011c332 <test_kmalloc_bestfit2+0x8aa>
f011c31b:	83 ec 04             	sub    $0x4,%esp
f011c31e:	68 14 b6 13 f0       	push   $0xf013b614
f011c323:	68 80 02 00 00       	push   $0x280
f011c328:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c32d:	e8 d3 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011c332:	e8 36 0e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c337:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c33a:	29 c2                	sub    %eax,%edx
f011c33c:	89 d0                	mov    %edx,%eax
f011c33e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c343:	74 17                	je     f011c35c <test_kmalloc_bestfit2+0x8d4>
f011c345:	83 ec 04             	sub    $0x4,%esp
f011c348:	68 44 ba 13 f0       	push   $0xf013ba44
f011c34d:	68 81 02 00 00       	push   $0x281
f011c352:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c357:	e8 a9 3e fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c35c:	e8 0c 0e ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c361:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c364:	e8 8b 7a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c369:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c36c:	83 ec 0c             	sub    $0xc,%esp
f011c36f:	68 00 18 20 00       	push   $0x201800
f011c374:	e8 ed b6 fe ff       	call   f0107a66 <kmalloc>
f011c379:	83 c4 10             	add    $0x10,%esp
f011c37c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c382:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c388:	89 c1                	mov    %eax,%ecx
f011c38a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c391:	10 00 00 
f011c394:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c39a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c39f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c3a5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c3ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3b0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c3b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c3bc:	29 d0                	sub    %edx,%eax
f011c3be:	89 c3                	mov    %eax,%ebx
f011c3c0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c3c7:	10 00 00 
f011c3ca:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c3cf:	0f b6 d0             	movzbl %al,%edx
f011c3d2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c3d8:	01 d0                	add    %edx,%eax
f011c3da:	48                   	dec    %eax
f011c3db:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c3e1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3ec:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c3f2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3f8:	29 d0                	sub    %edx,%eax
f011c3fa:	01 c3                	add    %eax,%ebx
f011c3fc:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c403:	10 00 00 
f011c406:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c40b:	0f b6 c0             	movzbl %al,%eax
f011c40e:	c1 e0 04             	shl    $0x4,%eax
f011c411:	89 c2                	mov    %eax,%edx
f011c413:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c419:	01 d0                	add    %edx,%eax
f011c41b:	48                   	dec    %eax
f011c41c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c422:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c428:	ba 00 00 00 00       	mov    $0x0,%edx
f011c42d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c433:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c439:	29 d0                	sub    %edx,%eax
f011c43b:	01 d8                	add    %ebx,%eax
f011c43d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c442:	39 c1                	cmp    %eax,%ecx
f011c444:	74 17                	je     f011c45d <test_kmalloc_bestfit2+0x9d5>
f011c446:	83 ec 04             	sub    $0x4,%esp
f011c449:	68 14 ba 13 f0       	push   $0xf013ba14
f011c44e:	68 87 02 00 00       	push   $0x287
f011c453:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c458:	e8 a8 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c45d:	e8 92 79 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c462:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c465:	74 17                	je     f011c47e <test_kmalloc_bestfit2+0x9f6>
f011c467:	83 ec 04             	sub    $0x4,%esp
f011c46a:	68 14 b6 13 f0       	push   $0xf013b614
f011c46f:	68 88 02 00 00       	push   $0x288
f011c474:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c479:	e8 87 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c47e:	e8 ea 0c ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c483:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c486:	29 c2                	sub    %eax,%edx
f011c488:	89 d0                	mov    %edx,%eax
f011c48a:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c48f:	74 17                	je     f011c4a8 <test_kmalloc_bestfit2+0xa20>
f011c491:	83 ec 04             	sub    $0x4,%esp
f011c494:	68 44 ba 13 f0       	push   $0xf013ba44
f011c499:	68 89 02 00 00       	push   $0x289
f011c49e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c4a3:	e8 5d 3d fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4a8:	e8 c0 0c ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c4ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c4b0:	e8 3f 79 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c4b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c4b8:	83 ec 0c             	sub    $0xc,%esp
f011c4bb:	68 00 fc 4f 00       	push   $0x4ffc00
f011c4c0:	e8 a1 b5 fe ff       	call   f0107a66 <kmalloc>
f011c4c5:	83 c4 10             	add    $0x10,%esp
f011c4c8:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c4ce:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c4d4:	89 c1                	mov    %eax,%ecx
f011c4d6:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4dd:	10 00 00 
f011c4e0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c4e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c4eb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c4f1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4fc:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c502:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c508:	29 d0                	sub    %edx,%eax
f011c50a:	89 c3                	mov    %eax,%ebx
f011c50c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c513:	10 00 00 
f011c516:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c51b:	0f b6 d0             	movzbl %al,%edx
f011c51e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c524:	01 d0                	add    %edx,%eax
f011c526:	48                   	dec    %eax
f011c527:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c52d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c533:	ba 00 00 00 00       	mov    $0x0,%edx
f011c538:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c53e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c544:	29 d0                	sub    %edx,%eax
f011c546:	01 c3                	add    %eax,%ebx
f011c548:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c54f:	10 00 00 
f011c552:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c557:	0f b6 c0             	movzbl %al,%eax
f011c55a:	c1 e0 04             	shl    $0x4,%eax
f011c55d:	89 c2                	mov    %eax,%edx
f011c55f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c565:	01 d0                	add    %edx,%eax
f011c567:	48                   	dec    %eax
f011c568:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c56e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c574:	ba 00 00 00 00       	mov    $0x0,%edx
f011c579:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c57f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c585:	29 d0                	sub    %edx,%eax
f011c587:	01 d8                	add    %ebx,%eax
f011c589:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c58e:	39 c1                	cmp    %eax,%ecx
f011c590:	74 17                	je     f011c5a9 <test_kmalloc_bestfit2+0xb21>
f011c592:	83 ec 04             	sub    $0x4,%esp
f011c595:	68 14 ba 13 f0       	push   $0xf013ba14
f011c59a:	68 8f 02 00 00       	push   $0x28f
f011c59f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c5a4:	e8 5c 3c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5a9:	e8 46 78 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c5ae:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c5b1:	74 17                	je     f011c5ca <test_kmalloc_bestfit2+0xb42>
f011c5b3:	83 ec 04             	sub    $0x4,%esp
f011c5b6:	68 14 b6 13 f0       	push   $0xf013b614
f011c5bb:	68 90 02 00 00       	push   $0x290
f011c5c0:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c5c5:	e8 3b 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c5ca:	e8 9e 0b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c5cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c5d2:	29 c2                	sub    %eax,%edx
f011c5d4:	89 d0                	mov    %edx,%eax
f011c5d6:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c5db:	74 17                	je     f011c5f4 <test_kmalloc_bestfit2+0xb6c>
f011c5dd:	83 ec 04             	sub    $0x4,%esp
f011c5e0:	68 44 ba 13 f0       	push   $0xf013ba44
f011c5e5:	68 91 02 00 00       	push   $0x291
f011c5ea:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c5ef:	e8 11 3c fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c5f4:	e8 74 0b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c5f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c5fc:	e8 f3 77 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c601:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c604:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c60a:	83 ec 0c             	sub    $0xc,%esp
f011c60d:	50                   	push   %eax
f011c60e:	e8 13 b5 fe ff       	call   f0107b26 <kfree>
f011c613:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c616:	e8 d9 77 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c61b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c61e:	74 17                	je     f011c637 <test_kmalloc_bestfit2+0xbaf>
f011c620:	83 ec 04             	sub    $0x4,%esp
f011c623:	68 14 b6 13 f0       	push   $0xf013b614
f011c628:	68 97 02 00 00       	push   $0x297
f011c62d:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c632:	e8 ce 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c637:	e8 31 0b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c63c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c63f:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c644:	74 17                	je     f011c65d <test_kmalloc_bestfit2+0xbd5>
f011c646:	83 ec 04             	sub    $0x4,%esp
f011c649:	68 c8 b8 13 f0       	push   $0xf013b8c8
f011c64e:	68 98 02 00 00       	push   $0x298
f011c653:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c658:	e8 a8 3b fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c65d:	e8 0b 0b ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c662:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c665:	e8 8a 77 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c66a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c66d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c673:	83 ec 0c             	sub    $0xc,%esp
f011c676:	50                   	push   %eax
f011c677:	e8 aa b4 fe ff       	call   f0107b26 <kfree>
f011c67c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c67f:	e8 70 77 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c684:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c687:	74 17                	je     f011c6a0 <test_kmalloc_bestfit2+0xc18>
f011c689:	83 ec 04             	sub    $0x4,%esp
f011c68c:	68 14 b6 13 f0       	push   $0xf013b614
f011c691:	68 9e 02 00 00       	push   $0x29e
f011c696:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c69b:	e8 65 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c6a0:	e8 c8 0a ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c6a5:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c6a8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c6ad:	74 17                	je     f011c6c6 <test_kmalloc_bestfit2+0xc3e>
f011c6af:	83 ec 04             	sub    $0x4,%esp
f011c6b2:	68 f4 ba 13 f0       	push   $0xf013baf4
f011c6b7:	68 9f 02 00 00       	push   $0x29f
f011c6bc:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c6c1:	e8 3f 3b fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6c6:	e8 a2 0a ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c6cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c6ce:	e8 21 77 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c6d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c6d6:	83 ec 0c             	sub    $0xc,%esp
f011c6d9:	68 00 fc 1f 00       	push   $0x1ffc00
f011c6de:	e8 83 b3 fe ff       	call   f0107a66 <kmalloc>
f011c6e3:	83 c4 10             	add    $0x10,%esp
f011c6e6:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c6ec:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c6f2:	89 c1                	mov    %eax,%ecx
f011c6f4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c6fb:	10 00 00 
f011c6fe:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c704:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c709:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c70f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c715:	ba 00 00 00 00       	mov    $0x0,%edx
f011c71a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c720:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c726:	29 d0                	sub    %edx,%eax
f011c728:	89 c3                	mov    %eax,%ebx
f011c72a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c731:	10 00 00 
f011c734:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c739:	0f b6 d0             	movzbl %al,%edx
f011c73c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c742:	01 d0                	add    %edx,%eax
f011c744:	48                   	dec    %eax
f011c745:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c74b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c751:	ba 00 00 00 00       	mov    $0x0,%edx
f011c756:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c75c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c762:	29 d0                	sub    %edx,%eax
f011c764:	01 c3                	add    %eax,%ebx
f011c766:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c76d:	10 00 00 
f011c770:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c775:	0f b6 c0             	movzbl %al,%eax
f011c778:	c1 e0 04             	shl    $0x4,%eax
f011c77b:	89 c2                	mov    %eax,%edx
f011c77d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c783:	01 d0                	add    %edx,%eax
f011c785:	48                   	dec    %eax
f011c786:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c78c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c792:	ba 00 00 00 00       	mov    $0x0,%edx
f011c797:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c79d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c7a3:	29 d0                	sub    %edx,%eax
f011c7a5:	01 d8                	add    %ebx,%eax
f011c7a7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c7ac:	39 c1                	cmp    %eax,%ecx
f011c7ae:	74 17                	je     f011c7c7 <test_kmalloc_bestfit2+0xd3f>
f011c7b0:	83 ec 04             	sub    $0x4,%esp
f011c7b3:	68 14 ba 13 f0       	push   $0xf013ba14
f011c7b8:	68 a5 02 00 00       	push   $0x2a5
f011c7bd:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c7c2:	e8 3e 3a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7c7:	e8 28 76 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c7cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c7cf:	74 17                	je     f011c7e8 <test_kmalloc_bestfit2+0xd60>
f011c7d1:	83 ec 04             	sub    $0x4,%esp
f011c7d4:	68 14 b6 13 f0       	push   $0xf013b614
f011c7d9:	68 a6 02 00 00       	push   $0x2a6
f011c7de:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c7e3:	e8 1d 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c7e8:	e8 80 09 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c7ed:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c7f0:	29 c2                	sub    %eax,%edx
f011c7f2:	89 d0                	mov    %edx,%eax
f011c7f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c7f9:	74 17                	je     f011c812 <test_kmalloc_bestfit2+0xd8a>
f011c7fb:	83 ec 04             	sub    $0x4,%esp
f011c7fe:	68 32 bb 13 f0       	push   $0xf013bb32
f011c803:	68 a7 02 00 00       	push   $0x2a7
f011c808:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c80d:	e8 f3 39 fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c812:	e8 56 09 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c817:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c81a:	e8 d5 75 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c81f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c822:	83 ec 0c             	sub    $0xc,%esp
f011c825:	68 00 18 00 00       	push   $0x1800
f011c82a:	e8 37 b2 fe ff       	call   f0107a66 <kmalloc>
f011c82f:	83 c4 10             	add    $0x10,%esp
f011c832:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c838:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c83e:	89 c1                	mov    %eax,%ecx
f011c840:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c847:	10 00 00 
f011c84a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c850:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c855:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c85b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c861:	ba 00 00 00 00       	mov    $0x0,%edx
f011c866:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c86c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c872:	29 d0                	sub    %edx,%eax
f011c874:	89 c3                	mov    %eax,%ebx
f011c876:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c87d:	10 00 00 
f011c880:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c885:	0f b6 d0             	movzbl %al,%edx
f011c888:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c88e:	01 d0                	add    %edx,%eax
f011c890:	48                   	dec    %eax
f011c891:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c897:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c89d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8a2:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c8a8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c8ae:	29 d0                	sub    %edx,%eax
f011c8b0:	01 c3                	add    %eax,%ebx
f011c8b2:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c8b9:	10 00 00 
f011c8bc:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011c8c1:	0f b6 c0             	movzbl %al,%eax
f011c8c4:	c1 e0 04             	shl    $0x4,%eax
f011c8c7:	89 c2                	mov    %eax,%edx
f011c8c9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c8cf:	01 d0                	add    %edx,%eax
f011c8d1:	48                   	dec    %eax
f011c8d2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c8d8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c8de:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8e3:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c8e9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c8ef:	29 d0                	sub    %edx,%eax
f011c8f1:	01 d8                	add    %ebx,%eax
f011c8f3:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c8f8:	39 c1                	cmp    %eax,%ecx
f011c8fa:	74 17                	je     f011c913 <test_kmalloc_bestfit2+0xe8b>
f011c8fc:	83 ec 04             	sub    $0x4,%esp
f011c8ff:	68 14 ba 13 f0       	push   $0xf013ba14
f011c904:	68 ad 02 00 00       	push   $0x2ad
f011c909:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c90e:	e8 f2 38 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c913:	e8 dc 74 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c918:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c91b:	74 17                	je     f011c934 <test_kmalloc_bestfit2+0xeac>
f011c91d:	83 ec 04             	sub    $0x4,%esp
f011c920:	68 14 b6 13 f0       	push   $0xf013b614
f011c925:	68 ae 02 00 00       	push   $0x2ae
f011c92a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c92f:	e8 d1 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c934:	e8 34 08 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c939:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c93c:	29 c2                	sub    %eax,%edx
f011c93e:	89 d0                	mov    %edx,%eax
f011c940:	83 f8 02             	cmp    $0x2,%eax
f011c943:	74 17                	je     f011c95c <test_kmalloc_bestfit2+0xed4>
f011c945:	83 ec 04             	sub    $0x4,%esp
f011c948:	68 32 bb 13 f0       	push   $0xf013bb32
f011c94d:	68 af 02 00 00       	push   $0x2af
f011c952:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c957:	e8 a9 38 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c95c:	e8 0c 08 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c961:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c964:	e8 8b 74 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c969:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c96c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c972:	83 ec 0c             	sub    $0xc,%esp
f011c975:	50                   	push   %eax
f011c976:	e8 ab b1 fe ff       	call   f0107b26 <kfree>
f011c97b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c97e:	e8 71 74 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c983:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c986:	74 17                	je     f011c99f <test_kmalloc_bestfit2+0xf17>
f011c988:	83 ec 04             	sub    $0x4,%esp
f011c98b:	68 14 b6 13 f0       	push   $0xf013b614
f011c990:	68 b5 02 00 00       	push   $0x2b5
f011c995:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c99a:	e8 66 38 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c99f:	e8 c9 07 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c9a4:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c9a7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c9ac:	74 17                	je     f011c9c5 <test_kmalloc_bestfit2+0xf3d>
f011c9ae:	83 ec 04             	sub    $0x4,%esp
f011c9b1:	68 f4 ba 13 f0       	push   $0xf013baf4
f011c9b6:	68 b6 02 00 00       	push   $0x2b6
f011c9bb:	68 fa b5 13 f0       	push   $0xf013b5fa
f011c9c0:	e8 40 38 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9c5:	e8 a3 07 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011c9ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c9cd:	e8 22 74 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011c9d2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c9d5:	83 ec 0c             	sub    $0xc,%esp
f011c9d8:	68 00 fc 2f 00       	push   $0x2ffc00
f011c9dd:	e8 84 b0 fe ff       	call   f0107a66 <kmalloc>
f011c9e2:	83 c4 10             	add    $0x10,%esp
f011c9e5:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c9eb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c9f1:	89 c1                	mov    %eax,%ecx
f011c9f3:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c9fa:	10 00 00 
f011c9fd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ca03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca08:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ca0e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ca14:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca19:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ca1f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ca25:	29 d0                	sub    %edx,%eax
f011ca27:	89 c3                	mov    %eax,%ebx
f011ca29:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ca30:	10 00 00 
f011ca33:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ca38:	0f b6 d0             	movzbl %al,%edx
f011ca3b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ca41:	01 d0                	add    %edx,%eax
f011ca43:	48                   	dec    %eax
f011ca44:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011ca4a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ca50:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca55:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011ca5b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ca61:	29 d0                	sub    %edx,%eax
f011ca63:	01 c3                	add    %eax,%ebx
f011ca65:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011ca6c:	10 00 00 
f011ca6f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ca74:	0f b6 c0             	movzbl %al,%eax
f011ca77:	c1 e0 04             	shl    $0x4,%eax
f011ca7a:	89 c2                	mov    %eax,%edx
f011ca7c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ca82:	01 d0                	add    %edx,%eax
f011ca84:	48                   	dec    %eax
f011ca85:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011ca8b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ca91:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca96:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011ca9c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011caa2:	29 d0                	sub    %edx,%eax
f011caa4:	01 d8                	add    %ebx,%eax
f011caa6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011caab:	39 c1                	cmp    %eax,%ecx
f011caad:	74 17                	je     f011cac6 <test_kmalloc_bestfit2+0x103e>
f011caaf:	83 ec 04             	sub    $0x4,%esp
f011cab2:	68 14 ba 13 f0       	push   $0xf013ba14
f011cab7:	68 bc 02 00 00       	push   $0x2bc
f011cabc:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cac1:	e8 3f 37 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cac6:	e8 29 73 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011cacb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cace:	74 17                	je     f011cae7 <test_kmalloc_bestfit2+0x105f>
f011cad0:	83 ec 04             	sub    $0x4,%esp
f011cad3:	68 14 b6 13 f0       	push   $0xf013b614
f011cad8:	68 bd 02 00 00       	push   $0x2bd
f011cadd:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cae2:	e8 1e 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cae7:	e8 81 06 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011caec:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011caef:	29 c2                	sub    %eax,%edx
f011caf1:	89 d0                	mov    %edx,%eax
f011caf3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011caf8:	74 17                	je     f011cb11 <test_kmalloc_bestfit2+0x1089>
f011cafa:	83 ec 04             	sub    $0x4,%esp
f011cafd:	68 f4 ba 13 f0       	push   $0xf013baf4
f011cb02:	68 be 02 00 00       	push   $0x2be
f011cb07:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cb0c:	e8 f4 36 fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb11:	e8 57 06 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011cb16:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011cb19:	e8 d6 72 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011cb1e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011cb21:	83 ec 0c             	sub    $0xc,%esp
f011cb24:	68 00 fc 3f 00       	push   $0x3ffc00
f011cb29:	e8 38 af fe ff       	call   f0107a66 <kmalloc>
f011cb2e:	83 c4 10             	add    $0x10,%esp
f011cb31:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cb37:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cb3d:	89 c1                	mov    %eax,%ecx
f011cb3f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011cb46:	10 00 00 
f011cb49:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cb4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb54:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011cb5a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cb60:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb65:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011cb6b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cb71:	29 d0                	sub    %edx,%eax
f011cb73:	89 c3                	mov    %eax,%ebx
f011cb75:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cb7c:	10 00 00 
f011cb7f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011cb84:	0f b6 d0             	movzbl %al,%edx
f011cb87:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cb8d:	01 d0                	add    %edx,%eax
f011cb8f:	48                   	dec    %eax
f011cb90:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011cb96:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cb9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cba1:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011cba7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cbad:	29 d0                	sub    %edx,%eax
f011cbaf:	01 c3                	add    %eax,%ebx
f011cbb1:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011cbb8:	10 00 00 
f011cbbb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011cbc0:	0f b6 c0             	movzbl %al,%eax
f011cbc3:	c1 e0 04             	shl    $0x4,%eax
f011cbc6:	89 c2                	mov    %eax,%edx
f011cbc8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cbce:	01 d0                	add    %edx,%eax
f011cbd0:	48                   	dec    %eax
f011cbd1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011cbd7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cbdd:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbe2:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cbe8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cbee:	29 d0                	sub    %edx,%eax
f011cbf0:	01 d8                	add    %ebx,%eax
f011cbf2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cbf7:	39 c1                	cmp    %eax,%ecx
f011cbf9:	74 17                	je     f011cc12 <test_kmalloc_bestfit2+0x118a>
f011cbfb:	83 ec 04             	sub    $0x4,%esp
f011cbfe:	68 14 ba 13 f0       	push   $0xf013ba14
f011cc03:	68 c4 02 00 00       	push   $0x2c4
f011cc08:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cc0d:	e8 f3 35 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc12:	e8 dd 71 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011cc17:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cc1a:	74 17                	je     f011cc33 <test_kmalloc_bestfit2+0x11ab>
f011cc1c:	83 ec 04             	sub    $0x4,%esp
f011cc1f:	68 14 b6 13 f0       	push   $0xf013b614
f011cc24:	68 c5 02 00 00       	push   $0x2c5
f011cc29:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cc2e:	e8 d2 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cc33:	e8 35 05 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011cc38:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cc3b:	29 c2                	sub    %eax,%edx
f011cc3d:	89 d0                	mov    %edx,%eax
f011cc3f:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cc44:	74 17                	je     f011cc5d <test_kmalloc_bestfit2+0x11d5>
f011cc46:	83 ec 04             	sub    $0x4,%esp
f011cc49:	68 f4 ba 13 f0       	push   $0xf013baf4
f011cc4e:	68 c6 02 00 00       	push   $0x2c6
f011cc53:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cc58:	e8 a8 35 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011cc5d:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011cc64:	10 00 00 
f011cc67:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cc6d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc72:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011cc78:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc83:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cc89:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc8f:	29 d0                	sub    %edx,%eax
f011cc91:	89 c1                	mov    %eax,%ecx
f011cc93:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011cc9a:	10 00 00 
f011cc9d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011cca2:	0f b6 d0             	movzbl %al,%edx
f011cca5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ccab:	01 d0                	add    %edx,%eax
f011ccad:	48                   	dec    %eax
f011ccae:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011ccb4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011ccba:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccbf:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011ccc5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cccb:	29 d0                	sub    %edx,%eax
f011cccd:	01 c1                	add    %eax,%ecx
f011cccf:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011ccd6:	10 00 00 
f011ccd9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ccde:	0f b6 c0             	movzbl %al,%eax
f011cce1:	c1 e0 04             	shl    $0x4,%eax
f011cce4:	89 c2                	mov    %eax,%edx
f011cce6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ccec:	01 d0                	add    %edx,%eax
f011ccee:	48                   	dec    %eax
f011ccef:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011ccf5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ccfb:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd00:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011cd06:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cd0c:	29 d0                	sub    %edx,%eax
f011cd0e:	01 c8                	add    %ecx,%eax
f011cd10:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011cd15:	29 c2                	sub    %eax,%edx
f011cd17:	89 d0                	mov    %edx,%eax
f011cd19:	83 ec 0c             	sub    $0xc,%esp
f011cd1c:	50                   	push   %eax
f011cd1d:	e8 44 ad fe ff       	call   f0107a66 <kmalloc>
f011cd22:	83 c4 10             	add    $0x10,%esp
f011cd25:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011cd2b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cd31:	85 c0                	test   %eax,%eax
f011cd33:	74 17                	je     f011cd4c <test_kmalloc_bestfit2+0x12c4>
f011cd35:	83 ec 04             	sub    $0x4,%esp
f011cd38:	68 44 bb 13 f0       	push   $0xf013bb44
f011cd3d:	68 ce 02 00 00       	push   $0x2ce
f011cd42:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cd47:	e8 b9 34 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011cd4c:	83 ec 0c             	sub    $0xc,%esp
f011cd4f:	68 a8 bb 13 f0       	push   $0xf013bba8
f011cd54:	e8 b5 3f fe ff       	call   f0100d0e <cprintf>
f011cd59:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011cd5c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011cd61:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011cd64:	5b                   	pop    %ebx
f011cd65:	5f                   	pop    %edi
f011cd66:	5d                   	pop    %ebp
f011cd67:	c3                   	ret    

f011cd68 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011cd68:	55                   	push   %ebp
f011cd69:	89 e5                	mov    %esp,%ebp
f011cd6b:	57                   	push   %edi
f011cd6c:	53                   	push   %ebx
f011cd6d:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011cd73:	83 ec 0c             	sub    $0xc,%esp
f011cd76:	68 3c b5 13 f0       	push   $0xf013b53c
f011cd7b:	e8 8e 3f fe ff       	call   f0100d0e <cprintf>
f011cd80:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cd83:	83 ec 0c             	sub    $0xc,%esp
f011cd86:	68 6c b5 13 f0       	push   $0xf013b56c
f011cd8b:	e8 7e 3f fe ff       	call   f0100d0e <cprintf>
f011cd90:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011cd93:	83 ec 0c             	sub    $0xc,%esp
f011cd96:	68 3c b5 13 f0       	push   $0xf013b53c
f011cd9b:	e8 6e 3f fe ff       	call   f0100d0e <cprintf>
f011cda0:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011cda3:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011cda9:	b9 14 00 00 00       	mov    $0x14,%ecx
f011cdae:	b8 00 00 00 00       	mov    $0x0,%eax
f011cdb3:	89 d7                	mov    %edx,%edi
f011cdb5:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdb7:	e8 b1 03 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011cdbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdbf:	e8 30 70 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011cdc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011cdc7:	83 ec 0c             	sub    $0xc,%esp
f011cdca:	68 00 fc 0f 00       	push   $0xffc00
f011cdcf:	e8 92 ac fe ff       	call   f0107a66 <kmalloc>
f011cdd4:	83 c4 10             	add    $0x10,%esp
f011cdd7:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cddd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011cde3:	89 c1                	mov    %eax,%ecx
f011cde5:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011cdec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011cdef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdf4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011cdf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cdfa:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdff:	f7 75 ec             	divl   -0x14(%ebp)
f011ce02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ce05:	29 d0                	sub    %edx,%eax
f011ce07:	89 c3                	mov    %eax,%ebx
f011ce09:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ce10:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ce15:	0f b6 d0             	movzbl %al,%edx
f011ce18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ce1b:	01 d0                	add    %edx,%eax
f011ce1d:	48                   	dec    %eax
f011ce1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ce21:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce24:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce29:	f7 75 e4             	divl   -0x1c(%ebp)
f011ce2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce2f:	29 d0                	sub    %edx,%eax
f011ce31:	01 c3                	add    %eax,%ebx
f011ce33:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ce3a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ce3f:	0f b6 c0             	movzbl %al,%eax
f011ce42:	c1 e0 04             	shl    $0x4,%eax
f011ce45:	89 c2                	mov    %eax,%edx
f011ce47:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ce4a:	01 d0                	add    %edx,%eax
f011ce4c:	48                   	dec    %eax
f011ce4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ce50:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce53:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce58:	f7 75 dc             	divl   -0x24(%ebp)
f011ce5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce5e:	29 d0                	sub    %edx,%eax
f011ce60:	01 d8                	add    %ebx,%eax
f011ce62:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ce67:	39 c1                	cmp    %eax,%ecx
f011ce69:	74 17                	je     f011ce82 <test_kmalloc_firstfit1+0x11a>
f011ce6b:	83 ec 04             	sub    $0x4,%esp
f011ce6e:	68 14 ba 13 f0       	push   $0xf013ba14
f011ce73:	68 e6 02 00 00       	push   $0x2e6
f011ce78:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ce7d:	e8 83 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce82:	e8 6d 6f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ce87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce8a:	74 17                	je     f011cea3 <test_kmalloc_firstfit1+0x13b>
f011ce8c:	83 ec 04             	sub    $0x4,%esp
f011ce8f:	68 14 b6 13 f0       	push   $0xf013b614
f011ce94:	68 e7 02 00 00       	push   $0x2e7
f011ce99:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ce9e:	e8 62 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cea3:	e8 c5 02 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011cea8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ceab:	29 c2                	sub    %eax,%edx
f011cead:	89 d0                	mov    %edx,%eax
f011ceaf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ceb4:	74 17                	je     f011cecd <test_kmalloc_firstfit1+0x165>
f011ceb6:	83 ec 04             	sub    $0x4,%esp
f011ceb9:	68 44 ba 13 f0       	push   $0xf013ba44
f011cebe:	68 e8 02 00 00       	push   $0x2e8
f011cec3:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cec8:	e8 38 33 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cecd:	e8 9b 02 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011ced2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ced5:	e8 1a 6f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ceda:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011cedd:	83 ec 0c             	sub    $0xc,%esp
f011cee0:	68 00 fc 0f 00       	push   $0xffc00
f011cee5:	e8 7c ab fe ff       	call   f0107a66 <kmalloc>
f011ceea:	83 c4 10             	add    $0x10,%esp
f011ceed:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cef3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cef9:	89 c1                	mov    %eax,%ecx
f011cefb:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cf02:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cf05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cf0d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cf10:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf15:	f7 75 d4             	divl   -0x2c(%ebp)
f011cf18:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cf1b:	29 d0                	sub    %edx,%eax
f011cf1d:	89 c3                	mov    %eax,%ebx
f011cf1f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cf26:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011cf2b:	0f b6 d0             	movzbl %al,%edx
f011cf2e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cf31:	01 d0                	add    %edx,%eax
f011cf33:	48                   	dec    %eax
f011cf34:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cf37:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf3f:	f7 75 cc             	divl   -0x34(%ebp)
f011cf42:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf45:	29 d0                	sub    %edx,%eax
f011cf47:	01 c3                	add    %eax,%ebx
f011cf49:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cf50:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011cf55:	0f b6 c0             	movzbl %al,%eax
f011cf58:	c1 e0 04             	shl    $0x4,%eax
f011cf5b:	89 c2                	mov    %eax,%edx
f011cf5d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cf60:	01 d0                	add    %edx,%eax
f011cf62:	48                   	dec    %eax
f011cf63:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cf66:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf69:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf6e:	f7 75 c4             	divl   -0x3c(%ebp)
f011cf71:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf74:	29 d0                	sub    %edx,%eax
f011cf76:	01 d8                	add    %ebx,%eax
f011cf78:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cf7d:	39 c1                	cmp    %eax,%ecx
f011cf7f:	74 17                	je     f011cf98 <test_kmalloc_firstfit1+0x230>
f011cf81:	83 ec 04             	sub    $0x4,%esp
f011cf84:	68 14 ba 13 f0       	push   $0xf013ba14
f011cf89:	68 ee 02 00 00       	push   $0x2ee
f011cf8e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cf93:	e8 6d 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf98:	e8 57 6e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011cf9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfa0:	74 17                	je     f011cfb9 <test_kmalloc_firstfit1+0x251>
f011cfa2:	83 ec 04             	sub    $0x4,%esp
f011cfa5:	68 14 b6 13 f0       	push   $0xf013b614
f011cfaa:	68 ef 02 00 00       	push   $0x2ef
f011cfaf:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cfb4:	e8 4c 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cfb9:	e8 af 01 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011cfbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfc1:	29 c2                	sub    %eax,%edx
f011cfc3:	89 d0                	mov    %edx,%eax
f011cfc5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cfca:	74 17                	je     f011cfe3 <test_kmalloc_firstfit1+0x27b>
f011cfcc:	83 ec 04             	sub    $0x4,%esp
f011cfcf:	68 44 ba 13 f0       	push   $0xf013ba44
f011cfd4:	68 f0 02 00 00       	push   $0x2f0
f011cfd9:	68 fa b5 13 f0       	push   $0xf013b5fa
f011cfde:	e8 22 32 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cfe3:	e8 85 01 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011cfe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfeb:	e8 04 6e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011cff0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cff3:	83 ec 0c             	sub    $0xc,%esp
f011cff6:	68 00 fc 0f 00       	push   $0xffc00
f011cffb:	e8 66 aa fe ff       	call   f0107a66 <kmalloc>
f011d000:	83 c4 10             	add    $0x10,%esp
f011d003:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d009:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d00f:	89 c1                	mov    %eax,%ecx
f011d011:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d018:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d01b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d020:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d023:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d026:	ba 00 00 00 00       	mov    $0x0,%edx
f011d02b:	f7 75 bc             	divl   -0x44(%ebp)
f011d02e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d031:	29 d0                	sub    %edx,%eax
f011d033:	89 c3                	mov    %eax,%ebx
f011d035:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d03c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d041:	0f b6 d0             	movzbl %al,%edx
f011d044:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d047:	01 d0                	add    %edx,%eax
f011d049:	48                   	dec    %eax
f011d04a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d04d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d050:	ba 00 00 00 00       	mov    $0x0,%edx
f011d055:	f7 75 b4             	divl   -0x4c(%ebp)
f011d058:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d05b:	29 d0                	sub    %edx,%eax
f011d05d:	01 c3                	add    %eax,%ebx
f011d05f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d066:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d06b:	0f b6 c0             	movzbl %al,%eax
f011d06e:	c1 e0 04             	shl    $0x4,%eax
f011d071:	89 c2                	mov    %eax,%edx
f011d073:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d076:	01 d0                	add    %edx,%eax
f011d078:	48                   	dec    %eax
f011d079:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d07c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d07f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d084:	f7 75 ac             	divl   -0x54(%ebp)
f011d087:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d08a:	29 d0                	sub    %edx,%eax
f011d08c:	01 d8                	add    %ebx,%eax
f011d08e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d093:	39 c1                	cmp    %eax,%ecx
f011d095:	74 17                	je     f011d0ae <test_kmalloc_firstfit1+0x346>
f011d097:	83 ec 04             	sub    $0x4,%esp
f011d09a:	68 14 ba 13 f0       	push   $0xf013ba14
f011d09f:	68 f6 02 00 00       	push   $0x2f6
f011d0a4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d0a9:	e8 57 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0ae:	e8 41 6d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d0b3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0b6:	74 17                	je     f011d0cf <test_kmalloc_firstfit1+0x367>
f011d0b8:	83 ec 04             	sub    $0x4,%esp
f011d0bb:	68 14 b6 13 f0       	push   $0xf013b614
f011d0c0:	68 f7 02 00 00       	push   $0x2f7
f011d0c5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d0ca:	e8 36 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d0cf:	e8 99 00 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011d0d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0d7:	29 c2                	sub    %eax,%edx
f011d0d9:	89 d0                	mov    %edx,%eax
f011d0db:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d0e0:	74 17                	je     f011d0f9 <test_kmalloc_firstfit1+0x391>
f011d0e2:	83 ec 04             	sub    $0x4,%esp
f011d0e5:	68 44 ba 13 f0       	push   $0xf013ba44
f011d0ea:	68 f8 02 00 00       	push   $0x2f8
f011d0ef:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d0f4:	e8 0c 31 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011d0f9:	e8 6f 00 ff ff       	call   f010d16d <sys_calculate_free_frames>
f011d0fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d101:	e8 ee 6c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d106:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011d109:	83 ec 0c             	sub    $0xc,%esp
f011d10c:	68 00 fc 0f 00       	push   $0xffc00
f011d111:	e8 50 a9 fe ff       	call   f0107a66 <kmalloc>
f011d116:	83 c4 10             	add    $0x10,%esp
f011d119:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011d11f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d125:	89 c1                	mov    %eax,%ecx
f011d127:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d12e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d131:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d136:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d139:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d13c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d141:	f7 75 a4             	divl   -0x5c(%ebp)
f011d144:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d147:	29 d0                	sub    %edx,%eax
f011d149:	89 c3                	mov    %eax,%ebx
f011d14b:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d152:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d157:	0f b6 d0             	movzbl %al,%edx
f011d15a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d15d:	01 d0                	add    %edx,%eax
f011d15f:	48                   	dec    %eax
f011d160:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d163:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d166:	ba 00 00 00 00       	mov    $0x0,%edx
f011d16b:	f7 75 9c             	divl   -0x64(%ebp)
f011d16e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d171:	29 d0                	sub    %edx,%eax
f011d173:	01 c3                	add    %eax,%ebx
f011d175:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d17c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d181:	0f b6 c0             	movzbl %al,%eax
f011d184:	c1 e0 04             	shl    $0x4,%eax
f011d187:	89 c2                	mov    %eax,%edx
f011d189:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d18c:	01 d0                	add    %edx,%eax
f011d18e:	48                   	dec    %eax
f011d18f:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d192:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d195:	ba 00 00 00 00       	mov    $0x0,%edx
f011d19a:	f7 75 94             	divl   -0x6c(%ebp)
f011d19d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d1a0:	29 d0                	sub    %edx,%eax
f011d1a2:	01 d8                	add    %ebx,%eax
f011d1a4:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011d1a9:	39 c1                	cmp    %eax,%ecx
f011d1ab:	74 17                	je     f011d1c4 <test_kmalloc_firstfit1+0x45c>
f011d1ad:	83 ec 04             	sub    $0x4,%esp
f011d1b0:	68 14 ba 13 f0       	push   $0xf013ba14
f011d1b5:	68 fe 02 00 00       	push   $0x2fe
f011d1ba:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d1bf:	e8 41 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1c4:	e8 2b 6c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d1c9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1cc:	74 17                	je     f011d1e5 <test_kmalloc_firstfit1+0x47d>
f011d1ce:	83 ec 04             	sub    $0x4,%esp
f011d1d1:	68 14 b6 13 f0       	push   $0xf013b614
f011d1d6:	68 ff 02 00 00       	push   $0x2ff
f011d1db:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d1e0:	e8 20 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d1e5:	e8 83 ff fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d1ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1ed:	29 c2                	sub    %eax,%edx
f011d1ef:	89 d0                	mov    %edx,%eax
f011d1f1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d1f6:	74 17                	je     f011d20f <test_kmalloc_firstfit1+0x4a7>
f011d1f8:	83 ec 04             	sub    $0x4,%esp
f011d1fb:	68 44 ba 13 f0       	push   $0xf013ba44
f011d200:	68 00 03 00 00       	push   $0x300
f011d205:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d20a:	e8 f6 2f fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d20f:	e8 59 ff fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d214:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d217:	e8 d8 6b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d21c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011d21f:	83 ec 0c             	sub    $0xc,%esp
f011d222:	68 00 fc 1f 00       	push   $0x1ffc00
f011d227:	e8 3a a8 fe ff       	call   f0107a66 <kmalloc>
f011d22c:	83 c4 10             	add    $0x10,%esp
f011d22f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d235:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d23b:	89 c1                	mov    %eax,%ecx
f011d23d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d244:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d247:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d24c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d24f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d252:	ba 00 00 00 00       	mov    $0x0,%edx
f011d257:	f7 75 8c             	divl   -0x74(%ebp)
f011d25a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d25d:	29 d0                	sub    %edx,%eax
f011d25f:	89 c3                	mov    %eax,%ebx
f011d261:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d268:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d26d:	0f b6 d0             	movzbl %al,%edx
f011d270:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d273:	01 d0                	add    %edx,%eax
f011d275:	48                   	dec    %eax
f011d276:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d279:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d27c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d281:	f7 75 84             	divl   -0x7c(%ebp)
f011d284:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d287:	29 d0                	sub    %edx,%eax
f011d289:	01 c3                	add    %eax,%ebx
f011d28b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d292:	10 00 00 
f011d295:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d29a:	0f b6 c0             	movzbl %al,%eax
f011d29d:	c1 e0 04             	shl    $0x4,%eax
f011d2a0:	89 c2                	mov    %eax,%edx
f011d2a2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d2a8:	01 d0                	add    %edx,%eax
f011d2aa:	48                   	dec    %eax
f011d2ab:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d2b1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d2b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2bc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d2c2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d2c8:	29 d0                	sub    %edx,%eax
f011d2ca:	01 d8                	add    %ebx,%eax
f011d2cc:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d2d1:	39 c1                	cmp    %eax,%ecx
f011d2d3:	74 17                	je     f011d2ec <test_kmalloc_firstfit1+0x584>
f011d2d5:	83 ec 04             	sub    $0x4,%esp
f011d2d8:	68 14 ba 13 f0       	push   $0xf013ba14
f011d2dd:	68 06 03 00 00       	push   $0x306
f011d2e2:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d2e7:	e8 19 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2ec:	e8 03 6b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d2f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2f4:	74 17                	je     f011d30d <test_kmalloc_firstfit1+0x5a5>
f011d2f6:	83 ec 04             	sub    $0x4,%esp
f011d2f9:	68 14 b6 13 f0       	push   $0xf013b614
f011d2fe:	68 07 03 00 00       	push   $0x307
f011d303:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d308:	e8 f8 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d30d:	e8 5b fe fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d312:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d315:	29 c2                	sub    %eax,%edx
f011d317:	89 d0                	mov    %edx,%eax
f011d319:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d31e:	74 17                	je     f011d337 <test_kmalloc_firstfit1+0x5cf>
f011d320:	83 ec 04             	sub    $0x4,%esp
f011d323:	68 44 ba 13 f0       	push   $0xf013ba44
f011d328:	68 08 03 00 00       	push   $0x308
f011d32d:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d332:	e8 ce 2e fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d337:	e8 31 fe fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d33c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d33f:	e8 b0 6a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d344:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011d347:	83 ec 0c             	sub    $0xc,%esp
f011d34a:	68 00 fc 1f 00       	push   $0x1ffc00
f011d34f:	e8 12 a7 fe ff       	call   f0107a66 <kmalloc>
f011d354:	83 c4 10             	add    $0x10,%esp
f011d357:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011d35d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d363:	89 c1                	mov    %eax,%ecx
f011d365:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d36c:	10 00 00 
f011d36f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d375:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d37a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d380:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d386:	ba 00 00 00 00       	mov    $0x0,%edx
f011d38b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d391:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d397:	29 d0                	sub    %edx,%eax
f011d399:	89 c3                	mov    %eax,%ebx
f011d39b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d3a2:	10 00 00 
f011d3a5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d3aa:	0f b6 d0             	movzbl %al,%edx
f011d3ad:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d3b3:	01 d0                	add    %edx,%eax
f011d3b5:	48                   	dec    %eax
f011d3b6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d3bc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3c7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d3cd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3d3:	29 d0                	sub    %edx,%eax
f011d3d5:	01 c3                	add    %eax,%ebx
f011d3d7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d3de:	10 00 00 
f011d3e1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d3e6:	0f b6 c0             	movzbl %al,%eax
f011d3e9:	c1 e0 04             	shl    $0x4,%eax
f011d3ec:	89 c2                	mov    %eax,%edx
f011d3ee:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d3f4:	01 d0                	add    %edx,%eax
f011d3f6:	48                   	dec    %eax
f011d3f7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d3fd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d403:	ba 00 00 00 00       	mov    $0x0,%edx
f011d408:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d40e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d414:	29 d0                	sub    %edx,%eax
f011d416:	01 d8                	add    %ebx,%eax
f011d418:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d41d:	39 c1                	cmp    %eax,%ecx
f011d41f:	74 17                	je     f011d438 <test_kmalloc_firstfit1+0x6d0>
f011d421:	83 ec 04             	sub    $0x4,%esp
f011d424:	68 14 ba 13 f0       	push   $0xf013ba14
f011d429:	68 0e 03 00 00       	push   $0x30e
f011d42e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d433:	e8 cd 2d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d438:	e8 b7 69 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d43d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d440:	74 17                	je     f011d459 <test_kmalloc_firstfit1+0x6f1>
f011d442:	83 ec 04             	sub    $0x4,%esp
f011d445:	68 14 b6 13 f0       	push   $0xf013b614
f011d44a:	68 0f 03 00 00       	push   $0x30f
f011d44f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d454:	e8 ac 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d459:	e8 0f fd fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d45e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d461:	29 c2                	sub    %eax,%edx
f011d463:	89 d0                	mov    %edx,%eax
f011d465:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d46a:	74 17                	je     f011d483 <test_kmalloc_firstfit1+0x71b>
f011d46c:	83 ec 04             	sub    $0x4,%esp
f011d46f:	68 44 ba 13 f0       	push   $0xf013ba44
f011d474:	68 10 03 00 00       	push   $0x310
f011d479:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d47e:	e8 82 2d fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d483:	e8 e5 fc fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d488:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d48b:	e8 64 69 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d490:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d493:	83 ec 0c             	sub    $0xc,%esp
f011d496:	68 00 fc 2f 00       	push   $0x2ffc00
f011d49b:	e8 c6 a5 fe ff       	call   f0107a66 <kmalloc>
f011d4a0:	83 c4 10             	add    $0x10,%esp
f011d4a3:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d4a9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d4af:	89 c1                	mov    %eax,%ecx
f011d4b1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d4b8:	10 00 00 
f011d4bb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d4c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4c6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d4cc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d4d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4d7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d4dd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d4e3:	29 d0                	sub    %edx,%eax
f011d4e5:	89 c3                	mov    %eax,%ebx
f011d4e7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d4ee:	10 00 00 
f011d4f1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d4f6:	0f b6 d0             	movzbl %al,%edx
f011d4f9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d4ff:	01 d0                	add    %edx,%eax
f011d501:	48                   	dec    %eax
f011d502:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d508:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d50e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d513:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d519:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d51f:	29 d0                	sub    %edx,%eax
f011d521:	01 c3                	add    %eax,%ebx
f011d523:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d52a:	10 00 00 
f011d52d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d532:	0f b6 c0             	movzbl %al,%eax
f011d535:	c1 e0 04             	shl    $0x4,%eax
f011d538:	89 c2                	mov    %eax,%edx
f011d53a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d540:	01 d0                	add    %edx,%eax
f011d542:	48                   	dec    %eax
f011d543:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d549:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d54f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d554:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d55a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d560:	29 d0                	sub    %edx,%eax
f011d562:	01 d8                	add    %ebx,%eax
f011d564:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d569:	39 c1                	cmp    %eax,%ecx
f011d56b:	74 17                	je     f011d584 <test_kmalloc_firstfit1+0x81c>
f011d56d:	83 ec 04             	sub    $0x4,%esp
f011d570:	68 14 ba 13 f0       	push   $0xf013ba14
f011d575:	68 16 03 00 00       	push   $0x316
f011d57a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d57f:	e8 81 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d584:	e8 6b 68 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d589:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d58c:	74 17                	je     f011d5a5 <test_kmalloc_firstfit1+0x83d>
f011d58e:	83 ec 04             	sub    $0x4,%esp
f011d591:	68 14 b6 13 f0       	push   $0xf013b614
f011d596:	68 17 03 00 00       	push   $0x317
f011d59b:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d5a0:	e8 60 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d5a5:	e8 c3 fb fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d5aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5ad:	29 c2                	sub    %eax,%edx
f011d5af:	89 d0                	mov    %edx,%eax
f011d5b1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d5b6:	74 17                	je     f011d5cf <test_kmalloc_firstfit1+0x867>
f011d5b8:	83 ec 04             	sub    $0x4,%esp
f011d5bb:	68 44 ba 13 f0       	push   $0xf013ba44
f011d5c0:	68 18 03 00 00       	push   $0x318
f011d5c5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d5ca:	e8 36 2c fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d5cf:	e8 99 fb fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d5d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5d7:	e8 18 68 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d5dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d5df:	83 ec 0c             	sub    $0xc,%esp
f011d5e2:	68 00 fc 2f 00       	push   $0x2ffc00
f011d5e7:	e8 7a a4 fe ff       	call   f0107a66 <kmalloc>
f011d5ec:	83 c4 10             	add    $0x10,%esp
f011d5ef:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d5f5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d5fb:	89 c1                	mov    %eax,%ecx
f011d5fd:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d604:	10 00 00 
f011d607:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d60d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d612:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d618:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d61e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d623:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d629:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d62f:	29 d0                	sub    %edx,%eax
f011d631:	89 c3                	mov    %eax,%ebx
f011d633:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d63a:	10 00 00 
f011d63d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d642:	0f b6 d0             	movzbl %al,%edx
f011d645:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d64b:	01 d0                	add    %edx,%eax
f011d64d:	48                   	dec    %eax
f011d64e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d654:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d65a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d65f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d665:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d66b:	29 d0                	sub    %edx,%eax
f011d66d:	01 c3                	add    %eax,%ebx
f011d66f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d676:	10 00 00 
f011d679:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d67e:	0f b6 c0             	movzbl %al,%eax
f011d681:	c1 e0 04             	shl    $0x4,%eax
f011d684:	89 c2                	mov    %eax,%edx
f011d686:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d68c:	01 d0                	add    %edx,%eax
f011d68e:	48                   	dec    %eax
f011d68f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d695:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d69b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6a0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d6a6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d6ac:	29 d0                	sub    %edx,%eax
f011d6ae:	01 d8                	add    %ebx,%eax
f011d6b0:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d6b5:	39 c1                	cmp    %eax,%ecx
f011d6b7:	74 17                	je     f011d6d0 <test_kmalloc_firstfit1+0x968>
f011d6b9:	83 ec 04             	sub    $0x4,%esp
f011d6bc:	68 14 ba 13 f0       	push   $0xf013ba14
f011d6c1:	68 1e 03 00 00       	push   $0x31e
f011d6c6:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d6cb:	e8 35 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6d0:	e8 1f 67 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d6d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6d8:	74 17                	je     f011d6f1 <test_kmalloc_firstfit1+0x989>
f011d6da:	83 ec 04             	sub    $0x4,%esp
f011d6dd:	68 14 b6 13 f0       	push   $0xf013b614
f011d6e2:	68 1f 03 00 00       	push   $0x31f
f011d6e7:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d6ec:	e8 14 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d6f1:	e8 77 fa fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d6f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6f9:	29 c2                	sub    %eax,%edx
f011d6fb:	89 d0                	mov    %edx,%eax
f011d6fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d702:	74 17                	je     f011d71b <test_kmalloc_firstfit1+0x9b3>
f011d704:	83 ec 04             	sub    $0x4,%esp
f011d707:	68 44 ba 13 f0       	push   $0xf013ba44
f011d70c:	68 20 03 00 00       	push   $0x320
f011d711:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d716:	e8 ea 2a fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d71b:	e8 4d fa fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d720:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d723:	e8 cc 66 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d728:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d72b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d731:	83 ec 0c             	sub    $0xc,%esp
f011d734:	50                   	push   %eax
f011d735:	e8 ec a3 fe ff       	call   f0107b26 <kfree>
f011d73a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d73d:	e8 b2 66 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d742:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d745:	74 17                	je     f011d75e <test_kmalloc_firstfit1+0x9f6>
f011d747:	83 ec 04             	sub    $0x4,%esp
f011d74a:	68 14 b6 13 f0       	push   $0xf013b614
f011d74f:	68 29 03 00 00       	push   $0x329
f011d754:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d759:	e8 a7 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d75e:	e8 0a fa fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d763:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d766:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d76b:	74 17                	je     f011d784 <test_kmalloc_firstfit1+0xa1c>
f011d76d:	83 ec 04             	sub    $0x4,%esp
f011d770:	68 57 ba 13 f0       	push   $0xf013ba57
f011d775:	68 2a 03 00 00       	push   $0x32a
f011d77a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d77f:	e8 81 2a fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d784:	e8 e4 f9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d789:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d78c:	e8 63 66 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d791:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d794:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d79a:	83 ec 0c             	sub    $0xc,%esp
f011d79d:	50                   	push   %eax
f011d79e:	e8 83 a3 fe ff       	call   f0107b26 <kfree>
f011d7a3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7a6:	e8 49 66 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d7ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7ae:	74 17                	je     f011d7c7 <test_kmalloc_firstfit1+0xa5f>
f011d7b0:	83 ec 04             	sub    $0x4,%esp
f011d7b3:	68 14 b6 13 f0       	push   $0xf013b614
f011d7b8:	68 30 03 00 00       	push   $0x330
f011d7bd:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d7c2:	e8 3e 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d7c7:	e8 a1 f9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d7cc:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d7cf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7d4:	74 17                	je     f011d7ed <test_kmalloc_firstfit1+0xa85>
f011d7d6:	83 ec 04             	sub    $0x4,%esp
f011d7d9:	68 57 ba 13 f0       	push   $0xf013ba57
f011d7de:	68 31 03 00 00       	push   $0x331
f011d7e3:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d7e8:	e8 18 2a fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d7ed:	e8 7b f9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d7f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7f5:	e8 fa 65 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d7fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d7fd:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d803:	83 ec 0c             	sub    $0xc,%esp
f011d806:	50                   	push   %eax
f011d807:	e8 1a a3 fe ff       	call   f0107b26 <kfree>
f011d80c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d80f:	e8 e0 65 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d814:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d817:	74 17                	je     f011d830 <test_kmalloc_firstfit1+0xac8>
f011d819:	83 ec 04             	sub    $0x4,%esp
f011d81c:	68 14 b6 13 f0       	push   $0xf013b614
f011d821:	68 37 03 00 00       	push   $0x337
f011d826:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d82b:	e8 d5 29 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d830:	e8 38 f9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d835:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d838:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d83d:	74 17                	je     f011d856 <test_kmalloc_firstfit1+0xaee>
f011d83f:	83 ec 04             	sub    $0x4,%esp
f011d842:	68 57 ba 13 f0       	push   $0xf013ba57
f011d847:	68 38 03 00 00       	push   $0x338
f011d84c:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d851:	e8 af 29 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d856:	e8 12 f9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d85b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d85e:	e8 91 65 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d863:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d866:	83 ec 0c             	sub    $0xc,%esp
f011d869:	68 00 fc 07 00       	push   $0x7fc00
f011d86e:	e8 f3 a1 fe ff       	call   f0107a66 <kmalloc>
f011d873:	83 c4 10             	add    $0x10,%esp
f011d876:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d87c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d882:	89 c1                	mov    %eax,%ecx
f011d884:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d88b:	10 00 00 
f011d88e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d894:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d899:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d89f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d8a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8aa:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d8b0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d8b6:	29 d0                	sub    %edx,%eax
f011d8b8:	89 c3                	mov    %eax,%ebx
f011d8ba:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d8c1:	10 00 00 
f011d8c4:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d8c9:	0f b6 d0             	movzbl %al,%edx
f011d8cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d8d2:	01 d0                	add    %edx,%eax
f011d8d4:	48                   	dec    %eax
f011d8d5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d8db:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8e6:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d8ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8f2:	29 d0                	sub    %edx,%eax
f011d8f4:	01 c3                	add    %eax,%ebx
f011d8f6:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d8fd:	10 00 00 
f011d900:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011d905:	0f b6 c0             	movzbl %al,%eax
f011d908:	c1 e0 04             	shl    $0x4,%eax
f011d90b:	89 c2                	mov    %eax,%edx
f011d90d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d913:	01 d0                	add    %edx,%eax
f011d915:	48                   	dec    %eax
f011d916:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d91c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d922:	ba 00 00 00 00       	mov    $0x0,%edx
f011d927:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d92d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d933:	29 d0                	sub    %edx,%eax
f011d935:	01 d8                	add    %ebx,%eax
f011d937:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d93c:	39 c1                	cmp    %eax,%ecx
f011d93e:	74 17                	je     f011d957 <test_kmalloc_firstfit1+0xbef>
f011d940:	83 ec 04             	sub    $0x4,%esp
f011d943:	68 14 ba 13 f0       	push   $0xf013ba14
f011d948:	68 41 03 00 00       	push   $0x341
f011d94d:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d952:	e8 ae 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d957:	e8 98 64 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d95c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d95f:	74 17                	je     f011d978 <test_kmalloc_firstfit1+0xc10>
f011d961:	83 ec 04             	sub    $0x4,%esp
f011d964:	68 14 b6 13 f0       	push   $0xf013b614
f011d969:	68 42 03 00 00       	push   $0x342
f011d96e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d973:	e8 8d 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d978:	e8 f0 f7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d97d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d980:	29 c2                	sub    %eax,%edx
f011d982:	89 d0                	mov    %edx,%eax
f011d984:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d989:	74 17                	je     f011d9a2 <test_kmalloc_firstfit1+0xc3a>
f011d98b:	83 ec 04             	sub    $0x4,%esp
f011d98e:	68 44 ba 13 f0       	push   $0xf013ba44
f011d993:	68 43 03 00 00       	push   $0x343
f011d998:	68 fa b5 13 f0       	push   $0xf013b5fa
f011d99d:	e8 63 28 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d9a2:	e8 c6 f7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011d9a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9aa:	e8 45 64 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011d9af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d9b2:	83 ec 0c             	sub    $0xc,%esp
f011d9b5:	68 00 fc 0f 00       	push   $0xffc00
f011d9ba:	e8 a7 a0 fe ff       	call   f0107a66 <kmalloc>
f011d9bf:	83 c4 10             	add    $0x10,%esp
f011d9c2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d9c8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d9ce:	89 c1                	mov    %eax,%ecx
f011d9d0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d9d7:	10 00 00 
f011d9da:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d9e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9e5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d9eb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d9f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9f6:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d9fc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011da02:	29 d0                	sub    %edx,%eax
f011da04:	89 c3                	mov    %eax,%ebx
f011da06:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011da0d:	10 00 00 
f011da10:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011da15:	0f b6 d0             	movzbl %al,%edx
f011da18:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011da1e:	01 d0                	add    %edx,%eax
f011da20:	48                   	dec    %eax
f011da21:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011da27:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011da32:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011da38:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da3e:	29 d0                	sub    %edx,%eax
f011da40:	01 c3                	add    %eax,%ebx
f011da42:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011da49:	10 00 00 
f011da4c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011da51:	0f b6 c0             	movzbl %al,%eax
f011da54:	c1 e0 04             	shl    $0x4,%eax
f011da57:	89 c2                	mov    %eax,%edx
f011da59:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011da5f:	01 d0                	add    %edx,%eax
f011da61:	48                   	dec    %eax
f011da62:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011da68:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011da73:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011da79:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da7f:	29 d0                	sub    %edx,%eax
f011da81:	01 d8                	add    %ebx,%eax
f011da83:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011da88:	39 c1                	cmp    %eax,%ecx
f011da8a:	74 17                	je     f011daa3 <test_kmalloc_firstfit1+0xd3b>
f011da8c:	83 ec 04             	sub    $0x4,%esp
f011da8f:	68 14 ba 13 f0       	push   $0xf013ba14
f011da94:	68 49 03 00 00       	push   $0x349
f011da99:	68 fa b5 13 f0       	push   $0xf013b5fa
f011da9e:	e8 62 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011daa3:	e8 4c 63 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011daa8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011daab:	74 17                	je     f011dac4 <test_kmalloc_firstfit1+0xd5c>
f011daad:	83 ec 04             	sub    $0x4,%esp
f011dab0:	68 14 b6 13 f0       	push   $0xf013b614
f011dab5:	68 4a 03 00 00       	push   $0x34a
f011daba:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dabf:	e8 41 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dac4:	e8 a4 f6 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011dac9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dacc:	29 c2                	sub    %eax,%edx
f011dace:	89 d0                	mov    %edx,%eax
f011dad0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dad5:	74 17                	je     f011daee <test_kmalloc_firstfit1+0xd86>
f011dad7:	83 ec 04             	sub    $0x4,%esp
f011dada:	68 44 ba 13 f0       	push   $0xf013ba44
f011dadf:	68 4b 03 00 00       	push   $0x34b
f011dae4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dae9:	e8 17 27 fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011daee:	e8 7a f6 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011daf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011daf6:	e8 f9 62 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011dafb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011dafe:	83 ec 0c             	sub    $0xc,%esp
f011db01:	68 00 fc 03 00       	push   $0x3fc00
f011db06:	e8 5b 9f fe ff       	call   f0107a66 <kmalloc>
f011db0b:	83 c4 10             	add    $0x10,%esp
f011db0e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011db14:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011db1a:	89 c1                	mov    %eax,%ecx
f011db1c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011db23:	10 00 00 
f011db26:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011db2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db31:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011db37:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011db42:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011db48:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db4e:	29 d0                	sub    %edx,%eax
f011db50:	89 c3                	mov    %eax,%ebx
f011db52:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011db59:	10 00 00 
f011db5c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011db61:	0f b6 d0             	movzbl %al,%edx
f011db64:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011db6a:	01 d0                	add    %edx,%eax
f011db6c:	48                   	dec    %eax
f011db6d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011db73:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db79:	ba 00 00 00 00       	mov    $0x0,%edx
f011db7e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011db84:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db8a:	29 d0                	sub    %edx,%eax
f011db8c:	01 c3                	add    %eax,%ebx
f011db8e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011db95:	10 00 00 
f011db98:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011db9d:	0f b6 c0             	movzbl %al,%eax
f011dba0:	c1 e0 04             	shl    $0x4,%eax
f011dba3:	89 c2                	mov    %eax,%edx
f011dba5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011dbab:	01 d0                	add    %edx,%eax
f011dbad:	48                   	dec    %eax
f011dbae:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011dbb4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dbba:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbbf:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011dbc5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dbcb:	29 d0                	sub    %edx,%eax
f011dbcd:	01 d8                	add    %ebx,%eax
f011dbcf:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011dbd4:	39 c1                	cmp    %eax,%ecx
f011dbd6:	74 17                	je     f011dbef <test_kmalloc_firstfit1+0xe87>
f011dbd8:	83 ec 04             	sub    $0x4,%esp
f011dbdb:	68 14 ba 13 f0       	push   $0xf013ba14
f011dbe0:	68 52 03 00 00       	push   $0x352
f011dbe5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dbea:	e8 16 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbef:	e8 00 62 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011dbf4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dbf7:	74 17                	je     f011dc10 <test_kmalloc_firstfit1+0xea8>
f011dbf9:	83 ec 04             	sub    $0x4,%esp
f011dbfc:	68 14 b6 13 f0       	push   $0xf013b614
f011dc01:	68 53 03 00 00       	push   $0x353
f011dc06:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dc0b:	e8 f5 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011dc10:	e8 58 f5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011dc15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dc18:	29 c2                	sub    %eax,%edx
f011dc1a:	89 d0                	mov    %edx,%eax
f011dc1c:	83 f8 40             	cmp    $0x40,%eax
f011dc1f:	74 17                	je     f011dc38 <test_kmalloc_firstfit1+0xed0>
f011dc21:	83 ec 04             	sub    $0x4,%esp
f011dc24:	68 44 ba 13 f0       	push   $0xf013ba44
f011dc29:	68 54 03 00 00       	push   $0x354
f011dc2e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dc33:	e8 cd 25 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011dc38:	e8 30 f5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011dc3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc40:	e8 af 61 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011dc45:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011dc48:	83 ec 0c             	sub    $0xc,%esp
f011dc4b:	68 00 00 20 00       	push   $0x200000
f011dc50:	e8 11 9e fe ff       	call   f0107a66 <kmalloc>
f011dc55:	83 c4 10             	add    $0x10,%esp
f011dc58:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011dc5e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011dc64:	89 c1                	mov    %eax,%ecx
f011dc66:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011dc6d:	10 00 00 
f011dc70:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011dc76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc7b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011dc81:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dc87:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc8c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011dc92:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dc98:	29 d0                	sub    %edx,%eax
f011dc9a:	89 c3                	mov    %eax,%ebx
f011dc9c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011dca3:	10 00 00 
f011dca6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011dcab:	0f b6 d0             	movzbl %al,%edx
f011dcae:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011dcb4:	01 d0                	add    %edx,%eax
f011dcb6:	48                   	dec    %eax
f011dcb7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011dcbd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dcc3:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcc8:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011dcce:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dcd4:	29 d0                	sub    %edx,%eax
f011dcd6:	01 c3                	add    %eax,%ebx
f011dcd8:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011dcdf:	10 00 00 
f011dce2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011dce7:	0f b6 c0             	movzbl %al,%eax
f011dcea:	c1 e0 04             	shl    $0x4,%eax
f011dced:	89 c2                	mov    %eax,%edx
f011dcef:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011dcf5:	01 d0                	add    %edx,%eax
f011dcf7:	48                   	dec    %eax
f011dcf8:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011dcfe:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dd04:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd09:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011dd0f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dd15:	29 d0                	sub    %edx,%eax
f011dd17:	01 d8                	add    %ebx,%eax
f011dd19:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011dd1e:	39 c1                	cmp    %eax,%ecx
f011dd20:	74 17                	je     f011dd39 <test_kmalloc_firstfit1+0xfd1>
f011dd22:	83 ec 04             	sub    $0x4,%esp
f011dd25:	68 14 ba 13 f0       	push   $0xf013ba14
f011dd2a:	68 5a 03 00 00       	push   $0x35a
f011dd2f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dd34:	e8 cc 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dd39:	e8 2f f4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011dd3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dd41:	29 c2                	sub    %eax,%edx
f011dd43:	89 d0                	mov    %edx,%eax
f011dd45:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dd4a:	74 17                	je     f011dd63 <test_kmalloc_firstfit1+0xffb>
f011dd4c:	83 ec 04             	sub    $0x4,%esp
f011dd4f:	68 44 ba 13 f0       	push   $0xf013ba44
f011dd54:	68 5b 03 00 00       	push   $0x35b
f011dd59:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dd5e:	e8 a2 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd63:	e8 8c 60 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011dd68:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dd6b:	74 17                	je     f011dd84 <test_kmalloc_firstfit1+0x101c>
f011dd6d:	83 ec 04             	sub    $0x4,%esp
f011dd70:	68 14 b6 13 f0       	push   $0xf013b614
f011dd75:	68 5c 03 00 00       	push   $0x35c
f011dd7a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dd7f:	e8 81 24 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011dd84:	e8 e4 f3 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011dd89:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd8c:	e8 63 60 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011dd91:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011dd94:	83 ec 0c             	sub    $0xc,%esp
f011dd97:	68 00 fc 3f 00       	push   $0x3ffc00
f011dd9c:	e8 c5 9c fe ff       	call   f0107a66 <kmalloc>
f011dda1:	83 c4 10             	add    $0x10,%esp
f011dda4:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011ddaa:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ddb0:	89 c1                	mov    %eax,%ecx
f011ddb2:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ddb9:	10 00 00 
f011ddbc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ddc2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ddc7:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ddcd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ddd3:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddd8:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ddde:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011dde4:	29 d0                	sub    %edx,%eax
f011dde6:	89 c3                	mov    %eax,%ebx
f011dde8:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ddef:	10 00 00 
f011ddf2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ddf7:	0f b6 d0             	movzbl %al,%edx
f011ddfa:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011de00:	01 d0                	add    %edx,%eax
f011de02:	48                   	dec    %eax
f011de03:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011de09:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011de0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011de14:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011de1a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011de20:	29 d0                	sub    %edx,%eax
f011de22:	01 c3                	add    %eax,%ebx
f011de24:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011de2b:	10 00 00 
f011de2e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011de33:	0f b6 c0             	movzbl %al,%eax
f011de36:	c1 e0 04             	shl    $0x4,%eax
f011de39:	89 c2                	mov    %eax,%edx
f011de3b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011de41:	01 d0                	add    %edx,%eax
f011de43:	48                   	dec    %eax
f011de44:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011de4a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011de50:	ba 00 00 00 00       	mov    $0x0,%edx
f011de55:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011de5b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011de61:	29 d0                	sub    %edx,%eax
f011de63:	01 d8                	add    %ebx,%eax
f011de65:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011de6a:	39 c1                	cmp    %eax,%ecx
f011de6c:	74 17                	je     f011de85 <test_kmalloc_firstfit1+0x111d>
f011de6e:	83 ec 04             	sub    $0x4,%esp
f011de71:	68 14 ba 13 f0       	push   $0xf013ba14
f011de76:	68 63 03 00 00       	push   $0x363
f011de7b:	68 fa b5 13 f0       	push   $0xf013b5fa
f011de80:	e8 80 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de85:	e8 6a 5f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011de8a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011de8d:	74 17                	je     f011dea6 <test_kmalloc_firstfit1+0x113e>
f011de8f:	83 ec 04             	sub    $0x4,%esp
f011de92:	68 14 b6 13 f0       	push   $0xf013b614
f011de97:	68 64 03 00 00       	push   $0x364
f011de9c:	68 fa b5 13 f0       	push   $0xf013b5fa
f011dea1:	e8 5f 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011dea6:	e8 c2 f2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011deab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011deae:	29 c2                	sub    %eax,%edx
f011deb0:	89 d0                	mov    %edx,%eax
f011deb2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011deb7:	74 17                	je     f011ded0 <test_kmalloc_firstfit1+0x1168>
f011deb9:	83 ec 04             	sub    $0x4,%esp
f011debc:	68 44 ba 13 f0       	push   $0xf013ba44
f011dec1:	68 65 03 00 00       	push   $0x365
f011dec6:	68 fa b5 13 f0       	push   $0xf013b5fa
f011decb:	e8 35 23 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011ded0:	e8 98 f2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ded5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ded8:	e8 17 5f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011dedd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011dee0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011dee6:	83 ec 0c             	sub    $0xc,%esp
f011dee9:	50                   	push   %eax
f011deea:	e8 37 9c fe ff       	call   f0107b26 <kfree>
f011deef:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011def2:	e8 fd 5e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011def7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011defa:	74 17                	je     f011df13 <test_kmalloc_firstfit1+0x11ab>
f011defc:	83 ec 04             	sub    $0x4,%esp
f011deff:	68 14 b6 13 f0       	push   $0xf013b614
f011df04:	68 6e 03 00 00       	push   $0x36e
f011df09:	68 fa b5 13 f0       	push   $0xf013b5fa
f011df0e:	e8 f2 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011df13:	e8 55 f2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011df18:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011df1b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011df20:	74 17                	je     f011df39 <test_kmalloc_firstfit1+0x11d1>
f011df22:	83 ec 04             	sub    $0x4,%esp
f011df25:	68 57 ba 13 f0       	push   $0xf013ba57
f011df2a:	68 6f 03 00 00       	push   $0x36f
f011df2f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011df34:	e8 cc 22 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011df39:	e8 2f f2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011df3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df41:	e8 ae 5e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011df46:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011df49:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011df4f:	83 ec 0c             	sub    $0xc,%esp
f011df52:	50                   	push   %eax
f011df53:	e8 ce 9b fe ff       	call   f0107b26 <kfree>
f011df58:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df5b:	e8 94 5e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011df60:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011df63:	74 17                	je     f011df7c <test_kmalloc_firstfit1+0x1214>
f011df65:	83 ec 04             	sub    $0x4,%esp
f011df68:	68 14 b6 13 f0       	push   $0xf013b614
f011df6d:	68 75 03 00 00       	push   $0x375
f011df72:	68 fa b5 13 f0       	push   $0xf013b5fa
f011df77:	e8 89 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011df7c:	e8 ec f1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011df81:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011df84:	3d 00 01 00 00       	cmp    $0x100,%eax
f011df89:	74 17                	je     f011dfa2 <test_kmalloc_firstfit1+0x123a>
f011df8b:	83 ec 04             	sub    $0x4,%esp
f011df8e:	68 57 ba 13 f0       	push   $0xf013ba57
f011df93:	68 76 03 00 00       	push   $0x376
f011df98:	68 fa b5 13 f0       	push   $0xf013b5fa
f011df9d:	e8 63 22 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011dfa2:	e8 c6 f1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011dfa7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfaa:	e8 45 5e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011dfaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011dfb2:	83 ec 0c             	sub    $0xc,%esp
f011dfb5:	68 00 00 10 00       	push   $0x100000
f011dfba:	e8 a7 9a fe ff       	call   f0107a66 <kmalloc>
f011dfbf:	83 c4 10             	add    $0x10,%esp
f011dfc2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011dfc8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011dfce:	89 c1                	mov    %eax,%ecx
f011dfd0:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011dfd7:	10 00 00 
f011dfda:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dfe0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfe5:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011dfeb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dff1:	ba 00 00 00 00       	mov    $0x0,%edx
f011dff6:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011dffc:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e002:	29 d0                	sub    %edx,%eax
f011e004:	89 c3                	mov    %eax,%ebx
f011e006:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011e00d:	10 00 00 
f011e010:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e015:	0f b6 d0             	movzbl %al,%edx
f011e018:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e01e:	01 d0                	add    %edx,%eax
f011e020:	48                   	dec    %eax
f011e021:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011e027:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e02d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e032:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011e038:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e03e:	29 d0                	sub    %edx,%eax
f011e040:	01 c3                	add    %eax,%ebx
f011e042:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011e049:	10 00 00 
f011e04c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e051:	0f b6 c0             	movzbl %al,%eax
f011e054:	c1 e0 04             	shl    $0x4,%eax
f011e057:	89 c2                	mov    %eax,%edx
f011e059:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e05f:	01 d0                	add    %edx,%eax
f011e061:	48                   	dec    %eax
f011e062:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011e068:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e06e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e073:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011e079:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e07f:	29 d0                	sub    %edx,%eax
f011e081:	01 d8                	add    %ebx,%eax
f011e083:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011e088:	39 c1                	cmp    %eax,%ecx
f011e08a:	74 17                	je     f011e0a3 <test_kmalloc_firstfit1+0x133b>
f011e08c:	83 ec 04             	sub    $0x4,%esp
f011e08f:	68 14 ba 13 f0       	push   $0xf013ba14
f011e094:	68 80 03 00 00       	push   $0x380
f011e099:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e09e:	e8 62 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0a3:	e8 4c 5d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e0a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011e0ab:	74 17                	je     f011e0c4 <test_kmalloc_firstfit1+0x135c>
f011e0ad:	83 ec 04             	sub    $0x4,%esp
f011e0b0:	68 14 b6 13 f0       	push   $0xf013b614
f011e0b5:	68 81 03 00 00       	push   $0x381
f011e0ba:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e0bf:	e8 41 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011e0c4:	e8 a4 f0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e0c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011e0cc:	29 c2                	sub    %eax,%edx
f011e0ce:	89 d0                	mov    %edx,%eax
f011e0d0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e0d5:	74 17                	je     f011e0ee <test_kmalloc_firstfit1+0x1386>
f011e0d7:	83 ec 04             	sub    $0x4,%esp
f011e0da:	68 44 ba 13 f0       	push   $0xf013ba44
f011e0df:	68 82 03 00 00       	push   $0x382
f011e0e4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e0e9:	e8 17 21 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011e0ee:	83 ec 0c             	sub    $0xc,%esp
f011e0f1:	68 f0 bb 13 f0       	push   $0xf013bbf0
f011e0f6:	e8 13 2c fe ff       	call   f0100d0e <cprintf>
f011e0fb:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e0fe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e103:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e106:	5b                   	pop    %ebx
f011e107:	5f                   	pop    %edi
f011e108:	5d                   	pop    %ebp
f011e109:	c3                   	ret    

f011e10a <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011e10a:	55                   	push   %ebp
f011e10b:	89 e5                	mov    %esp,%ebp
f011e10d:	57                   	push   %edi
f011e10e:	53                   	push   %ebx
f011e10f:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011e115:	83 ec 0c             	sub    $0xc,%esp
f011e118:	68 3c b5 13 f0       	push   $0xf013b53c
f011e11d:	e8 ec 2b fe ff       	call   f0100d0e <cprintf>
f011e122:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e125:	83 ec 0c             	sub    $0xc,%esp
f011e128:	68 6c b5 13 f0       	push   $0xf013b56c
f011e12d:	e8 dc 2b fe ff       	call   f0100d0e <cprintf>
f011e132:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e135:	83 ec 0c             	sub    $0xc,%esp
f011e138:	68 3c b5 13 f0       	push   $0xf013b53c
f011e13d:	e8 cc 2b fe ff       	call   f0100d0e <cprintf>
f011e142:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011e145:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011e14b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e150:	b8 00 00 00 00       	mov    $0x0,%eax
f011e155:	89 d7                	mov    %edx,%edi
f011e157:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011e159:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011e160:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e163:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e168:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011e16b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e16e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e173:	f7 75 f4             	divl   -0xc(%ebp)
f011e176:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e179:	29 d0                	sub    %edx,%eax
f011e17b:	89 c1                	mov    %eax,%ecx
f011e17d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011e184:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e189:	0f b6 d0             	movzbl %al,%edx
f011e18c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e18f:	01 d0                	add    %edx,%eax
f011e191:	48                   	dec    %eax
f011e192:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011e195:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e198:	ba 00 00 00 00       	mov    $0x0,%edx
f011e19d:	f7 75 ec             	divl   -0x14(%ebp)
f011e1a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e1a3:	29 d0                	sub    %edx,%eax
f011e1a5:	01 c1                	add    %eax,%ecx
f011e1a7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e1ae:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e1b3:	0f b6 c0             	movzbl %al,%eax
f011e1b6:	c1 e0 04             	shl    $0x4,%eax
f011e1b9:	89 c2                	mov    %eax,%edx
f011e1bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e1be:	01 d0                	add    %edx,%eax
f011e1c0:	48                   	dec    %eax
f011e1c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e1c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1cc:	f7 75 e4             	divl   -0x1c(%ebp)
f011e1cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1d2:	29 d0                	sub    %edx,%eax
f011e1d4:	01 c8                	add    %ecx,%eax
f011e1d6:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011e1db:	29 c2                	sub    %eax,%edx
f011e1dd:	89 d0                	mov    %edx,%eax
f011e1df:	83 ec 0c             	sub    $0xc,%esp
f011e1e2:	50                   	push   %eax
f011e1e3:	e8 7e 98 fe ff       	call   f0107a66 <kmalloc>
f011e1e8:	83 c4 10             	add    $0x10,%esp
f011e1eb:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011e1f1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e1f7:	85 c0                	test   %eax,%eax
f011e1f9:	74 17                	je     f011e212 <test_kmalloc_firstfit2+0x108>
f011e1fb:	83 ec 04             	sub    $0x4,%esp
f011e1fe:	68 3c bc 13 f0       	push   $0xf013bc3c
f011e203:	68 97 03 00 00       	push   $0x397
f011e208:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e20d:	e8 f3 1f fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e212:	e8 56 ef fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e217:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e21a:	e8 d5 5b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e21f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e222:	83 ec 0c             	sub    $0xc,%esp
f011e225:	68 00 fc 1f 00       	push   $0x1ffc00
f011e22a:	e8 37 98 fe ff       	call   f0107a66 <kmalloc>
f011e22f:	83 c4 10             	add    $0x10,%esp
f011e232:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e238:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e23e:	89 c1                	mov    %eax,%ecx
f011e240:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e247:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e24a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e24f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e252:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e255:	ba 00 00 00 00       	mov    $0x0,%edx
f011e25a:	f7 75 d4             	divl   -0x2c(%ebp)
f011e25d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e260:	29 d0                	sub    %edx,%eax
f011e262:	89 c3                	mov    %eax,%ebx
f011e264:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e26b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e270:	0f b6 d0             	movzbl %al,%edx
f011e273:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e276:	01 d0                	add    %edx,%eax
f011e278:	48                   	dec    %eax
f011e279:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e27c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e27f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e284:	f7 75 cc             	divl   -0x34(%ebp)
f011e287:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e28a:	29 d0                	sub    %edx,%eax
f011e28c:	01 c3                	add    %eax,%ebx
f011e28e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e295:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e29a:	0f b6 c0             	movzbl %al,%eax
f011e29d:	c1 e0 04             	shl    $0x4,%eax
f011e2a0:	89 c2                	mov    %eax,%edx
f011e2a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e2a5:	01 d0                	add    %edx,%eax
f011e2a7:	48                   	dec    %eax
f011e2a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e2ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e2ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2b3:	f7 75 c4             	divl   -0x3c(%ebp)
f011e2b6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e2b9:	29 d0                	sub    %edx,%eax
f011e2bb:	01 d8                	add    %ebx,%eax
f011e2bd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e2c2:	39 c1                	cmp    %eax,%ecx
f011e2c4:	74 17                	je     f011e2dd <test_kmalloc_firstfit2+0x1d3>
f011e2c6:	83 ec 04             	sub    $0x4,%esp
f011e2c9:	68 14 ba 13 f0       	push   $0xf013ba14
f011e2ce:	68 a1 03 00 00       	push   $0x3a1
f011e2d3:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e2d8:	e8 28 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2dd:	e8 12 5b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e2e2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2e5:	74 17                	je     f011e2fe <test_kmalloc_firstfit2+0x1f4>
f011e2e7:	83 ec 04             	sub    $0x4,%esp
f011e2ea:	68 14 b6 13 f0       	push   $0xf013b614
f011e2ef:	68 a2 03 00 00       	push   $0x3a2
f011e2f4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e2f9:	e8 07 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e2fe:	e8 6a ee fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e303:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e306:	29 c2                	sub    %eax,%edx
f011e308:	89 d0                	mov    %edx,%eax
f011e30a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e30f:	74 17                	je     f011e328 <test_kmalloc_firstfit2+0x21e>
f011e311:	83 ec 04             	sub    $0x4,%esp
f011e314:	68 44 ba 13 f0       	push   $0xf013ba44
f011e319:	68 a3 03 00 00       	push   $0x3a3
f011e31e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e323:	e8 dd 1e fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e328:	e8 40 ee fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e32d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e330:	e8 bf 5a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e335:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e338:	83 ec 0c             	sub    $0xc,%esp
f011e33b:	68 00 fc 1f 00       	push   $0x1ffc00
f011e340:	e8 21 97 fe ff       	call   f0107a66 <kmalloc>
f011e345:	83 c4 10             	add    $0x10,%esp
f011e348:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011e34e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e354:	89 c1                	mov    %eax,%ecx
f011e356:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e35d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e360:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e365:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e368:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e36b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e370:	f7 75 bc             	divl   -0x44(%ebp)
f011e373:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e376:	29 d0                	sub    %edx,%eax
f011e378:	89 c3                	mov    %eax,%ebx
f011e37a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e381:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e386:	0f b6 d0             	movzbl %al,%edx
f011e389:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e38c:	01 d0                	add    %edx,%eax
f011e38e:	48                   	dec    %eax
f011e38f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e392:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e395:	ba 00 00 00 00       	mov    $0x0,%edx
f011e39a:	f7 75 b4             	divl   -0x4c(%ebp)
f011e39d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e3a0:	29 d0                	sub    %edx,%eax
f011e3a2:	01 c3                	add    %eax,%ebx
f011e3a4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e3ab:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e3b0:	0f b6 c0             	movzbl %al,%eax
f011e3b3:	c1 e0 04             	shl    $0x4,%eax
f011e3b6:	89 c2                	mov    %eax,%edx
f011e3b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e3bb:	01 d0                	add    %edx,%eax
f011e3bd:	48                   	dec    %eax
f011e3be:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e3c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3c9:	f7 75 ac             	divl   -0x54(%ebp)
f011e3cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3cf:	29 d0                	sub    %edx,%eax
f011e3d1:	01 d8                	add    %ebx,%eax
f011e3d3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011e3d8:	39 c1                	cmp    %eax,%ecx
f011e3da:	74 17                	je     f011e3f3 <test_kmalloc_firstfit2+0x2e9>
f011e3dc:	83 ec 04             	sub    $0x4,%esp
f011e3df:	68 14 ba 13 f0       	push   $0xf013ba14
f011e3e4:	68 a9 03 00 00       	push   $0x3a9
f011e3e9:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e3ee:	e8 12 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3f3:	e8 fc 59 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e3f8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e3fb:	74 17                	je     f011e414 <test_kmalloc_firstfit2+0x30a>
f011e3fd:	83 ec 04             	sub    $0x4,%esp
f011e400:	68 14 b6 13 f0       	push   $0xf013b614
f011e405:	68 aa 03 00 00       	push   $0x3aa
f011e40a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e40f:	e8 f1 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e414:	e8 54 ed fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e419:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e41c:	29 c2                	sub    %eax,%edx
f011e41e:	89 d0                	mov    %edx,%eax
f011e420:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e425:	74 17                	je     f011e43e <test_kmalloc_firstfit2+0x334>
f011e427:	83 ec 04             	sub    $0x4,%esp
f011e42a:	68 44 ba 13 f0       	push   $0xf013ba44
f011e42f:	68 ab 03 00 00       	push   $0x3ab
f011e434:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e439:	e8 c7 1d fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e43e:	e8 2a ed fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e443:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e446:	e8 a9 59 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e44b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e44e:	83 ec 0c             	sub    $0xc,%esp
f011e451:	68 00 08 00 00       	push   $0x800
f011e456:	e8 0b 96 fe ff       	call   f0107a66 <kmalloc>
f011e45b:	83 c4 10             	add    $0x10,%esp
f011e45e:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e464:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e46a:	89 c1                	mov    %eax,%ecx
f011e46c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e473:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e476:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e47b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e47e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e481:	ba 00 00 00 00       	mov    $0x0,%edx
f011e486:	f7 75 a4             	divl   -0x5c(%ebp)
f011e489:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e48c:	29 d0                	sub    %edx,%eax
f011e48e:	89 c3                	mov    %eax,%ebx
f011e490:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e497:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e49c:	0f b6 d0             	movzbl %al,%edx
f011e49f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e4a2:	01 d0                	add    %edx,%eax
f011e4a4:	48                   	dec    %eax
f011e4a5:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e4a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e4ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4b0:	f7 75 9c             	divl   -0x64(%ebp)
f011e4b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e4b6:	29 d0                	sub    %edx,%eax
f011e4b8:	01 c3                	add    %eax,%ebx
f011e4ba:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e4c1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e4c6:	0f b6 c0             	movzbl %al,%eax
f011e4c9:	c1 e0 04             	shl    $0x4,%eax
f011e4cc:	89 c2                	mov    %eax,%edx
f011e4ce:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e4d1:	01 d0                	add    %edx,%eax
f011e4d3:	48                   	dec    %eax
f011e4d4:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e4d7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4da:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4df:	f7 75 94             	divl   -0x6c(%ebp)
f011e4e2:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4e5:	29 d0                	sub    %edx,%eax
f011e4e7:	01 d8                	add    %ebx,%eax
f011e4e9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e4ee:	39 c1                	cmp    %eax,%ecx
f011e4f0:	73 17                	jae    f011e509 <test_kmalloc_firstfit2+0x3ff>
f011e4f2:	83 ec 04             	sub    $0x4,%esp
f011e4f5:	68 14 ba 13 f0       	push   $0xf013ba14
f011e4fa:	68 b1 03 00 00       	push   $0x3b1
f011e4ff:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e504:	e8 fc 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e509:	e8 e6 58 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e50e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e511:	74 17                	je     f011e52a <test_kmalloc_firstfit2+0x420>
f011e513:	83 ec 04             	sub    $0x4,%esp
f011e516:	68 14 b6 13 f0       	push   $0xf013b614
f011e51b:	68 b2 03 00 00       	push   $0x3b2
f011e520:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e525:	e8 db 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e52a:	e8 3e ec fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e52f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e532:	29 c2                	sub    %eax,%edx
f011e534:	89 d0                	mov    %edx,%eax
f011e536:	83 f8 01             	cmp    $0x1,%eax
f011e539:	74 17                	je     f011e552 <test_kmalloc_firstfit2+0x448>
f011e53b:	83 ec 04             	sub    $0x4,%esp
f011e53e:	68 44 ba 13 f0       	push   $0xf013ba44
f011e543:	68 b3 03 00 00       	push   $0x3b3
f011e548:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e54d:	e8 b3 1c fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e552:	e8 16 ec fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e55a:	e8 95 58 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e55f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e562:	83 ec 0c             	sub    $0xc,%esp
f011e565:	68 00 08 00 00       	push   $0x800
f011e56a:	e8 f7 94 fe ff       	call   f0107a66 <kmalloc>
f011e56f:	83 c4 10             	add    $0x10,%esp
f011e572:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e578:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e57e:	89 c1                	mov    %eax,%ecx
f011e580:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e587:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e58a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e58f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e592:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e595:	ba 00 00 00 00       	mov    $0x0,%edx
f011e59a:	f7 75 8c             	divl   -0x74(%ebp)
f011e59d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e5a0:	29 d0                	sub    %edx,%eax
f011e5a2:	89 c3                	mov    %eax,%ebx
f011e5a4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e5ab:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e5b0:	0f b6 d0             	movzbl %al,%edx
f011e5b3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e5b6:	01 d0                	add    %edx,%eax
f011e5b8:	48                   	dec    %eax
f011e5b9:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e5bc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e5bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5c4:	f7 75 84             	divl   -0x7c(%ebp)
f011e5c7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e5ca:	29 d0                	sub    %edx,%eax
f011e5cc:	01 c3                	add    %eax,%ebx
f011e5ce:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e5d5:	10 00 00 
f011e5d8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e5dd:	0f b6 c0             	movzbl %al,%eax
f011e5e0:	c1 e0 04             	shl    $0x4,%eax
f011e5e3:	89 c2                	mov    %eax,%edx
f011e5e5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e5eb:	01 d0                	add    %edx,%eax
f011e5ed:	48                   	dec    %eax
f011e5ee:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e5f4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e5fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5ff:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e605:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e60b:	29 d0                	sub    %edx,%eax
f011e60d:	01 d8                	add    %ebx,%eax
f011e60f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e614:	39 c1                	cmp    %eax,%ecx
f011e616:	74 17                	je     f011e62f <test_kmalloc_firstfit2+0x525>
f011e618:	83 ec 04             	sub    $0x4,%esp
f011e61b:	68 14 ba 13 f0       	push   $0xf013ba14
f011e620:	68 b9 03 00 00       	push   $0x3b9
f011e625:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e62a:	e8 d6 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e62f:	e8 c0 57 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e634:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e637:	74 17                	je     f011e650 <test_kmalloc_firstfit2+0x546>
f011e639:	83 ec 04             	sub    $0x4,%esp
f011e63c:	68 14 b6 13 f0       	push   $0xf013b614
f011e641:	68 ba 03 00 00       	push   $0x3ba
f011e646:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e64b:	e8 b5 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e650:	e8 18 eb fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e655:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e658:	29 c2                	sub    %eax,%edx
f011e65a:	89 d0                	mov    %edx,%eax
f011e65c:	83 f8 01             	cmp    $0x1,%eax
f011e65f:	74 17                	je     f011e678 <test_kmalloc_firstfit2+0x56e>
f011e661:	83 ec 04             	sub    $0x4,%esp
f011e664:	68 44 ba 13 f0       	push   $0xf013ba44
f011e669:	68 bb 03 00 00       	push   $0x3bb
f011e66e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e673:	e8 8d 1b fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e678:	e8 f0 ea fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e67d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e680:	e8 6f 57 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e685:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e688:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e68e:	83 ec 0c             	sub    $0xc,%esp
f011e691:	50                   	push   %eax
f011e692:	e8 8f 94 fe ff       	call   f0107b26 <kfree>
f011e697:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e69a:	e8 55 57 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e69f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e6a2:	74 17                	je     f011e6bb <test_kmalloc_firstfit2+0x5b1>
f011e6a4:	83 ec 04             	sub    $0x4,%esp
f011e6a7:	68 14 b6 13 f0       	push   $0xf013b614
f011e6ac:	68 c1 03 00 00       	push   $0x3c1
f011e6b1:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e6b6:	e8 4a 1b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e6bb:	e8 ad ea fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e6c0:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e6c3:	83 f8 01             	cmp    $0x1,%eax
f011e6c6:	74 17                	je     f011e6df <test_kmalloc_firstfit2+0x5d5>
f011e6c8:	83 ec 04             	sub    $0x4,%esp
f011e6cb:	68 57 ba 13 f0       	push   $0xf013ba57
f011e6d0:	68 c2 03 00 00       	push   $0x3c2
f011e6d5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e6da:	e8 26 1b fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e6df:	e8 89 ea fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e6e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6e7:	e8 08 57 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e6ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e6ef:	83 ec 0c             	sub    $0xc,%esp
f011e6f2:	68 00 1c 00 00       	push   $0x1c00
f011e6f7:	e8 6a 93 fe ff       	call   f0107a66 <kmalloc>
f011e6fc:	83 c4 10             	add    $0x10,%esp
f011e6ff:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e705:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e70b:	89 c1                	mov    %eax,%ecx
f011e70d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e714:	10 00 00 
f011e717:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e71d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e722:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e728:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e72e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e733:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e739:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e73f:	29 d0                	sub    %edx,%eax
f011e741:	89 c3                	mov    %eax,%ebx
f011e743:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e74a:	10 00 00 
f011e74d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e752:	0f b6 d0             	movzbl %al,%edx
f011e755:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e75b:	01 d0                	add    %edx,%eax
f011e75d:	48                   	dec    %eax
f011e75e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e764:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e76a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e76f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e775:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e77b:	29 d0                	sub    %edx,%eax
f011e77d:	01 c3                	add    %eax,%ebx
f011e77f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e786:	10 00 00 
f011e789:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e78e:	0f b6 c0             	movzbl %al,%eax
f011e791:	c1 e0 04             	shl    $0x4,%eax
f011e794:	89 c2                	mov    %eax,%edx
f011e796:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e79c:	01 d0                	add    %edx,%eax
f011e79e:	48                   	dec    %eax
f011e79f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e7a5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e7ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7b0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e7b6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e7bc:	29 d0                	sub    %edx,%eax
f011e7be:	01 d8                	add    %ebx,%eax
f011e7c0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e7c5:	39 c1                	cmp    %eax,%ecx
f011e7c7:	74 17                	je     f011e7e0 <test_kmalloc_firstfit2+0x6d6>
f011e7c9:	83 ec 04             	sub    $0x4,%esp
f011e7cc:	68 14 ba 13 f0       	push   $0xf013ba14
f011e7d1:	68 c8 03 00 00       	push   $0x3c8
f011e7d6:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e7db:	e8 25 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7e0:	e8 0f 56 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e7e5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e7e8:	74 17                	je     f011e801 <test_kmalloc_firstfit2+0x6f7>
f011e7ea:	83 ec 04             	sub    $0x4,%esp
f011e7ed:	68 14 b6 13 f0       	push   $0xf013b614
f011e7f2:	68 c9 03 00 00       	push   $0x3c9
f011e7f7:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e7fc:	e8 04 1a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e801:	e8 67 e9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e806:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e809:	29 c2                	sub    %eax,%edx
f011e80b:	89 d0                	mov    %edx,%eax
f011e80d:	83 f8 02             	cmp    $0x2,%eax
f011e810:	74 17                	je     f011e829 <test_kmalloc_firstfit2+0x71f>
f011e812:	83 ec 04             	sub    $0x4,%esp
f011e815:	68 44 ba 13 f0       	push   $0xf013ba44
f011e81a:	68 ca 03 00 00       	push   $0x3ca
f011e81f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e824:	e8 dc 19 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e829:	e8 3f e9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e82e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e831:	e8 be 55 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e836:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e839:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e83f:	83 ec 0c             	sub    $0xc,%esp
f011e842:	50                   	push   %eax
f011e843:	e8 de 92 fe ff       	call   f0107b26 <kfree>
f011e848:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e84b:	e8 a4 55 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e850:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e853:	74 17                	je     f011e86c <test_kmalloc_firstfit2+0x762>
f011e855:	83 ec 04             	sub    $0x4,%esp
f011e858:	68 14 b6 13 f0       	push   $0xf013b614
f011e85d:	68 d0 03 00 00       	push   $0x3d0
f011e862:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e867:	e8 99 19 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e86c:	e8 fc e8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e871:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e874:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e879:	74 17                	je     f011e892 <test_kmalloc_firstfit2+0x788>
f011e87b:	83 ec 04             	sub    $0x4,%esp
f011e87e:	68 57 ba 13 f0       	push   $0xf013ba57
f011e883:	68 d1 03 00 00       	push   $0x3d1
f011e888:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e88d:	e8 73 19 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e892:	e8 d6 e8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e897:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e89a:	e8 55 55 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e89f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e8a2:	83 ec 0c             	sub    $0xc,%esp
f011e8a5:	68 00 fc 2f 00       	push   $0x2ffc00
f011e8aa:	e8 b7 91 fe ff       	call   f0107a66 <kmalloc>
f011e8af:	83 c4 10             	add    $0x10,%esp
f011e8b2:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e8b8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e8be:	89 c1                	mov    %eax,%ecx
f011e8c0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e8c7:	10 00 00 
f011e8ca:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e8d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e8d5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e8db:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e8e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8e6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e8ec:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e8f2:	29 d0                	sub    %edx,%eax
f011e8f4:	89 c3                	mov    %eax,%ebx
f011e8f6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e8fd:	10 00 00 
f011e900:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e905:	0f b6 d0             	movzbl %al,%edx
f011e908:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e90e:	01 d0                	add    %edx,%eax
f011e910:	48                   	dec    %eax
f011e911:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e917:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e91d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e922:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e928:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e92e:	29 d0                	sub    %edx,%eax
f011e930:	01 c3                	add    %eax,%ebx
f011e932:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e939:	10 00 00 
f011e93c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011e941:	0f b6 c0             	movzbl %al,%eax
f011e944:	c1 e0 04             	shl    $0x4,%eax
f011e947:	89 c2                	mov    %eax,%edx
f011e949:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e94f:	01 d0                	add    %edx,%eax
f011e951:	48                   	dec    %eax
f011e952:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e958:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e95e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e963:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e969:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e96f:	29 d0                	sub    %edx,%eax
f011e971:	01 d8                	add    %ebx,%eax
f011e973:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e978:	39 c1                	cmp    %eax,%ecx
f011e97a:	74 17                	je     f011e993 <test_kmalloc_firstfit2+0x889>
f011e97c:	83 ec 04             	sub    $0x4,%esp
f011e97f:	68 14 ba 13 f0       	push   $0xf013ba14
f011e984:	68 d7 03 00 00       	push   $0x3d7
f011e989:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e98e:	e8 72 18 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e993:	e8 5c 54 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e998:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e99b:	74 17                	je     f011e9b4 <test_kmalloc_firstfit2+0x8aa>
f011e99d:	83 ec 04             	sub    $0x4,%esp
f011e9a0:	68 14 b6 13 f0       	push   $0xf013b614
f011e9a5:	68 d8 03 00 00       	push   $0x3d8
f011e9aa:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e9af:	e8 51 18 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e9b4:	e8 b4 e7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e9b9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e9bc:	29 c2                	sub    %eax,%edx
f011e9be:	89 d0                	mov    %edx,%eax
f011e9c0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e9c5:	74 17                	je     f011e9de <test_kmalloc_firstfit2+0x8d4>
f011e9c7:	83 ec 04             	sub    $0x4,%esp
f011e9ca:	68 44 ba 13 f0       	push   $0xf013ba44
f011e9cf:	68 d9 03 00 00       	push   $0x3d9
f011e9d4:	68 fa b5 13 f0       	push   $0xf013b5fa
f011e9d9:	e8 27 18 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e9de:	e8 8a e7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011e9e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e9e6:	e8 09 54 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011e9eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e9ee:	83 ec 0c             	sub    $0xc,%esp
f011e9f1:	68 00 18 20 00       	push   $0x201800
f011e9f6:	e8 6b 90 fe ff       	call   f0107a66 <kmalloc>
f011e9fb:	83 c4 10             	add    $0x10,%esp
f011e9fe:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ea04:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ea0a:	89 c1                	mov    %eax,%ecx
f011ea0c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ea13:	10 00 00 
f011ea16:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ea1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea21:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ea27:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ea2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea32:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ea38:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ea3e:	29 d0                	sub    %edx,%eax
f011ea40:	89 c3                	mov    %eax,%ebx
f011ea42:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ea49:	10 00 00 
f011ea4c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ea51:	0f b6 d0             	movzbl %al,%edx
f011ea54:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ea5a:	01 d0                	add    %edx,%eax
f011ea5c:	48                   	dec    %eax
f011ea5d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ea63:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ea69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea6e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ea74:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ea7a:	29 d0                	sub    %edx,%eax
f011ea7c:	01 c3                	add    %eax,%ebx
f011ea7e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ea85:	10 00 00 
f011ea88:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ea8d:	0f b6 c0             	movzbl %al,%eax
f011ea90:	c1 e0 04             	shl    $0x4,%eax
f011ea93:	89 c2                	mov    %eax,%edx
f011ea95:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ea9b:	01 d0                	add    %edx,%eax
f011ea9d:	48                   	dec    %eax
f011ea9e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011eaa4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011eaaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaaf:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011eab5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011eabb:	29 d0                	sub    %edx,%eax
f011eabd:	01 d8                	add    %ebx,%eax
f011eabf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011eac4:	39 c1                	cmp    %eax,%ecx
f011eac6:	74 17                	je     f011eadf <test_kmalloc_firstfit2+0x9d5>
f011eac8:	83 ec 04             	sub    $0x4,%esp
f011eacb:	68 14 ba 13 f0       	push   $0xf013ba14
f011ead0:	68 df 03 00 00       	push   $0x3df
f011ead5:	68 fa b5 13 f0       	push   $0xf013b5fa
f011eada:	e8 26 17 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eadf:	e8 10 53 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011eae4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eae7:	74 17                	je     f011eb00 <test_kmalloc_firstfit2+0x9f6>
f011eae9:	83 ec 04             	sub    $0x4,%esp
f011eaec:	68 14 b6 13 f0       	push   $0xf013b614
f011eaf1:	68 e0 03 00 00       	push   $0x3e0
f011eaf6:	68 fa b5 13 f0       	push   $0xf013b5fa
f011eafb:	e8 05 17 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011eb00:	e8 68 e6 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011eb05:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eb08:	29 c2                	sub    %eax,%edx
f011eb0a:	89 d0                	mov    %edx,%eax
f011eb0c:	3d 02 02 00 00       	cmp    $0x202,%eax
f011eb11:	74 17                	je     f011eb2a <test_kmalloc_firstfit2+0xa20>
f011eb13:	83 ec 04             	sub    $0x4,%esp
f011eb16:	68 44 ba 13 f0       	push   $0xf013ba44
f011eb1b:	68 e1 03 00 00       	push   $0x3e1
f011eb20:	68 fa b5 13 f0       	push   $0xf013b5fa
f011eb25:	e8 db 16 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011eb2a:	e8 3e e6 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011eb2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eb32:	e8 bd 52 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011eb37:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011eb3a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011eb40:	83 ec 0c             	sub    $0xc,%esp
f011eb43:	50                   	push   %eax
f011eb44:	e8 dd 8f fe ff       	call   f0107b26 <kfree>
f011eb49:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb4c:	e8 a3 52 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011eb51:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eb54:	74 17                	je     f011eb6d <test_kmalloc_firstfit2+0xa63>
f011eb56:	83 ec 04             	sub    $0x4,%esp
f011eb59:	68 14 b6 13 f0       	push   $0xf013b614
f011eb5e:	68 e7 03 00 00       	push   $0x3e7
f011eb63:	68 fa b5 13 f0       	push   $0xf013b5fa
f011eb68:	e8 98 16 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011eb6d:	e8 fb e5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011eb72:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011eb75:	3d 00 03 00 00       	cmp    $0x300,%eax
f011eb7a:	74 17                	je     f011eb93 <test_kmalloc_firstfit2+0xa89>
f011eb7c:	83 ec 04             	sub    $0x4,%esp
f011eb7f:	68 57 ba 13 f0       	push   $0xf013ba57
f011eb84:	68 e8 03 00 00       	push   $0x3e8
f011eb89:	68 fa b5 13 f0       	push   $0xf013b5fa
f011eb8e:	e8 72 16 fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011eb93:	e8 d5 e5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011eb98:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eb9b:	e8 54 52 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011eba0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011eba3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011eba9:	83 ec 0c             	sub    $0xc,%esp
f011ebac:	50                   	push   %eax
f011ebad:	e8 74 8f fe ff       	call   f0107b26 <kfree>
f011ebb2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011ebb5:	e8 b3 e5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ebba:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ebbd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ebc2:	74 17                	je     f011ebdb <test_kmalloc_firstfit2+0xad1>
f011ebc4:	83 ec 04             	sub    $0x4,%esp
f011ebc7:	68 57 ba 13 f0       	push   $0xf013ba57
f011ebcc:	68 ee 03 00 00       	push   $0x3ee
f011ebd1:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ebd6:	e8 2a 16 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebdb:	e8 14 52 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ebe0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ebe3:	74 17                	je     f011ebfc <test_kmalloc_firstfit2+0xaf2>
f011ebe5:	83 ec 04             	sub    $0x4,%esp
f011ebe8:	68 14 b6 13 f0       	push   $0xf013b614
f011ebed:	68 ef 03 00 00       	push   $0x3ef
f011ebf2:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ebf7:	e8 09 16 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011ebfc:	e8 6c e5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ec01:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ec04:	e8 eb 51 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ec09:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011ec0c:	83 ec 0c             	sub    $0xc,%esp
f011ec0f:	68 00 fc 4f 00       	push   $0x4ffc00
f011ec14:	e8 4d 8e fe ff       	call   f0107a66 <kmalloc>
f011ec19:	83 c4 10             	add    $0x10,%esp
f011ec1c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011ec22:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ec28:	89 c1                	mov    %eax,%ecx
f011ec2a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ec31:	10 00 00 
f011ec34:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ec3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec3f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ec45:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ec4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec50:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ec56:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ec5c:	29 d0                	sub    %edx,%eax
f011ec5e:	89 c3                	mov    %eax,%ebx
f011ec60:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ec67:	10 00 00 
f011ec6a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ec6f:	0f b6 d0             	movzbl %al,%edx
f011ec72:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ec78:	01 d0                	add    %edx,%eax
f011ec7a:	48                   	dec    %eax
f011ec7b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ec81:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ec87:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec8c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011ec92:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ec98:	29 d0                	sub    %edx,%eax
f011ec9a:	01 c3                	add    %eax,%ebx
f011ec9c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011eca3:	10 00 00 
f011eca6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ecab:	0f b6 c0             	movzbl %al,%eax
f011ecae:	c1 e0 04             	shl    $0x4,%eax
f011ecb1:	89 c2                	mov    %eax,%edx
f011ecb3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ecb9:	01 d0                	add    %edx,%eax
f011ecbb:	48                   	dec    %eax
f011ecbc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ecc2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ecc8:	ba 00 00 00 00       	mov    $0x0,%edx
f011eccd:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ecd3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ecd9:	29 d0                	sub    %edx,%eax
f011ecdb:	01 d8                	add    %ebx,%eax
f011ecdd:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ece2:	39 c1                	cmp    %eax,%ecx
f011ece4:	74 17                	je     f011ecfd <test_kmalloc_firstfit2+0xbf3>
f011ece6:	83 ec 04             	sub    $0x4,%esp
f011ece9:	68 14 ba 13 f0       	push   $0xf013ba14
f011ecee:	68 f5 03 00 00       	push   $0x3f5
f011ecf3:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ecf8:	e8 08 15 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ecfd:	e8 f2 50 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ed02:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ed05:	74 17                	je     f011ed1e <test_kmalloc_firstfit2+0xc14>
f011ed07:	83 ec 04             	sub    $0x4,%esp
f011ed0a:	68 14 b6 13 f0       	push   $0xf013b614
f011ed0f:	68 f6 03 00 00       	push   $0x3f6
f011ed14:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ed19:	e8 e7 14 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ed1e:	e8 4a e4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ed23:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ed26:	29 c2                	sub    %eax,%edx
f011ed28:	89 d0                	mov    %edx,%eax
f011ed2a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ed2f:	74 17                	je     f011ed48 <test_kmalloc_firstfit2+0xc3e>
f011ed31:	83 ec 04             	sub    $0x4,%esp
f011ed34:	68 44 ba 13 f0       	push   $0xf013ba44
f011ed39:	68 f7 03 00 00       	push   $0x3f7
f011ed3e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ed43:	e8 bd 14 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ed48:	e8 20 e4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ed4d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ed50:	e8 9f 50 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ed55:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011ed58:	83 ec 0c             	sub    $0xc,%esp
f011ed5b:	68 00 fc 2f 00       	push   $0x2ffc00
f011ed60:	e8 01 8d fe ff       	call   f0107a66 <kmalloc>
f011ed65:	83 c4 10             	add    $0x10,%esp
f011ed68:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ed6e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ed74:	89 c1                	mov    %eax,%ecx
f011ed76:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ed7d:	10 00 00 
f011ed80:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ed86:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed8b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ed91:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ed97:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed9c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011eda2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011eda8:	29 d0                	sub    %edx,%eax
f011edaa:	89 c3                	mov    %eax,%ebx
f011edac:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011edb3:	10 00 00 
f011edb6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011edbb:	0f b6 d0             	movzbl %al,%edx
f011edbe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011edc4:	01 d0                	add    %edx,%eax
f011edc6:	48                   	dec    %eax
f011edc7:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011edcd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011edd3:	ba 00 00 00 00       	mov    $0x0,%edx
f011edd8:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011edde:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ede4:	29 d0                	sub    %edx,%eax
f011ede6:	01 c3                	add    %eax,%ebx
f011ede8:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011edef:	10 00 00 
f011edf2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011edf7:	0f b6 c0             	movzbl %al,%eax
f011edfa:	c1 e0 04             	shl    $0x4,%eax
f011edfd:	89 c2                	mov    %eax,%edx
f011edff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ee05:	01 d0                	add    %edx,%eax
f011ee07:	48                   	dec    %eax
f011ee08:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ee0e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee14:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee19:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ee1f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee25:	29 d0                	sub    %edx,%eax
f011ee27:	01 d8                	add    %ebx,%eax
f011ee29:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ee2e:	39 c1                	cmp    %eax,%ecx
f011ee30:	74 17                	je     f011ee49 <test_kmalloc_firstfit2+0xd3f>
f011ee32:	83 ec 04             	sub    $0x4,%esp
f011ee35:	68 14 ba 13 f0       	push   $0xf013ba14
f011ee3a:	68 05 04 00 00       	push   $0x405
f011ee3f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ee44:	e8 bc 13 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee49:	e8 a6 4f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ee4e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ee51:	74 17                	je     f011ee6a <test_kmalloc_firstfit2+0xd60>
f011ee53:	83 ec 04             	sub    $0x4,%esp
f011ee56:	68 14 b6 13 f0       	push   $0xf013b614
f011ee5b:	68 06 04 00 00       	push   $0x406
f011ee60:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ee65:	e8 9b 13 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ee6a:	e8 fe e2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ee6f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ee72:	29 c2                	sub    %eax,%edx
f011ee74:	89 d0                	mov    %edx,%eax
f011ee76:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ee7b:	74 17                	je     f011ee94 <test_kmalloc_firstfit2+0xd8a>
f011ee7d:	83 ec 04             	sub    $0x4,%esp
f011ee80:	68 44 ba 13 f0       	push   $0xf013ba44
f011ee85:	68 07 04 00 00       	push   $0x407
f011ee8a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ee8f:	e8 71 13 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ee94:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ee9b:	10 00 00 
f011ee9e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eea4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eea9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011eeaf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eeb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011eeba:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011eec0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eec6:	29 d0                	sub    %edx,%eax
f011eec8:	89 c1                	mov    %eax,%ecx
f011eeca:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011eed1:	10 00 00 
f011eed4:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011eed9:	0f b6 d0             	movzbl %al,%edx
f011eedc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eee2:	01 d0                	add    %edx,%eax
f011eee4:	48                   	dec    %eax
f011eee5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011eeeb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011eef1:	ba 00 00 00 00       	mov    $0x0,%edx
f011eef6:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011eefc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ef02:	29 d0                	sub    %edx,%eax
f011ef04:	01 c1                	add    %eax,%ecx
f011ef06:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ef0d:	10 00 00 
f011ef10:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011ef15:	0f b6 c0             	movzbl %al,%eax
f011ef18:	c1 e0 04             	shl    $0x4,%eax
f011ef1b:	89 c2                	mov    %eax,%edx
f011ef1d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ef23:	01 d0                	add    %edx,%eax
f011ef25:	48                   	dec    %eax
f011ef26:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ef2c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ef32:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef37:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ef3d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ef43:	29 d0                	sub    %edx,%eax
f011ef45:	01 c8                	add    %ecx,%eax
f011ef47:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011ef4c:	29 c2                	sub    %eax,%edx
f011ef4e:	89 d0                	mov    %edx,%eax
f011ef50:	83 ec 0c             	sub    $0xc,%esp
f011ef53:	50                   	push   %eax
f011ef54:	e8 0d 8b fe ff       	call   f0107a66 <kmalloc>
f011ef59:	83 c4 10             	add    $0x10,%esp
f011ef5c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011ef62:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ef68:	85 c0                	test   %eax,%eax
f011ef6a:	74 17                	je     f011ef83 <test_kmalloc_firstfit2+0xe79>
f011ef6c:	83 ec 04             	sub    $0x4,%esp
f011ef6f:	68 44 bb 13 f0       	push   $0xf013bb44
f011ef74:	68 0d 04 00 00       	push   $0x40d
f011ef79:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ef7e:	e8 82 12 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011ef83:	83 ec 0c             	sub    $0xc,%esp
f011ef86:	68 84 bc 13 f0       	push   $0xf013bc84
f011ef8b:	e8 7e 1d fe ff       	call   f0100d0e <cprintf>
f011ef90:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011ef93:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ef98:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ef9b:	5b                   	pop    %ebx
f011ef9c:	5f                   	pop    %edi
f011ef9d:	5d                   	pop    %ebp
f011ef9e:	c3                   	ret    

f011ef9f <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011ef9f:	55                   	push   %ebp
f011efa0:	89 e5                	mov    %esp,%ebp
f011efa2:	57                   	push   %edi
f011efa3:	53                   	push   %ebx
f011efa4:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011efaa:	83 ec 0c             	sub    $0xc,%esp
f011efad:	68 3c b5 13 f0       	push   $0xf013b53c
f011efb2:	e8 57 1d fe ff       	call   f0100d0e <cprintf>
f011efb7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011efba:	83 ec 0c             	sub    $0xc,%esp
f011efbd:	68 6c b5 13 f0       	push   $0xf013b56c
f011efc2:	e8 47 1d fe ff       	call   f0100d0e <cprintf>
f011efc7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011efca:	83 ec 0c             	sub    $0xc,%esp
f011efcd:	68 3c b5 13 f0       	push   $0xf013b53c
f011efd2:	e8 37 1d fe ff       	call   f0100d0e <cprintf>
f011efd7:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011efda:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011efe0:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011efe5:	b8 00 00 00 00       	mov    $0x0,%eax
f011efea:	89 d7                	mov    %edx,%edi
f011efec:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011efee:	e8 7a e1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011eff3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011eff6:	e8 f9 4d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011effb:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011effe:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011f005:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f00c:	eb 1f                	jmp    f011f02d <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011f00e:	83 ec 0c             	sub    $0xc,%esp
f011f011:	68 00 00 20 00       	push   $0x200000
f011f016:	e8 4b 8a fe ff       	call   f0107a66 <kmalloc>
f011f01b:	83 c4 10             	add    $0x10,%esp
f011f01e:	89 c2                	mov    %eax,%edx
f011f020:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f023:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011f02a:	ff 45 f4             	incl   -0xc(%ebp)
f011f02d:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011f031:	7e db                	jle    f011f00e <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011f033:	83 ec 0c             	sub    $0xc,%esp
f011f036:	68 00 b0 1f 00       	push   $0x1fb000
f011f03b:	e8 26 8a fe ff       	call   f0107a66 <kmalloc>
f011f040:	83 c4 10             	add    $0x10,%esp
f011f043:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f049:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f04f:	89 c1                	mov    %eax,%ecx
f011f051:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011f058:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011f05b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f060:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011f063:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f066:	ba 00 00 00 00       	mov    $0x0,%edx
f011f06b:	f7 75 e4             	divl   -0x1c(%ebp)
f011f06e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f071:	29 d0                	sub    %edx,%eax
f011f073:	89 c3                	mov    %eax,%ebx
f011f075:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011f07c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f081:	0f b6 d0             	movzbl %al,%edx
f011f084:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f087:	01 d0                	add    %edx,%eax
f011f089:	48                   	dec    %eax
f011f08a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011f08d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f090:	ba 00 00 00 00       	mov    $0x0,%edx
f011f095:	f7 75 dc             	divl   -0x24(%ebp)
f011f098:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f09b:	29 d0                	sub    %edx,%eax
f011f09d:	01 c3                	add    %eax,%ebx
f011f09f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011f0a6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f0ab:	0f b6 c0             	movzbl %al,%eax
f011f0ae:	c1 e0 04             	shl    $0x4,%eax
f011f0b1:	89 c2                	mov    %eax,%edx
f011f0b3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011f0b6:	01 d0                	add    %edx,%eax
f011f0b8:	48                   	dec    %eax
f011f0b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011f0bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f0bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0c4:	f7 75 d4             	divl   -0x2c(%ebp)
f011f0c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f0ca:	29 d0                	sub    %edx,%eax
f011f0cc:	01 d8                	add    %ebx,%eax
f011f0ce:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f0d3:	39 c1                	cmp    %eax,%ecx
f011f0d5:	0f 85 c0 04 00 00    	jne    f011f59b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f0db:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f0e1:	89 c1                	mov    %eax,%ecx
f011f0e3:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011f0ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f0ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011f0f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f0f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0fd:	f7 75 cc             	divl   -0x34(%ebp)
f011f100:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f103:	29 d0                	sub    %edx,%eax
f011f105:	89 c3                	mov    %eax,%ebx
f011f107:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011f10e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f113:	0f b6 d0             	movzbl %al,%edx
f011f116:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f119:	01 d0                	add    %edx,%eax
f011f11b:	48                   	dec    %eax
f011f11c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011f11f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f122:	ba 00 00 00 00       	mov    $0x0,%edx
f011f127:	f7 75 c4             	divl   -0x3c(%ebp)
f011f12a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f12d:	29 d0                	sub    %edx,%eax
f011f12f:	01 c3                	add    %eax,%ebx
f011f131:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011f138:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f13d:	0f b6 c0             	movzbl %al,%eax
f011f140:	c1 e0 04             	shl    $0x4,%eax
f011f143:	89 c2                	mov    %eax,%edx
f011f145:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f148:	01 d0                	add    %edx,%eax
f011f14a:	48                   	dec    %eax
f011f14b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011f14e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f151:	ba 00 00 00 00       	mov    $0x0,%edx
f011f156:	f7 75 bc             	divl   -0x44(%ebp)
f011f159:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f15c:	29 d0                	sub    %edx,%eax
f011f15e:	01 d8                	add    %ebx,%eax
f011f160:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f165:	39 c1                	cmp    %eax,%ecx
f011f167:	0f 85 2e 04 00 00    	jne    f011f59b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f16d:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011f173:	89 c1                	mov    %eax,%ecx
f011f175:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011f17c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f17f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f184:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011f187:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f18a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f18f:	f7 75 b4             	divl   -0x4c(%ebp)
f011f192:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f195:	29 d0                	sub    %edx,%eax
f011f197:	89 c3                	mov    %eax,%ebx
f011f199:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011f1a0:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f1a5:	0f b6 d0             	movzbl %al,%edx
f011f1a8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f1ab:	01 d0                	add    %edx,%eax
f011f1ad:	48                   	dec    %eax
f011f1ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011f1b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f1b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1b9:	f7 75 ac             	divl   -0x54(%ebp)
f011f1bc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f1bf:	29 d0                	sub    %edx,%eax
f011f1c1:	01 c3                	add    %eax,%ebx
f011f1c3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011f1ca:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f1cf:	0f b6 c0             	movzbl %al,%eax
f011f1d2:	c1 e0 04             	shl    $0x4,%eax
f011f1d5:	89 c2                	mov    %eax,%edx
f011f1d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f1da:	01 d0                	add    %edx,%eax
f011f1dc:	48                   	dec    %eax
f011f1dd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011f1e0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f1e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1e8:	f7 75 a4             	divl   -0x5c(%ebp)
f011f1eb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f1ee:	29 d0                	sub    %edx,%eax
f011f1f0:	01 d8                	add    %ebx,%eax
f011f1f2:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f1f7:	39 c1                	cmp    %eax,%ecx
f011f1f9:	0f 85 9c 03 00 00    	jne    f011f59b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f1ff:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f205:	89 c1                	mov    %eax,%ecx
f011f207:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011f20e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f211:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f216:	89 45 98             	mov    %eax,-0x68(%ebp)
f011f219:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f21c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f221:	f7 75 9c             	divl   -0x64(%ebp)
f011f224:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f227:	29 d0                	sub    %edx,%eax
f011f229:	89 c3                	mov    %eax,%ebx
f011f22b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f232:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f237:	0f b6 d0             	movzbl %al,%edx
f011f23a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f23d:	01 d0                	add    %edx,%eax
f011f23f:	48                   	dec    %eax
f011f240:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f243:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f246:	ba 00 00 00 00       	mov    $0x0,%edx
f011f24b:	f7 75 94             	divl   -0x6c(%ebp)
f011f24e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f251:	29 d0                	sub    %edx,%eax
f011f253:	01 c3                	add    %eax,%ebx
f011f255:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f25c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f261:	0f b6 c0             	movzbl %al,%eax
f011f264:	c1 e0 04             	shl    $0x4,%eax
f011f267:	89 c2                	mov    %eax,%edx
f011f269:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f26c:	01 d0                	add    %edx,%eax
f011f26e:	48                   	dec    %eax
f011f26f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f272:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f275:	ba 00 00 00 00       	mov    $0x0,%edx
f011f27a:	f7 75 8c             	divl   -0x74(%ebp)
f011f27d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f280:	29 d0                	sub    %edx,%eax
f011f282:	01 d8                	add    %ebx,%eax
f011f284:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f289:	39 c1                	cmp    %eax,%ecx
f011f28b:	0f 85 0a 03 00 00    	jne    f011f59b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f291:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011f297:	89 c1                	mov    %eax,%ecx
f011f299:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011f2a0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f2a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f2a8:	89 45 80             	mov    %eax,-0x80(%ebp)
f011f2ab:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f2ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2b3:	f7 75 84             	divl   -0x7c(%ebp)
f011f2b6:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f2b9:	29 d0                	sub    %edx,%eax
f011f2bb:	89 c3                	mov    %eax,%ebx
f011f2bd:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f2c4:	10 00 00 
f011f2c7:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f2cc:	0f b6 d0             	movzbl %al,%edx
f011f2cf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f2d5:	01 d0                	add    %edx,%eax
f011f2d7:	48                   	dec    %eax
f011f2d8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f2de:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f2e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2e9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f2ef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f2f5:	29 d0                	sub    %edx,%eax
f011f2f7:	01 c3                	add    %eax,%ebx
f011f2f9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f300:	10 00 00 
f011f303:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f308:	0f b6 c0             	movzbl %al,%eax
f011f30b:	c1 e0 04             	shl    $0x4,%eax
f011f30e:	89 c2                	mov    %eax,%edx
f011f310:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f316:	01 d0                	add    %edx,%eax
f011f318:	48                   	dec    %eax
f011f319:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f31f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f325:	ba 00 00 00 00       	mov    $0x0,%edx
f011f32a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f330:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f336:	29 d0                	sub    %edx,%eax
f011f338:	01 d8                	add    %ebx,%eax
f011f33a:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f33f:	39 c1                	cmp    %eax,%ecx
f011f341:	0f 85 54 02 00 00    	jne    f011f59b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f347:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011f34d:	89 c1                	mov    %eax,%ecx
f011f34f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f356:	10 00 00 
f011f359:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f35f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f364:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f36a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f370:	ba 00 00 00 00       	mov    $0x0,%edx
f011f375:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f37b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f381:	29 d0                	sub    %edx,%eax
f011f383:	89 c3                	mov    %eax,%ebx
f011f385:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f38c:	10 00 00 
f011f38f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f394:	0f b6 d0             	movzbl %al,%edx
f011f397:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f39d:	01 d0                	add    %edx,%eax
f011f39f:	48                   	dec    %eax
f011f3a0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f3a6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f3ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3b1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f3b7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f3bd:	29 d0                	sub    %edx,%eax
f011f3bf:	01 c3                	add    %eax,%ebx
f011f3c1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f3c8:	10 00 00 
f011f3cb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f3d0:	0f b6 c0             	movzbl %al,%eax
f011f3d3:	c1 e0 04             	shl    $0x4,%eax
f011f3d6:	89 c2                	mov    %eax,%edx
f011f3d8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f3de:	01 d0                	add    %edx,%eax
f011f3e0:	48                   	dec    %eax
f011f3e1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f3e7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f3ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3f2:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f3f8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f3fe:	29 d0                	sub    %edx,%eax
f011f400:	01 d8                	add    %ebx,%eax
f011f402:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f407:	39 c1                	cmp    %eax,%ecx
f011f409:	0f 85 8c 01 00 00    	jne    f011f59b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f40f:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011f415:	89 c1                	mov    %eax,%ecx
f011f417:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f41e:	10 00 00 
f011f421:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f427:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f42c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f432:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f438:	ba 00 00 00 00       	mov    $0x0,%edx
f011f43d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f443:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f449:	29 d0                	sub    %edx,%eax
f011f44b:	89 c3                	mov    %eax,%ebx
f011f44d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f454:	10 00 00 
f011f457:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f45c:	0f b6 d0             	movzbl %al,%edx
f011f45f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f465:	01 d0                	add    %edx,%eax
f011f467:	48                   	dec    %eax
f011f468:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f46e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f474:	ba 00 00 00 00       	mov    $0x0,%edx
f011f479:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f47f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f485:	29 d0                	sub    %edx,%eax
f011f487:	01 c3                	add    %eax,%ebx
f011f489:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f490:	10 00 00 
f011f493:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f498:	0f b6 c0             	movzbl %al,%eax
f011f49b:	c1 e0 04             	shl    $0x4,%eax
f011f49e:	89 c2                	mov    %eax,%edx
f011f4a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f4a6:	01 d0                	add    %edx,%eax
f011f4a8:	48                   	dec    %eax
f011f4a9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f4af:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f4b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ba:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f4c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f4c6:	29 d0                	sub    %edx,%eax
f011f4c8:	01 d8                	add    %ebx,%eax
f011f4ca:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f4cf:	39 c1                	cmp    %eax,%ecx
f011f4d1:	0f 85 c4 00 00 00    	jne    f011f59b <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f4d7:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f4dd:	89 c1                	mov    %eax,%ecx
f011f4df:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f4e6:	10 00 00 
f011f4e9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f4ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4f4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f4fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f500:	ba 00 00 00 00       	mov    $0x0,%edx
f011f505:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f50b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f511:	29 d0                	sub    %edx,%eax
f011f513:	89 c3                	mov    %eax,%ebx
f011f515:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f51c:	10 00 00 
f011f51f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f524:	0f b6 d0             	movzbl %al,%edx
f011f527:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f52d:	01 d0                	add    %edx,%eax
f011f52f:	48                   	dec    %eax
f011f530:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f536:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f53c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f541:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f547:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f54d:	29 d0                	sub    %edx,%eax
f011f54f:	01 c3                	add    %eax,%ebx
f011f551:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f558:	10 00 00 
f011f55b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f560:	0f b6 c0             	movzbl %al,%eax
f011f563:	c1 e0 04             	shl    $0x4,%eax
f011f566:	89 c2                	mov    %eax,%edx
f011f568:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f56e:	01 d0                	add    %edx,%eax
f011f570:	48                   	dec    %eax
f011f571:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f577:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f57d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f582:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f588:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f58e:	29 d0                	sub    %edx,%eax
f011f590:	01 d8                	add    %ebx,%eax
f011f592:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f597:	39 c1                	cmp    %eax,%ecx
f011f599:	74 17                	je     f011f5b2 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f59b:	83 ec 04             	sub    $0x4,%esp
f011f59e:	68 d0 bc 13 f0       	push   $0xf013bcd0
f011f5a3:	68 31 04 00 00       	push   $0x431
f011f5a8:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f5ad:	e8 53 0c fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5b2:	e8 3d 48 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011f5b7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5ba:	74 17                	je     f011f5d3 <test_kmalloc_worstfit+0x634>
f011f5bc:	83 ec 04             	sub    $0x4,%esp
f011f5bf:	68 14 b6 13 f0       	push   $0xf013b614
f011f5c4:	68 33 04 00 00       	push   $0x433
f011f5c9:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f5ce:	e8 32 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f5d3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5d6:	e8 92 db fe ff       	call   f010d16d <sys_calculate_free_frames>
f011f5db:	29 c3                	sub    %eax,%ebx
f011f5dd:	89 d8                	mov    %ebx,%eax
f011f5df:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f5e4:	74 17                	je     f011f5fd <test_kmalloc_worstfit+0x65e>
f011f5e6:	83 ec 04             	sub    $0x4,%esp
f011f5e9:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011f5ee:	68 34 04 00 00       	push   $0x434
f011f5f3:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f5f8:	e8 08 0c fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f5fd:	e8 6b db fe ff       	call   f010d16d <sys_calculate_free_frames>
f011f602:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f605:	e8 ea 47 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011f60a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f60d:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f613:	83 ec 0c             	sub    $0xc,%esp
f011f616:	50                   	push   %eax
f011f617:	e8 0a 85 fe ff       	call   f0107b26 <kfree>
f011f61c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f61f:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f625:	83 ec 0c             	sub    $0xc,%esp
f011f628:	50                   	push   %eax
f011f629:	e8 f8 84 fe ff       	call   f0107b26 <kfree>
f011f62e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f631:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f637:	83 ec 0c             	sub    $0xc,%esp
f011f63a:	50                   	push   %eax
f011f63b:	e8 e6 84 fe ff       	call   f0107b26 <kfree>
f011f640:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f643:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f649:	83 ec 0c             	sub    $0xc,%esp
f011f64c:	50                   	push   %eax
f011f64d:	e8 d4 84 fe ff       	call   f0107b26 <kfree>
f011f652:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f655:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f65b:	83 ec 0c             	sub    $0xc,%esp
f011f65e:	50                   	push   %eax
f011f65f:	e8 c2 84 fe ff       	call   f0107b26 <kfree>
f011f664:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f667:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f66d:	83 ec 0c             	sub    $0xc,%esp
f011f670:	50                   	push   %eax
f011f671:	e8 b0 84 fe ff       	call   f0107b26 <kfree>
f011f676:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f679:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f67f:	83 ec 0c             	sub    $0xc,%esp
f011f682:	50                   	push   %eax
f011f683:	e8 9e 84 fe ff       	call   f0107b26 <kfree>
f011f688:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f68b:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f691:	83 ec 0c             	sub    $0xc,%esp
f011f694:	50                   	push   %eax
f011f695:	e8 8c 84 fe ff       	call   f0107b26 <kfree>
f011f69a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f69d:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f6a3:	83 ec 0c             	sub    $0xc,%esp
f011f6a6:	50                   	push   %eax
f011f6a7:	e8 7a 84 fe ff       	call   f0107b26 <kfree>
f011f6ac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f6af:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f6b5:	83 ec 0c             	sub    $0xc,%esp
f011f6b8:	50                   	push   %eax
f011f6b9:	e8 68 84 fe ff       	call   f0107b26 <kfree>
f011f6be:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f6c1:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f6c7:	83 ec 0c             	sub    $0xc,%esp
f011f6ca:	50                   	push   %eax
f011f6cb:	e8 56 84 fe ff       	call   f0107b26 <kfree>
f011f6d0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f6d3:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f6d9:	83 ec 0c             	sub    $0xc,%esp
f011f6dc:	50                   	push   %eax
f011f6dd:	e8 44 84 fe ff       	call   f0107b26 <kfree>
f011f6e2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f6e5:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f6eb:	83 ec 0c             	sub    $0xc,%esp
f011f6ee:	50                   	push   %eax
f011f6ef:	e8 32 84 fe ff       	call   f0107b26 <kfree>
f011f6f4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f6f7:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f6fd:	83 ec 0c             	sub    $0xc,%esp
f011f700:	50                   	push   %eax
f011f701:	e8 20 84 fe ff       	call   f0107b26 <kfree>
f011f706:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f709:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f70f:	83 ec 0c             	sub    $0xc,%esp
f011f712:	50                   	push   %eax
f011f713:	e8 0e 84 fe ff       	call   f0107b26 <kfree>
f011f718:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f71b:	e8 d4 46 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011f720:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f723:	74 17                	je     f011f73c <test_kmalloc_worstfit+0x79d>
f011f725:	83 ec 04             	sub    $0x4,%esp
f011f728:	68 14 b6 13 f0       	push   $0xf013b614
f011f72d:	68 4a 04 00 00       	push   $0x44a
f011f732:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f737:	e8 c9 0a fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f73c:	e8 2c da fe ff       	call   f010d16d <sys_calculate_free_frames>
f011f741:	89 c2                	mov    %eax,%edx
f011f743:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f746:	29 c2                	sub    %eax,%edx
f011f748:	89 d0                	mov    %edx,%eax
f011f74a:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f74f:	74 17                	je     f011f768 <test_kmalloc_worstfit+0x7c9>
f011f751:	83 ec 04             	sub    $0x4,%esp
f011f754:	68 c8 b8 13 f0       	push   $0xf013b8c8
f011f759:	68 4b 04 00 00       	push   $0x44b
f011f75e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f763:	e8 9d 0a fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f768:	e8 00 da fe ff       	call   f010d16d <sys_calculate_free_frames>
f011f76d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f770:	e8 7f 46 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011f775:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f778:	83 ec 0c             	sub    $0xc,%esp
f011f77b:	68 00 00 10 00       	push   $0x100000
f011f780:	e8 e1 82 fe ff       	call   f0107a66 <kmalloc>
f011f785:	83 c4 10             	add    $0x10,%esp
f011f788:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f78e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f795:	10 00 00 
f011f798:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f79e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f7a3:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f7a9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f7af:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7b4:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f7ba:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f7c0:	29 d0                	sub    %edx,%eax
f011f7c2:	89 c1                	mov    %eax,%ecx
f011f7c4:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f7cb:	10 00 00 
f011f7ce:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f7d3:	0f b6 d0             	movzbl %al,%edx
f011f7d6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f7dc:	01 d0                	add    %edx,%eax
f011f7de:	48                   	dec    %eax
f011f7df:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f7e5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f7eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7f0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f7f6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f7fc:	29 d0                	sub    %edx,%eax
f011f7fe:	01 c1                	add    %eax,%ecx
f011f800:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f807:	10 00 00 
f011f80a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f80f:	0f b6 c0             	movzbl %al,%eax
f011f812:	c1 e0 04             	shl    $0x4,%eax
f011f815:	89 c2                	mov    %eax,%edx
f011f817:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f81d:	01 d0                	add    %edx,%eax
f011f81f:	48                   	dec    %eax
f011f820:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f826:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f82c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f831:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f837:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f83d:	29 d0                	sub    %edx,%eax
f011f83f:	01 c8                	add    %ecx,%eax
f011f841:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f847:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f84d:	39 c2                	cmp    %eax,%edx
f011f84f:	74 17                	je     f011f868 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f851:	83 ec 04             	sub    $0x4,%esp
f011f854:	68 14 bd 13 f0       	push   $0xf013bd14
f011f859:	68 52 04 00 00       	push   $0x452
f011f85e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f863:	e8 9d 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f868:	e8 87 45 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011f86d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f870:	74 17                	je     f011f889 <test_kmalloc_worstfit+0x8ea>
f011f872:	83 ec 04             	sub    $0x4,%esp
f011f875:	68 14 b6 13 f0       	push   $0xf013b614
f011f87a:	68 53 04 00 00       	push   $0x453
f011f87f:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f884:	e8 7c 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f889:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f88c:	e8 dc d8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011f891:	29 c3                	sub    %eax,%ebx
f011f893:	89 d8                	mov    %ebx,%eax
f011f895:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f89a:	74 17                	je     f011f8b3 <test_kmalloc_worstfit+0x914>
f011f89c:	83 ec 04             	sub    $0x4,%esp
f011f89f:	68 32 bb 13 f0       	push   $0xf013bb32
f011f8a4:	68 54 04 00 00       	push   $0x454
f011f8a9:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f8ae:	e8 52 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f8b3:	ff 45 e8             	incl   -0x18(%ebp)
f011f8b6:	83 ec 08             	sub    $0x8,%esp
f011f8b9:	ff 75 e8             	pushl  -0x18(%ebp)
f011f8bc:	68 34 bd 13 f0       	push   $0xf013bd34
f011f8c1:	e8 48 14 fe ff       	call   f0100d0e <cprintf>
f011f8c6:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f8c9:	e8 9f d8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011f8ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8d1:	e8 1e 45 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011f8d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f8d9:	83 ec 0c             	sub    $0xc,%esp
f011f8dc:	68 00 00 40 00       	push   $0x400000
f011f8e1:	e8 80 81 fe ff       	call   f0107a66 <kmalloc>
f011f8e6:	83 c4 10             	add    $0x10,%esp
f011f8e9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f8ef:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f8f6:	10 00 00 
f011f8f9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f8ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f904:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f90a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f910:	ba 00 00 00 00       	mov    $0x0,%edx
f011f915:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f91b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f921:	29 d0                	sub    %edx,%eax
f011f923:	89 c1                	mov    %eax,%ecx
f011f925:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f92c:	10 00 00 
f011f92f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f934:	0f b6 d0             	movzbl %al,%edx
f011f937:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f93d:	01 d0                	add    %edx,%eax
f011f93f:	48                   	dec    %eax
f011f940:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f946:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f94c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f951:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f957:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f95d:	29 d0                	sub    %edx,%eax
f011f95f:	01 c1                	add    %eax,%ecx
f011f961:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f968:	10 00 00 
f011f96b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011f970:	0f b6 c0             	movzbl %al,%eax
f011f973:	c1 e0 04             	shl    $0x4,%eax
f011f976:	89 c2                	mov    %eax,%edx
f011f978:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f97e:	01 d0                	add    %edx,%eax
f011f980:	48                   	dec    %eax
f011f981:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f987:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f98d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f992:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f998:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f99e:	29 d0                	sub    %edx,%eax
f011f9a0:	01 c8                	add    %ecx,%eax
f011f9a2:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f9a8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f9ae:	39 c2                	cmp    %eax,%edx
f011f9b0:	74 17                	je     f011f9c9 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f9b2:	83 ec 04             	sub    $0x4,%esp
f011f9b5:	68 14 bd 13 f0       	push   $0xf013bd14
f011f9ba:	68 5b 04 00 00       	push   $0x45b
f011f9bf:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f9c4:	e8 3c 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9c9:	e8 26 44 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011f9ce:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f9d1:	74 17                	je     f011f9ea <test_kmalloc_worstfit+0xa4b>
f011f9d3:	83 ec 04             	sub    $0x4,%esp
f011f9d6:	68 14 b6 13 f0       	push   $0xf013b614
f011f9db:	68 5c 04 00 00       	push   $0x45c
f011f9e0:	68 fa b5 13 f0       	push   $0xf013b5fa
f011f9e5:	e8 1b 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f9ea:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f9ed:	e8 7b d7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011f9f2:	29 c3                	sub    %eax,%ebx
f011f9f4:	89 d8                	mov    %ebx,%eax
f011f9f6:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f9fb:	74 17                	je     f011fa14 <test_kmalloc_worstfit+0xa75>
f011f9fd:	83 ec 04             	sub    $0x4,%esp
f011fa00:	68 32 bb 13 f0       	push   $0xf013bb32
f011fa05:	68 5d 04 00 00       	push   $0x45d
f011fa0a:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fa0f:	e8 f1 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa14:	ff 45 e8             	incl   -0x18(%ebp)
f011fa17:	83 ec 08             	sub    $0x8,%esp
f011fa1a:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa1d:	68 34 bd 13 f0       	push   $0xf013bd34
f011fa22:	e8 e7 12 fe ff       	call   f0100d0e <cprintf>
f011fa27:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa2a:	e8 3e d7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011fa2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa32:	e8 bd 43 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011fa37:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011fa3a:	83 ec 0c             	sub    $0xc,%esp
f011fa3d:	68 00 00 60 00       	push   $0x600000
f011fa42:	e8 1f 80 fe ff       	call   f0107a66 <kmalloc>
f011fa47:	83 c4 10             	add    $0x10,%esp
f011fa4a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011fa50:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011fa57:	10 00 00 
f011fa5a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fa60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa65:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011fa6b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fa71:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa76:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011fa7c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fa82:	29 d0                	sub    %edx,%eax
f011fa84:	89 c1                	mov    %eax,%ecx
f011fa86:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011fa8d:	10 00 00 
f011fa90:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011fa95:	0f b6 d0             	movzbl %al,%edx
f011fa98:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fa9e:	01 d0                	add    %edx,%eax
f011faa0:	48                   	dec    %eax
f011faa1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011faa7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011faad:	ba 00 00 00 00       	mov    $0x0,%edx
f011fab2:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011fab8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011fabe:	29 d0                	sub    %edx,%eax
f011fac0:	01 c1                	add    %eax,%ecx
f011fac2:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011fac9:	10 00 00 
f011facc:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011fad1:	0f b6 c0             	movzbl %al,%eax
f011fad4:	c1 e0 04             	shl    $0x4,%eax
f011fad7:	89 c2                	mov    %eax,%edx
f011fad9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011fadf:	01 d0                	add    %edx,%eax
f011fae1:	48                   	dec    %eax
f011fae2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011fae8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011faee:	ba 00 00 00 00       	mov    $0x0,%edx
f011faf3:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011faf9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011faff:	29 d0                	sub    %edx,%eax
f011fb01:	01 c8                	add    %ecx,%eax
f011fb03:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011fb09:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fb0f:	39 c2                	cmp    %eax,%edx
f011fb11:	74 17                	je     f011fb2a <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011fb13:	83 ec 04             	sub    $0x4,%esp
f011fb16:	68 14 bd 13 f0       	push   $0xf013bd14
f011fb1b:	68 64 04 00 00       	push   $0x464
f011fb20:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fb25:	e8 db 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb2a:	e8 c5 42 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011fb2f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb32:	74 17                	je     f011fb4b <test_kmalloc_worstfit+0xbac>
f011fb34:	83 ec 04             	sub    $0x4,%esp
f011fb37:	68 14 b6 13 f0       	push   $0xf013b614
f011fb3c:	68 65 04 00 00       	push   $0x465
f011fb41:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fb46:	e8 ba 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fb4b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb4e:	e8 1a d6 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011fb53:	29 c3                	sub    %eax,%ebx
f011fb55:	89 d8                	mov    %ebx,%eax
f011fb57:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fb5c:	74 17                	je     f011fb75 <test_kmalloc_worstfit+0xbd6>
f011fb5e:	83 ec 04             	sub    $0x4,%esp
f011fb61:	68 32 bb 13 f0       	push   $0xf013bb32
f011fb66:	68 66 04 00 00       	push   $0x466
f011fb6b:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fb70:	e8 90 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb75:	ff 45 e8             	incl   -0x18(%ebp)
f011fb78:	83 ec 08             	sub    $0x8,%esp
f011fb7b:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb7e:	68 34 bd 13 f0       	push   $0xf013bd34
f011fb83:	e8 86 11 fe ff       	call   f0100d0e <cprintf>
f011fb88:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fb8b:	e8 dd d5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011fb90:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fb93:	e8 5c 42 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011fb98:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011fb9b:	83 ec 0c             	sub    $0xc,%esp
f011fb9e:	68 00 00 50 00       	push   $0x500000
f011fba3:	e8 be 7e fe ff       	call   f0107a66 <kmalloc>
f011fba8:	83 c4 10             	add    $0x10,%esp
f011fbab:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011fbb1:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011fbb8:	10 00 00 
f011fbbb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fbc1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fbc6:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011fbcc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fbd2:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbd7:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011fbdd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fbe3:	29 d0                	sub    %edx,%eax
f011fbe5:	89 c1                	mov    %eax,%ecx
f011fbe7:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011fbee:	10 00 00 
f011fbf1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011fbf6:	0f b6 d0             	movzbl %al,%edx
f011fbf9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fbff:	01 d0                	add    %edx,%eax
f011fc01:	48                   	dec    %eax
f011fc02:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011fc08:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fc0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc13:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011fc19:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fc1f:	29 d0                	sub    %edx,%eax
f011fc21:	01 c1                	add    %eax,%ecx
f011fc23:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011fc2a:	10 00 00 
f011fc2d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011fc32:	0f b6 c0             	movzbl %al,%eax
f011fc35:	c1 e0 04             	shl    $0x4,%eax
f011fc38:	89 c2                	mov    %eax,%edx
f011fc3a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011fc40:	01 d0                	add    %edx,%eax
f011fc42:	48                   	dec    %eax
f011fc43:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011fc49:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fc4f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc54:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011fc5a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fc60:	29 d0                	sub    %edx,%eax
f011fc62:	01 c8                	add    %ecx,%eax
f011fc64:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011fc6a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fc70:	39 c2                	cmp    %eax,%edx
f011fc72:	74 17                	je     f011fc8b <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011fc74:	83 ec 04             	sub    $0x4,%esp
f011fc77:	68 14 bd 13 f0       	push   $0xf013bd14
f011fc7c:	68 6d 04 00 00       	push   $0x46d
f011fc81:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fc86:	e8 7a 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc8b:	e8 64 41 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011fc90:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fc93:	74 17                	je     f011fcac <test_kmalloc_worstfit+0xd0d>
f011fc95:	83 ec 04             	sub    $0x4,%esp
f011fc98:	68 14 b6 13 f0       	push   $0xf013b614
f011fc9d:	68 6e 04 00 00       	push   $0x46e
f011fca2:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fca7:	e8 59 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fcac:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fcaf:	e8 b9 d4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011fcb4:	29 c3                	sub    %eax,%ebx
f011fcb6:	89 d8                	mov    %ebx,%eax
f011fcb8:	3d 00 05 00 00       	cmp    $0x500,%eax
f011fcbd:	74 17                	je     f011fcd6 <test_kmalloc_worstfit+0xd37>
f011fcbf:	83 ec 04             	sub    $0x4,%esp
f011fcc2:	68 32 bb 13 f0       	push   $0xf013bb32
f011fcc7:	68 6f 04 00 00       	push   $0x46f
f011fccc:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fcd1:	e8 2f 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fcd6:	ff 45 e8             	incl   -0x18(%ebp)
f011fcd9:	83 ec 08             	sub    $0x8,%esp
f011fcdc:	ff 75 e8             	pushl  -0x18(%ebp)
f011fcdf:	68 34 bd 13 f0       	push   $0xf013bd34
f011fce4:	e8 25 10 fe ff       	call   f0100d0e <cprintf>
f011fce9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fcec:	e8 7c d4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011fcf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fcf4:	e8 fb 40 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011fcf9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011fcfc:	83 ec 0c             	sub    $0xc,%esp
f011fcff:	68 00 00 40 00       	push   $0x400000
f011fd04:	e8 5d 7d fe ff       	call   f0107a66 <kmalloc>
f011fd09:	83 c4 10             	add    $0x10,%esp
f011fd0c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011fd12:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011fd19:	10 00 00 
f011fd1c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011fd22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd27:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011fd2d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fd33:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd38:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011fd3e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fd44:	29 d0                	sub    %edx,%eax
f011fd46:	89 c1                	mov    %eax,%ecx
f011fd48:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011fd4f:	10 00 00 
f011fd52:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011fd57:	0f b6 d0             	movzbl %al,%edx
f011fd5a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fd60:	01 d0                	add    %edx,%eax
f011fd62:	48                   	dec    %eax
f011fd63:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011fd69:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fd6f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd74:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011fd7a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fd80:	29 d0                	sub    %edx,%eax
f011fd82:	01 c1                	add    %eax,%ecx
f011fd84:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011fd8b:	10 00 00 
f011fd8e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011fd93:	0f b6 c0             	movzbl %al,%eax
f011fd96:	c1 e0 04             	shl    $0x4,%eax
f011fd99:	89 c2                	mov    %eax,%edx
f011fd9b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011fda1:	01 d0                	add    %edx,%eax
f011fda3:	48                   	dec    %eax
f011fda4:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011fdaa:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fdb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdb5:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011fdbb:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fdc1:	29 d0                	sub    %edx,%eax
f011fdc3:	01 c8                	add    %ecx,%eax
f011fdc5:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011fdcb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fdd1:	39 c2                	cmp    %eax,%edx
f011fdd3:	74 17                	je     f011fdec <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011fdd5:	83 ec 04             	sub    $0x4,%esp
f011fdd8:	68 14 bd 13 f0       	push   $0xf013bd14
f011fddd:	68 76 04 00 00       	push   $0x476
f011fde2:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fde7:	e8 19 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdec:	e8 03 40 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011fdf1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fdf4:	74 17                	je     f011fe0d <test_kmalloc_worstfit+0xe6e>
f011fdf6:	83 ec 04             	sub    $0x4,%esp
f011fdf9:	68 14 b6 13 f0       	push   $0xf013b614
f011fdfe:	68 77 04 00 00       	push   $0x477
f011fe03:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fe08:	e8 f8 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fe0d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fe10:	e8 58 d3 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011fe15:	29 c3                	sub    %eax,%ebx
f011fe17:	89 d8                	mov    %ebx,%eax
f011fe19:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fe1e:	74 17                	je     f011fe37 <test_kmalloc_worstfit+0xe98>
f011fe20:	83 ec 04             	sub    $0x4,%esp
f011fe23:	68 32 bb 13 f0       	push   $0xf013bb32
f011fe28:	68 78 04 00 00       	push   $0x478
f011fe2d:	68 fa b5 13 f0       	push   $0xf013b5fa
f011fe32:	e8 ce 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe37:	ff 45 e8             	incl   -0x18(%ebp)
f011fe3a:	83 ec 08             	sub    $0x8,%esp
f011fe3d:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe40:	68 34 bd 13 f0       	push   $0xf013bd34
f011fe45:	e8 c4 0e fe ff       	call   f0100d0e <cprintf>
f011fe4a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fe4d:	e8 1b d3 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011fe52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fe55:	e8 9a 3f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011fe5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fe5d:	83 ec 0c             	sub    $0xc,%esp
f011fe60:	68 00 00 20 00       	push   $0x200000
f011fe65:	e8 fc 7b fe ff       	call   f0107a66 <kmalloc>
f011fe6a:	83 c4 10             	add    $0x10,%esp
f011fe6d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fe73:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fe7a:	10 00 00 
f011fe7d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fe83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe88:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011fe8e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fe94:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe99:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011fe9f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fea5:	29 d0                	sub    %edx,%eax
f011fea7:	89 c1                	mov    %eax,%ecx
f011fea9:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011feb0:	10 00 00 
f011feb3:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011feb8:	0f b6 d0             	movzbl %al,%edx
f011febb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fec1:	01 d0                	add    %edx,%eax
f011fec3:	48                   	dec    %eax
f011fec4:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011feca:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fed0:	ba 00 00 00 00       	mov    $0x0,%edx
f011fed5:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011fedb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fee1:	29 d0                	sub    %edx,%eax
f011fee3:	01 c1                	add    %eax,%ecx
f011fee5:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011feec:	10 00 00 
f011feef:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f011fef4:	0f b6 c0             	movzbl %al,%eax
f011fef7:	c1 e0 04             	shl    $0x4,%eax
f011fefa:	89 c2                	mov    %eax,%edx
f011fefc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ff02:	01 d0                	add    %edx,%eax
f011ff04:	48                   	dec    %eax
f011ff05:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011ff0b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ff11:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff16:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011ff1c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ff22:	29 d0                	sub    %edx,%eax
f011ff24:	01 c8                	add    %ecx,%eax
f011ff26:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011ff2c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff32:	39 c2                	cmp    %eax,%edx
f011ff34:	74 17                	je     f011ff4d <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011ff36:	83 ec 04             	sub    $0x4,%esp
f011ff39:	68 14 bd 13 f0       	push   $0xf013bd14
f011ff3e:	68 7f 04 00 00       	push   $0x47f
f011ff43:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ff48:	e8 b8 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff4d:	e8 a2 3e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ff52:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ff55:	74 17                	je     f011ff6e <test_kmalloc_worstfit+0xfcf>
f011ff57:	83 ec 04             	sub    $0x4,%esp
f011ff5a:	68 14 b6 13 f0       	push   $0xf013b614
f011ff5f:	68 80 04 00 00       	push   $0x480
f011ff64:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ff69:	e8 97 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ff6e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ff71:	e8 f7 d1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ff76:	29 c3                	sub    %eax,%ebx
f011ff78:	89 d8                	mov    %ebx,%eax
f011ff7a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ff7f:	74 17                	je     f011ff98 <test_kmalloc_worstfit+0xff9>
f011ff81:	83 ec 04             	sub    $0x4,%esp
f011ff84:	68 32 bb 13 f0       	push   $0xf013bb32
f011ff89:	68 81 04 00 00       	push   $0x481
f011ff8e:	68 fa b5 13 f0       	push   $0xf013b5fa
f011ff93:	e8 6d 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ff98:	ff 45 e8             	incl   -0x18(%ebp)
f011ff9b:	83 ec 08             	sub    $0x8,%esp
f011ff9e:	ff 75 e8             	pushl  -0x18(%ebp)
f011ffa1:	68 34 bd 13 f0       	push   $0xf013bd34
f011ffa6:	e8 63 0d fe ff       	call   f0100d0e <cprintf>
f011ffab:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ffae:	e8 ba d1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f011ffb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ffb6:	e8 39 3e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f011ffbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ffbe:	83 ec 0c             	sub    $0xc,%esp
f011ffc1:	68 00 00 18 00       	push   $0x180000
f011ffc6:	e8 9b 7a fe ff       	call   f0107a66 <kmalloc>
f011ffcb:	83 c4 10             	add    $0x10,%esp
f011ffce:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ffd4:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011ffdb:	10 00 00 
f011ffde:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ffe4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ffe9:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011ffef:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fff5:	ba 00 00 00 00       	mov    $0x0,%edx
f011fffa:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120000:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120006:	29 d0                	sub    %edx,%eax
f0120008:	89 c1                	mov    %eax,%ecx
f012000a:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120011:	10 00 00 
f0120014:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120019:	0f b6 d0             	movzbl %al,%edx
f012001c:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120022:	01 d0                	add    %edx,%eax
f0120024:	48                   	dec    %eax
f0120025:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012002b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120031:	ba 00 00 00 00       	mov    $0x0,%edx
f0120036:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012003c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120042:	29 d0                	sub    %edx,%eax
f0120044:	01 c1                	add    %eax,%ecx
f0120046:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012004d:	10 00 00 
f0120050:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120055:	0f b6 c0             	movzbl %al,%eax
f0120058:	c1 e0 04             	shl    $0x4,%eax
f012005b:	89 c2                	mov    %eax,%edx
f012005d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120063:	01 d0                	add    %edx,%eax
f0120065:	48                   	dec    %eax
f0120066:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012006c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120072:	ba 00 00 00 00       	mov    $0x0,%edx
f0120077:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012007d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120083:	29 d0                	sub    %edx,%eax
f0120085:	01 c8                	add    %ecx,%eax
f0120087:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f012008d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120093:	39 c2                	cmp    %eax,%edx
f0120095:	74 17                	je     f01200ae <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f0120097:	83 ec 04             	sub    $0x4,%esp
f012009a:	68 14 bd 13 f0       	push   $0xf013bd14
f012009f:	68 88 04 00 00       	push   $0x488
f01200a4:	68 fa b5 13 f0       	push   $0xf013b5fa
f01200a9:	e8 57 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200ae:	e8 41 3d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01200b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01200b6:	74 17                	je     f01200cf <test_kmalloc_worstfit+0x1130>
f01200b8:	83 ec 04             	sub    $0x4,%esp
f01200bb:	68 14 b6 13 f0       	push   $0xf013b614
f01200c0:	68 89 04 00 00       	push   $0x489
f01200c5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01200ca:	e8 36 01 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01200cf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01200d2:	e8 96 d0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01200d7:	29 c3                	sub    %eax,%ebx
f01200d9:	89 d8                	mov    %ebx,%eax
f01200db:	3d 80 01 00 00       	cmp    $0x180,%eax
f01200e0:	74 17                	je     f01200f9 <test_kmalloc_worstfit+0x115a>
f01200e2:	83 ec 04             	sub    $0x4,%esp
f01200e5:	68 32 bb 13 f0       	push   $0xf013bb32
f01200ea:	68 8a 04 00 00       	push   $0x48a
f01200ef:	68 fa b5 13 f0       	push   $0xf013b5fa
f01200f4:	e8 0c 01 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01200f9:	ff 45 e8             	incl   -0x18(%ebp)
f01200fc:	83 ec 08             	sub    $0x8,%esp
f01200ff:	ff 75 e8             	pushl  -0x18(%ebp)
f0120102:	68 34 bd 13 f0       	push   $0xf013bd34
f0120107:	e8 02 0c fe ff       	call   f0100d0e <cprintf>
f012010c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f012010f:	e8 59 d0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120114:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0120117:	e8 d8 3c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012011c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f012011f:	83 ec 0c             	sub    $0xc,%esp
f0120122:	68 00 00 08 00       	push   $0x80000
f0120127:	e8 3a 79 fe ff       	call   f0107a66 <kmalloc>
f012012c:	83 c4 10             	add    $0x10,%esp
f012012f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f0120135:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012013c:	10 00 00 
f012013f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120145:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012014a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120150:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120156:	ba 00 00 00 00       	mov    $0x0,%edx
f012015b:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120161:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120167:	29 d0                	sub    %edx,%eax
f0120169:	89 c1                	mov    %eax,%ecx
f012016b:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120172:	10 00 00 
f0120175:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012017a:	0f b6 d0             	movzbl %al,%edx
f012017d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120183:	01 d0                	add    %edx,%eax
f0120185:	48                   	dec    %eax
f0120186:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012018c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120192:	ba 00 00 00 00       	mov    $0x0,%edx
f0120197:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012019d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01201a3:	29 d0                	sub    %edx,%eax
f01201a5:	01 c1                	add    %eax,%ecx
f01201a7:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01201ae:	10 00 00 
f01201b1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01201b6:	0f b6 c0             	movzbl %al,%eax
f01201b9:	c1 e0 04             	shl    $0x4,%eax
f01201bc:	89 c2                	mov    %eax,%edx
f01201be:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01201c4:	01 d0                	add    %edx,%eax
f01201c6:	48                   	dec    %eax
f01201c7:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01201cd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01201d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01201d8:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01201de:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01201e4:	29 d0                	sub    %edx,%eax
f01201e6:	01 c8                	add    %ecx,%eax
f01201e8:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f01201ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01201f4:	39 c2                	cmp    %eax,%edx
f01201f6:	74 17                	je     f012020f <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f01201f8:	83 ec 04             	sub    $0x4,%esp
f01201fb:	68 14 bd 13 f0       	push   $0xf013bd14
f0120200:	68 91 04 00 00       	push   $0x491
f0120205:	68 fa b5 13 f0       	push   $0xf013b5fa
f012020a:	e8 f6 ff fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012020f:	e8 e0 3b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120214:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120217:	74 17                	je     f0120230 <test_kmalloc_worstfit+0x1291>
f0120219:	83 ec 04             	sub    $0x4,%esp
f012021c:	68 14 b6 13 f0       	push   $0xf013b614
f0120221:	68 92 04 00 00       	push   $0x492
f0120226:	68 fa b5 13 f0       	push   $0xf013b5fa
f012022b:	e8 d5 ff fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120230:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120233:	e8 35 cf fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120238:	29 c3                	sub    %eax,%ebx
f012023a:	89 d8                	mov    %ebx,%eax
f012023c:	3d 80 00 00 00       	cmp    $0x80,%eax
f0120241:	74 17                	je     f012025a <test_kmalloc_worstfit+0x12bb>
f0120243:	83 ec 04             	sub    $0x4,%esp
f0120246:	68 32 bb 13 f0       	push   $0xf013bb32
f012024b:	68 93 04 00 00       	push   $0x493
f0120250:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120255:	e8 ab ff fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012025a:	ff 45 e8             	incl   -0x18(%ebp)
f012025d:	83 ec 08             	sub    $0x8,%esp
f0120260:	ff 75 e8             	pushl  -0x18(%ebp)
f0120263:	68 34 bd 13 f0       	push   $0xf013bd34
f0120268:	e8 a1 0a fe ff       	call   f0100d0e <cprintf>
f012026d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120270:	e8 f8 ce fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120275:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0120278:	e8 77 3b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012027d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f0120280:	83 ec 0c             	sub    $0xc,%esp
f0120283:	68 00 04 00 00       	push   $0x400
f0120288:	e8 d9 77 fe ff       	call   f0107a66 <kmalloc>
f012028d:	83 c4 10             	add    $0x10,%esp
f0120290:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f0120296:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012029d:	10 00 00 
f01202a0:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01202a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01202ab:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f01202b1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01202b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01202bc:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01202c2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01202c8:	29 d0                	sub    %edx,%eax
f01202ca:	89 c1                	mov    %eax,%ecx
f01202cc:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01202d3:	10 00 00 
f01202d6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01202db:	0f b6 d0             	movzbl %al,%edx
f01202de:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01202e4:	01 d0                	add    %edx,%eax
f01202e6:	48                   	dec    %eax
f01202e7:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01202ed:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01202f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01202f8:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01202fe:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120304:	29 d0                	sub    %edx,%eax
f0120306:	01 c1                	add    %eax,%ecx
f0120308:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f012030f:	10 00 00 
f0120312:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120317:	0f b6 c0             	movzbl %al,%eax
f012031a:	c1 e0 04             	shl    $0x4,%eax
f012031d:	89 c2                	mov    %eax,%edx
f012031f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0120325:	01 d0                	add    %edx,%eax
f0120327:	48                   	dec    %eax
f0120328:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f012032e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120334:	ba 00 00 00 00       	mov    $0x0,%edx
f0120339:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f012033f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120345:	29 d0                	sub    %edx,%eax
f0120347:	01 c8                	add    %ecx,%eax
f0120349:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f012034f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120355:	39 c2                	cmp    %eax,%edx
f0120357:	74 17                	je     f0120370 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f0120359:	83 ec 04             	sub    $0x4,%esp
f012035c:	68 14 bd 13 f0       	push   $0xf013bd14
f0120361:	68 9a 04 00 00       	push   $0x49a
f0120366:	68 fa b5 13 f0       	push   $0xf013b5fa
f012036b:	e8 95 fe fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120370:	e8 7f 3a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120375:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120378:	74 17                	je     f0120391 <test_kmalloc_worstfit+0x13f2>
f012037a:	83 ec 04             	sub    $0x4,%esp
f012037d:	68 14 b6 13 f0       	push   $0xf013b614
f0120382:	68 9b 04 00 00       	push   $0x49b
f0120387:	68 fa b5 13 f0       	push   $0xf013b5fa
f012038c:	e8 74 fe fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120391:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120394:	e8 d4 cd fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120399:	29 c3                	sub    %eax,%ebx
f012039b:	89 d8                	mov    %ebx,%eax
f012039d:	83 f8 01             	cmp    $0x1,%eax
f01203a0:	74 17                	je     f01203b9 <test_kmalloc_worstfit+0x141a>
f01203a2:	83 ec 04             	sub    $0x4,%esp
f01203a5:	68 32 bb 13 f0       	push   $0xf013bb32
f01203aa:	68 9c 04 00 00       	push   $0x49c
f01203af:	68 fa b5 13 f0       	push   $0xf013b5fa
f01203b4:	e8 4c fe fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01203b9:	ff 45 e8             	incl   -0x18(%ebp)
f01203bc:	83 ec 08             	sub    $0x8,%esp
f01203bf:	ff 75 e8             	pushl  -0x18(%ebp)
f01203c2:	68 34 bd 13 f0       	push   $0xf013bd34
f01203c7:	e8 42 09 fe ff       	call   f0100d0e <cprintf>
f01203cc:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01203cf:	e8 99 cd fe ff       	call   f010d16d <sys_calculate_free_frames>
f01203d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01203d7:	e8 18 3a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01203dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f01203df:	83 ec 0c             	sub    $0xc,%esp
f01203e2:	68 00 f0 1f 00       	push   $0x1ff000
f01203e7:	e8 7a 76 fe ff       	call   f0107a66 <kmalloc>
f01203ec:	83 c4 10             	add    $0x10,%esp
f01203ef:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f01203f5:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01203fc:	10 00 00 
f01203ff:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0120405:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012040a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120410:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120416:	ba 00 00 00 00       	mov    $0x0,%edx
f012041b:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120421:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120427:	29 d0                	sub    %edx,%eax
f0120429:	89 c1                	mov    %eax,%ecx
f012042b:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120432:	10 00 00 
f0120435:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012043a:	0f b6 d0             	movzbl %al,%edx
f012043d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120443:	01 d0                	add    %edx,%eax
f0120445:	48                   	dec    %eax
f0120446:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f012044c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120452:	ba 00 00 00 00       	mov    $0x0,%edx
f0120457:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012045d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120463:	29 d0                	sub    %edx,%eax
f0120465:	01 c1                	add    %eax,%ecx
f0120467:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f012046e:	10 00 00 
f0120471:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120476:	0f b6 c0             	movzbl %al,%eax
f0120479:	c1 e0 04             	shl    $0x4,%eax
f012047c:	89 c2                	mov    %eax,%edx
f012047e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120484:	01 d0                	add    %edx,%eax
f0120486:	48                   	dec    %eax
f0120487:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f012048d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0120493:	ba 00 00 00 00       	mov    $0x0,%edx
f0120498:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f012049e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01204a4:	29 d0                	sub    %edx,%eax
f01204a6:	01 c8                	add    %ecx,%eax
f01204a8:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f01204ae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01204b4:	39 c2                	cmp    %eax,%edx
f01204b6:	74 17                	je     f01204cf <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f01204b8:	83 ec 04             	sub    $0x4,%esp
f01204bb:	68 14 bd 13 f0       	push   $0xf013bd14
f01204c0:	68 a3 04 00 00       	push   $0x4a3
f01204c5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01204ca:	e8 36 fd fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01204cf:	e8 20 39 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01204d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01204d7:	74 17                	je     f01204f0 <test_kmalloc_worstfit+0x1551>
f01204d9:	83 ec 04             	sub    $0x4,%esp
f01204dc:	68 14 b6 13 f0       	push   $0xf013b614
f01204e1:	68 a4 04 00 00       	push   $0x4a4
f01204e6:	68 fa b5 13 f0       	push   $0xf013b5fa
f01204eb:	e8 15 fd fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01204f0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01204f3:	e8 75 cc fe ff       	call   f010d16d <sys_calculate_free_frames>
f01204f8:	29 c3                	sub    %eax,%ebx
f01204fa:	89 d8                	mov    %ebx,%eax
f01204fc:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0120501:	74 17                	je     f012051a <test_kmalloc_worstfit+0x157b>
f0120503:	83 ec 04             	sub    $0x4,%esp
f0120506:	68 32 bb 13 f0       	push   $0xf013bb32
f012050b:	68 a5 04 00 00       	push   $0x4a5
f0120510:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120515:	e8 eb fc fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012051a:	ff 45 e8             	incl   -0x18(%ebp)
f012051d:	83 ec 08             	sub    $0x8,%esp
f0120520:	ff 75 e8             	pushl  -0x18(%ebp)
f0120523:	68 34 bd 13 f0       	push   $0xf013bd34
f0120528:	e8 e1 07 fe ff       	call   f0100d0e <cprintf>
f012052d:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f0120530:	e8 38 cc fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120535:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0120538:	e8 b7 38 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012053d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f0120540:	83 ec 0c             	sub    $0xc,%esp
f0120543:	68 00 00 40 00       	push   $0x400000
f0120548:	e8 19 75 fe ff       	call   f0107a66 <kmalloc>
f012054d:	83 c4 10             	add    $0x10,%esp
f0120550:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f0120556:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012055c:	85 c0                	test   %eax,%eax
f012055e:	74 17                	je     f0120577 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f0120560:	83 ec 04             	sub    $0x4,%esp
f0120563:	68 14 bd 13 f0       	push   $0xf013bd14
f0120568:	68 ad 04 00 00       	push   $0x4ad
f012056d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120572:	e8 8e fc fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120577:	e8 78 38 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012057c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012057f:	74 17                	je     f0120598 <test_kmalloc_worstfit+0x15f9>
f0120581:	83 ec 04             	sub    $0x4,%esp
f0120584:	68 14 b6 13 f0       	push   $0xf013b614
f0120589:	68 ae 04 00 00       	push   $0x4ae
f012058e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120593:	e8 6d fc fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f0120598:	e8 d0 cb fe ff       	call   f010d16d <sys_calculate_free_frames>
f012059d:	89 c2                	mov    %eax,%edx
f012059f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01205a2:	39 c2                	cmp    %eax,%edx
f01205a4:	74 17                	je     f01205bd <test_kmalloc_worstfit+0x161e>
f01205a6:	83 ec 04             	sub    $0x4,%esp
f01205a9:	68 32 bb 13 f0       	push   $0xf013bb32
f01205ae:	68 af 04 00 00       	push   $0x4af
f01205b3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01205b8:	e8 48 fc fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01205bd:	ff 45 e8             	incl   -0x18(%ebp)
f01205c0:	83 ec 08             	sub    $0x8,%esp
f01205c3:	ff 75 e8             	pushl  -0x18(%ebp)
f01205c6:	68 34 bd 13 f0       	push   $0xf013bd34
f01205cb:	e8 3e 07 fe ff       	call   f0100d0e <cprintf>
f01205d0:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f01205d3:	83 ec 0c             	sub    $0xc,%esp
f01205d6:	68 48 bd 13 f0       	push   $0xf013bd48
f01205db:	e8 2e 07 fe ff       	call   f0100d0e <cprintf>
f01205e0:	83 c4 10             	add    $0x10,%esp


	return 1;
f01205e3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01205e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01205eb:	5b                   	pop    %ebx
f01205ec:	5f                   	pop    %edi
f01205ed:	5d                   	pop    %ebp
f01205ee:	c3                   	ret    

f01205ef <test_kfree>:

int test_kfree()
{
f01205ef:	55                   	push   %ebp
f01205f0:	89 e5                	mov    %esp,%ebp
f01205f2:	57                   	push   %edi
f01205f3:	53                   	push   %ebx
f01205f4:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f01205fa:	83 ec 0c             	sub    $0xc,%esp
f01205fd:	68 3c b5 13 f0       	push   $0xf013b53c
f0120602:	e8 07 07 fe ff       	call   f0100d0e <cprintf>
f0120607:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012060a:	83 ec 0c             	sub    $0xc,%esp
f012060d:	68 6c b5 13 f0       	push   $0xf013b56c
f0120612:	e8 f7 06 fe ff       	call   f0100d0e <cprintf>
f0120617:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012061a:	83 ec 0c             	sub    $0xc,%esp
f012061d:	68 3c b5 13 f0       	push   $0xf013b53c
f0120622:	e8 e7 06 fe ff       	call   f0100d0e <cprintf>
f0120627:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012062a:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012062e:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0120632:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0120638:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012063e:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0120645:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012064c:	e8 1c cb fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120651:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0120654:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f012065a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012065f:	b8 00 00 00 00       	mov    $0x0,%eax
f0120664:	89 d7                	mov    %edx,%edi
f0120666:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0120668:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f012066e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120673:	b8 00 00 00 00       	mov    $0x0,%eax
f0120678:	89 d7                	mov    %edx,%edi
f012067a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012067c:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f0120682:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120687:	b8 00 00 00 00       	mov    $0x0,%eax
f012068c:	89 d7                	mov    %edx,%edi
f012068e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120690:	e8 d8 ca fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120695:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120698:	e8 57 37 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012069d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01206a0:	83 ec 0c             	sub    $0xc,%esp
f01206a3:	68 00 fc 1f 00       	push   $0x1ffc00
f01206a8:	e8 b9 73 fe ff       	call   f0107a66 <kmalloc>
f01206ad:	83 c4 10             	add    $0x10,%esp
f01206b0:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206b6:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01206bc:	89 c1                	mov    %eax,%ecx
f01206be:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01206c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01206c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01206cd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01206d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01206d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01206d8:	f7 75 c8             	divl   -0x38(%ebp)
f01206db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01206de:	29 d0                	sub    %edx,%eax
f01206e0:	89 c3                	mov    %eax,%ebx
f01206e2:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01206e9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01206ee:	0f b6 d0             	movzbl %al,%edx
f01206f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01206f4:	01 d0                	add    %edx,%eax
f01206f6:	48                   	dec    %eax
f01206f7:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01206fa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01206fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120702:	f7 75 c0             	divl   -0x40(%ebp)
f0120705:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120708:	29 d0                	sub    %edx,%eax
f012070a:	01 c3                	add    %eax,%ebx
f012070c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0120713:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120718:	0f b6 c0             	movzbl %al,%eax
f012071b:	c1 e0 04             	shl    $0x4,%eax
f012071e:	89 c2                	mov    %eax,%edx
f0120720:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0120723:	01 d0                	add    %edx,%eax
f0120725:	48                   	dec    %eax
f0120726:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0120729:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012072c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120731:	f7 75 b8             	divl   -0x48(%ebp)
f0120734:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0120737:	29 d0                	sub    %edx,%eax
f0120739:	01 d8                	add    %ebx,%eax
f012073b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120740:	39 c1                	cmp    %eax,%ecx
f0120742:	74 17                	je     f012075b <test_kfree+0x16c>
f0120744:	83 ec 04             	sub    $0x4,%esp
f0120747:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012074c:	68 d7 04 00 00       	push   $0x4d7
f0120751:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120756:	e8 aa fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012075b:	e8 94 36 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120760:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120763:	74 17                	je     f012077c <test_kfree+0x18d>
f0120765:	83 ec 04             	sub    $0x4,%esp
f0120768:	68 14 b6 13 f0       	push   $0xf013b614
f012076d:	68 d8 04 00 00       	push   $0x4d8
f0120772:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120777:	e8 89 fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012077c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012077f:	e8 e9 c9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120784:	29 c3                	sub    %eax,%ebx
f0120786:	89 d8                	mov    %ebx,%eax
f0120788:	3d 00 02 00 00       	cmp    $0x200,%eax
f012078d:	74 17                	je     f01207a6 <test_kfree+0x1b7>
f012078f:	83 ec 04             	sub    $0x4,%esp
f0120792:	68 7c b6 13 f0       	push   $0xf013b67c
f0120797:	68 d9 04 00 00       	push   $0x4d9
f012079c:	68 fa b5 13 f0       	push   $0xf013b5fa
f01207a1:	e8 5f fa fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01207a6:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f01207ad:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01207b0:	e8 b8 c9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01207b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207b8:	e8 37 36 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01207bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01207c0:	83 ec 0c             	sub    $0xc,%esp
f01207c3:	68 00 fc 1f 00       	push   $0x1ffc00
f01207c8:	e8 99 72 fe ff       	call   f0107a66 <kmalloc>
f01207cd:	83 c4 10             	add    $0x10,%esp
f01207d0:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207d6:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01207dc:	89 c1                	mov    %eax,%ecx
f01207de:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01207e5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01207e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01207ed:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01207f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01207f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01207f8:	f7 75 b0             	divl   -0x50(%ebp)
f01207fb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01207fe:	29 d0                	sub    %edx,%eax
f0120800:	89 c3                	mov    %eax,%ebx
f0120802:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0120809:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012080e:	0f b6 d0             	movzbl %al,%edx
f0120811:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0120814:	01 d0                	add    %edx,%eax
f0120816:	48                   	dec    %eax
f0120817:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012081a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012081d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120822:	f7 75 a8             	divl   -0x58(%ebp)
f0120825:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120828:	29 d0                	sub    %edx,%eax
f012082a:	01 c3                	add    %eax,%ebx
f012082c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0120833:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120838:	0f b6 c0             	movzbl %al,%eax
f012083b:	c1 e0 04             	shl    $0x4,%eax
f012083e:	89 c2                	mov    %eax,%edx
f0120840:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120843:	01 d0                	add    %edx,%eax
f0120845:	48                   	dec    %eax
f0120846:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0120849:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012084c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120851:	f7 75 a0             	divl   -0x60(%ebp)
f0120854:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120857:	29 d0                	sub    %edx,%eax
f0120859:	01 d8                	add    %ebx,%eax
f012085b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120860:	39 c1                	cmp    %eax,%ecx
f0120862:	74 17                	je     f012087b <test_kfree+0x28c>
f0120864:	83 ec 04             	sub    $0x4,%esp
f0120867:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012086c:	68 e0 04 00 00       	push   $0x4e0
f0120871:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120876:	e8 8a f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012087b:	e8 74 35 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120880:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120883:	74 17                	je     f012089c <test_kfree+0x2ad>
f0120885:	83 ec 04             	sub    $0x4,%esp
f0120888:	68 14 b6 13 f0       	push   $0xf013b614
f012088d:	68 e1 04 00 00       	push   $0x4e1
f0120892:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120897:	e8 69 f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012089c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012089f:	e8 c9 c8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01208a4:	29 c3                	sub    %eax,%ebx
f01208a6:	89 d8                	mov    %ebx,%eax
f01208a8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01208ad:	74 17                	je     f01208c6 <test_kfree+0x2d7>
f01208af:	83 ec 04             	sub    $0x4,%esp
f01208b2:	68 7c b6 13 f0       	push   $0xf013b67c
f01208b7:	68 e2 04 00 00       	push   $0x4e2
f01208bc:	68 fa b5 13 f0       	push   $0xf013b5fa
f01208c1:	e8 3f f9 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01208c6:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f01208cd:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01208d0:	e8 98 c8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01208d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208d8:	e8 17 35 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01208dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01208e0:	83 ec 0c             	sub    $0xc,%esp
f01208e3:	68 00 08 00 00       	push   $0x800
f01208e8:	e8 79 71 fe ff       	call   f0107a66 <kmalloc>
f01208ed:	83 c4 10             	add    $0x10,%esp
f01208f0:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208f6:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01208fc:	89 c1                	mov    %eax,%ecx
f01208fe:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0120905:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120908:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012090d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0120910:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120913:	ba 00 00 00 00       	mov    $0x0,%edx
f0120918:	f7 75 98             	divl   -0x68(%ebp)
f012091b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012091e:	29 d0                	sub    %edx,%eax
f0120920:	89 c3                	mov    %eax,%ebx
f0120922:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0120929:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012092e:	0f b6 d0             	movzbl %al,%edx
f0120931:	8b 45 90             	mov    -0x70(%ebp),%eax
f0120934:	01 d0                	add    %edx,%eax
f0120936:	48                   	dec    %eax
f0120937:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012093a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012093d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120942:	f7 75 90             	divl   -0x70(%ebp)
f0120945:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120948:	29 d0                	sub    %edx,%eax
f012094a:	01 c3                	add    %eax,%ebx
f012094c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120953:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120958:	0f b6 c0             	movzbl %al,%eax
f012095b:	c1 e0 04             	shl    $0x4,%eax
f012095e:	89 c2                	mov    %eax,%edx
f0120960:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120963:	01 d0                	add    %edx,%eax
f0120965:	48                   	dec    %eax
f0120966:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0120969:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012096c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120971:	f7 75 88             	divl   -0x78(%ebp)
f0120974:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120977:	29 d0                	sub    %edx,%eax
f0120979:	01 d8                	add    %ebx,%eax
f012097b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120980:	39 c1                	cmp    %eax,%ecx
f0120982:	74 17                	je     f012099b <test_kfree+0x3ac>
f0120984:	83 ec 04             	sub    $0x4,%esp
f0120987:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012098c:	68 e9 04 00 00       	push   $0x4e9
f0120991:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120996:	e8 6a f8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012099b:	e8 54 34 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01209a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209a3:	74 17                	je     f01209bc <test_kfree+0x3cd>
f01209a5:	83 ec 04             	sub    $0x4,%esp
f01209a8:	68 14 b6 13 f0       	push   $0xf013b614
f01209ad:	68 ea 04 00 00       	push   $0x4ea
f01209b2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01209b7:	e8 49 f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209bc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209bf:	e8 a9 c7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01209c4:	29 c3                	sub    %eax,%ebx
f01209c6:	89 d8                	mov    %ebx,%eax
f01209c8:	83 f8 01             	cmp    $0x1,%eax
f01209cb:	74 17                	je     f01209e4 <test_kfree+0x3f5>
f01209cd:	83 ec 04             	sub    $0x4,%esp
f01209d0:	68 7c b6 13 f0       	push   $0xf013b67c
f01209d5:	68 eb 04 00 00       	push   $0x4eb
f01209da:	68 fa b5 13 f0       	push   $0xf013b5fa
f01209df:	e8 21 f8 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01209e4:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f01209eb:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01209ee:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01209f4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01209f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01209fe:	eb 0e                	jmp    f0120a0e <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f0120a00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a03:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a06:	01 d0                	add    %edx,%eax
f0120a08:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0120a0b:	ff 45 f4             	incl   -0xc(%ebp)
f0120a0e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120a14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a17:	7f e7                	jg     f0120a00 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120a19:	e8 4f c7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120a1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a21:	e8 ce 33 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120a26:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0120a29:	83 ec 0c             	sub    $0xc,%esp
f0120a2c:	68 00 08 00 00       	push   $0x800
f0120a31:	e8 30 70 fe ff       	call   f0107a66 <kmalloc>
f0120a36:	83 c4 10             	add    $0x10,%esp
f0120a39:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a3f:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120a45:	89 c1                	mov    %eax,%ecx
f0120a47:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120a4e:	10 00 00 
f0120a51:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120a57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a5c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120a62:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120a68:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a6d:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120a73:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120a79:	29 d0                	sub    %edx,%eax
f0120a7b:	89 c3                	mov    %eax,%ebx
f0120a7d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120a84:	10 00 00 
f0120a87:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120a8c:	0f b6 d0             	movzbl %al,%edx
f0120a8f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120a95:	01 d0                	add    %edx,%eax
f0120a97:	48                   	dec    %eax
f0120a98:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0120a9e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120aa4:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aa9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0120aaf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120ab5:	29 d0                	sub    %edx,%eax
f0120ab7:	01 c3                	add    %eax,%ebx
f0120ab9:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0120ac0:	10 00 00 
f0120ac3:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120ac8:	0f b6 c0             	movzbl %al,%eax
f0120acb:	c1 e0 04             	shl    $0x4,%eax
f0120ace:	89 c2                	mov    %eax,%edx
f0120ad0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120ad6:	01 d0                	add    %edx,%eax
f0120ad8:	48                   	dec    %eax
f0120ad9:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0120adf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120ae5:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aea:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0120af0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120af6:	29 d0                	sub    %edx,%eax
f0120af8:	01 d8                	add    %ebx,%eax
f0120afa:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120aff:	39 c1                	cmp    %eax,%ecx
f0120b01:	74 17                	je     f0120b1a <test_kfree+0x52b>
f0120b03:	83 ec 04             	sub    $0x4,%esp
f0120b06:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0120b0b:	68 f7 04 00 00       	push   $0x4f7
f0120b10:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120b15:	e8 eb f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b1a:	e8 d5 32 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120b1f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b22:	74 17                	je     f0120b3b <test_kfree+0x54c>
f0120b24:	83 ec 04             	sub    $0x4,%esp
f0120b27:	68 14 b6 13 f0       	push   $0xf013b614
f0120b2c:	68 f8 04 00 00       	push   $0x4f8
f0120b31:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120b36:	e8 ca f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b3b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b3e:	e8 2a c6 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120b43:	29 c3                	sub    %eax,%ebx
f0120b45:	89 d8                	mov    %ebx,%eax
f0120b47:	83 f8 01             	cmp    $0x1,%eax
f0120b4a:	74 17                	je     f0120b63 <test_kfree+0x574>
f0120b4c:	83 ec 04             	sub    $0x4,%esp
f0120b4f:	68 7c b6 13 f0       	push   $0xf013b67c
f0120b54:	68 f9 04 00 00       	push   $0x4f9
f0120b59:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120b5e:	e8 a2 f6 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120b63:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120b6a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120b6d:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120b73:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120b76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b7d:	eb 0e                	jmp    f0120b8d <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120b7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b82:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b85:	01 d0                	add    %edx,%eax
f0120b87:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120b8a:	ff 45 f4             	incl   -0xc(%ebp)
f0120b8d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120b93:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b96:	7f e7                	jg     f0120b7f <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120b98:	e8 d0 c5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120b9d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ba0:	e8 4f 32 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120ba5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120ba8:	83 ec 0c             	sub    $0xc,%esp
f0120bab:	68 00 1c 00 00       	push   $0x1c00
f0120bb0:	e8 b1 6e fe ff       	call   f0107a66 <kmalloc>
f0120bb5:	83 c4 10             	add    $0x10,%esp
f0120bb8:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120bbe:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120bc4:	89 c1                	mov    %eax,%ecx
f0120bc6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120bcd:	10 00 00 
f0120bd0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120bd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120bdb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0120be1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120be7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bec:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0120bf2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120bf8:	29 d0                	sub    %edx,%eax
f0120bfa:	89 c3                	mov    %eax,%ebx
f0120bfc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0120c03:	10 00 00 
f0120c06:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120c0b:	0f b6 d0             	movzbl %al,%edx
f0120c0e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0120c14:	01 d0                	add    %edx,%eax
f0120c16:	48                   	dec    %eax
f0120c17:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120c1d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120c23:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c28:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120c2e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120c34:	29 d0                	sub    %edx,%eax
f0120c36:	01 c3                	add    %eax,%ebx
f0120c38:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120c3f:	10 00 00 
f0120c42:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120c47:	0f b6 c0             	movzbl %al,%eax
f0120c4a:	c1 e0 04             	shl    $0x4,%eax
f0120c4d:	89 c2                	mov    %eax,%edx
f0120c4f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120c55:	01 d0                	add    %edx,%eax
f0120c57:	48                   	dec    %eax
f0120c58:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120c5e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120c64:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c69:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120c6f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120c75:	29 d0                	sub    %edx,%eax
f0120c77:	01 d8                	add    %ebx,%eax
f0120c79:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120c7e:	39 c1                	cmp    %eax,%ecx
f0120c80:	74 17                	je     f0120c99 <test_kfree+0x6aa>
f0120c82:	83 ec 04             	sub    $0x4,%esp
f0120c85:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0120c8a:	68 05 05 00 00       	push   $0x505
f0120c8f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120c94:	e8 6c f5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c99:	e8 56 31 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120c9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ca1:	74 17                	je     f0120cba <test_kfree+0x6cb>
f0120ca3:	83 ec 04             	sub    $0x4,%esp
f0120ca6:	68 14 b6 13 f0       	push   $0xf013b614
f0120cab:	68 06 05 00 00       	push   $0x506
f0120cb0:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120cb5:	e8 4b f5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120cba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120cbd:	e8 ab c4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120cc2:	29 c3                	sub    %eax,%ebx
f0120cc4:	89 d8                	mov    %ebx,%eax
f0120cc6:	83 f8 02             	cmp    $0x2,%eax
f0120cc9:	74 17                	je     f0120ce2 <test_kfree+0x6f3>
f0120ccb:	83 ec 04             	sub    $0x4,%esp
f0120cce:	68 7c b6 13 f0       	push   $0xf013b67c
f0120cd3:	68 07 05 00 00       	push   $0x507
f0120cd8:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120cdd:	e8 23 f5 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120ce2:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120ce9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120cec:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120cf2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120cf5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120cfc:	eb 0e                	jmp    f0120d0c <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120cfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d01:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d04:	01 d0                	add    %edx,%eax
f0120d06:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120d09:	ff 45 f4             	incl   -0xc(%ebp)
f0120d0c:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120d12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d15:	7f e7                	jg     f0120cfe <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d17:	e8 51 c4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120d1c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d1f:	e8 d0 30 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120d24:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120d27:	83 ec 0c             	sub    $0xc,%esp
f0120d2a:	68 00 fc 2f 00       	push   $0x2ffc00
f0120d2f:	e8 32 6d fe ff       	call   f0107a66 <kmalloc>
f0120d34:	83 c4 10             	add    $0x10,%esp
f0120d37:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120d3d:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120d43:	89 c1                	mov    %eax,%ecx
f0120d45:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120d4c:	10 00 00 
f0120d4f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120d55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120d5a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120d60:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120d66:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d6b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120d71:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120d77:	29 d0                	sub    %edx,%eax
f0120d79:	89 c3                	mov    %eax,%ebx
f0120d7b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120d82:	10 00 00 
f0120d85:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120d8a:	0f b6 d0             	movzbl %al,%edx
f0120d8d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120d93:	01 d0                	add    %edx,%eax
f0120d95:	48                   	dec    %eax
f0120d96:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120d9c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120da2:	ba 00 00 00 00       	mov    $0x0,%edx
f0120da7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120dad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120db3:	29 d0                	sub    %edx,%eax
f0120db5:	01 c3                	add    %eax,%ebx
f0120db7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120dbe:	10 00 00 
f0120dc1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120dc6:	0f b6 c0             	movzbl %al,%eax
f0120dc9:	c1 e0 04             	shl    $0x4,%eax
f0120dcc:	89 c2                	mov    %eax,%edx
f0120dce:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120dd4:	01 d0                	add    %edx,%eax
f0120dd6:	48                   	dec    %eax
f0120dd7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120ddd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120de3:	ba 00 00 00 00       	mov    $0x0,%edx
f0120de8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120dee:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120df4:	29 d0                	sub    %edx,%eax
f0120df6:	01 d8                	add    %ebx,%eax
f0120df8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120dfd:	39 c1                	cmp    %eax,%ecx
f0120dff:	74 17                	je     f0120e18 <test_kfree+0x829>
f0120e01:	83 ec 04             	sub    $0x4,%esp
f0120e04:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0120e09:	68 13 05 00 00       	push   $0x513
f0120e0e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120e13:	e8 ed f3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e18:	e8 d7 2f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120e1d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e20:	74 17                	je     f0120e39 <test_kfree+0x84a>
f0120e22:	83 ec 04             	sub    $0x4,%esp
f0120e25:	68 14 b6 13 f0       	push   $0xf013b614
f0120e2a:	68 14 05 00 00       	push   $0x514
f0120e2f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120e34:	e8 cc f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120e39:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120e3c:	e8 2c c3 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120e41:	29 c3                	sub    %eax,%ebx
f0120e43:	89 d8                	mov    %ebx,%eax
f0120e45:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120e4a:	74 17                	je     f0120e63 <test_kfree+0x874>
f0120e4c:	83 ec 04             	sub    $0x4,%esp
f0120e4f:	68 7c b6 13 f0       	push   $0xf013b67c
f0120e54:	68 15 05 00 00       	push   $0x515
f0120e59:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120e5e:	e8 a2 f3 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120e63:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120e6a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120e6d:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120e73:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120e76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e7d:	eb 0e                	jmp    f0120e8d <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120e7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e82:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e85:	01 d0                	add    %edx,%eax
f0120e87:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120e8a:	ff 45 f4             	incl   -0xc(%ebp)
f0120e8d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120e93:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e96:	7f e7                	jg     f0120e7f <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e98:	e8 d0 c2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120e9d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ea0:	e8 4f 2f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120ea5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120ea8:	83 ec 0c             	sub    $0xc,%esp
f0120eab:	68 00 fc 5f 00       	push   $0x5ffc00
f0120eb0:	e8 b1 6b fe ff       	call   f0107a66 <kmalloc>
f0120eb5:	83 c4 10             	add    $0x10,%esp
f0120eb8:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ebe:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120ec4:	89 c1                	mov    %eax,%ecx
f0120ec6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120ecd:	10 00 00 
f0120ed0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120ed6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120edb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120ee1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120ee7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120eec:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120ef2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120ef8:	29 d0                	sub    %edx,%eax
f0120efa:	89 c3                	mov    %eax,%ebx
f0120efc:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120f03:	10 00 00 
f0120f06:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120f0b:	0f b6 d0             	movzbl %al,%edx
f0120f0e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120f14:	01 d0                	add    %edx,%eax
f0120f16:	48                   	dec    %eax
f0120f17:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120f1d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120f23:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f28:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120f2e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120f34:	29 d0                	sub    %edx,%eax
f0120f36:	01 c3                	add    %eax,%ebx
f0120f38:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120f3f:	10 00 00 
f0120f42:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0120f47:	0f b6 c0             	movzbl %al,%eax
f0120f4a:	c1 e0 04             	shl    $0x4,%eax
f0120f4d:	89 c2                	mov    %eax,%edx
f0120f4f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120f55:	01 d0                	add    %edx,%eax
f0120f57:	48                   	dec    %eax
f0120f58:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120f5e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120f64:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f69:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120f6f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120f75:	29 d0                	sub    %edx,%eax
f0120f77:	01 d8                	add    %ebx,%eax
f0120f79:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120f7e:	39 c1                	cmp    %eax,%ecx
f0120f80:	74 17                	je     f0120f99 <test_kfree+0x9aa>
f0120f82:	83 ec 04             	sub    $0x4,%esp
f0120f85:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0120f8a:	68 21 05 00 00       	push   $0x521
f0120f8f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120f94:	e8 6c f2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f99:	e8 56 2e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120f9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fa1:	74 17                	je     f0120fba <test_kfree+0x9cb>
f0120fa3:	83 ec 04             	sub    $0x4,%esp
f0120fa6:	68 14 b6 13 f0       	push   $0xf013b614
f0120fab:	68 22 05 00 00       	push   $0x522
f0120fb0:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120fb5:	e8 4b f2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120fba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120fbd:	e8 ab c1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120fc2:	29 c3                	sub    %eax,%ebx
f0120fc4:	89 d8                	mov    %ebx,%eax
f0120fc6:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120fcb:	74 17                	je     f0120fe4 <test_kfree+0x9f5>
f0120fcd:	83 ec 04             	sub    $0x4,%esp
f0120fd0:	68 7c b6 13 f0       	push   $0xf013b67c
f0120fd5:	68 23 05 00 00       	push   $0x523
f0120fda:	68 fa b5 13 f0       	push   $0xf013b5fa
f0120fdf:	e8 21 f2 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120fe4:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120feb:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120fee:	e8 7a c1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0120ff3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ff6:	e8 f9 2d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0120ffb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120ffe:	83 ec 0c             	sub    $0xc,%esp
f0121001:	68 00 38 00 00       	push   $0x3800
f0121006:	e8 5b 6a fe ff       	call   f0107a66 <kmalloc>
f012100b:	83 c4 10             	add    $0x10,%esp
f012100e:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121014:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012101a:	89 c1                	mov    %eax,%ecx
f012101c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0121023:	10 00 00 
f0121026:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012102c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121031:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0121037:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012103d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121042:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0121048:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012104e:	29 d0                	sub    %edx,%eax
f0121050:	89 c3                	mov    %eax,%ebx
f0121052:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0121059:	10 00 00 
f012105c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121061:	0f b6 d0             	movzbl %al,%edx
f0121064:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012106a:	01 d0                	add    %edx,%eax
f012106c:	48                   	dec    %eax
f012106d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0121073:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121079:	ba 00 00 00 00       	mov    $0x0,%edx
f012107e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0121084:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012108a:	29 d0                	sub    %edx,%eax
f012108c:	01 c3                	add    %eax,%ebx
f012108e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0121095:	10 00 00 
f0121098:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012109d:	0f b6 c0             	movzbl %al,%eax
f01210a0:	c1 e0 04             	shl    $0x4,%eax
f01210a3:	89 c2                	mov    %eax,%edx
f01210a5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01210ab:	01 d0                	add    %edx,%eax
f01210ad:	48                   	dec    %eax
f01210ae:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01210b4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01210ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01210bf:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01210c5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01210cb:	29 d0                	sub    %edx,%eax
f01210cd:	01 d8                	add    %ebx,%eax
f01210cf:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01210d4:	39 c1                	cmp    %eax,%ecx
f01210d6:	74 17                	je     f01210ef <test_kfree+0xb00>
f01210d8:	83 ec 04             	sub    $0x4,%esp
f01210db:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01210e0:	68 2a 05 00 00       	push   $0x52a
f01210e5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01210ea:	e8 16 f1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01210ef:	e8 00 2d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01210f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01210f7:	74 17                	je     f0121110 <test_kfree+0xb21>
f01210f9:	83 ec 04             	sub    $0x4,%esp
f01210fc:	68 14 b6 13 f0       	push   $0xf013b614
f0121101:	68 2b 05 00 00       	push   $0x52b
f0121106:	68 fa b5 13 f0       	push   $0xf013b5fa
f012110b:	e8 f5 f0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121110:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121113:	e8 55 c0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121118:	29 c3                	sub    %eax,%ebx
f012111a:	89 d8                	mov    %ebx,%eax
f012111c:	83 f8 04             	cmp    $0x4,%eax
f012111f:	74 17                	je     f0121138 <test_kfree+0xb49>
f0121121:	83 ec 04             	sub    $0x4,%esp
f0121124:	68 7c b6 13 f0       	push   $0xf013b67c
f0121129:	68 2c 05 00 00       	push   $0x52c
f012112e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121133:	e8 cd f0 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121138:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f012113f:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121142:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121148:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012114b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121152:	eb 0e                	jmp    f0121162 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0121154:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121157:	8b 45 80             	mov    -0x80(%ebp),%eax
f012115a:	01 d0                	add    %edx,%eax
f012115c:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012115f:	ff 45 f4             	incl   -0xc(%ebp)
f0121162:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0121168:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012116b:	7f e7                	jg     f0121154 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012116d:	e8 fb bf fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121172:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121178:	e8 77 2c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012117d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121183:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121189:	83 ec 0c             	sub    $0xc,%esp
f012118c:	50                   	push   %eax
f012118d:	e8 94 69 fe ff       	call   f0107b26 <kfree>
f0121192:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121195:	e8 5a 2c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012119a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01211a0:	74 17                	je     f01211b9 <test_kfree+0xbca>
f01211a2:	83 ec 04             	sub    $0x4,%esp
f01211a5:	68 14 b6 13 f0       	push   $0xf013b614
f01211aa:	68 3b 05 00 00       	push   $0x53b
f01211af:	68 fa b5 13 f0       	push   $0xf013b5fa
f01211b4:	e8 4c f0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01211b9:	e8 af bf fe ff       	call   f010d16d <sys_calculate_free_frames>
f01211be:	89 c2                	mov    %eax,%edx
f01211c0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01211c6:	29 c2                	sub    %eax,%edx
f01211c8:	89 d0                	mov    %edx,%eax
f01211ca:	3d 00 02 00 00       	cmp    $0x200,%eax
f01211cf:	74 17                	je     f01211e8 <test_kfree+0xbf9>
f01211d1:	83 ec 04             	sub    $0x4,%esp
f01211d4:	68 84 bd 13 f0       	push   $0xf013bd84
f01211d9:	68 3c 05 00 00       	push   $0x53c
f01211de:	68 fa b5 13 f0       	push   $0xf013b5fa
f01211e3:	e8 1d f0 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211e8:	e8 80 bf fe ff       	call   f010d16d <sys_calculate_free_frames>
f01211ed:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211f3:	e8 fc 2b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01211f8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01211fe:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121204:	83 ec 0c             	sub    $0xc,%esp
f0121207:	50                   	push   %eax
f0121208:	e8 19 69 fe ff       	call   f0107b26 <kfree>
f012120d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121210:	e8 df 2b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121215:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012121b:	74 17                	je     f0121234 <test_kfree+0xc45>
f012121d:	83 ec 04             	sub    $0x4,%esp
f0121220:	68 14 b6 13 f0       	push   $0xf013b614
f0121225:	68 42 05 00 00       	push   $0x542
f012122a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012122f:	e8 d1 ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121234:	e8 34 bf fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121239:	89 c2                	mov    %eax,%edx
f012123b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121241:	29 c2                	sub    %eax,%edx
f0121243:	89 d0                	mov    %edx,%eax
f0121245:	83 f8 01             	cmp    $0x1,%eax
f0121248:	74 17                	je     f0121261 <test_kfree+0xc72>
f012124a:	83 ec 04             	sub    $0x4,%esp
f012124d:	68 84 bd 13 f0       	push   $0xf013bd84
f0121252:	68 43 05 00 00       	push   $0x543
f0121257:	68 fa b5 13 f0       	push   $0xf013b5fa
f012125c:	e8 a4 ef fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121261:	e8 07 bf fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121266:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012126c:	e8 83 2b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121271:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0121277:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f012127d:	83 ec 0c             	sub    $0xc,%esp
f0121280:	50                   	push   %eax
f0121281:	e8 a0 68 fe ff       	call   f0107b26 <kfree>
f0121286:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121289:	e8 66 2b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012128e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121294:	74 17                	je     f01212ad <test_kfree+0xcbe>
f0121296:	83 ec 04             	sub    $0x4,%esp
f0121299:	68 14 b6 13 f0       	push   $0xf013b614
f012129e:	68 49 05 00 00       	push   $0x549
f01212a3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01212a8:	e8 58 ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01212ad:	e8 bb be fe ff       	call   f010d16d <sys_calculate_free_frames>
f01212b2:	89 c2                	mov    %eax,%edx
f01212b4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01212ba:	29 c2                	sub    %eax,%edx
f01212bc:	89 d0                	mov    %edx,%eax
f01212be:	3d 00 02 00 00       	cmp    $0x200,%eax
f01212c3:	74 17                	je     f01212dc <test_kfree+0xced>
f01212c5:	83 ec 04             	sub    $0x4,%esp
f01212c8:	68 84 bd 13 f0       	push   $0xf013bd84
f01212cd:	68 4a 05 00 00       	push   $0x54a
f01212d2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01212d7:	e8 29 ef fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01212dc:	e8 8c be fe ff       	call   f010d16d <sys_calculate_free_frames>
f01212e1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212e7:	e8 08 2b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01212ec:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01212f2:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01212f8:	83 ec 0c             	sub    $0xc,%esp
f01212fb:	50                   	push   %eax
f01212fc:	e8 25 68 fe ff       	call   f0107b26 <kfree>
f0121301:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121304:	e8 eb 2a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121309:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012130f:	74 17                	je     f0121328 <test_kfree+0xd39>
f0121311:	83 ec 04             	sub    $0x4,%esp
f0121314:	68 14 b6 13 f0       	push   $0xf013b614
f0121319:	68 50 05 00 00       	push   $0x550
f012131e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121323:	e8 dd ee fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121328:	e8 40 be fe ff       	call   f010d16d <sys_calculate_free_frames>
f012132d:	89 c2                	mov    %eax,%edx
f012132f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121335:	29 c2                	sub    %eax,%edx
f0121337:	89 d0                	mov    %edx,%eax
f0121339:	3d 00 06 00 00       	cmp    $0x600,%eax
f012133e:	74 17                	je     f0121357 <test_kfree+0xd68>
f0121340:	83 ec 04             	sub    $0x4,%esp
f0121343:	68 84 bd 13 f0       	push   $0xf013bd84
f0121348:	68 51 05 00 00       	push   $0x551
f012134d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121352:	e8 ae ee fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121357:	83 ec 0c             	sub    $0xc,%esp
f012135a:	68 bc bd 13 f0       	push   $0xf013bdbc
f012135f:	e8 aa f9 fd ff       	call   f0100d0e <cprintf>
f0121364:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121367:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012136d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121370:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121377:	eb 1e                	jmp    f0121397 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0121379:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012137f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121382:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121385:	01 c8                	add    %ecx,%eax
f0121387:	8a 00                	mov    (%eax),%al
f0121389:	0f be c0             	movsbl %al,%eax
f012138c:	01 d0                	add    %edx,%eax
f012138e:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121394:	ff 45 f4             	incl   -0xc(%ebp)
f0121397:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012139d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213a0:	7f d7                	jg     f0121379 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01213a2:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01213a8:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01213ae:	89 c1                	mov    %eax,%ecx
f01213b0:	01 c9                	add    %ecx,%ecx
f01213b2:	01 c8                	add    %ecx,%eax
f01213b4:	39 c2                	cmp    %eax,%edx
f01213b6:	74 17                	je     f01213cf <test_kfree+0xde0>
f01213b8:	83 ec 04             	sub    $0x4,%esp
f01213bb:	68 e0 bd 13 f0       	push   $0xf013bde0
f01213c0:	68 5e 05 00 00       	push   $0x55e
f01213c5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01213ca:	e8 36 ee fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01213cf:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01213d5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01213d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213df:	eb 1e                	jmp    f01213ff <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f01213e1:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01213e7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01213ea:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213ed:	01 c8                	add    %ecx,%eax
f01213ef:	8a 00                	mov    (%eax),%al
f01213f1:	0f be c0             	movsbl %al,%eax
f01213f4:	01 d0                	add    %edx,%eax
f01213f6:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01213fc:	ff 45 f4             	incl   -0xc(%ebp)
f01213ff:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0121405:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121408:	7f d7                	jg     f01213e1 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012140a:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0121410:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0121416:	c1 e2 02             	shl    $0x2,%edx
f0121419:	39 d0                	cmp    %edx,%eax
f012141b:	74 17                	je     f0121434 <test_kfree+0xe45>
f012141d:	83 ec 04             	sub    $0x4,%esp
f0121420:	68 e0 bd 13 f0       	push   $0xf013bde0
f0121425:	68 66 05 00 00       	push   $0x566
f012142a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012142f:	e8 d1 ed fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121434:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012143a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012143d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121444:	eb 1e                	jmp    f0121464 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0121446:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012144c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012144f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121452:	01 c8                	add    %ecx,%eax
f0121454:	8a 00                	mov    (%eax),%al
f0121456:	0f be c0             	movsbl %al,%eax
f0121459:	01 d0                	add    %edx,%eax
f012145b:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121461:	ff 45 f4             	incl   -0xc(%ebp)
f0121464:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012146a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012146d:	7f d7                	jg     f0121446 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012146f:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0121475:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012147b:	89 d0                	mov    %edx,%eax
f012147d:	c1 e0 02             	shl    $0x2,%eax
f0121480:	01 d0                	add    %edx,%eax
f0121482:	39 c1                	cmp    %eax,%ecx
f0121484:	74 17                	je     f012149d <test_kfree+0xeae>
f0121486:	83 ec 04             	sub    $0x4,%esp
f0121489:	68 e0 bd 13 f0       	push   $0xf013bde0
f012148e:	68 6e 05 00 00       	push   $0x56e
f0121493:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121498:	e8 68 ed fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012149d:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01214a3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01214a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01214ad:	eb 1e                	jmp    f01214cd <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f01214af:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f01214b5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01214b8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01214bb:	01 c8                	add    %ecx,%eax
f01214bd:	8a 00                	mov    (%eax),%al
f01214bf:	0f be c0             	movsbl %al,%eax
f01214c2:	01 d0                	add    %edx,%eax
f01214c4:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01214ca:	ff 45 f4             	incl   -0xc(%ebp)
f01214cd:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01214d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01214d6:	7f d7                	jg     f01214af <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01214d8:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01214de:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01214e4:	89 d0                	mov    %edx,%eax
f01214e6:	01 c0                	add    %eax,%eax
f01214e8:	01 d0                	add    %edx,%eax
f01214ea:	01 c0                	add    %eax,%eax
f01214ec:	01 d0                	add    %edx,%eax
f01214ee:	39 c1                	cmp    %eax,%ecx
f01214f0:	74 17                	je     f0121509 <test_kfree+0xf1a>
f01214f2:	83 ec 04             	sub    $0x4,%esp
f01214f5:	68 e0 bd 13 f0       	push   $0xf013bde0
f01214fa:	68 76 05 00 00       	push   $0x576
f01214ff:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121504:	e8 fc ec fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0121509:	83 ec 0c             	sub    $0xc,%esp
f012150c:	68 13 be 13 f0       	push   $0xf013be13
f0121511:	e8 f8 f7 fd ff       	call   f0100d0e <cprintf>
f0121516:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121519:	e8 4f bc fe ff       	call   f010d16d <sys_calculate_free_frames>
f012151e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121521:	e8 ce 28 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121526:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0121529:	83 ec 0c             	sub    $0xc,%esp
f012152c:	68 00 50 00 00       	push   $0x5000
f0121531:	e8 30 65 fe ff       	call   f0107a66 <kmalloc>
f0121536:	83 c4 10             	add    $0x10,%esp
f0121539:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012153f:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121545:	89 c1                	mov    %eax,%ecx
f0121547:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012154e:	10 00 00 
f0121551:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0121557:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012155c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121562:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121568:	ba 00 00 00 00       	mov    $0x0,%edx
f012156d:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121573:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121579:	29 d0                	sub    %edx,%eax
f012157b:	89 c3                	mov    %eax,%ebx
f012157d:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121584:	10 00 00 
f0121587:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012158c:	0f b6 d0             	movzbl %al,%edx
f012158f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121595:	01 d0                	add    %edx,%eax
f0121597:	48                   	dec    %eax
f0121598:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012159e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01215a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01215a9:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01215af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01215b5:	29 d0                	sub    %edx,%eax
f01215b7:	01 c3                	add    %eax,%ebx
f01215b9:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01215c0:	10 00 00 
f01215c3:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01215c8:	0f b6 c0             	movzbl %al,%eax
f01215cb:	c1 e0 04             	shl    $0x4,%eax
f01215ce:	89 c2                	mov    %eax,%edx
f01215d0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01215d6:	01 d0                	add    %edx,%eax
f01215d8:	48                   	dec    %eax
f01215d9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01215df:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01215e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01215ea:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01215f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01215f6:	29 d0                	sub    %edx,%eax
f01215f8:	01 d8                	add    %ebx,%eax
f01215fa:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01215ff:	39 c1                	cmp    %eax,%ecx
f0121601:	74 17                	je     f012161a <test_kfree+0x102b>
f0121603:	83 ec 04             	sub    $0x4,%esp
f0121606:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012160b:	68 80 05 00 00       	push   $0x580
f0121610:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121615:	e8 eb eb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012161a:	e8 d5 27 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012161f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121622:	74 17                	je     f012163b <test_kfree+0x104c>
f0121624:	83 ec 04             	sub    $0x4,%esp
f0121627:	68 14 b6 13 f0       	push   $0xf013b614
f012162c:	68 81 05 00 00       	push   $0x581
f0121631:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121636:	e8 ca eb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012163b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012163e:	e8 2a bb fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121643:	29 c3                	sub    %eax,%ebx
f0121645:	89 d8                	mov    %ebx,%eax
f0121647:	83 f8 05             	cmp    $0x5,%eax
f012164a:	74 17                	je     f0121663 <test_kfree+0x1074>
f012164c:	83 ec 04             	sub    $0x4,%esp
f012164f:	68 7c b6 13 f0       	push   $0xf013b67c
f0121654:	68 82 05 00 00       	push   $0x582
f0121659:	68 fa b5 13 f0       	push   $0xf013b5fa
f012165e:	e8 a2 eb fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121663:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f012166a:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012166d:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121673:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121676:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012167d:	eb 0e                	jmp    f012168d <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f012167f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121682:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121685:	01 d0                	add    %edx,%eax
f0121687:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012168a:	ff 45 f4             	incl   -0xc(%ebp)
f012168d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0121693:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121696:	7f e7                	jg     f012167f <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121698:	e8 d0 ba fe ff       	call   f010d16d <sys_calculate_free_frames>
f012169d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216a0:	e8 4f 27 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01216a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01216a8:	83 ec 0c             	sub    $0xc,%esp
f01216ab:	68 00 00 10 00       	push   $0x100000
f01216b0:	e8 b1 63 fe ff       	call   f0107a66 <kmalloc>
f01216b5:	83 c4 10             	add    $0x10,%esp
f01216b8:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216be:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01216c4:	89 c1                	mov    %eax,%ecx
f01216c6:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01216cd:	10 00 00 
f01216d0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01216d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01216db:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01216e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01216e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01216ec:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01216f2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01216f8:	29 d0                	sub    %edx,%eax
f01216fa:	89 c3                	mov    %eax,%ebx
f01216fc:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0121703:	10 00 00 
f0121706:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012170b:	0f b6 d0             	movzbl %al,%edx
f012170e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121714:	01 d0                	add    %edx,%eax
f0121716:	48                   	dec    %eax
f0121717:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012171d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121723:	ba 00 00 00 00       	mov    $0x0,%edx
f0121728:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012172e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121734:	29 d0                	sub    %edx,%eax
f0121736:	01 c3                	add    %eax,%ebx
f0121738:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012173f:	10 00 00 
f0121742:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121747:	0f b6 c0             	movzbl %al,%eax
f012174a:	c1 e0 04             	shl    $0x4,%eax
f012174d:	89 c2                	mov    %eax,%edx
f012174f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121755:	01 d0                	add    %edx,%eax
f0121757:	48                   	dec    %eax
f0121758:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012175e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121764:	ba 00 00 00 00       	mov    $0x0,%edx
f0121769:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012176f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121775:	29 d0                	sub    %edx,%eax
f0121777:	01 d8                	add    %ebx,%eax
f0121779:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012177e:	39 c1                	cmp    %eax,%ecx
f0121780:	74 17                	je     f0121799 <test_kfree+0x11aa>
f0121782:	83 ec 04             	sub    $0x4,%esp
f0121785:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012178a:	68 8e 05 00 00       	push   $0x58e
f012178f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121794:	e8 6c ea fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121799:	e8 56 26 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012179e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217a1:	74 17                	je     f01217ba <test_kfree+0x11cb>
f01217a3:	83 ec 04             	sub    $0x4,%esp
f01217a6:	68 14 b6 13 f0       	push   $0xf013b614
f01217ab:	68 8f 05 00 00       	push   $0x58f
f01217b0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01217b5:	e8 4b ea fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01217ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01217bd:	e8 ab b9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01217c2:	29 c3                	sub    %eax,%ebx
f01217c4:	89 d8                	mov    %ebx,%eax
f01217c6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01217cb:	74 17                	je     f01217e4 <test_kfree+0x11f5>
f01217cd:	83 ec 04             	sub    $0x4,%esp
f01217d0:	68 7c b6 13 f0       	push   $0xf013b67c
f01217d5:	68 90 05 00 00       	push   $0x590
f01217da:	68 fa b5 13 f0       	push   $0xf013b5fa
f01217df:	e8 21 ea fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01217e4:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01217eb:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01217ee:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01217f4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01217f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217fe:	eb 0e                	jmp    f012180e <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0121800:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121803:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121806:	01 d0                	add    %edx,%eax
f0121808:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012180b:	ff 45 f4             	incl   -0xc(%ebp)
f012180e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0121814:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121817:	7f e7                	jg     f0121800 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0121819:	e8 ac 66 ff ff       	call   f0117eca <isKHeapPlacementStrategyNEXTFIT>
f012181e:	84 c0                	test   %al,%al
f0121820:	0f 84 ac 06 00 00    	je     f0121ed2 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121826:	e8 42 b9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012182b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012182e:	e8 c1 25 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121833:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121836:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012183d:	10 00 00 
f0121840:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121846:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012184b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121851:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121857:	ba 00 00 00 00       	mov    $0x0,%edx
f012185c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0121862:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121868:	29 d0                	sub    %edx,%eax
f012186a:	89 c1                	mov    %eax,%ecx
f012186c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121873:	10 00 00 
f0121876:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012187b:	0f b6 d0             	movzbl %al,%edx
f012187e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121884:	01 d0                	add    %edx,%eax
f0121886:	48                   	dec    %eax
f0121887:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012188d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121893:	ba 00 00 00 00       	mov    $0x0,%edx
f0121898:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012189e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01218a4:	29 d0                	sub    %edx,%eax
f01218a6:	01 c1                	add    %eax,%ecx
f01218a8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01218af:	10 00 00 
f01218b2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01218b7:	0f b6 c0             	movzbl %al,%eax
f01218ba:	c1 e0 04             	shl    $0x4,%eax
f01218bd:	89 c2                	mov    %eax,%edx
f01218bf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01218c5:	01 d0                	add    %edx,%eax
f01218c7:	48                   	dec    %eax
f01218c8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01218ce:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01218d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01218d9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01218df:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01218e5:	29 d0                	sub    %edx,%eax
f01218e7:	01 c8                	add    %ecx,%eax
f01218e9:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01218ee:	29 c2                	sub    %eax,%edx
f01218f0:	89 d0                	mov    %edx,%eax
f01218f2:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01218f8:	83 ec 0c             	sub    $0xc,%esp
f01218fb:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0121901:	e8 60 61 fe ff       	call   f0107a66 <kmalloc>
f0121906:	83 c4 10             	add    $0x10,%esp
f0121909:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012190f:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121915:	89 c1                	mov    %eax,%ecx
f0121917:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012191e:	10 00 00 
f0121921:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0121927:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012192c:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0121932:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121938:	ba 00 00 00 00       	mov    $0x0,%edx
f012193d:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0121943:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0121949:	29 d0                	sub    %edx,%eax
f012194b:	89 c3                	mov    %eax,%ebx
f012194d:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121954:	10 00 00 
f0121957:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012195c:	0f b6 d0             	movzbl %al,%edx
f012195f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0121965:	01 d0                	add    %edx,%eax
f0121967:	48                   	dec    %eax
f0121968:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012196e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121974:	ba 00 00 00 00       	mov    $0x0,%edx
f0121979:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012197f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121985:	29 d0                	sub    %edx,%eax
f0121987:	01 c3                	add    %eax,%ebx
f0121989:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0121990:	10 00 00 
f0121993:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121998:	0f b6 c0             	movzbl %al,%eax
f012199b:	c1 e0 04             	shl    $0x4,%eax
f012199e:	89 c2                	mov    %eax,%edx
f01219a0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01219a6:	01 d0                	add    %edx,%eax
f01219a8:	48                   	dec    %eax
f01219a9:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01219af:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01219b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01219ba:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01219c0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01219c6:	29 d0                	sub    %edx,%eax
f01219c8:	01 d8                	add    %ebx,%eax
f01219ca:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01219cf:	39 c1                	cmp    %eax,%ecx
f01219d1:	74 17                	je     f01219ea <test_kfree+0x13fb>
f01219d3:	83 ec 04             	sub    $0x4,%esp
f01219d6:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01219db:	68 9f 05 00 00       	push   $0x59f
f01219e0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01219e5:	e8 1b e8 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219ea:	e8 05 24 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01219ef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219f2:	74 17                	je     f0121a0b <test_kfree+0x141c>
f01219f4:	83 ec 04             	sub    $0x4,%esp
f01219f7:	68 14 b6 13 f0       	push   $0xf013b614
f01219fc:	68 a0 05 00 00       	push   $0x5a0
f0121a01:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121a06:	e8 fa e7 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a0b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a0e:	e8 5a b7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121a13:	29 c3                	sub    %eax,%ebx
f0121a15:	89 da                	mov    %ebx,%edx
f0121a17:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121a1d:	c1 e8 0c             	shr    $0xc,%eax
f0121a20:	39 c2                	cmp    %eax,%edx
f0121a22:	74 17                	je     f0121a3b <test_kfree+0x144c>
f0121a24:	83 ec 04             	sub    $0x4,%esp
f0121a27:	68 7c b6 13 f0       	push   $0xf013b67c
f0121a2c:	68 a1 05 00 00       	push   $0x5a1
f0121a31:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121a36:	e8 ca e7 fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0121a3b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121a41:	48                   	dec    %eax
f0121a42:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121a48:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121a4e:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121a51:	e8 17 b7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121a56:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121a59:	e8 96 23 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121a5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121a61:	83 ec 0c             	sub    $0xc,%esp
f0121a64:	68 00 00 30 00       	push   $0x300000
f0121a69:	e8 f8 5f fe ff       	call   f0107a66 <kmalloc>
f0121a6e:	83 c4 10             	add    $0x10,%esp
f0121a71:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a77:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121a7d:	89 c1                	mov    %eax,%ecx
f0121a7f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121a86:	10 00 00 
f0121a89:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121a8f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a94:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121a9a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121aa0:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aa5:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0121aab:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121ab1:	29 d0                	sub    %edx,%eax
f0121ab3:	89 c3                	mov    %eax,%ebx
f0121ab5:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0121abc:	10 00 00 
f0121abf:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121ac4:	0f b6 d0             	movzbl %al,%edx
f0121ac7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0121acd:	01 d0                	add    %edx,%eax
f0121acf:	48                   	dec    %eax
f0121ad0:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121ad6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121adc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ae1:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0121ae7:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121aed:	29 d0                	sub    %edx,%eax
f0121aef:	01 c3                	add    %eax,%ebx
f0121af1:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0121af8:	10 00 00 
f0121afb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121b00:	0f b6 c0             	movzbl %al,%eax
f0121b03:	c1 e0 04             	shl    $0x4,%eax
f0121b06:	89 c2                	mov    %eax,%edx
f0121b08:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121b0e:	01 d0                	add    %edx,%eax
f0121b10:	48                   	dec    %eax
f0121b11:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0121b17:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b22:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121b28:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b2e:	29 d0                	sub    %edx,%eax
f0121b30:	01 d8                	add    %ebx,%eax
f0121b32:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121b37:	39 c1                	cmp    %eax,%ecx
f0121b39:	74 17                	je     f0121b52 <test_kfree+0x1563>
f0121b3b:	83 ec 04             	sub    $0x4,%esp
f0121b3e:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0121b43:	68 ae 05 00 00       	push   $0x5ae
f0121b48:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121b4d:	e8 b3 e6 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b52:	e8 9d 22 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121b57:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b5a:	74 17                	je     f0121b73 <test_kfree+0x1584>
f0121b5c:	83 ec 04             	sub    $0x4,%esp
f0121b5f:	68 14 b6 13 f0       	push   $0xf013b614
f0121b64:	68 af 05 00 00       	push   $0x5af
f0121b69:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121b6e:	e8 92 e6 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b73:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b76:	e8 f2 b5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121b7b:	29 c3                	sub    %eax,%ebx
f0121b7d:	89 d8                	mov    %ebx,%eax
f0121b7f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b84:	74 17                	je     f0121b9d <test_kfree+0x15ae>
f0121b86:	83 ec 04             	sub    $0x4,%esp
f0121b89:	68 7c b6 13 f0       	push   $0xf013b67c
f0121b8e:	68 b0 05 00 00       	push   $0x5b0
f0121b93:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121b98:	e8 68 e6 fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121b9d:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121ba4:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121ba7:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121bad:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0121bb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121bb7:	eb 0e                	jmp    f0121bc7 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121bb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121bbc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121bbf:	01 d0                	add    %edx,%eax
f0121bc1:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121bc4:	ff 45 f4             	incl   -0xc(%ebp)
f0121bc7:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0121bcd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121bd0:	7f e7                	jg     f0121bb9 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121bd2:	e8 96 b5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121bd7:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121bda:	e8 15 22 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121bdf:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0121be2:	83 ec 0c             	sub    $0xc,%esp
f0121be5:	68 00 08 00 00       	push   $0x800
f0121bea:	e8 77 5e fe ff       	call   f0107a66 <kmalloc>
f0121bef:	83 c4 10             	add    $0x10,%esp
f0121bf2:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121bf8:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121bfe:	89 c1                	mov    %eax,%ecx
f0121c00:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0121c07:	10 00 00 
f0121c0a:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121c10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c15:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0121c1b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c21:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c26:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121c2c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c32:	29 d0                	sub    %edx,%eax
f0121c34:	89 c3                	mov    %eax,%ebx
f0121c36:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121c3d:	10 00 00 
f0121c40:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121c45:	0f b6 d0             	movzbl %al,%edx
f0121c48:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121c4e:	01 d0                	add    %edx,%eax
f0121c50:	48                   	dec    %eax
f0121c51:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121c57:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121c5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c62:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121c68:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121c6e:	29 d0                	sub    %edx,%eax
f0121c70:	01 c3                	add    %eax,%ebx
f0121c72:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121c79:	10 00 00 
f0121c7c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121c81:	0f b6 c0             	movzbl %al,%eax
f0121c84:	c1 e0 04             	shl    $0x4,%eax
f0121c87:	89 c2                	mov    %eax,%edx
f0121c89:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121c8f:	01 d0                	add    %edx,%eax
f0121c91:	48                   	dec    %eax
f0121c92:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121c98:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121c9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ca3:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121ca9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121caf:	29 d0                	sub    %edx,%eax
f0121cb1:	01 d8                	add    %ebx,%eax
f0121cb3:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121cb8:	39 c1                	cmp    %eax,%ecx
f0121cba:	74 17                	je     f0121cd3 <test_kfree+0x16e4>
f0121cbc:	83 ec 04             	sub    $0x4,%esp
f0121cbf:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0121cc4:	68 bc 05 00 00       	push   $0x5bc
f0121cc9:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121cce:	e8 32 e5 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cd3:	e8 1c 21 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121cd8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cdb:	74 17                	je     f0121cf4 <test_kfree+0x1705>
f0121cdd:	83 ec 04             	sub    $0x4,%esp
f0121ce0:	68 14 b6 13 f0       	push   $0xf013b614
f0121ce5:	68 bd 05 00 00       	push   $0x5bd
f0121cea:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121cef:	e8 11 e5 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121cf4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121cf7:	e8 71 b4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121cfc:	29 c3                	sub    %eax,%ebx
f0121cfe:	89 d8                	mov    %ebx,%eax
f0121d00:	83 f8 01             	cmp    $0x1,%eax
f0121d03:	74 17                	je     f0121d1c <test_kfree+0x172d>
f0121d05:	83 ec 04             	sub    $0x4,%esp
f0121d08:	68 7c b6 13 f0       	push   $0xf013b67c
f0121d0d:	68 be 05 00 00       	push   $0x5be
f0121d12:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121d17:	e8 e9 e4 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0121d1c:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0121d23:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121d26:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121d2c:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121d2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d36:	eb 0e                	jmp    f0121d46 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121d38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d3b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d3e:	01 d0                	add    %edx,%eax
f0121d40:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121d43:	ff 45 f4             	incl   -0xc(%ebp)
f0121d46:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121d4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d4f:	7f e7                	jg     f0121d38 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121d51:	e8 17 b4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121d56:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121d59:	e8 96 20 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121d5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121d61:	83 ec 0c             	sub    $0xc,%esp
f0121d64:	68 00 00 10 00       	push   $0x100000
f0121d69:	e8 f8 5c fe ff       	call   f0107a66 <kmalloc>
f0121d6e:	83 c4 10             	add    $0x10,%esp
f0121d71:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d77:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121d7d:	89 c1                	mov    %eax,%ecx
f0121d7f:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121d86:	10 00 00 
f0121d89:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121d8f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121d94:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121d9a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121da0:	ba 00 00 00 00       	mov    $0x0,%edx
f0121da5:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121dab:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121db1:	29 d0                	sub    %edx,%eax
f0121db3:	89 c3                	mov    %eax,%ebx
f0121db5:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121dbc:	10 00 00 
f0121dbf:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121dc4:	0f b6 d0             	movzbl %al,%edx
f0121dc7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121dcd:	01 d0                	add    %edx,%eax
f0121dcf:	48                   	dec    %eax
f0121dd0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121dd6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121ddc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121de1:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121de7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121ded:	29 d0                	sub    %edx,%eax
f0121def:	01 c3                	add    %eax,%ebx
f0121df1:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121df8:	10 00 00 
f0121dfb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0121e00:	0f b6 c0             	movzbl %al,%eax
f0121e03:	c1 e0 04             	shl    $0x4,%eax
f0121e06:	89 c2                	mov    %eax,%edx
f0121e08:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121e0e:	01 d0                	add    %edx,%eax
f0121e10:	48                   	dec    %eax
f0121e11:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121e17:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121e1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e22:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121e28:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121e2e:	29 d0                	sub    %edx,%eax
f0121e30:	01 d8                	add    %ebx,%eax
f0121e32:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121e37:	39 c1                	cmp    %eax,%ecx
f0121e39:	74 17                	je     f0121e52 <test_kfree+0x1863>
f0121e3b:	83 ec 04             	sub    $0x4,%esp
f0121e3e:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0121e43:	68 ca 05 00 00       	push   $0x5ca
f0121e48:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121e4d:	e8 b3 e3 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e52:	e8 9d 1f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121e57:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e5a:	74 17                	je     f0121e73 <test_kfree+0x1884>
f0121e5c:	83 ec 04             	sub    $0x4,%esp
f0121e5f:	68 14 b6 13 f0       	push   $0xf013b614
f0121e64:	68 cb 05 00 00       	push   $0x5cb
f0121e69:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121e6e:	e8 92 e3 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e73:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e76:	e8 f2 b2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121e7b:	29 c3                	sub    %eax,%ebx
f0121e7d:	89 d8                	mov    %ebx,%eax
f0121e7f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121e84:	74 17                	je     f0121e9d <test_kfree+0x18ae>
f0121e86:	83 ec 04             	sub    $0x4,%esp
f0121e89:	68 7c b6 13 f0       	push   $0xf013b67c
f0121e8e:	68 cc 05 00 00       	push   $0x5cc
f0121e93:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121e98:	e8 68 e3 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121e9d:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121ea4:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121ea7:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121ead:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121eb7:	eb 0e                	jmp    f0121ec7 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121eb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ebc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ebf:	01 d0                	add    %edx,%eax
f0121ec1:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121ec4:	ff 45 f4             	incl   -0xc(%ebp)
f0121ec7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121ecd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ed0:	7f e7                	jg     f0121eb9 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121ed2:	83 ec 0c             	sub    $0xc,%esp
f0121ed5:	68 1a be 13 f0       	push   $0xf013be1a
f0121eda:	e8 2f ee fd ff       	call   f0100d0e <cprintf>
f0121edf:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ee2:	e8 86 b2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121ee7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121eea:	e8 05 1f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121eef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121ef2:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121ef8:	83 ec 0c             	sub    $0xc,%esp
f0121efb:	50                   	push   %eax
f0121efc:	e8 25 5c fe ff       	call   f0107b26 <kfree>
f0121f01:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f04:	e8 eb 1e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121f09:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f0c:	74 17                	je     f0121f25 <test_kfree+0x1936>
f0121f0e:	83 ec 04             	sub    $0x4,%esp
f0121f11:	68 14 b6 13 f0       	push   $0xf013b614
f0121f16:	68 dd 05 00 00       	push   $0x5dd
f0121f1b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121f20:	e8 e0 e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f25:	e8 43 b2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121f2a:	89 c2                	mov    %eax,%edx
f0121f2c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f2f:	29 c2                	sub    %eax,%edx
f0121f31:	89 d0                	mov    %edx,%eax
f0121f33:	83 f8 02             	cmp    $0x2,%eax
f0121f36:	74 17                	je     f0121f4f <test_kfree+0x1960>
f0121f38:	83 ec 04             	sub    $0x4,%esp
f0121f3b:	68 84 bd 13 f0       	push   $0xf013bd84
f0121f40:	68 de 05 00 00       	push   $0x5de
f0121f45:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121f4a:	e8 b6 e2 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f4f:	e8 19 b2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121f54:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f57:	e8 98 1e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121f5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121f5f:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121f65:	83 ec 0c             	sub    $0xc,%esp
f0121f68:	50                   	push   %eax
f0121f69:	e8 b8 5b fe ff       	call   f0107b26 <kfree>
f0121f6e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f71:	e8 7e 1e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121f76:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f79:	74 17                	je     f0121f92 <test_kfree+0x19a3>
f0121f7b:	83 ec 04             	sub    $0x4,%esp
f0121f7e:	68 14 b6 13 f0       	push   $0xf013b614
f0121f83:	68 e4 05 00 00       	push   $0x5e4
f0121f88:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121f8d:	e8 73 e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f92:	e8 d6 b1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121f97:	89 c2                	mov    %eax,%edx
f0121f99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f9c:	29 c2                	sub    %eax,%edx
f0121f9e:	89 d0                	mov    %edx,%eax
f0121fa0:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121fa5:	74 17                	je     f0121fbe <test_kfree+0x19cf>
f0121fa7:	83 ec 04             	sub    $0x4,%esp
f0121faa:	68 84 bd 13 f0       	push   $0xf013bd84
f0121faf:	68 e5 05 00 00       	push   $0x5e5
f0121fb4:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121fb9:	e8 47 e2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121fbe:	e8 aa b1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0121fc3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121fc6:	e8 29 1e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121fcb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121fce:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121fd4:	83 ec 0c             	sub    $0xc,%esp
f0121fd7:	50                   	push   %eax
f0121fd8:	e8 49 5b fe ff       	call   f0107b26 <kfree>
f0121fdd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fe0:	e8 0f 1e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0121fe5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fe8:	74 17                	je     f0122001 <test_kfree+0x1a12>
f0121fea:	83 ec 04             	sub    $0x4,%esp
f0121fed:	68 14 b6 13 f0       	push   $0xf013b614
f0121ff2:	68 eb 05 00 00       	push   $0x5eb
f0121ff7:	68 fa b5 13 f0       	push   $0xf013b5fa
f0121ffc:	e8 04 e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122001:	e8 67 b1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122006:	89 c2                	mov    %eax,%edx
f0122008:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012200b:	29 c2                	sub    %eax,%edx
f012200d:	89 d0                	mov    %edx,%eax
f012200f:	83 f8 01             	cmp    $0x1,%eax
f0122012:	74 17                	je     f012202b <test_kfree+0x1a3c>
f0122014:	83 ec 04             	sub    $0x4,%esp
f0122017:	68 84 bd 13 f0       	push   $0xf013bd84
f012201c:	68 ec 05 00 00       	push   $0x5ec
f0122021:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122026:	e8 da e1 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012202b:	e8 3d b1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122030:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122033:	e8 bc 1d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122038:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f012203b:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0122041:	83 ec 0c             	sub    $0xc,%esp
f0122044:	50                   	push   %eax
f0122045:	e8 dc 5a fe ff       	call   f0107b26 <kfree>
f012204a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012204d:	e8 a2 1d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122052:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122055:	74 17                	je     f012206e <test_kfree+0x1a7f>
f0122057:	83 ec 04             	sub    $0x4,%esp
f012205a:	68 14 b6 13 f0       	push   $0xf013b614
f012205f:	68 f2 05 00 00       	push   $0x5f2
f0122064:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122069:	e8 97 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012206e:	e8 fa b0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122073:	89 c2                	mov    %eax,%edx
f0122075:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122078:	29 c2                	sub    %eax,%edx
f012207a:	89 d0                	mov    %edx,%eax
f012207c:	83 f8 04             	cmp    $0x4,%eax
f012207f:	74 17                	je     f0122098 <test_kfree+0x1aa9>
f0122081:	83 ec 04             	sub    $0x4,%esp
f0122084:	68 84 bd 13 f0       	push   $0xf013bd84
f0122089:	68 f3 05 00 00       	push   $0x5f3
f012208e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122093:	e8 6d e1 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122098:	e8 d0 b0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012209d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220a0:	e8 4f 1d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01220a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01220a8:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01220ae:	83 ec 0c             	sub    $0xc,%esp
f01220b1:	50                   	push   %eax
f01220b2:	e8 6f 5a fe ff       	call   f0107b26 <kfree>
f01220b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220ba:	e8 35 1d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01220bf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220c2:	74 17                	je     f01220db <test_kfree+0x1aec>
f01220c4:	83 ec 04             	sub    $0x4,%esp
f01220c7:	68 14 b6 13 f0       	push   $0xf013b614
f01220cc:	68 f9 05 00 00       	push   $0x5f9
f01220d1:	68 fa b5 13 f0       	push   $0xf013b5fa
f01220d6:	e8 2a e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01220db:	e8 8d b0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01220e0:	89 c2                	mov    %eax,%edx
f01220e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01220e5:	29 c2                	sub    %eax,%edx
f01220e7:	89 d0                	mov    %edx,%eax
f01220e9:	83 f8 05             	cmp    $0x5,%eax
f01220ec:	74 17                	je     f0122105 <test_kfree+0x1b16>
f01220ee:	83 ec 04             	sub    $0x4,%esp
f01220f1:	68 84 bd 13 f0       	push   $0xf013bd84
f01220f6:	68 fa 05 00 00       	push   $0x5fa
f01220fb:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122100:	e8 00 e1 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122105:	e8 63 b0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012210a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012210d:	e8 e2 1c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122112:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122115:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012211b:	83 ec 0c             	sub    $0xc,%esp
f012211e:	50                   	push   %eax
f012211f:	e8 02 5a fe ff       	call   f0107b26 <kfree>
f0122124:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122127:	e8 c8 1c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012212c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012212f:	74 17                	je     f0122148 <test_kfree+0x1b59>
f0122131:	83 ec 04             	sub    $0x4,%esp
f0122134:	68 14 b6 13 f0       	push   $0xf013b614
f0122139:	68 00 06 00 00       	push   $0x600
f012213e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122143:	e8 bd e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0122148:	e8 20 b0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012214d:	89 c2                	mov    %eax,%edx
f012214f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122152:	29 c2                	sub    %eax,%edx
f0122154:	89 d0                	mov    %edx,%eax
f0122156:	3d 00 01 00 00       	cmp    $0x100,%eax
f012215b:	74 17                	je     f0122174 <test_kfree+0x1b85>
f012215d:	83 ec 04             	sub    $0x4,%esp
f0122160:	68 84 bd 13 f0       	push   $0xf013bd84
f0122165:	68 01 06 00 00       	push   $0x601
f012216a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012216f:	e8 91 e0 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0122174:	e8 51 5d ff ff       	call   f0117eca <isKHeapPlacementStrategyNEXTFIT>
f0122179:	84 c0                	test   %al,%al
f012217b:	0f 84 80 02 00 00    	je     f0122401 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0122181:	e8 e7 af fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122186:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122189:	e8 66 1c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012218e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0122191:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0122197:	83 ec 0c             	sub    $0xc,%esp
f012219a:	50                   	push   %eax
f012219b:	e8 86 59 fe ff       	call   f0107b26 <kfree>
f01221a0:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01221a3:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f01221aa:	10 00 00 
f01221ad:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01221b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01221b8:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01221be:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01221c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01221c9:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01221cf:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01221d5:	29 d0                	sub    %edx,%eax
f01221d7:	89 c1                	mov    %eax,%ecx
f01221d9:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01221e0:	10 00 00 
f01221e3:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01221e8:	0f b6 d0             	movzbl %al,%edx
f01221eb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01221f1:	01 d0                	add    %edx,%eax
f01221f3:	48                   	dec    %eax
f01221f4:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01221fa:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122200:	ba 00 00 00 00       	mov    $0x0,%edx
f0122205:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f012220b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122211:	29 d0                	sub    %edx,%eax
f0122213:	01 c1                	add    %eax,%ecx
f0122215:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f012221c:	10 00 00 
f012221f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122224:	0f b6 c0             	movzbl %al,%eax
f0122227:	c1 e0 04             	shl    $0x4,%eax
f012222a:	89 c2                	mov    %eax,%edx
f012222c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122232:	01 d0                	add    %edx,%eax
f0122234:	48                   	dec    %eax
f0122235:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f012223b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122241:	ba 00 00 00 00       	mov    $0x0,%edx
f0122246:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012224c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122252:	29 d0                	sub    %edx,%eax
f0122254:	01 c8                	add    %ecx,%eax
f0122256:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f012225b:	29 c2                	sub    %eax,%edx
f012225d:	89 d0                	mov    %edx,%eax
f012225f:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122265:	e8 8a 1b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012226a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012226d:	74 17                	je     f0122286 <test_kfree+0x1c97>
f012226f:	83 ec 04             	sub    $0x4,%esp
f0122272:	68 14 b6 13 f0       	push   $0xf013b614
f0122277:	68 0b 06 00 00       	push   $0x60b
f012227c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122281:	e8 7f df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0122286:	e8 e2 ae fe ff       	call   f010d16d <sys_calculate_free_frames>
f012228b:	89 c2                	mov    %eax,%edx
f012228d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122290:	29 c2                	sub    %eax,%edx
f0122292:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0122298:	c1 e8 0c             	shr    $0xc,%eax
f012229b:	39 c2                	cmp    %eax,%edx
f012229d:	74 17                	je     f01222b6 <test_kfree+0x1cc7>
f012229f:	83 ec 04             	sub    $0x4,%esp
f01222a2:	68 84 bd 13 f0       	push   $0xf013bd84
f01222a7:	68 0c 06 00 00       	push   $0x60c
f01222ac:	68 fa b5 13 f0       	push   $0xf013b5fa
f01222b1:	e8 4f df fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01222b6:	e8 b2 ae fe ff       	call   f010d16d <sys_calculate_free_frames>
f01222bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01222be:	e8 31 1b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01222c3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01222c6:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01222cc:	83 ec 0c             	sub    $0xc,%esp
f01222cf:	50                   	push   %eax
f01222d0:	e8 51 58 fe ff       	call   f0107b26 <kfree>
f01222d5:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222d8:	e8 17 1b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01222dd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222e0:	74 17                	je     f01222f9 <test_kfree+0x1d0a>
f01222e2:	83 ec 04             	sub    $0x4,%esp
f01222e5:	68 14 b6 13 f0       	push   $0xf013b614
f01222ea:	68 12 06 00 00       	push   $0x612
f01222ef:	68 fa b5 13 f0       	push   $0xf013b5fa
f01222f4:	e8 0c df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01222f9:	e8 6f ae fe ff       	call   f010d16d <sys_calculate_free_frames>
f01222fe:	89 c2                	mov    %eax,%edx
f0122300:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122303:	29 c2                	sub    %eax,%edx
f0122305:	89 d0                	mov    %edx,%eax
f0122307:	3d 00 03 00 00       	cmp    $0x300,%eax
f012230c:	74 17                	je     f0122325 <test_kfree+0x1d36>
f012230e:	83 ec 04             	sub    $0x4,%esp
f0122311:	68 84 bd 13 f0       	push   $0xf013bd84
f0122316:	68 13 06 00 00       	push   $0x613
f012231b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122320:	e8 e0 de fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0122325:	e8 43 ae fe ff       	call   f010d16d <sys_calculate_free_frames>
f012232a:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012232d:	e8 c2 1a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122332:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0122335:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012233b:	83 ec 0c             	sub    $0xc,%esp
f012233e:	50                   	push   %eax
f012233f:	e8 e2 57 fe ff       	call   f0107b26 <kfree>
f0122344:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122347:	e8 a8 1a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012234c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012234f:	74 17                	je     f0122368 <test_kfree+0x1d79>
f0122351:	83 ec 04             	sub    $0x4,%esp
f0122354:	68 14 b6 13 f0       	push   $0xf013b614
f0122359:	68 19 06 00 00       	push   $0x619
f012235e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122363:	e8 9d de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122368:	e8 00 ae fe ff       	call   f010d16d <sys_calculate_free_frames>
f012236d:	89 c2                	mov    %eax,%edx
f012236f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122372:	29 c2                	sub    %eax,%edx
f0122374:	89 d0                	mov    %edx,%eax
f0122376:	83 f8 01             	cmp    $0x1,%eax
f0122379:	74 17                	je     f0122392 <test_kfree+0x1da3>
f012237b:	83 ec 04             	sub    $0x4,%esp
f012237e:	68 84 bd 13 f0       	push   $0xf013bd84
f0122383:	68 1a 06 00 00       	push   $0x61a
f0122388:	68 fa b5 13 f0       	push   $0xf013b5fa
f012238d:	e8 73 de fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0122392:	e8 d6 ad fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122397:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012239a:	e8 55 1a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012239f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f01223a2:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01223a8:	83 ec 0c             	sub    $0xc,%esp
f01223ab:	50                   	push   %eax
f01223ac:	e8 75 57 fe ff       	call   f0107b26 <kfree>
f01223b1:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223b4:	e8 3b 1a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01223b9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223bc:	74 17                	je     f01223d5 <test_kfree+0x1de6>
f01223be:	83 ec 04             	sub    $0x4,%esp
f01223c1:	68 14 b6 13 f0       	push   $0xf013b614
f01223c6:	68 20 06 00 00       	push   $0x620
f01223cb:	68 fa b5 13 f0       	push   $0xf013b5fa
f01223d0:	e8 30 de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01223d5:	e8 93 ad fe ff       	call   f010d16d <sys_calculate_free_frames>
f01223da:	89 c2                	mov    %eax,%edx
f01223dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01223df:	29 c2                	sub    %eax,%edx
f01223e1:	89 d0                	mov    %edx,%eax
f01223e3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01223e8:	74 17                	je     f0122401 <test_kfree+0x1e12>
f01223ea:	83 ec 04             	sub    $0x4,%esp
f01223ed:	68 84 bd 13 f0       	push   $0xf013bd84
f01223f2:	68 21 06 00 00       	push   $0x621
f01223f7:	68 fa b5 13 f0       	push   $0xf013b5fa
f01223fc:	e8 04 de fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122401:	e8 67 ad fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122406:	89 c2                	mov    %eax,%edx
f0122408:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012240b:	39 c2                	cmp    %eax,%edx
f012240d:	74 17                	je     f0122426 <test_kfree+0x1e37>
f012240f:	83 ec 04             	sub    $0x4,%esp
f0122412:	68 24 be 13 f0       	push   $0xf013be24
f0122417:	68 24 06 00 00       	push   $0x624
f012241c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122421:	e8 df dd fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0122426:	83 ec 0c             	sub    $0xc,%esp
f0122429:	68 58 be 13 f0       	push   $0xf013be58
f012242e:	e8 db e8 fd ff       	call   f0100d0e <cprintf>
f0122433:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122436:	83 ec 0c             	sub    $0xc,%esp
f0122439:	6a 03                	push   $0x3
f012243b:	e8 cd b1 fe ff       	call   f010d60d <sys_bypassPageFault>
f0122440:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122443:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012244a:	e9 82 00 00 00       	jmp    f01224d1 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f012244f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122452:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0122459:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012245c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012245f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122462:	e8 94 b1 fe ff       	call   f010d5fb <sys_rcr2>
f0122467:	89 c2                	mov    %eax,%edx
f0122469:	8b 45 80             	mov    -0x80(%ebp),%eax
f012246c:	39 c2                	cmp    %eax,%edx
f012246e:	74 17                	je     f0122487 <test_kfree+0x1e98>
f0122470:	83 ec 04             	sub    $0x4,%esp
f0122473:	68 60 be 13 f0       	push   $0xf013be60
f0122478:	68 33 06 00 00       	push   $0x633
f012247d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122482:	e8 7e dd fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0122487:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012248a:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122491:	89 c2                	mov    %eax,%edx
f0122493:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122496:	01 d0                	add    %edx,%eax
f0122498:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012249b:	e8 5b b1 fe ff       	call   f010d5fb <sys_rcr2>
f01224a0:	89 c2                	mov    %eax,%edx
f01224a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01224a5:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01224ac:	89 c1                	mov    %eax,%ecx
f01224ae:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224b1:	01 c8                	add    %ecx,%eax
f01224b3:	39 c2                	cmp    %eax,%edx
f01224b5:	74 17                	je     f01224ce <test_kfree+0x1edf>
f01224b7:	83 ec 04             	sub    $0x4,%esp
f01224ba:	68 60 be 13 f0       	push   $0xf013be60
f01224bf:	68 35 06 00 00       	push   $0x635
f01224c4:	68 fa b5 13 f0       	push   $0xf013b5fa
f01224c9:	e8 37 dd fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01224ce:	ff 45 f4             	incl   -0xc(%ebp)
f01224d1:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01224d5:	0f 8e 74 ff ff ff    	jle    f012244f <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01224db:	83 ec 0c             	sub    $0xc,%esp
f01224de:	6a 00                	push   $0x0
f01224e0:	e8 28 b1 fe ff       	call   f010d60d <sys_bypassPageFault>
f01224e5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01224e8:	83 ec 0c             	sub    $0xc,%esp
f01224eb:	68 a5 be 13 f0       	push   $0xf013bea5
f01224f0:	e8 19 e8 fd ff       	call   f0100d0e <cprintf>
f01224f5:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01224f8:	e8 70 ac fe ff       	call   f010d16d <sys_calculate_free_frames>
f01224fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122500:	e8 ef 18 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122505:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122508:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012250e:	83 ec 0c             	sub    $0xc,%esp
f0122511:	50                   	push   %eax
f0122512:	e8 0f 56 fe ff       	call   f0107b26 <kfree>
f0122517:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012251a:	e8 d5 18 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012251f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122522:	74 17                	je     f012253b <test_kfree+0x1f4c>
f0122524:	83 ec 04             	sub    $0x4,%esp
f0122527:	68 14 b6 13 f0       	push   $0xf013b614
f012252c:	68 43 06 00 00       	push   $0x643
f0122531:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122536:	e8 ca dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012253b:	e8 2d ac fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122540:	89 c2                	mov    %eax,%edx
f0122542:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122545:	39 c2                	cmp    %eax,%edx
f0122547:	74 17                	je     f0122560 <test_kfree+0x1f71>
f0122549:	83 ec 04             	sub    $0x4,%esp
f012254c:	68 ac be 13 f0       	push   $0xf013beac
f0122551:	68 44 06 00 00       	push   $0x644
f0122556:	68 fa b5 13 f0       	push   $0xf013b5fa
f012255b:	e8 a5 dc fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122560:	e8 08 ac fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122565:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122568:	e8 87 18 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012256d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122570:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0122576:	83 ec 0c             	sub    $0xc,%esp
f0122579:	50                   	push   %eax
f012257a:	e8 a7 55 fe ff       	call   f0107b26 <kfree>
f012257f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122582:	e8 6d 18 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122587:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012258a:	74 17                	je     f01225a3 <test_kfree+0x1fb4>
f012258c:	83 ec 04             	sub    $0x4,%esp
f012258f:	68 14 b6 13 f0       	push   $0xf013b614
f0122594:	68 4a 06 00 00       	push   $0x64a
f0122599:	68 fa b5 13 f0       	push   $0xf013b5fa
f012259e:	e8 62 dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01225a3:	e8 c5 ab fe ff       	call   f010d16d <sys_calculate_free_frames>
f01225a8:	89 c2                	mov    %eax,%edx
f01225aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225ad:	39 c2                	cmp    %eax,%edx
f01225af:	74 17                	je     f01225c8 <test_kfree+0x1fd9>
f01225b1:	83 ec 04             	sub    $0x4,%esp
f01225b4:	68 ac be 13 f0       	push   $0xf013beac
f01225b9:	68 4b 06 00 00       	push   $0x64b
f01225be:	68 fa b5 13 f0       	push   $0xf013b5fa
f01225c3:	e8 3d dc fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01225c8:	e8 a0 ab fe ff       	call   f010d16d <sys_calculate_free_frames>
f01225cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225d0:	e8 1f 18 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01225d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01225d8:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01225de:	83 ec 0c             	sub    $0xc,%esp
f01225e1:	50                   	push   %eax
f01225e2:	e8 3f 55 fe ff       	call   f0107b26 <kfree>
f01225e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225ea:	e8 05 18 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01225ef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225f2:	74 17                	je     f012260b <test_kfree+0x201c>
f01225f4:	83 ec 04             	sub    $0x4,%esp
f01225f7:	68 14 b6 13 f0       	push   $0xf013b614
f01225fc:	68 51 06 00 00       	push   $0x651
f0122601:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122606:	e8 fa db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012260b:	e8 5d ab fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122610:	89 c2                	mov    %eax,%edx
f0122612:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122615:	39 c2                	cmp    %eax,%edx
f0122617:	74 17                	je     f0122630 <test_kfree+0x2041>
f0122619:	83 ec 04             	sub    $0x4,%esp
f012261c:	68 ac be 13 f0       	push   $0xf013beac
f0122621:	68 52 06 00 00       	push   $0x652
f0122626:	68 fa b5 13 f0       	push   $0xf013b5fa
f012262b:	e8 d5 db fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122630:	e8 38 ab fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122635:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122638:	e8 b7 17 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012263d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122640:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122646:	83 ec 0c             	sub    $0xc,%esp
f0122649:	50                   	push   %eax
f012264a:	e8 d7 54 fe ff       	call   f0107b26 <kfree>
f012264f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122652:	e8 9d 17 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122657:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012265a:	74 17                	je     f0122673 <test_kfree+0x2084>
f012265c:	83 ec 04             	sub    $0x4,%esp
f012265f:	68 14 b6 13 f0       	push   $0xf013b614
f0122664:	68 58 06 00 00       	push   $0x658
f0122669:	68 fa b5 13 f0       	push   $0xf013b5fa
f012266e:	e8 92 db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122673:	e8 f5 aa fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122678:	89 c2                	mov    %eax,%edx
f012267a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012267d:	39 c2                	cmp    %eax,%edx
f012267f:	74 17                	je     f0122698 <test_kfree+0x20a9>
f0122681:	83 ec 04             	sub    $0x4,%esp
f0122684:	68 ac be 13 f0       	push   $0xf013beac
f0122689:	68 59 06 00 00       	push   $0x659
f012268e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122693:	e8 6d db fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0122698:	83 ec 0c             	sub    $0xc,%esp
f012269b:	68 f3 be 13 f0       	push   $0xf013bef3
f01226a0:	e8 69 e6 fd ff       	call   f0100d0e <cprintf>
f01226a5:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01226a8:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01226af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01226b6:	eb 48                	jmp    f0122700 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01226b8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01226bb:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01226c0:	83 ec 04             	sub    $0x4,%esp
f01226c3:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f01226c9:	51                   	push   %ecx
f01226ca:	52                   	push   %edx
f01226cb:	50                   	push   %eax
f01226cc:	e8 0c 44 fe ff       	call   f0106add <get_page_table>
f01226d1:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01226d4:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01226da:	85 c0                	test   %eax,%eax
f01226dc:	75 17                	jne    f01226f5 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01226de:	83 ec 04             	sub    $0x4,%esp
f01226e1:	68 fc be 13 f0       	push   $0xf013befc
f01226e6:	68 67 06 00 00       	push   $0x667
f01226eb:	68 fa b5 13 f0       	push   $0xf013b5fa
f01226f0:	e8 10 db fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01226f5:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01226fc:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122700:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122704:	78 b2                	js     f01226b8 <test_kfree+0x20c9>
f0122706:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012270a:	7f 09                	jg     f0122715 <test_kfree+0x2126>
f012270c:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122713:	76 a3                	jbe    f01226b8 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0122715:	83 ec 0c             	sub    $0xc,%esp
f0122718:	68 de b7 13 f0       	push   $0xf013b7de
f012271d:	e8 ec e5 fd ff       	call   f0100d0e <cprintf>
f0122722:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122725:	83 ec 0c             	sub    $0xc,%esp
f0122728:	68 64 bf 13 f0       	push   $0xf013bf64
f012272d:	e8 dc e5 fd ff       	call   f0100d0e <cprintf>
f0122732:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122735:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012273a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012273d:	5b                   	pop    %ebx
f012273e:	5f                   	pop    %edi
f012273f:	5d                   	pop    %ebp
f0122740:	c3                   	ret    

f0122741 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0122741:	55                   	push   %ebp
f0122742:	89 e5                	mov    %esp,%ebp
f0122744:	57                   	push   %edi
f0122745:	53                   	push   %ebx
f0122746:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f012274c:	83 ec 0c             	sub    $0xc,%esp
f012274f:	68 3c b5 13 f0       	push   $0xf013b53c
f0122754:	e8 b5 e5 fd ff       	call   f0100d0e <cprintf>
f0122759:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012275c:	83 ec 0c             	sub    $0xc,%esp
f012275f:	68 6c b5 13 f0       	push   $0xf013b56c
f0122764:	e8 a5 e5 fd ff       	call   f0100d0e <cprintf>
f0122769:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012276c:	83 ec 0c             	sub    $0xc,%esp
f012276f:	68 3c b5 13 f0       	push   $0xf013b53c
f0122774:	e8 95 e5 fd ff       	call   f0100d0e <cprintf>
f0122779:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012277c:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0122780:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122784:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012278a:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0122790:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122797:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012279e:	e8 ca a9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01227a3:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01227a6:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01227ac:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01227b6:	89 d7                	mov    %edx,%edi
f01227b8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01227ba:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01227c0:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01227ca:	89 d7                	mov    %edx,%edi
f01227cc:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01227ce:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01227d4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01227de:	89 d7                	mov    %edx,%edi
f01227e0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01227e2:	e8 86 a9 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01227e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227ea:	e8 05 16 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01227ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01227f2:	83 ec 0c             	sub    $0xc,%esp
f01227f5:	68 00 fc 1f 00       	push   $0x1ffc00
f01227fa:	e8 67 52 fe ff       	call   f0107a66 <kmalloc>
f01227ff:	83 c4 10             	add    $0x10,%esp
f0122802:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122808:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012280e:	89 c1                	mov    %eax,%ecx
f0122810:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0122817:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012281a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012281f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0122822:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122825:	ba 00 00 00 00       	mov    $0x0,%edx
f012282a:	f7 75 c8             	divl   -0x38(%ebp)
f012282d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122830:	29 d0                	sub    %edx,%eax
f0122832:	89 c3                	mov    %eax,%ebx
f0122834:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012283b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122840:	0f b6 d0             	movzbl %al,%edx
f0122843:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0122846:	01 d0                	add    %edx,%eax
f0122848:	48                   	dec    %eax
f0122849:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012284c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012284f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122854:	f7 75 c0             	divl   -0x40(%ebp)
f0122857:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012285a:	29 d0                	sub    %edx,%eax
f012285c:	01 c3                	add    %eax,%ebx
f012285e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0122865:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012286a:	0f b6 c0             	movzbl %al,%eax
f012286d:	c1 e0 04             	shl    $0x4,%eax
f0122870:	89 c2                	mov    %eax,%edx
f0122872:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122875:	01 d0                	add    %edx,%eax
f0122877:	48                   	dec    %eax
f0122878:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012287b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012287e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122883:	f7 75 b8             	divl   -0x48(%ebp)
f0122886:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122889:	29 d0                	sub    %edx,%eax
f012288b:	01 d8                	add    %ebx,%eax
f012288d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122892:	39 c1                	cmp    %eax,%ecx
f0122894:	74 17                	je     f01228ad <test_kfree_bestfirstfit+0x16c>
f0122896:	83 ec 04             	sub    $0x4,%esp
f0122899:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012289e:	68 95 06 00 00       	push   $0x695
f01228a3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01228a8:	e8 58 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228ad:	e8 42 15 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01228b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228b5:	74 17                	je     f01228ce <test_kfree_bestfirstfit+0x18d>
f01228b7:	83 ec 04             	sub    $0x4,%esp
f01228ba:	68 14 b6 13 f0       	push   $0xf013b614
f01228bf:	68 96 06 00 00       	push   $0x696
f01228c4:	68 fa b5 13 f0       	push   $0xf013b5fa
f01228c9:	e8 37 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01228ce:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01228d1:	e8 97 a8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01228d6:	29 c3                	sub    %eax,%ebx
f01228d8:	89 d8                	mov    %ebx,%eax
f01228da:	3d 00 02 00 00       	cmp    $0x200,%eax
f01228df:	74 17                	je     f01228f8 <test_kfree_bestfirstfit+0x1b7>
f01228e1:	83 ec 04             	sub    $0x4,%esp
f01228e4:	68 7c b6 13 f0       	push   $0xf013b67c
f01228e9:	68 97 06 00 00       	push   $0x697
f01228ee:	68 fa b5 13 f0       	push   $0xf013b5fa
f01228f3:	e8 0d d9 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01228f8:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01228ff:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122902:	e8 66 a8 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122907:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012290a:	e8 e5 14 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012290f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122912:	83 ec 0c             	sub    $0xc,%esp
f0122915:	68 00 fc 1f 00       	push   $0x1ffc00
f012291a:	e8 47 51 fe ff       	call   f0107a66 <kmalloc>
f012291f:	83 c4 10             	add    $0x10,%esp
f0122922:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122928:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012292e:	89 c1                	mov    %eax,%ecx
f0122930:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0122937:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012293a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012293f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0122942:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122945:	ba 00 00 00 00       	mov    $0x0,%edx
f012294a:	f7 75 b0             	divl   -0x50(%ebp)
f012294d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122950:	29 d0                	sub    %edx,%eax
f0122952:	89 c3                	mov    %eax,%ebx
f0122954:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012295b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122960:	0f b6 d0             	movzbl %al,%edx
f0122963:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122966:	01 d0                	add    %edx,%eax
f0122968:	48                   	dec    %eax
f0122969:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012296c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012296f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122974:	f7 75 a8             	divl   -0x58(%ebp)
f0122977:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012297a:	29 d0                	sub    %edx,%eax
f012297c:	01 c3                	add    %eax,%ebx
f012297e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122985:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012298a:	0f b6 c0             	movzbl %al,%eax
f012298d:	c1 e0 04             	shl    $0x4,%eax
f0122990:	89 c2                	mov    %eax,%edx
f0122992:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122995:	01 d0                	add    %edx,%eax
f0122997:	48                   	dec    %eax
f0122998:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012299b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012299e:	ba 00 00 00 00       	mov    $0x0,%edx
f01229a3:	f7 75 a0             	divl   -0x60(%ebp)
f01229a6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01229a9:	29 d0                	sub    %edx,%eax
f01229ab:	01 d8                	add    %ebx,%eax
f01229ad:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01229b2:	39 c1                	cmp    %eax,%ecx
f01229b4:	74 17                	je     f01229cd <test_kfree_bestfirstfit+0x28c>
f01229b6:	83 ec 04             	sub    $0x4,%esp
f01229b9:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01229be:	68 9e 06 00 00       	push   $0x69e
f01229c3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01229c8:	e8 38 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229cd:	e8 22 14 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01229d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229d5:	74 17                	je     f01229ee <test_kfree_bestfirstfit+0x2ad>
f01229d7:	83 ec 04             	sub    $0x4,%esp
f01229da:	68 14 b6 13 f0       	push   $0xf013b614
f01229df:	68 9f 06 00 00       	push   $0x69f
f01229e4:	68 fa b5 13 f0       	push   $0xf013b5fa
f01229e9:	e8 17 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01229ee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01229f1:	e8 77 a7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01229f6:	29 c3                	sub    %eax,%ebx
f01229f8:	89 d8                	mov    %ebx,%eax
f01229fa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01229ff:	74 17                	je     f0122a18 <test_kfree_bestfirstfit+0x2d7>
f0122a01:	83 ec 04             	sub    $0x4,%esp
f0122a04:	68 7c b6 13 f0       	push   $0xf013b67c
f0122a09:	68 a0 06 00 00       	push   $0x6a0
f0122a0e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122a13:	e8 ed d7 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0122a18:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122a1f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a22:	e8 46 a7 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122a27:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a2a:	e8 c5 13 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122a2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122a32:	83 ec 0c             	sub    $0xc,%esp
f0122a35:	68 00 08 00 00       	push   $0x800
f0122a3a:	e8 27 50 fe ff       	call   f0107a66 <kmalloc>
f0122a3f:	83 c4 10             	add    $0x10,%esp
f0122a42:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a48:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122a4e:	89 c1                	mov    %eax,%ecx
f0122a50:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122a57:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122a5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a5f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122a62:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122a65:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a6a:	f7 75 98             	divl   -0x68(%ebp)
f0122a6d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122a70:	29 d0                	sub    %edx,%eax
f0122a72:	89 c3                	mov    %eax,%ebx
f0122a74:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122a7b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122a80:	0f b6 d0             	movzbl %al,%edx
f0122a83:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122a86:	01 d0                	add    %edx,%eax
f0122a88:	48                   	dec    %eax
f0122a89:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122a8c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122a8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a94:	f7 75 90             	divl   -0x70(%ebp)
f0122a97:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122a9a:	29 d0                	sub    %edx,%eax
f0122a9c:	01 c3                	add    %eax,%ebx
f0122a9e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122aa5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122aaa:	0f b6 c0             	movzbl %al,%eax
f0122aad:	c1 e0 04             	shl    $0x4,%eax
f0122ab0:	89 c2                	mov    %eax,%edx
f0122ab2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122ab5:	01 d0                	add    %edx,%eax
f0122ab7:	48                   	dec    %eax
f0122ab8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122abb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122abe:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ac3:	f7 75 88             	divl   -0x78(%ebp)
f0122ac6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122ac9:	29 d0                	sub    %edx,%eax
f0122acb:	01 d8                	add    %ebx,%eax
f0122acd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122ad2:	39 c1                	cmp    %eax,%ecx
f0122ad4:	74 17                	je     f0122aed <test_kfree_bestfirstfit+0x3ac>
f0122ad6:	83 ec 04             	sub    $0x4,%esp
f0122ad9:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0122ade:	68 a7 06 00 00       	push   $0x6a7
f0122ae3:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122ae8:	e8 18 d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122aed:	e8 02 13 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122af2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122af5:	74 17                	je     f0122b0e <test_kfree_bestfirstfit+0x3cd>
f0122af7:	83 ec 04             	sub    $0x4,%esp
f0122afa:	68 14 b6 13 f0       	push   $0xf013b614
f0122aff:	68 a8 06 00 00       	push   $0x6a8
f0122b04:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122b09:	e8 f7 d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b0e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b11:	e8 57 a6 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122b16:	29 c3                	sub    %eax,%ebx
f0122b18:	89 d8                	mov    %ebx,%eax
f0122b1a:	83 f8 01             	cmp    $0x1,%eax
f0122b1d:	74 17                	je     f0122b36 <test_kfree_bestfirstfit+0x3f5>
f0122b1f:	83 ec 04             	sub    $0x4,%esp
f0122b22:	68 7c b6 13 f0       	push   $0xf013b67c
f0122b27:	68 a9 06 00 00       	push   $0x6a9
f0122b2c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122b31:	e8 cf d6 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122b36:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122b3d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0122b40:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122b46:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122b49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b50:	eb 0e                	jmp    f0122b60 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122b52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b55:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b58:	01 d0                	add    %edx,%eax
f0122b5a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122b5d:	ff 45 f4             	incl   -0xc(%ebp)
f0122b60:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122b66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b69:	7f e7                	jg     f0122b52 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b6b:	e8 fd a5 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122b70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b73:	e8 7c 12 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122b78:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122b7b:	83 ec 0c             	sub    $0xc,%esp
f0122b7e:	68 00 08 00 00       	push   $0x800
f0122b83:	e8 de 4e fe ff       	call   f0107a66 <kmalloc>
f0122b88:	83 c4 10             	add    $0x10,%esp
f0122b8b:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122b91:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122b97:	89 c1                	mov    %eax,%ecx
f0122b99:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0122ba0:	10 00 00 
f0122ba3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122ba9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bae:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122bb4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122bba:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bbf:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122bc5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122bcb:	29 d0                	sub    %edx,%eax
f0122bcd:	89 c3                	mov    %eax,%ebx
f0122bcf:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122bd6:	10 00 00 
f0122bd9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122bde:	0f b6 d0             	movzbl %al,%edx
f0122be1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122be7:	01 d0                	add    %edx,%eax
f0122be9:	48                   	dec    %eax
f0122bea:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0122bf0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122bf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bfb:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0122c01:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122c07:	29 d0                	sub    %edx,%eax
f0122c09:	01 c3                	add    %eax,%ebx
f0122c0b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0122c12:	10 00 00 
f0122c15:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122c1a:	0f b6 c0             	movzbl %al,%eax
f0122c1d:	c1 e0 04             	shl    $0x4,%eax
f0122c20:	89 c2                	mov    %eax,%edx
f0122c22:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122c28:	01 d0                	add    %edx,%eax
f0122c2a:	48                   	dec    %eax
f0122c2b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0122c31:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122c37:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c3c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122c42:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122c48:	29 d0                	sub    %edx,%eax
f0122c4a:	01 d8                	add    %ebx,%eax
f0122c4c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122c51:	39 c1                	cmp    %eax,%ecx
f0122c53:	74 17                	je     f0122c6c <test_kfree_bestfirstfit+0x52b>
f0122c55:	83 ec 04             	sub    $0x4,%esp
f0122c58:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0122c5d:	68 b5 06 00 00       	push   $0x6b5
f0122c62:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122c67:	e8 99 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c6c:	e8 83 11 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122c71:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c74:	74 17                	je     f0122c8d <test_kfree_bestfirstfit+0x54c>
f0122c76:	83 ec 04             	sub    $0x4,%esp
f0122c79:	68 14 b6 13 f0       	push   $0xf013b614
f0122c7e:	68 b6 06 00 00       	push   $0x6b6
f0122c83:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122c88:	e8 78 d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c8d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122c90:	e8 d8 a4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122c95:	29 c3                	sub    %eax,%ebx
f0122c97:	89 d8                	mov    %ebx,%eax
f0122c99:	83 f8 01             	cmp    $0x1,%eax
f0122c9c:	74 17                	je     f0122cb5 <test_kfree_bestfirstfit+0x574>
f0122c9e:	83 ec 04             	sub    $0x4,%esp
f0122ca1:	68 7c b6 13 f0       	push   $0xf013b67c
f0122ca6:	68 b7 06 00 00       	push   $0x6b7
f0122cab:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122cb0:	e8 50 d5 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122cb5:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122cbc:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122cbf:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122cc5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122cc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ccf:	eb 0e                	jmp    f0122cdf <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122cd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122cd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122cd7:	01 d0                	add    %edx,%eax
f0122cd9:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122cdc:	ff 45 f4             	incl   -0xc(%ebp)
f0122cdf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122ce5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ce8:	7f e7                	jg     f0122cd1 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cea:	e8 7e a4 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122cef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cf2:	e8 fd 10 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122cf7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122cfa:	83 ec 0c             	sub    $0xc,%esp
f0122cfd:	68 00 1c 00 00       	push   $0x1c00
f0122d02:	e8 5f 4d fe ff       	call   f0107a66 <kmalloc>
f0122d07:	83 c4 10             	add    $0x10,%esp
f0122d0a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d10:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122d16:	89 c1                	mov    %eax,%ecx
f0122d18:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122d1f:	10 00 00 
f0122d22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d2d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0122d33:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d3e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122d44:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d4a:	29 d0                	sub    %edx,%eax
f0122d4c:	89 c3                	mov    %eax,%ebx
f0122d4e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122d55:	10 00 00 
f0122d58:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122d5d:	0f b6 d0             	movzbl %al,%edx
f0122d60:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122d66:	01 d0                	add    %edx,%eax
f0122d68:	48                   	dec    %eax
f0122d69:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122d6f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122d75:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d7a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122d80:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122d86:	29 d0                	sub    %edx,%eax
f0122d88:	01 c3                	add    %eax,%ebx
f0122d8a:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122d91:	10 00 00 
f0122d94:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122d99:	0f b6 c0             	movzbl %al,%eax
f0122d9c:	c1 e0 04             	shl    $0x4,%eax
f0122d9f:	89 c2                	mov    %eax,%edx
f0122da1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122da7:	01 d0                	add    %edx,%eax
f0122da9:	48                   	dec    %eax
f0122daa:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122db0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122db6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dbb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122dc1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122dc7:	29 d0                	sub    %edx,%eax
f0122dc9:	01 d8                	add    %ebx,%eax
f0122dcb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122dd0:	39 c1                	cmp    %eax,%ecx
f0122dd2:	74 17                	je     f0122deb <test_kfree_bestfirstfit+0x6aa>
f0122dd4:	83 ec 04             	sub    $0x4,%esp
f0122dd7:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0122ddc:	68 c3 06 00 00       	push   $0x6c3
f0122de1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122de6:	e8 1a d4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122deb:	e8 04 10 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122df0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122df3:	74 17                	je     f0122e0c <test_kfree_bestfirstfit+0x6cb>
f0122df5:	83 ec 04             	sub    $0x4,%esp
f0122df8:	68 14 b6 13 f0       	push   $0xf013b614
f0122dfd:	68 c4 06 00 00       	push   $0x6c4
f0122e02:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122e07:	e8 f9 d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e0c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e0f:	e8 59 a3 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122e14:	29 c3                	sub    %eax,%ebx
f0122e16:	89 d8                	mov    %ebx,%eax
f0122e18:	83 f8 02             	cmp    $0x2,%eax
f0122e1b:	74 17                	je     f0122e34 <test_kfree_bestfirstfit+0x6f3>
f0122e1d:	83 ec 04             	sub    $0x4,%esp
f0122e20:	68 7c b6 13 f0       	push   $0xf013b67c
f0122e25:	68 c5 06 00 00       	push   $0x6c5
f0122e2a:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122e2f:	e8 d1 d3 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122e34:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122e3b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122e3e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122e44:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122e47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e4e:	eb 0e                	jmp    f0122e5e <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122e50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e53:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e56:	01 d0                	add    %edx,%eax
f0122e58:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122e5b:	ff 45 f4             	incl   -0xc(%ebp)
f0122e5e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122e64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e67:	7f e7                	jg     f0122e50 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e69:	e8 ff a2 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122e6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e71:	e8 7e 0f fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122e76:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122e79:	83 ec 0c             	sub    $0xc,%esp
f0122e7c:	68 00 fc 2f 00       	push   $0x2ffc00
f0122e81:	e8 e0 4b fe ff       	call   f0107a66 <kmalloc>
f0122e86:	83 c4 10             	add    $0x10,%esp
f0122e89:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e8f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122e95:	89 c1                	mov    %eax,%ecx
f0122e97:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122e9e:	10 00 00 
f0122ea1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122ea7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122eac:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122eb2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122eb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ebd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122ec3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122ec9:	29 d0                	sub    %edx,%eax
f0122ecb:	89 c3                	mov    %eax,%ebx
f0122ecd:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122ed4:	10 00 00 
f0122ed7:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122edc:	0f b6 d0             	movzbl %al,%edx
f0122edf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122ee5:	01 d0                	add    %edx,%eax
f0122ee7:	48                   	dec    %eax
f0122ee8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122eee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122ef4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ef9:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122eff:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122f05:	29 d0                	sub    %edx,%eax
f0122f07:	01 c3                	add    %eax,%ebx
f0122f09:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122f10:	10 00 00 
f0122f13:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0122f18:	0f b6 c0             	movzbl %al,%eax
f0122f1b:	c1 e0 04             	shl    $0x4,%eax
f0122f1e:	89 c2                	mov    %eax,%edx
f0122f20:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122f26:	01 d0                	add    %edx,%eax
f0122f28:	48                   	dec    %eax
f0122f29:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122f2f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f35:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f3a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122f40:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f46:	29 d0                	sub    %edx,%eax
f0122f48:	01 d8                	add    %ebx,%eax
f0122f4a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122f4f:	39 c1                	cmp    %eax,%ecx
f0122f51:	74 17                	je     f0122f6a <test_kfree_bestfirstfit+0x829>
f0122f53:	83 ec 04             	sub    $0x4,%esp
f0122f56:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0122f5b:	68 d1 06 00 00       	push   $0x6d1
f0122f60:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122f65:	e8 9b d2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f6a:	e8 85 0e fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122f6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f72:	74 17                	je     f0122f8b <test_kfree_bestfirstfit+0x84a>
f0122f74:	83 ec 04             	sub    $0x4,%esp
f0122f77:	68 14 b6 13 f0       	push   $0xf013b614
f0122f7c:	68 d2 06 00 00       	push   $0x6d2
f0122f81:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122f86:	e8 7a d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f8b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122f8e:	e8 da a1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122f93:	29 c3                	sub    %eax,%ebx
f0122f95:	89 d8                	mov    %ebx,%eax
f0122f97:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122f9c:	74 17                	je     f0122fb5 <test_kfree_bestfirstfit+0x874>
f0122f9e:	83 ec 04             	sub    $0x4,%esp
f0122fa1:	68 7c b6 13 f0       	push   $0xf013b67c
f0122fa6:	68 d3 06 00 00       	push   $0x6d3
f0122fab:	68 fa b5 13 f0       	push   $0xf013b5fa
f0122fb0:	e8 50 d2 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122fb5:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122fbc:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122fbf:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122fc5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122fc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122fcf:	eb 0e                	jmp    f0122fdf <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122fd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122fd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fd7:	01 d0                	add    %edx,%eax
f0122fd9:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122fdc:	ff 45 f4             	incl   -0xc(%ebp)
f0122fdf:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122fe5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122fe8:	7f e7                	jg     f0122fd1 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fea:	e8 7e a1 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0122fef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ff2:	e8 fd 0d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0122ff7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122ffa:	83 ec 0c             	sub    $0xc,%esp
f0122ffd:	68 00 fc 5f 00       	push   $0x5ffc00
f0123002:	e8 5f 4a fe ff       	call   f0107a66 <kmalloc>
f0123007:	83 c4 10             	add    $0x10,%esp
f012300a:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123010:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0123016:	89 c1                	mov    %eax,%ecx
f0123018:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012301f:	10 00 00 
f0123022:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123028:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012302d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0123033:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123039:	ba 00 00 00 00       	mov    $0x0,%edx
f012303e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0123044:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012304a:	29 d0                	sub    %edx,%eax
f012304c:	89 c3                	mov    %eax,%ebx
f012304e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0123055:	10 00 00 
f0123058:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012305d:	0f b6 d0             	movzbl %al,%edx
f0123060:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123066:	01 d0                	add    %edx,%eax
f0123068:	48                   	dec    %eax
f0123069:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012306f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123075:	ba 00 00 00 00       	mov    $0x0,%edx
f012307a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0123080:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123086:	29 d0                	sub    %edx,%eax
f0123088:	01 c3                	add    %eax,%ebx
f012308a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0123091:	10 00 00 
f0123094:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0123099:	0f b6 c0             	movzbl %al,%eax
f012309c:	c1 e0 04             	shl    $0x4,%eax
f012309f:	89 c2                	mov    %eax,%edx
f01230a1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01230a7:	01 d0                	add    %edx,%eax
f01230a9:	48                   	dec    %eax
f01230aa:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01230b0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01230b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01230bb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01230c1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01230c7:	29 d0                	sub    %edx,%eax
f01230c9:	01 d8                	add    %ebx,%eax
f01230cb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01230d0:	39 c1                	cmp    %eax,%ecx
f01230d2:	74 17                	je     f01230eb <test_kfree_bestfirstfit+0x9aa>
f01230d4:	83 ec 04             	sub    $0x4,%esp
f01230d7:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01230dc:	68 df 06 00 00       	push   $0x6df
f01230e1:	68 fa b5 13 f0       	push   $0xf013b5fa
f01230e6:	e8 1a d1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230eb:	e8 04 0d fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01230f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01230f3:	74 17                	je     f012310c <test_kfree_bestfirstfit+0x9cb>
f01230f5:	83 ec 04             	sub    $0x4,%esp
f01230f8:	68 14 b6 13 f0       	push   $0xf013b614
f01230fd:	68 e0 06 00 00       	push   $0x6e0
f0123102:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123107:	e8 f9 d0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012310c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012310f:	e8 59 a0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123114:	29 c3                	sub    %eax,%ebx
f0123116:	89 d8                	mov    %ebx,%eax
f0123118:	3d 00 06 00 00       	cmp    $0x600,%eax
f012311d:	74 17                	je     f0123136 <test_kfree_bestfirstfit+0x9f5>
f012311f:	83 ec 04             	sub    $0x4,%esp
f0123122:	68 7c b6 13 f0       	push   $0xf013b67c
f0123127:	68 e1 06 00 00       	push   $0x6e1
f012312c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123131:	e8 cf d0 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0123136:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012313d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123140:	e8 28 a0 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123145:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123148:	e8 a7 0c fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012314d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123150:	83 ec 0c             	sub    $0xc,%esp
f0123153:	68 00 38 00 00       	push   $0x3800
f0123158:	e8 09 49 fe ff       	call   f0107a66 <kmalloc>
f012315d:	83 c4 10             	add    $0x10,%esp
f0123160:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123166:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012316c:	89 c1                	mov    %eax,%ecx
f012316e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0123175:	10 00 00 
f0123178:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012317e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123183:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0123189:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012318f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123194:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012319a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01231a0:	29 d0                	sub    %edx,%eax
f01231a2:	89 c3                	mov    %eax,%ebx
f01231a4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01231ab:	10 00 00 
f01231ae:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01231b3:	0f b6 d0             	movzbl %al,%edx
f01231b6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01231bc:	01 d0                	add    %edx,%eax
f01231be:	48                   	dec    %eax
f01231bf:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01231c5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01231cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01231d0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01231d6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01231dc:	29 d0                	sub    %edx,%eax
f01231de:	01 c3                	add    %eax,%ebx
f01231e0:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01231e7:	10 00 00 
f01231ea:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01231ef:	0f b6 c0             	movzbl %al,%eax
f01231f2:	c1 e0 04             	shl    $0x4,%eax
f01231f5:	89 c2                	mov    %eax,%edx
f01231f7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01231fd:	01 d0                	add    %edx,%eax
f01231ff:	48                   	dec    %eax
f0123200:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0123206:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012320c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123211:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0123217:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012321d:	29 d0                	sub    %edx,%eax
f012321f:	01 d8                	add    %ebx,%eax
f0123221:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123226:	39 c1                	cmp    %eax,%ecx
f0123228:	74 17                	je     f0123241 <test_kfree_bestfirstfit+0xb00>
f012322a:	83 ec 04             	sub    $0x4,%esp
f012322d:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0123232:	68 e8 06 00 00       	push   $0x6e8
f0123237:	68 fa b5 13 f0       	push   $0xf013b5fa
f012323c:	e8 c4 cf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123241:	e8 ae 0b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123246:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123249:	74 17                	je     f0123262 <test_kfree_bestfirstfit+0xb21>
f012324b:	83 ec 04             	sub    $0x4,%esp
f012324e:	68 14 b6 13 f0       	push   $0xf013b614
f0123253:	68 e9 06 00 00       	push   $0x6e9
f0123258:	68 fa b5 13 f0       	push   $0xf013b5fa
f012325d:	e8 a3 cf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123262:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123265:	e8 03 9f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012326a:	29 c3                	sub    %eax,%ebx
f012326c:	89 d8                	mov    %ebx,%eax
f012326e:	83 f8 04             	cmp    $0x4,%eax
f0123271:	74 17                	je     f012328a <test_kfree_bestfirstfit+0xb49>
f0123273:	83 ec 04             	sub    $0x4,%esp
f0123276:	68 7c b6 13 f0       	push   $0xf013b67c
f012327b:	68 ea 06 00 00       	push   $0x6ea
f0123280:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123285:	e8 7b cf fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012328a:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0123291:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0123294:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012329a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012329d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01232a4:	eb 0e                	jmp    f01232b4 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f01232a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01232a9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01232ac:	01 d0                	add    %edx,%eax
f01232ae:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01232b1:	ff 45 f4             	incl   -0xc(%ebp)
f01232b4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01232ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01232bd:	7f e7                	jg     f01232a6 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01232bf:	e8 a9 9e fe ff       	call   f010d16d <sys_calculate_free_frames>
f01232c4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01232ca:	e8 25 0b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01232cf:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01232d5:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01232db:	83 ec 0c             	sub    $0xc,%esp
f01232de:	50                   	push   %eax
f01232df:	e8 42 48 fe ff       	call   f0107b26 <kfree>
f01232e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232e7:	e8 08 0b fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01232ec:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01232f2:	74 17                	je     f012330b <test_kfree_bestfirstfit+0xbca>
f01232f4:	83 ec 04             	sub    $0x4,%esp
f01232f7:	68 14 b6 13 f0       	push   $0xf013b614
f01232fc:	68 f9 06 00 00       	push   $0x6f9
f0123301:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123306:	e8 fa ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012330b:	e8 5d 9e fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123310:	89 c2                	mov    %eax,%edx
f0123312:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123318:	29 c2                	sub    %eax,%edx
f012331a:	89 d0                	mov    %edx,%eax
f012331c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123321:	74 17                	je     f012333a <test_kfree_bestfirstfit+0xbf9>
f0123323:	83 ec 04             	sub    $0x4,%esp
f0123326:	68 84 bd 13 f0       	push   $0xf013bd84
f012332b:	68 fa 06 00 00       	push   $0x6fa
f0123330:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123335:	e8 cb ce fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012333a:	e8 2e 9e fe ff       	call   f010d16d <sys_calculate_free_frames>
f012333f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123345:	e8 aa 0a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012334a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0123350:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123356:	83 ec 0c             	sub    $0xc,%esp
f0123359:	50                   	push   %eax
f012335a:	e8 c7 47 fe ff       	call   f0107b26 <kfree>
f012335f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123362:	e8 8d 0a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123367:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012336d:	74 17                	je     f0123386 <test_kfree_bestfirstfit+0xc45>
f012336f:	83 ec 04             	sub    $0x4,%esp
f0123372:	68 14 b6 13 f0       	push   $0xf013b614
f0123377:	68 00 07 00 00       	push   $0x700
f012337c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123381:	e8 7f ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123386:	e8 e2 9d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012338b:	89 c2                	mov    %eax,%edx
f012338d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123393:	29 c2                	sub    %eax,%edx
f0123395:	89 d0                	mov    %edx,%eax
f0123397:	83 f8 01             	cmp    $0x1,%eax
f012339a:	74 17                	je     f01233b3 <test_kfree_bestfirstfit+0xc72>
f012339c:	83 ec 04             	sub    $0x4,%esp
f012339f:	68 84 bd 13 f0       	push   $0xf013bd84
f01233a4:	68 01 07 00 00       	push   $0x701
f01233a9:	68 fa b5 13 f0       	push   $0xf013b5fa
f01233ae:	e8 52 ce fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01233b3:	e8 b5 9d fe ff       	call   f010d16d <sys_calculate_free_frames>
f01233b8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233be:	e8 31 0a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01233c3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01233c9:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01233cf:	83 ec 0c             	sub    $0xc,%esp
f01233d2:	50                   	push   %eax
f01233d3:	e8 4e 47 fe ff       	call   f0107b26 <kfree>
f01233d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233db:	e8 14 0a fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01233e0:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01233e6:	74 17                	je     f01233ff <test_kfree_bestfirstfit+0xcbe>
f01233e8:	83 ec 04             	sub    $0x4,%esp
f01233eb:	68 14 b6 13 f0       	push   $0xf013b614
f01233f0:	68 07 07 00 00       	push   $0x707
f01233f5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01233fa:	e8 06 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01233ff:	e8 69 9d fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123404:	89 c2                	mov    %eax,%edx
f0123406:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012340c:	29 c2                	sub    %eax,%edx
f012340e:	89 d0                	mov    %edx,%eax
f0123410:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123415:	74 17                	je     f012342e <test_kfree_bestfirstfit+0xced>
f0123417:	83 ec 04             	sub    $0x4,%esp
f012341a:	68 84 bd 13 f0       	push   $0xf013bd84
f012341f:	68 08 07 00 00       	push   $0x708
f0123424:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123429:	e8 d7 cd fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012342e:	e8 3a 9d fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123433:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123439:	e8 b6 09 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012343e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0123444:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012344a:	83 ec 0c             	sub    $0xc,%esp
f012344d:	50                   	push   %eax
f012344e:	e8 d3 46 fe ff       	call   f0107b26 <kfree>
f0123453:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123456:	e8 99 09 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f012345b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123461:	74 17                	je     f012347a <test_kfree_bestfirstfit+0xd39>
f0123463:	83 ec 04             	sub    $0x4,%esp
f0123466:	68 14 b6 13 f0       	push   $0xf013b614
f012346b:	68 0e 07 00 00       	push   $0x70e
f0123470:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123475:	e8 8b cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012347a:	e8 ee 9c fe ff       	call   f010d16d <sys_calculate_free_frames>
f012347f:	89 c2                	mov    %eax,%edx
f0123481:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123487:	29 c2                	sub    %eax,%edx
f0123489:	89 d0                	mov    %edx,%eax
f012348b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123490:	74 17                	je     f01234a9 <test_kfree_bestfirstfit+0xd68>
f0123492:	83 ec 04             	sub    $0x4,%esp
f0123495:	68 84 bd 13 f0       	push   $0xf013bd84
f012349a:	68 0f 07 00 00       	push   $0x70f
f012349f:	68 fa b5 13 f0       	push   $0xf013b5fa
f01234a4:	e8 5c cd fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01234a9:	83 ec 0c             	sub    $0xc,%esp
f01234ac:	68 bc bd 13 f0       	push   $0xf013bdbc
f01234b1:	e8 58 d8 fd ff       	call   f0100d0e <cprintf>
f01234b6:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01234b9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01234bf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01234c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01234c9:	eb 1e                	jmp    f01234e9 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01234cb:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01234d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01234d4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01234d7:	01 c8                	add    %ecx,%eax
f01234d9:	8a 00                	mov    (%eax),%al
f01234db:	0f be c0             	movsbl %al,%eax
f01234de:	01 d0                	add    %edx,%eax
f01234e0:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01234e6:	ff 45 f4             	incl   -0xc(%ebp)
f01234e9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01234ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01234f2:	7f d7                	jg     f01234cb <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01234f4:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01234fa:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123500:	89 c1                	mov    %eax,%ecx
f0123502:	01 c9                	add    %ecx,%ecx
f0123504:	01 c8                	add    %ecx,%eax
f0123506:	39 c2                	cmp    %eax,%edx
f0123508:	74 17                	je     f0123521 <test_kfree_bestfirstfit+0xde0>
f012350a:	83 ec 04             	sub    $0x4,%esp
f012350d:	68 e0 bd 13 f0       	push   $0xf013bde0
f0123512:	68 1c 07 00 00       	push   $0x71c
f0123517:	68 fa b5 13 f0       	push   $0xf013b5fa
f012351c:	e8 e4 cc fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0123521:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123527:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012352a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123531:	eb 1e                	jmp    f0123551 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0123533:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0123539:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012353c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012353f:	01 c8                	add    %ecx,%eax
f0123541:	8a 00                	mov    (%eax),%al
f0123543:	0f be c0             	movsbl %al,%eax
f0123546:	01 d0                	add    %edx,%eax
f0123548:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012354e:	ff 45 f4             	incl   -0xc(%ebp)
f0123551:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0123557:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012355a:	7f d7                	jg     f0123533 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012355c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123562:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0123568:	c1 e2 02             	shl    $0x2,%edx
f012356b:	39 d0                	cmp    %edx,%eax
f012356d:	74 17                	je     f0123586 <test_kfree_bestfirstfit+0xe45>
f012356f:	83 ec 04             	sub    $0x4,%esp
f0123572:	68 e0 bd 13 f0       	push   $0xf013bde0
f0123577:	68 24 07 00 00       	push   $0x724
f012357c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123581:	e8 7f cc fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0123586:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012358c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012358f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123596:	eb 1e                	jmp    f01235b6 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0123598:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f012359e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01235a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01235a4:	01 c8                	add    %ecx,%eax
f01235a6:	8a 00                	mov    (%eax),%al
f01235a8:	0f be c0             	movsbl %al,%eax
f01235ab:	01 d0                	add    %edx,%eax
f01235ad:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01235b3:	ff 45 f4             	incl   -0xc(%ebp)
f01235b6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01235bc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01235bf:	7f d7                	jg     f0123598 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01235c1:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01235c7:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01235cd:	89 d0                	mov    %edx,%eax
f01235cf:	c1 e0 02             	shl    $0x2,%eax
f01235d2:	01 d0                	add    %edx,%eax
f01235d4:	39 c1                	cmp    %eax,%ecx
f01235d6:	74 17                	je     f01235ef <test_kfree_bestfirstfit+0xeae>
f01235d8:	83 ec 04             	sub    $0x4,%esp
f01235db:	68 e0 bd 13 f0       	push   $0xf013bde0
f01235e0:	68 2c 07 00 00       	push   $0x72c
f01235e5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01235ea:	e8 16 cc fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01235ef:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01235f5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01235f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01235ff:	eb 1e                	jmp    f012361f <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0123601:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0123607:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012360a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012360d:	01 c8                	add    %ecx,%eax
f012360f:	8a 00                	mov    (%eax),%al
f0123611:	0f be c0             	movsbl %al,%eax
f0123614:	01 d0                	add    %edx,%eax
f0123616:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012361c:	ff 45 f4             	incl   -0xc(%ebp)
f012361f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0123625:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123628:	7f d7                	jg     f0123601 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012362a:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0123630:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0123636:	89 d0                	mov    %edx,%eax
f0123638:	01 c0                	add    %eax,%eax
f012363a:	01 d0                	add    %edx,%eax
f012363c:	01 c0                	add    %eax,%eax
f012363e:	01 d0                	add    %edx,%eax
f0123640:	39 c1                	cmp    %eax,%ecx
f0123642:	74 17                	je     f012365b <test_kfree_bestfirstfit+0xf1a>
f0123644:	83 ec 04             	sub    $0x4,%esp
f0123647:	68 e0 bd 13 f0       	push   $0xf013bde0
f012364c:	68 34 07 00 00       	push   $0x734
f0123651:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123656:	e8 aa cb fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f012365b:	83 ec 0c             	sub    $0xc,%esp
f012365e:	68 13 be 13 f0       	push   $0xf013be13
f0123663:	e8 a6 d6 fd ff       	call   f0100d0e <cprintf>
f0123668:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012366b:	e8 fd 9a fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123670:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123673:	e8 7c 07 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123678:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f012367b:	83 ec 0c             	sub    $0xc,%esp
f012367e:	68 00 00 30 00       	push   $0x300000
f0123683:	e8 de 43 fe ff       	call   f0107a66 <kmalloc>
f0123688:	83 c4 10             	add    $0x10,%esp
f012368b:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123691:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123697:	89 c1                	mov    %eax,%ecx
f0123699:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01236a0:	10 00 00 
f01236a3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01236a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01236ae:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01236b4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01236ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01236bf:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01236c5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01236cb:	29 d0                	sub    %edx,%eax
f01236cd:	89 c3                	mov    %eax,%ebx
f01236cf:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01236d6:	10 00 00 
f01236d9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01236de:	0f b6 d0             	movzbl %al,%edx
f01236e1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01236e7:	01 d0                	add    %edx,%eax
f01236e9:	48                   	dec    %eax
f01236ea:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01236f0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01236f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01236fb:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0123701:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123707:	29 d0                	sub    %edx,%eax
f0123709:	01 c3                	add    %eax,%ebx
f012370b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0123712:	10 00 00 
f0123715:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012371a:	0f b6 c0             	movzbl %al,%eax
f012371d:	c1 e0 04             	shl    $0x4,%eax
f0123720:	89 c2                	mov    %eax,%edx
f0123722:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123728:	01 d0                	add    %edx,%eax
f012372a:	48                   	dec    %eax
f012372b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0123731:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123737:	ba 00 00 00 00       	mov    $0x0,%edx
f012373c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0123742:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123748:	29 d0                	sub    %edx,%eax
f012374a:	01 d8                	add    %ebx,%eax
f012374c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123751:	39 c1                	cmp    %eax,%ecx
f0123753:	74 17                	je     f012376c <test_kfree_bestfirstfit+0x102b>
f0123755:	83 ec 04             	sub    $0x4,%esp
f0123758:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012375d:	68 3f 07 00 00       	push   $0x73f
f0123762:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123767:	e8 99 ca fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012376c:	e8 83 06 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123771:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123774:	74 17                	je     f012378d <test_kfree_bestfirstfit+0x104c>
f0123776:	83 ec 04             	sub    $0x4,%esp
f0123779:	68 14 b6 13 f0       	push   $0xf013b614
f012377e:	68 40 07 00 00       	push   $0x740
f0123783:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123788:	e8 78 ca fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012378d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123790:	e8 d8 99 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123795:	29 c3                	sub    %eax,%ebx
f0123797:	89 d8                	mov    %ebx,%eax
f0123799:	3d 00 03 00 00       	cmp    $0x300,%eax
f012379e:	74 17                	je     f01237b7 <test_kfree_bestfirstfit+0x1076>
f01237a0:	83 ec 04             	sub    $0x4,%esp
f01237a3:	68 7c b6 13 f0       	push   $0xf013b67c
f01237a8:	68 41 07 00 00       	push   $0x741
f01237ad:	68 fa b5 13 f0       	push   $0xf013b5fa
f01237b2:	e8 4e ca fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01237b7:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f01237be:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01237c1:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01237c7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01237ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01237d1:	eb 0e                	jmp    f01237e1 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f01237d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01237d6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01237d9:	01 d0                	add    %edx,%eax
f01237db:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01237de:	ff 45 f4             	incl   -0xc(%ebp)
f01237e1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01237e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01237ea:	7f e7                	jg     f01237d3 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01237ec:	e8 7c 99 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01237f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237f4:	e8 fb 05 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01237f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01237fc:	83 ec 0c             	sub    $0xc,%esp
f01237ff:	68 00 08 00 00       	push   $0x800
f0123804:	e8 5d 42 fe ff       	call   f0107a66 <kmalloc>
f0123809:	83 c4 10             	add    $0x10,%esp
f012380c:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123812:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123818:	89 c1                	mov    %eax,%ecx
f012381a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0123821:	10 00 00 
f0123824:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012382a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012382f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0123835:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012383b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123840:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0123846:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012384c:	29 d0                	sub    %edx,%eax
f012384e:	89 c3                	mov    %eax,%ebx
f0123850:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0123857:	10 00 00 
f012385a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012385f:	0f b6 d0             	movzbl %al,%edx
f0123862:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123868:	01 d0                	add    %edx,%eax
f012386a:	48                   	dec    %eax
f012386b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123871:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123877:	ba 00 00 00 00       	mov    $0x0,%edx
f012387c:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0123882:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123888:	29 d0                	sub    %edx,%eax
f012388a:	01 c3                	add    %eax,%ebx
f012388c:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123893:	10 00 00 
f0123896:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012389b:	0f b6 c0             	movzbl %al,%eax
f012389e:	c1 e0 04             	shl    $0x4,%eax
f01238a1:	89 c2                	mov    %eax,%edx
f01238a3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01238a9:	01 d0                	add    %edx,%eax
f01238ab:	48                   	dec    %eax
f01238ac:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01238b2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01238bd:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01238c3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238c9:	29 d0                	sub    %edx,%eax
f01238cb:	01 d8                	add    %ebx,%eax
f01238cd:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01238d2:	39 c1                	cmp    %eax,%ecx
f01238d4:	74 17                	je     f01238ed <test_kfree_bestfirstfit+0x11ac>
f01238d6:	83 ec 04             	sub    $0x4,%esp
f01238d9:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01238de:	68 4d 07 00 00       	push   $0x74d
f01238e3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01238e8:	e8 18 c9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238ed:	e8 02 05 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f01238f2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01238f5:	74 17                	je     f012390e <test_kfree_bestfirstfit+0x11cd>
f01238f7:	83 ec 04             	sub    $0x4,%esp
f01238fa:	68 14 b6 13 f0       	push   $0xf013b614
f01238ff:	68 4e 07 00 00       	push   $0x74e
f0123904:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123909:	e8 f7 c8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012390e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123911:	e8 57 98 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123916:	29 c3                	sub    %eax,%ebx
f0123918:	89 d8                	mov    %ebx,%eax
f012391a:	83 f8 01             	cmp    $0x1,%eax
f012391d:	74 17                	je     f0123936 <test_kfree_bestfirstfit+0x11f5>
f012391f:	83 ec 04             	sub    $0x4,%esp
f0123922:	68 7c b6 13 f0       	push   $0xf013b67c
f0123927:	68 4f 07 00 00       	push   $0x74f
f012392c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123931:	e8 cf c8 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0123936:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f012393d:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0123940:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123946:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0123949:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123950:	eb 0e                	jmp    f0123960 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0123952:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123955:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123958:	01 d0                	add    %edx,%eax
f012395a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012395d:	ff 45 f4             	incl   -0xc(%ebp)
f0123960:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123966:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123969:	7f e7                	jg     f0123952 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012396b:	e8 fd 97 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123970:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123973:	e8 7c 04 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123978:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012397b:	83 ec 0c             	sub    $0xc,%esp
f012397e:	68 00 00 10 00       	push   $0x100000
f0123983:	e8 de 40 fe ff       	call   f0107a66 <kmalloc>
f0123988:	83 c4 10             	add    $0x10,%esp
f012398b:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123991:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123997:	89 c1                	mov    %eax,%ecx
f0123999:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01239a0:	10 00 00 
f01239a3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01239a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01239ae:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01239b4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01239ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01239bf:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01239c5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01239cb:	29 d0                	sub    %edx,%eax
f01239cd:	89 c3                	mov    %eax,%ebx
f01239cf:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01239d6:	10 00 00 
f01239d9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01239de:	0f b6 d0             	movzbl %al,%edx
f01239e1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01239e7:	01 d0                	add    %edx,%eax
f01239e9:	48                   	dec    %eax
f01239ea:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01239f0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01239f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01239fb:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123a01:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a07:	29 d0                	sub    %edx,%eax
f0123a09:	01 c3                	add    %eax,%ebx
f0123a0b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123a12:	10 00 00 
f0123a15:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0123a1a:	0f b6 c0             	movzbl %al,%eax
f0123a1d:	c1 e0 04             	shl    $0x4,%eax
f0123a20:	89 c2                	mov    %eax,%edx
f0123a22:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123a28:	01 d0                	add    %edx,%eax
f0123a2a:	48                   	dec    %eax
f0123a2b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123a31:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a3c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123a42:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123a48:	29 d0                	sub    %edx,%eax
f0123a4a:	01 d8                	add    %ebx,%eax
f0123a4c:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123a51:	39 c1                	cmp    %eax,%ecx
f0123a53:	74 17                	je     f0123a6c <test_kfree_bestfirstfit+0x132b>
f0123a55:	83 ec 04             	sub    $0x4,%esp
f0123a58:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0123a5d:	68 5b 07 00 00       	push   $0x75b
f0123a62:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123a67:	e8 99 c7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a6c:	e8 83 03 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123a71:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a74:	74 17                	je     f0123a8d <test_kfree_bestfirstfit+0x134c>
f0123a76:	83 ec 04             	sub    $0x4,%esp
f0123a79:	68 14 b6 13 f0       	push   $0xf013b614
f0123a7e:	68 5c 07 00 00       	push   $0x75c
f0123a83:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123a88:	e8 78 c7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123a8d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123a90:	e8 d8 96 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123a95:	29 c3                	sub    %eax,%ebx
f0123a97:	89 d8                	mov    %ebx,%eax
f0123a99:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123a9e:	74 17                	je     f0123ab7 <test_kfree_bestfirstfit+0x1376>
f0123aa0:	83 ec 04             	sub    $0x4,%esp
f0123aa3:	68 7c b6 13 f0       	push   $0xf013b67c
f0123aa8:	68 5d 07 00 00       	push   $0x75d
f0123aad:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123ab2:	e8 4e c7 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123ab7:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0123abe:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0123ac1:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123ac7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123aca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123ad1:	eb 0e                	jmp    f0123ae1 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123ad3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123ad6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123ad9:	01 d0                	add    %edx,%eax
f0123adb:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123ade:	ff 45 f4             	incl   -0xc(%ebp)
f0123ae1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123ae7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123aea:	7f e7                	jg     f0123ad3 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123aec:	83 ec 0c             	sub    $0xc,%esp
f0123aef:	68 1a be 13 f0       	push   $0xf013be1a
f0123af4:	e8 15 d2 fd ff       	call   f0100d0e <cprintf>
f0123af9:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123afc:	e8 6c 96 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123b01:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b04:	e8 eb 02 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123b09:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0123b0c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123b12:	83 ec 0c             	sub    $0xc,%esp
f0123b15:	50                   	push   %eax
f0123b16:	e8 0b 40 fe ff       	call   f0107b26 <kfree>
f0123b1b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b1e:	e8 d1 02 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123b23:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b26:	74 17                	je     f0123b3f <test_kfree_bestfirstfit+0x13fe>
f0123b28:	83 ec 04             	sub    $0x4,%esp
f0123b2b:	68 14 b6 13 f0       	push   $0xf013b614
f0123b30:	68 6d 07 00 00       	push   $0x76d
f0123b35:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123b3a:	e8 c6 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123b3f:	e8 29 96 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123b44:	89 c2                	mov    %eax,%edx
f0123b46:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b49:	29 c2                	sub    %eax,%edx
f0123b4b:	89 d0                	mov    %edx,%eax
f0123b4d:	83 f8 02             	cmp    $0x2,%eax
f0123b50:	74 17                	je     f0123b69 <test_kfree_bestfirstfit+0x1428>
f0123b52:	83 ec 04             	sub    $0x4,%esp
f0123b55:	68 84 bd 13 f0       	push   $0xf013bd84
f0123b5a:	68 6e 07 00 00       	push   $0x76e
f0123b5f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123b64:	e8 9c c6 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b69:	e8 ff 95 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123b6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b71:	e8 7e 02 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123b76:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123b79:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123b7f:	83 ec 0c             	sub    $0xc,%esp
f0123b82:	50                   	push   %eax
f0123b83:	e8 9e 3f fe ff       	call   f0107b26 <kfree>
f0123b88:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b8b:	e8 64 02 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123b90:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b93:	74 17                	je     f0123bac <test_kfree_bestfirstfit+0x146b>
f0123b95:	83 ec 04             	sub    $0x4,%esp
f0123b98:	68 14 b6 13 f0       	push   $0xf013b614
f0123b9d:	68 74 07 00 00       	push   $0x774
f0123ba2:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123ba7:	e8 59 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123bac:	e8 bc 95 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123bb1:	89 c2                	mov    %eax,%edx
f0123bb3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bb6:	29 c2                	sub    %eax,%edx
f0123bb8:	89 d0                	mov    %edx,%eax
f0123bba:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123bbf:	74 17                	je     f0123bd8 <test_kfree_bestfirstfit+0x1497>
f0123bc1:	83 ec 04             	sub    $0x4,%esp
f0123bc4:	68 84 bd 13 f0       	push   $0xf013bd84
f0123bc9:	68 75 07 00 00       	push   $0x775
f0123bce:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123bd3:	e8 2d c6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123bd8:	e8 90 95 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123bdd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123be0:	e8 0f 02 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123be5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123be8:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123bee:	83 ec 0c             	sub    $0xc,%esp
f0123bf1:	50                   	push   %eax
f0123bf2:	e8 2f 3f fe ff       	call   f0107b26 <kfree>
f0123bf7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123bfa:	e8 f5 01 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123bff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c02:	74 17                	je     f0123c1b <test_kfree_bestfirstfit+0x14da>
f0123c04:	83 ec 04             	sub    $0x4,%esp
f0123c07:	68 14 b6 13 f0       	push   $0xf013b614
f0123c0c:	68 7b 07 00 00       	push   $0x77b
f0123c11:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123c16:	e8 ea c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c1b:	e8 4d 95 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123c20:	89 c2                	mov    %eax,%edx
f0123c22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c25:	29 c2                	sub    %eax,%edx
f0123c27:	89 d0                	mov    %edx,%eax
f0123c29:	83 f8 01             	cmp    $0x1,%eax
f0123c2c:	74 17                	je     f0123c45 <test_kfree_bestfirstfit+0x1504>
f0123c2e:	83 ec 04             	sub    $0x4,%esp
f0123c31:	68 84 bd 13 f0       	push   $0xf013bd84
f0123c36:	68 7c 07 00 00       	push   $0x77c
f0123c3b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123c40:	e8 c0 c5 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c45:	e8 23 95 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123c4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c4d:	e8 a2 01 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123c52:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123c55:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123c5b:	83 ec 0c             	sub    $0xc,%esp
f0123c5e:	50                   	push   %eax
f0123c5f:	e8 c2 3e fe ff       	call   f0107b26 <kfree>
f0123c64:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c67:	e8 88 01 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123c6c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c6f:	74 17                	je     f0123c88 <test_kfree_bestfirstfit+0x1547>
f0123c71:	83 ec 04             	sub    $0x4,%esp
f0123c74:	68 14 b6 13 f0       	push   $0xf013b614
f0123c79:	68 82 07 00 00       	push   $0x782
f0123c7e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123c83:	e8 7d c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c88:	e8 e0 94 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123c8d:	89 c2                	mov    %eax,%edx
f0123c8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c92:	29 c2                	sub    %eax,%edx
f0123c94:	89 d0                	mov    %edx,%eax
f0123c96:	83 f8 04             	cmp    $0x4,%eax
f0123c99:	74 17                	je     f0123cb2 <test_kfree_bestfirstfit+0x1571>
f0123c9b:	83 ec 04             	sub    $0x4,%esp
f0123c9e:	68 84 bd 13 f0       	push   $0xf013bd84
f0123ca3:	68 83 07 00 00       	push   $0x783
f0123ca8:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123cad:	e8 53 c5 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123cb2:	e8 b6 94 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123cb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123cba:	e8 35 01 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123cbf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123cc2:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123cc8:	83 ec 0c             	sub    $0xc,%esp
f0123ccb:	50                   	push   %eax
f0123ccc:	e8 55 3e fe ff       	call   f0107b26 <kfree>
f0123cd1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123cd4:	e8 1b 01 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123cd9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123cdc:	74 17                	je     f0123cf5 <test_kfree_bestfirstfit+0x15b4>
f0123cde:	83 ec 04             	sub    $0x4,%esp
f0123ce1:	68 14 b6 13 f0       	push   $0xf013b614
f0123ce6:	68 89 07 00 00       	push   $0x789
f0123ceb:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123cf0:	e8 10 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123cf5:	e8 73 94 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123cfa:	89 c2                	mov    %eax,%edx
f0123cfc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123cff:	29 c2                	sub    %eax,%edx
f0123d01:	89 d0                	mov    %edx,%eax
f0123d03:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123d08:	74 17                	je     f0123d21 <test_kfree_bestfirstfit+0x15e0>
f0123d0a:	83 ec 04             	sub    $0x4,%esp
f0123d0d:	68 84 bd 13 f0       	push   $0xf013bd84
f0123d12:	68 8a 07 00 00       	push   $0x78a
f0123d17:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123d1c:	e8 e4 c4 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123d21:	e8 47 94 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123d26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d29:	e8 c6 00 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123d2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123d31:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123d37:	83 ec 0c             	sub    $0xc,%esp
f0123d3a:	50                   	push   %eax
f0123d3b:	e8 e6 3d fe ff       	call   f0107b26 <kfree>
f0123d40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d43:	e8 ac 00 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123d48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123d4b:	74 17                	je     f0123d64 <test_kfree_bestfirstfit+0x1623>
f0123d4d:	83 ec 04             	sub    $0x4,%esp
f0123d50:	68 14 b6 13 f0       	push   $0xf013b614
f0123d55:	68 90 07 00 00       	push   $0x790
f0123d5a:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123d5f:	e8 a1 c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123d64:	e8 04 94 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123d69:	89 c2                	mov    %eax,%edx
f0123d6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123d6e:	29 c2                	sub    %eax,%edx
f0123d70:	89 d0                	mov    %edx,%eax
f0123d72:	83 f8 01             	cmp    $0x1,%eax
f0123d75:	74 17                	je     f0123d8e <test_kfree_bestfirstfit+0x164d>
f0123d77:	83 ec 04             	sub    $0x4,%esp
f0123d7a:	68 84 bd 13 f0       	push   $0xf013bd84
f0123d7f:	68 91 07 00 00       	push   $0x791
f0123d84:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123d89:	e8 77 c4 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d8e:	e8 da 93 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123d93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d96:	e8 59 00 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123d9b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123d9e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123da4:	83 ec 0c             	sub    $0xc,%esp
f0123da7:	50                   	push   %eax
f0123da8:	e8 79 3d fe ff       	call   f0107b26 <kfree>
f0123dad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123db0:	e8 3f 00 fe ff       	call   f0103df4 <pf_calculate_free_frames>
f0123db5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123db8:	74 17                	je     f0123dd1 <test_kfree_bestfirstfit+0x1690>
f0123dba:	83 ec 04             	sub    $0x4,%esp
f0123dbd:	68 14 b6 13 f0       	push   $0xf013b614
f0123dc2:	68 97 07 00 00       	push   $0x797
f0123dc7:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123dcc:	e8 34 c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123dd1:	e8 97 93 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123dd6:	89 c2                	mov    %eax,%edx
f0123dd8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123ddb:	29 c2                	sub    %eax,%edx
f0123ddd:	89 d0                	mov    %edx,%eax
f0123ddf:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123de4:	74 17                	je     f0123dfd <test_kfree_bestfirstfit+0x16bc>
f0123de6:	83 ec 04             	sub    $0x4,%esp
f0123de9:	68 84 bd 13 f0       	push   $0xf013bd84
f0123dee:	68 98 07 00 00       	push   $0x798
f0123df3:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123df8:	e8 08 c4 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123dfd:	e8 6b 93 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123e02:	89 c2                	mov    %eax,%edx
f0123e04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123e07:	39 c2                	cmp    %eax,%edx
f0123e09:	74 17                	je     f0123e22 <test_kfree_bestfirstfit+0x16e1>
f0123e0b:	83 ec 04             	sub    $0x4,%esp
f0123e0e:	68 24 be 13 f0       	push   $0xf013be24
f0123e13:	68 9a 07 00 00       	push   $0x79a
f0123e18:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123e1d:	e8 e3 c3 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123e22:	83 ec 0c             	sub    $0xc,%esp
f0123e25:	68 58 be 13 f0       	push   $0xf013be58
f0123e2a:	e8 df ce fd ff       	call   f0100d0e <cprintf>
f0123e2f:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123e32:	83 ec 0c             	sub    $0xc,%esp
f0123e35:	6a 03                	push   $0x3
f0123e37:	e8 d1 97 fe ff       	call   f010d60d <sys_bypassPageFault>
f0123e3c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123e3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123e46:	e9 82 00 00 00       	jmp    f0123ecd <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123e4e:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123e55:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123e58:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e5b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123e5e:	e8 98 97 fe ff       	call   f010d5fb <sys_rcr2>
f0123e63:	89 c2                	mov    %eax,%edx
f0123e65:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e68:	39 c2                	cmp    %eax,%edx
f0123e6a:	74 17                	je     f0123e83 <test_kfree_bestfirstfit+0x1742>
f0123e6c:	83 ec 04             	sub    $0x4,%esp
f0123e6f:	68 60 be 13 f0       	push   $0xf013be60
f0123e74:	68 a9 07 00 00       	push   $0x7a9
f0123e79:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123e7e:	e8 82 c3 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123e86:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123e8d:	89 c2                	mov    %eax,%edx
f0123e8f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e92:	01 d0                	add    %edx,%eax
f0123e94:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123e97:	e8 5f 97 fe ff       	call   f010d5fb <sys_rcr2>
f0123e9c:	89 c2                	mov    %eax,%edx
f0123e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123ea1:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123ea8:	89 c1                	mov    %eax,%ecx
f0123eaa:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123ead:	01 c8                	add    %ecx,%eax
f0123eaf:	39 c2                	cmp    %eax,%edx
f0123eb1:	74 17                	je     f0123eca <test_kfree_bestfirstfit+0x1789>
f0123eb3:	83 ec 04             	sub    $0x4,%esp
f0123eb6:	68 60 be 13 f0       	push   $0xf013be60
f0123ebb:	68 ab 07 00 00       	push   $0x7ab
f0123ec0:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123ec5:	e8 3b c3 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123eca:	ff 45 f4             	incl   -0xc(%ebp)
f0123ecd:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123ed1:	0f 8e 74 ff ff ff    	jle    f0123e4b <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123ed7:	83 ec 0c             	sub    $0xc,%esp
f0123eda:	6a 00                	push   $0x0
f0123edc:	e8 2c 97 fe ff       	call   f010d60d <sys_bypassPageFault>
f0123ee1:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123ee4:	83 ec 0c             	sub    $0xc,%esp
f0123ee7:	68 a5 be 13 f0       	push   $0xf013bea5
f0123eec:	e8 1d ce fd ff       	call   f0100d0e <cprintf>
f0123ef1:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ef4:	e8 74 92 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123ef9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123efc:	e8 f3 fe fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0123f01:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123f04:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123f0a:	83 ec 0c             	sub    $0xc,%esp
f0123f0d:	50                   	push   %eax
f0123f0e:	e8 13 3c fe ff       	call   f0107b26 <kfree>
f0123f13:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f16:	e8 d9 fe fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0123f1b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f1e:	74 17                	je     f0123f37 <test_kfree_bestfirstfit+0x17f6>
f0123f20:	83 ec 04             	sub    $0x4,%esp
f0123f23:	68 14 b6 13 f0       	push   $0xf013b614
f0123f28:	68 b9 07 00 00       	push   $0x7b9
f0123f2d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123f32:	e8 ce c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123f37:	e8 31 92 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123f3c:	89 c2                	mov    %eax,%edx
f0123f3e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123f41:	39 c2                	cmp    %eax,%edx
f0123f43:	74 17                	je     f0123f5c <test_kfree_bestfirstfit+0x181b>
f0123f45:	83 ec 04             	sub    $0x4,%esp
f0123f48:	68 ac be 13 f0       	push   $0xf013beac
f0123f4d:	68 ba 07 00 00       	push   $0x7ba
f0123f52:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123f57:	e8 a9 c2 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f5c:	e8 0c 92 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123f61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f64:	e8 8b fe fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0123f69:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123f6c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123f72:	83 ec 0c             	sub    $0xc,%esp
f0123f75:	50                   	push   %eax
f0123f76:	e8 ab 3b fe ff       	call   f0107b26 <kfree>
f0123f7b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f7e:	e8 71 fe fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0123f83:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f86:	74 17                	je     f0123f9f <test_kfree_bestfirstfit+0x185e>
f0123f88:	83 ec 04             	sub    $0x4,%esp
f0123f8b:	68 14 b6 13 f0       	push   $0xf013b614
f0123f90:	68 c0 07 00 00       	push   $0x7c0
f0123f95:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123f9a:	e8 66 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123f9f:	e8 c9 91 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123fa4:	89 c2                	mov    %eax,%edx
f0123fa6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123fa9:	39 c2                	cmp    %eax,%edx
f0123fab:	74 17                	je     f0123fc4 <test_kfree_bestfirstfit+0x1883>
f0123fad:	83 ec 04             	sub    $0x4,%esp
f0123fb0:	68 ac be 13 f0       	push   $0xf013beac
f0123fb5:	68 c1 07 00 00       	push   $0x7c1
f0123fba:	68 fa b5 13 f0       	push   $0xf013b5fa
f0123fbf:	e8 41 c2 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123fc4:	e8 a4 91 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0123fc9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fcc:	e8 23 fe fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0123fd1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123fd4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123fda:	83 ec 0c             	sub    $0xc,%esp
f0123fdd:	50                   	push   %eax
f0123fde:	e8 43 3b fe ff       	call   f0107b26 <kfree>
f0123fe3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fe6:	e8 09 fe fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0123feb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123fee:	74 17                	je     f0124007 <test_kfree_bestfirstfit+0x18c6>
f0123ff0:	83 ec 04             	sub    $0x4,%esp
f0123ff3:	68 14 b6 13 f0       	push   $0xf013b614
f0123ff8:	68 c7 07 00 00       	push   $0x7c7
f0123ffd:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124002:	e8 fe c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0124007:	e8 61 91 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012400c:	89 c2                	mov    %eax,%edx
f012400e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124011:	39 c2                	cmp    %eax,%edx
f0124013:	74 17                	je     f012402c <test_kfree_bestfirstfit+0x18eb>
f0124015:	83 ec 04             	sub    $0x4,%esp
f0124018:	68 ac be 13 f0       	push   $0xf013beac
f012401d:	68 c8 07 00 00       	push   $0x7c8
f0124022:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124027:	e8 d9 c1 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012402c:	e8 3c 91 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124031:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124034:	e8 bb fd fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124039:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012403c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0124042:	83 ec 0c             	sub    $0xc,%esp
f0124045:	50                   	push   %eax
f0124046:	e8 db 3a fe ff       	call   f0107b26 <kfree>
f012404b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012404e:	e8 a1 fd fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124053:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124056:	74 17                	je     f012406f <test_kfree_bestfirstfit+0x192e>
f0124058:	83 ec 04             	sub    $0x4,%esp
f012405b:	68 14 b6 13 f0       	push   $0xf013b614
f0124060:	68 ce 07 00 00       	push   $0x7ce
f0124065:	68 fa b5 13 f0       	push   $0xf013b5fa
f012406a:	e8 96 c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012406f:	e8 f9 90 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124074:	89 c2                	mov    %eax,%edx
f0124076:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124079:	39 c2                	cmp    %eax,%edx
f012407b:	74 17                	je     f0124094 <test_kfree_bestfirstfit+0x1953>
f012407d:	83 ec 04             	sub    $0x4,%esp
f0124080:	68 ac be 13 f0       	push   $0xf013beac
f0124085:	68 cf 07 00 00       	push   $0x7cf
f012408a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012408f:	e8 71 c1 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0124094:	83 ec 0c             	sub    $0xc,%esp
f0124097:	68 f3 be 13 f0       	push   $0xf013bef3
f012409c:	e8 6d cc fd ff       	call   f0100d0e <cprintf>
f01240a1:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01240a4:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01240ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01240b2:	eb 48                	jmp    f01240fc <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01240b4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01240b7:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01240bc:	83 ec 04             	sub    $0x4,%esp
f01240bf:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01240c5:	51                   	push   %ecx
f01240c6:	52                   	push   %edx
f01240c7:	50                   	push   %eax
f01240c8:	e8 10 2a fe ff       	call   f0106add <get_page_table>
f01240cd:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01240d0:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01240d6:	85 c0                	test   %eax,%eax
f01240d8:	75 17                	jne    f01240f1 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01240da:	83 ec 04             	sub    $0x4,%esp
f01240dd:	68 fc be 13 f0       	push   $0xf013befc
f01240e2:	68 dd 07 00 00       	push   $0x7dd
f01240e7:	68 fa b5 13 f0       	push   $0xf013b5fa
f01240ec:	e8 14 c1 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01240f1:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01240f8:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01240fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124100:	78 b2                	js     f01240b4 <test_kfree_bestfirstfit+0x1973>
f0124102:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124106:	7f 09                	jg     f0124111 <test_kfree_bestfirstfit+0x19d0>
f0124108:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012410f:	76 a3                	jbe    f01240b4 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0124111:	83 ec 0c             	sub    $0xc,%esp
f0124114:	68 de b7 13 f0       	push   $0xf013b7de
f0124119:	e8 f0 cb fd ff       	call   f0100d0e <cprintf>
f012411e:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0124121:	83 ec 0c             	sub    $0xc,%esp
f0124124:	68 64 bf 13 f0       	push   $0xf013bf64
f0124129:	e8 e0 cb fd ff       	call   f0100d0e <cprintf>
f012412e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124131:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124136:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0124139:	5b                   	pop    %ebx
f012413a:	5f                   	pop    %edi
f012413b:	5d                   	pop    %ebp
f012413c:	c3                   	ret    

f012413d <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f012413d:	55                   	push   %ebp
f012413e:	89 e5                	mov    %esp,%ebp
f0124140:	57                   	push   %edi
f0124141:	56                   	push   %esi
f0124142:	53                   	push   %ebx
f0124143:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0124149:	83 ec 0c             	sub    $0xc,%esp
f012414c:	68 3c b5 13 f0       	push   $0xf013b53c
f0124151:	e8 b8 cb fd ff       	call   f0100d0e <cprintf>
f0124156:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124159:	83 ec 0c             	sub    $0xc,%esp
f012415c:	68 6c b5 13 f0       	push   $0xf013b56c
f0124161:	e8 a8 cb fd ff       	call   f0100d0e <cprintf>
f0124166:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124169:	83 ec 0c             	sub    $0xc,%esp
f012416c:	68 3c b5 13 f0       	push   $0xf013b53c
f0124171:	e8 98 cb fd ff       	call   f0100d0e <cprintf>
f0124176:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0124179:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f012417d:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0124181:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0124187:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f012418d:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124194:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012419b:	e8 cd 8f fe ff       	call   f010d16d <sys_calculate_free_frames>
f01241a0:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01241a3:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f01241a9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01241b3:	89 d7                	mov    %edx,%edi
f01241b5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01241b7:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01241bd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01241c7:	89 d7                	mov    %edx,%edi
f01241c9:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01241cb:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01241d1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01241db:	89 d7                	mov    %edx,%edi
f01241dd:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01241df:	e8 89 8f fe ff       	call   f010d16d <sys_calculate_free_frames>
f01241e4:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241e7:	e8 08 fc fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01241ec:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01241ef:	83 ec 0c             	sub    $0xc,%esp
f01241f2:	68 00 fc 1f 00       	push   $0x1ffc00
f01241f7:	e8 6a 38 fe ff       	call   f0107a66 <kmalloc>
f01241fc:	83 c4 10             	add    $0x10,%esp
f01241ff:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124205:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012420b:	89 c1                	mov    %eax,%ecx
f012420d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0124214:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124217:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012421c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012421f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124222:	ba 00 00 00 00       	mov    $0x0,%edx
f0124227:	f7 75 a0             	divl   -0x60(%ebp)
f012422a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012422d:	29 d0                	sub    %edx,%eax
f012422f:	89 c3                	mov    %eax,%ebx
f0124231:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0124238:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012423d:	0f b6 d0             	movzbl %al,%edx
f0124240:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124243:	01 d0                	add    %edx,%eax
f0124245:	48                   	dec    %eax
f0124246:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0124249:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012424c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124251:	f7 75 98             	divl   -0x68(%ebp)
f0124254:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124257:	29 d0                	sub    %edx,%eax
f0124259:	01 c3                	add    %eax,%ebx
f012425b:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0124262:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124267:	0f b6 c0             	movzbl %al,%eax
f012426a:	c1 e0 04             	shl    $0x4,%eax
f012426d:	89 c2                	mov    %eax,%edx
f012426f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124272:	01 d0                	add    %edx,%eax
f0124274:	48                   	dec    %eax
f0124275:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0124278:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012427b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124280:	f7 75 90             	divl   -0x70(%ebp)
f0124283:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124286:	29 d0                	sub    %edx,%eax
f0124288:	01 d8                	add    %ebx,%eax
f012428a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012428f:	39 c1                	cmp    %eax,%ecx
f0124291:	74 17                	je     f01242aa <test_kheap_phys_addr+0x16d>
f0124293:	83 ec 04             	sub    $0x4,%esp
f0124296:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012429b:	68 0a 08 00 00       	push   $0x80a
f01242a0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01242a5:	e8 5b bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242aa:	e8 45 fb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01242af:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01242b2:	74 17                	je     f01242cb <test_kheap_phys_addr+0x18e>
f01242b4:	83 ec 04             	sub    $0x4,%esp
f01242b7:	68 14 b6 13 f0       	push   $0xf013b614
f01242bc:	68 0b 08 00 00       	push   $0x80b
f01242c1:	68 fa b5 13 f0       	push   $0xf013b5fa
f01242c6:	e8 3a bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242cb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01242ce:	e8 9a 8e fe ff       	call   f010d16d <sys_calculate_free_frames>
f01242d3:	29 c3                	sub    %eax,%ebx
f01242d5:	89 d8                	mov    %ebx,%eax
f01242d7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01242dc:	74 17                	je     f01242f5 <test_kheap_phys_addr+0x1b8>
f01242de:	83 ec 04             	sub    $0x4,%esp
f01242e1:	68 7c b6 13 f0       	push   $0xf013b67c
f01242e6:	68 0c 08 00 00       	push   $0x80c
f01242eb:	68 fa b5 13 f0       	push   $0xf013b5fa
f01242f0:	e8 10 bf fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01242f5:	e8 73 8e fe ff       	call   f010d16d <sys_calculate_free_frames>
f01242fa:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242fd:	e8 f2 fa fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124302:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124305:	83 ec 0c             	sub    $0xc,%esp
f0124308:	68 00 fc 1f 00       	push   $0x1ffc00
f012430d:	e8 54 37 fe ff       	call   f0107a66 <kmalloc>
f0124312:	83 c4 10             	add    $0x10,%esp
f0124315:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012431b:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124321:	89 c1                	mov    %eax,%ecx
f0124323:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012432a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012432d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124332:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0124335:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124338:	ba 00 00 00 00       	mov    $0x0,%edx
f012433d:	f7 75 88             	divl   -0x78(%ebp)
f0124340:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124343:	29 d0                	sub    %edx,%eax
f0124345:	89 c3                	mov    %eax,%ebx
f0124347:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012434e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124353:	0f b6 d0             	movzbl %al,%edx
f0124356:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124359:	01 d0                	add    %edx,%eax
f012435b:	48                   	dec    %eax
f012435c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0124362:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124368:	ba 00 00 00 00       	mov    $0x0,%edx
f012436d:	f7 75 80             	divl   -0x80(%ebp)
f0124370:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124376:	29 d0                	sub    %edx,%eax
f0124378:	01 c3                	add    %eax,%ebx
f012437a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0124381:	10 00 00 
f0124384:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124389:	0f b6 c0             	movzbl %al,%eax
f012438c:	c1 e0 04             	shl    $0x4,%eax
f012438f:	89 c2                	mov    %eax,%edx
f0124391:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124397:	01 d0                	add    %edx,%eax
f0124399:	48                   	dec    %eax
f012439a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01243a0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01243a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01243ab:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01243b1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01243b7:	29 d0                	sub    %edx,%eax
f01243b9:	01 d8                	add    %ebx,%eax
f01243bb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01243c0:	39 c1                	cmp    %eax,%ecx
f01243c2:	74 17                	je     f01243db <test_kheap_phys_addr+0x29e>
f01243c4:	83 ec 04             	sub    $0x4,%esp
f01243c7:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01243cc:	68 12 08 00 00       	push   $0x812
f01243d1:	68 fa b5 13 f0       	push   $0xf013b5fa
f01243d6:	e8 2a be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243db:	e8 14 fa fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01243e0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01243e3:	74 17                	je     f01243fc <test_kheap_phys_addr+0x2bf>
f01243e5:	83 ec 04             	sub    $0x4,%esp
f01243e8:	68 14 b6 13 f0       	push   $0xf013b614
f01243ed:	68 13 08 00 00       	push   $0x813
f01243f2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01243f7:	e8 09 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243fc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01243ff:	e8 69 8d fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124404:	29 c3                	sub    %eax,%ebx
f0124406:	89 d8                	mov    %ebx,%eax
f0124408:	3d 00 02 00 00       	cmp    $0x200,%eax
f012440d:	74 17                	je     f0124426 <test_kheap_phys_addr+0x2e9>
f012440f:	83 ec 04             	sub    $0x4,%esp
f0124412:	68 7c b6 13 f0       	push   $0xf013b67c
f0124417:	68 14 08 00 00       	push   $0x814
f012441c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124421:	e8 df bd fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124426:	e8 42 8d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012442b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012442e:	e8 c1 f9 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124433:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124436:	83 ec 0c             	sub    $0xc,%esp
f0124439:	68 00 08 00 00       	push   $0x800
f012443e:	e8 23 36 fe ff       	call   f0107a66 <kmalloc>
f0124443:	83 c4 10             	add    $0x10,%esp
f0124446:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012444c:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124452:	89 c1                	mov    %eax,%ecx
f0124454:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012445b:	10 00 00 
f012445e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124464:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124469:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012446f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124475:	ba 00 00 00 00       	mov    $0x0,%edx
f012447a:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0124480:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124486:	29 d0                	sub    %edx,%eax
f0124488:	89 c3                	mov    %eax,%ebx
f012448a:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0124491:	10 00 00 
f0124494:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124499:	0f b6 d0             	movzbl %al,%edx
f012449c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01244a2:	01 d0                	add    %edx,%eax
f01244a4:	48                   	dec    %eax
f01244a5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01244ab:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01244b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01244b6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01244bc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01244c2:	29 d0                	sub    %edx,%eax
f01244c4:	01 c3                	add    %eax,%ebx
f01244c6:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01244cd:	10 00 00 
f01244d0:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01244d5:	0f b6 c0             	movzbl %al,%eax
f01244d8:	c1 e0 04             	shl    $0x4,%eax
f01244db:	89 c2                	mov    %eax,%edx
f01244dd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01244e3:	01 d0                	add    %edx,%eax
f01244e5:	48                   	dec    %eax
f01244e6:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01244ec:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01244f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01244f7:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01244fd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124503:	29 d0                	sub    %edx,%eax
f0124505:	01 d8                	add    %ebx,%eax
f0124507:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012450c:	39 c1                	cmp    %eax,%ecx
f012450e:	74 17                	je     f0124527 <test_kheap_phys_addr+0x3ea>
f0124510:	83 ec 04             	sub    $0x4,%esp
f0124513:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0124518:	68 1a 08 00 00       	push   $0x81a
f012451d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124522:	e8 de bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124527:	e8 c8 f8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012452c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012452f:	74 17                	je     f0124548 <test_kheap_phys_addr+0x40b>
f0124531:	83 ec 04             	sub    $0x4,%esp
f0124534:	68 14 b6 13 f0       	push   $0xf013b614
f0124539:	68 1b 08 00 00       	push   $0x81b
f012453e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124543:	e8 bd bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124548:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012454b:	e8 1d 8c fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124550:	29 c3                	sub    %eax,%ebx
f0124552:	89 d8                	mov    %ebx,%eax
f0124554:	83 f8 01             	cmp    $0x1,%eax
f0124557:	74 17                	je     f0124570 <test_kheap_phys_addr+0x433>
f0124559:	83 ec 04             	sub    $0x4,%esp
f012455c:	68 7c b6 13 f0       	push   $0xf013b67c
f0124561:	68 1c 08 00 00       	push   $0x81c
f0124566:	68 fa b5 13 f0       	push   $0xf013b5fa
f012456b:	e8 95 bc fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124570:	e8 f8 8b fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124575:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124578:	e8 77 f8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012457d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124580:	83 ec 0c             	sub    $0xc,%esp
f0124583:	68 00 08 00 00       	push   $0x800
f0124588:	e8 d9 34 fe ff       	call   f0107a66 <kmalloc>
f012458d:	83 c4 10             	add    $0x10,%esp
f0124590:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124596:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012459c:	89 c1                	mov    %eax,%ecx
f012459e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01245a5:	10 00 00 
f01245a8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01245ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01245b3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01245b9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01245bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01245c4:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01245ca:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01245d0:	29 d0                	sub    %edx,%eax
f01245d2:	89 c3                	mov    %eax,%ebx
f01245d4:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01245db:	10 00 00 
f01245de:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01245e3:	0f b6 d0             	movzbl %al,%edx
f01245e6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01245ec:	01 d0                	add    %edx,%eax
f01245ee:	48                   	dec    %eax
f01245ef:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01245f5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01245fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124600:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0124606:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012460c:	29 d0                	sub    %edx,%eax
f012460e:	01 c3                	add    %eax,%ebx
f0124610:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0124617:	10 00 00 
f012461a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012461f:	0f b6 c0             	movzbl %al,%eax
f0124622:	c1 e0 04             	shl    $0x4,%eax
f0124625:	89 c2                	mov    %eax,%edx
f0124627:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012462d:	01 d0                	add    %edx,%eax
f012462f:	48                   	dec    %eax
f0124630:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0124636:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012463c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124641:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0124647:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012464d:	29 d0                	sub    %edx,%eax
f012464f:	01 d8                	add    %ebx,%eax
f0124651:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124656:	39 c1                	cmp    %eax,%ecx
f0124658:	74 17                	je     f0124671 <test_kheap_phys_addr+0x534>
f012465a:	83 ec 04             	sub    $0x4,%esp
f012465d:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0124662:	68 22 08 00 00       	push   $0x822
f0124667:	68 fa b5 13 f0       	push   $0xf013b5fa
f012466c:	e8 94 bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124671:	e8 7e f7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124676:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124679:	74 17                	je     f0124692 <test_kheap_phys_addr+0x555>
f012467b:	83 ec 04             	sub    $0x4,%esp
f012467e:	68 14 b6 13 f0       	push   $0xf013b614
f0124683:	68 23 08 00 00       	push   $0x823
f0124688:	68 fa b5 13 f0       	push   $0xf013b5fa
f012468d:	e8 73 bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124692:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124695:	e8 d3 8a fe ff       	call   f010d16d <sys_calculate_free_frames>
f012469a:	29 c3                	sub    %eax,%ebx
f012469c:	89 d8                	mov    %ebx,%eax
f012469e:	83 f8 01             	cmp    $0x1,%eax
f01246a1:	74 17                	je     f01246ba <test_kheap_phys_addr+0x57d>
f01246a3:	83 ec 04             	sub    $0x4,%esp
f01246a6:	68 7c b6 13 f0       	push   $0xf013b67c
f01246ab:	68 24 08 00 00       	push   $0x824
f01246b0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01246b5:	e8 4b bb fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01246ba:	e8 ae 8a fe ff       	call   f010d16d <sys_calculate_free_frames>
f01246bf:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246c2:	e8 2d f7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01246c7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01246ca:	83 ec 0c             	sub    $0xc,%esp
f01246cd:	68 00 1c 00 00       	push   $0x1c00
f01246d2:	e8 8f 33 fe ff       	call   f0107a66 <kmalloc>
f01246d7:	83 c4 10             	add    $0x10,%esp
f01246da:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246e0:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01246e6:	89 c1                	mov    %eax,%ecx
f01246e8:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01246ef:	10 00 00 
f01246f2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01246f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246fd:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0124703:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124709:	ba 00 00 00 00       	mov    $0x0,%edx
f012470e:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0124714:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012471a:	29 d0                	sub    %edx,%eax
f012471c:	89 c3                	mov    %eax,%ebx
f012471e:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0124725:	10 00 00 
f0124728:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012472d:	0f b6 d0             	movzbl %al,%edx
f0124730:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124736:	01 d0                	add    %edx,%eax
f0124738:	48                   	dec    %eax
f0124739:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012473f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124745:	ba 00 00 00 00       	mov    $0x0,%edx
f012474a:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0124750:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124756:	29 d0                	sub    %edx,%eax
f0124758:	01 c3                	add    %eax,%ebx
f012475a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0124761:	10 00 00 
f0124764:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124769:	0f b6 c0             	movzbl %al,%eax
f012476c:	c1 e0 04             	shl    $0x4,%eax
f012476f:	89 c2                	mov    %eax,%edx
f0124771:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124777:	01 d0                	add    %edx,%eax
f0124779:	48                   	dec    %eax
f012477a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0124780:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124786:	ba 00 00 00 00       	mov    $0x0,%edx
f012478b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0124791:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124797:	29 d0                	sub    %edx,%eax
f0124799:	01 d8                	add    %ebx,%eax
f012479b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01247a0:	39 c1                	cmp    %eax,%ecx
f01247a2:	74 17                	je     f01247bb <test_kheap_phys_addr+0x67e>
f01247a4:	83 ec 04             	sub    $0x4,%esp
f01247a7:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01247ac:	68 2a 08 00 00       	push   $0x82a
f01247b1:	68 fa b5 13 f0       	push   $0xf013b5fa
f01247b6:	e8 4a ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247bb:	e8 34 f6 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01247c0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01247c3:	74 17                	je     f01247dc <test_kheap_phys_addr+0x69f>
f01247c5:	83 ec 04             	sub    $0x4,%esp
f01247c8:	68 14 b6 13 f0       	push   $0xf013b614
f01247cd:	68 2b 08 00 00       	push   $0x82b
f01247d2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01247d7:	e8 29 ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01247dc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01247df:	e8 89 89 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01247e4:	29 c3                	sub    %eax,%ebx
f01247e6:	89 d8                	mov    %ebx,%eax
f01247e8:	83 f8 02             	cmp    $0x2,%eax
f01247eb:	74 17                	je     f0124804 <test_kheap_phys_addr+0x6c7>
f01247ed:	83 ec 04             	sub    $0x4,%esp
f01247f0:	68 7c b6 13 f0       	push   $0xf013b67c
f01247f5:	68 2c 08 00 00       	push   $0x82c
f01247fa:	68 fa b5 13 f0       	push   $0xf013b5fa
f01247ff:	e8 01 ba fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124804:	e8 64 89 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124809:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012480c:	e8 e3 f5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124811:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124814:	83 ec 0c             	sub    $0xc,%esp
f0124817:	68 00 fc 2f 00       	push   $0x2ffc00
f012481c:	e8 45 32 fe ff       	call   f0107a66 <kmalloc>
f0124821:	83 c4 10             	add    $0x10,%esp
f0124824:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012482a:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124830:	89 c1                	mov    %eax,%ecx
f0124832:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0124839:	10 00 00 
f012483c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124842:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124847:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012484d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124853:	ba 00 00 00 00       	mov    $0x0,%edx
f0124858:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012485e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124864:	29 d0                	sub    %edx,%eax
f0124866:	89 c3                	mov    %eax,%ebx
f0124868:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012486f:	10 00 00 
f0124872:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124877:	0f b6 d0             	movzbl %al,%edx
f012487a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124880:	01 d0                	add    %edx,%eax
f0124882:	48                   	dec    %eax
f0124883:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0124889:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012488f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124894:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012489a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01248a0:	29 d0                	sub    %edx,%eax
f01248a2:	01 c3                	add    %eax,%ebx
f01248a4:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01248ab:	10 00 00 
f01248ae:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01248b3:	0f b6 c0             	movzbl %al,%eax
f01248b6:	c1 e0 04             	shl    $0x4,%eax
f01248b9:	89 c2                	mov    %eax,%edx
f01248bb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01248c1:	01 d0                	add    %edx,%eax
f01248c3:	48                   	dec    %eax
f01248c4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01248ca:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01248d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01248d5:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01248db:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01248e1:	29 d0                	sub    %edx,%eax
f01248e3:	01 d8                	add    %ebx,%eax
f01248e5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01248ea:	39 c1                	cmp    %eax,%ecx
f01248ec:	74 17                	je     f0124905 <test_kheap_phys_addr+0x7c8>
f01248ee:	83 ec 04             	sub    $0x4,%esp
f01248f1:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01248f6:	68 32 08 00 00       	push   $0x832
f01248fb:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124900:	e8 00 b9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124905:	e8 ea f4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012490a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012490d:	74 17                	je     f0124926 <test_kheap_phys_addr+0x7e9>
f012490f:	83 ec 04             	sub    $0x4,%esp
f0124912:	68 14 b6 13 f0       	push   $0xf013b614
f0124917:	68 33 08 00 00       	push   $0x833
f012491c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124921:	e8 df b8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124926:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124929:	e8 3f 88 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012492e:	29 c3                	sub    %eax,%ebx
f0124930:	89 d8                	mov    %ebx,%eax
f0124932:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124937:	74 17                	je     f0124950 <test_kheap_phys_addr+0x813>
f0124939:	83 ec 04             	sub    $0x4,%esp
f012493c:	68 7c b6 13 f0       	push   $0xf013b67c
f0124941:	68 34 08 00 00       	push   $0x834
f0124946:	68 fa b5 13 f0       	push   $0xf013b5fa
f012494b:	e8 b5 b8 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124950:	e8 18 88 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124955:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124958:	e8 97 f4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012495d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124960:	83 ec 0c             	sub    $0xc,%esp
f0124963:	68 00 fc 5f 00       	push   $0x5ffc00
f0124968:	e8 f9 30 fe ff       	call   f0107a66 <kmalloc>
f012496d:	83 c4 10             	add    $0x10,%esp
f0124970:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124976:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012497c:	89 c1                	mov    %eax,%ecx
f012497e:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0124985:	10 00 00 
f0124988:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012498e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124993:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0124999:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012499f:	ba 00 00 00 00       	mov    $0x0,%edx
f01249a4:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01249aa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01249b0:	29 d0                	sub    %edx,%eax
f01249b2:	89 c3                	mov    %eax,%ebx
f01249b4:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01249bb:	10 00 00 
f01249be:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01249c3:	0f b6 d0             	movzbl %al,%edx
f01249c6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01249cc:	01 d0                	add    %edx,%eax
f01249ce:	48                   	dec    %eax
f01249cf:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01249d5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01249db:	ba 00 00 00 00       	mov    $0x0,%edx
f01249e0:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01249e6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01249ec:	29 d0                	sub    %edx,%eax
f01249ee:	01 c3                	add    %eax,%ebx
f01249f0:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01249f7:	10 00 00 
f01249fa:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01249ff:	0f b6 c0             	movzbl %al,%eax
f0124a02:	c1 e0 04             	shl    $0x4,%eax
f0124a05:	89 c2                	mov    %eax,%edx
f0124a07:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124a0d:	01 d0                	add    %edx,%eax
f0124a0f:	48                   	dec    %eax
f0124a10:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124a16:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124a1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a21:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124a27:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124a2d:	29 d0                	sub    %edx,%eax
f0124a2f:	01 d8                	add    %ebx,%eax
f0124a31:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124a36:	39 c1                	cmp    %eax,%ecx
f0124a38:	74 17                	je     f0124a51 <test_kheap_phys_addr+0x914>
f0124a3a:	83 ec 04             	sub    $0x4,%esp
f0124a3d:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0124a42:	68 3a 08 00 00       	push   $0x83a
f0124a47:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124a4c:	e8 b4 b7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a51:	e8 9e f3 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124a56:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124a59:	74 17                	je     f0124a72 <test_kheap_phys_addr+0x935>
f0124a5b:	83 ec 04             	sub    $0x4,%esp
f0124a5e:	68 14 b6 13 f0       	push   $0xf013b614
f0124a63:	68 3b 08 00 00       	push   $0x83b
f0124a68:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124a6d:	e8 93 b7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a72:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124a75:	e8 f3 86 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124a7a:	29 c3                	sub    %eax,%ebx
f0124a7c:	89 d8                	mov    %ebx,%eax
f0124a7e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124a83:	74 17                	je     f0124a9c <test_kheap_phys_addr+0x95f>
f0124a85:	83 ec 04             	sub    $0x4,%esp
f0124a88:	68 7c b6 13 f0       	push   $0xf013b67c
f0124a8d:	68 3c 08 00 00       	push   $0x83c
f0124a92:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124a97:	e8 69 b7 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124a9c:	e8 cc 86 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124aa1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124aa4:	e8 4b f3 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124aa9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124aac:	83 ec 0c             	sub    $0xc,%esp
f0124aaf:	68 00 38 00 00       	push   $0x3800
f0124ab4:	e8 ad 2f fe ff       	call   f0107a66 <kmalloc>
f0124ab9:	83 c4 10             	add    $0x10,%esp
f0124abc:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124ac2:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124ac8:	89 c1                	mov    %eax,%ecx
f0124aca:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0124ad1:	10 00 00 
f0124ad4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124ada:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124adf:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0124ae5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124aeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124af0:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0124af6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124afc:	29 d0                	sub    %edx,%eax
f0124afe:	89 c3                	mov    %eax,%ebx
f0124b00:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0124b07:	10 00 00 
f0124b0a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124b0f:	0f b6 d0             	movzbl %al,%edx
f0124b12:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124b18:	01 d0                	add    %edx,%eax
f0124b1a:	48                   	dec    %eax
f0124b1b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0124b21:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124b27:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b2c:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0124b32:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124b38:	29 d0                	sub    %edx,%eax
f0124b3a:	01 c3                	add    %eax,%ebx
f0124b3c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124b43:	10 00 00 
f0124b46:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124b4b:	0f b6 c0             	movzbl %al,%eax
f0124b4e:	c1 e0 04             	shl    $0x4,%eax
f0124b51:	89 c2                	mov    %eax,%edx
f0124b53:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124b59:	01 d0                	add    %edx,%eax
f0124b5b:	48                   	dec    %eax
f0124b5c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124b62:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124b68:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b6d:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124b73:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124b79:	29 d0                	sub    %edx,%eax
f0124b7b:	01 d8                	add    %ebx,%eax
f0124b7d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124b82:	39 c1                	cmp    %eax,%ecx
f0124b84:	74 17                	je     f0124b9d <test_kheap_phys_addr+0xa60>
f0124b86:	83 ec 04             	sub    $0x4,%esp
f0124b89:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0124b8e:	68 42 08 00 00       	push   $0x842
f0124b93:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124b98:	e8 68 b6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b9d:	e8 52 f2 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124ba2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124ba5:	74 17                	je     f0124bbe <test_kheap_phys_addr+0xa81>
f0124ba7:	83 ec 04             	sub    $0x4,%esp
f0124baa:	68 14 b6 13 f0       	push   $0xf013b614
f0124baf:	68 43 08 00 00       	push   $0x843
f0124bb4:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124bb9:	e8 47 b6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124bbe:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124bc1:	e8 a7 85 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124bc6:	29 c3                	sub    %eax,%ebx
f0124bc8:	89 d8                	mov    %ebx,%eax
f0124bca:	83 f8 04             	cmp    $0x4,%eax
f0124bcd:	74 17                	je     f0124be6 <test_kheap_phys_addr+0xaa9>
f0124bcf:	83 ec 04             	sub    $0x4,%esp
f0124bd2:	68 7c b6 13 f0       	push   $0xf013b67c
f0124bd7:	68 44 08 00 00       	push   $0x844
f0124bdc:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124be1:	e8 1f b6 fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124be6:	89 e0                	mov    %esp,%eax
f0124be8:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124bea:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124bf1:	10 00 00 
f0124bf4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124bfa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124bff:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124c05:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c10:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124c16:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c1c:	29 d0                	sub    %edx,%eax
f0124c1e:	89 c1                	mov    %eax,%ecx
f0124c20:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124c27:	10 00 00 
f0124c2a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124c2f:	0f b6 d0             	movzbl %al,%edx
f0124c32:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124c38:	01 d0                	add    %edx,%eax
f0124c3a:	48                   	dec    %eax
f0124c3b:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124c41:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124c47:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c4c:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124c52:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124c58:	29 d0                	sub    %edx,%eax
f0124c5a:	01 c1                	add    %eax,%ecx
f0124c5c:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124c63:	10 00 00 
f0124c66:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124c6b:	0f b6 c0             	movzbl %al,%eax
f0124c6e:	c1 e0 04             	shl    $0x4,%eax
f0124c71:	89 c2                	mov    %eax,%edx
f0124c73:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124c79:	01 d0                	add    %edx,%eax
f0124c7b:	48                   	dec    %eax
f0124c7c:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124c82:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124c88:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c8d:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124c93:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124c99:	29 d0                	sub    %edx,%eax
f0124c9b:	01 c8                	add    %ecx,%eax
f0124c9d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124ca2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124ca8:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124caf:	10 00 00 
f0124cb2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124cb8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cbd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124cc3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124cc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cce:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124cd4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124cda:	29 d0                	sub    %edx,%eax
f0124cdc:	89 c1                	mov    %eax,%ecx
f0124cde:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124ce5:	10 00 00 
f0124ce8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124ced:	0f b6 d0             	movzbl %al,%edx
f0124cf0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124cf6:	01 d0                	add    %edx,%eax
f0124cf8:	48                   	dec    %eax
f0124cf9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124cff:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124d05:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d0a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124d10:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124d16:	29 d0                	sub    %edx,%eax
f0124d18:	01 c1                	add    %eax,%ecx
f0124d1a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124d21:	10 00 00 
f0124d24:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0124d29:	0f b6 c0             	movzbl %al,%eax
f0124d2c:	c1 e0 04             	shl    $0x4,%eax
f0124d2f:	89 c2                	mov    %eax,%edx
f0124d31:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124d37:	01 d0                	add    %edx,%eax
f0124d39:	48                   	dec    %eax
f0124d3a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124d40:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124d46:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d4b:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124d51:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124d57:	29 d0                	sub    %edx,%eax
f0124d59:	01 c8                	add    %ecx,%eax
f0124d5b:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124d60:	c1 e8 0c             	shr    $0xc,%eax
f0124d63:	89 c2                	mov    %eax,%edx
f0124d65:	4a                   	dec    %edx
f0124d66:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124d6c:	c1 e0 02             	shl    $0x2,%eax
f0124d6f:	8d 50 03             	lea    0x3(%eax),%edx
f0124d72:	b8 10 00 00 00       	mov    $0x10,%eax
f0124d77:	48                   	dec    %eax
f0124d78:	01 d0                	add    %edx,%eax
f0124d7a:	bf 10 00 00 00       	mov    $0x10,%edi
f0124d7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d84:	f7 f7                	div    %edi
f0124d86:	6b c0 10             	imul   $0x10,%eax,%eax
f0124d89:	29 c4                	sub    %eax,%esp
f0124d8b:	89 e0                	mov    %esp,%eax
f0124d8d:	83 c0 03             	add    $0x3,%eax
f0124d90:	c1 e8 02             	shr    $0x2,%eax
f0124d93:	c1 e0 02             	shl    $0x2,%eax
f0124d96:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124d9c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124da3:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124daa:	10 00 00 
f0124dad:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124db3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124db8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124dbe:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124dc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dc9:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124dcf:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124dd5:	29 d0                	sub    %edx,%eax
f0124dd7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124ddc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124ddf:	eb 29                	jmp    f0124e0a <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124de1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124de4:	8d 43 01             	lea    0x1(%ebx),%eax
f0124de7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124dea:	83 ec 0c             	sub    $0xc,%esp
f0124ded:	ff 75 e0             	pushl  -0x20(%ebp)
f0124df0:	e8 77 2e fe ff       	call   f0107c6c <kheap_physical_address>
f0124df5:	83 c4 10             	add    $0x10,%esp
f0124df8:	89 c2                	mov    %eax,%edx
f0124dfa:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124e00:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e03:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124e0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e0d:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124e13:	72 cc                	jb     f0124de1 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124e15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e18:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124e1e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124e25:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124e2c:	10 00 00 
f0124e2f:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124e35:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e3a:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124e40:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e4b:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124e51:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124e57:	29 d0                	sub    %edx,%eax
f0124e59:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124e5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e61:	e9 ab 00 00 00       	jmp    f0124f11 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124e66:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0124e6b:	83 ec 04             	sub    $0x4,%esp
f0124e6e:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124e74:	52                   	push   %edx
f0124e75:	ff 75 e0             	pushl  -0x20(%ebp)
f0124e78:	50                   	push   %eax
f0124e79:	e8 5f 1c fe ff       	call   f0106add <get_page_table>
f0124e7e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124e81:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124e87:	85 c0                	test   %eax,%eax
f0124e89:	75 17                	jne    f0124ea2 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124e8b:	83 ec 04             	sub    $0x4,%esp
f0124e8e:	68 9c bf 13 f0       	push   $0xf013bf9c
f0124e93:	68 59 08 00 00       	push   $0x859
f0124e98:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124e9d:	e8 63 b3 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124ea2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124ea5:	c1 e8 0c             	shr    $0xc,%eax
f0124ea8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124ead:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124eb0:	eb 4b                	jmp    f0124efd <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124eb2:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124eb8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ebb:	c1 e2 02             	shl    $0x2,%edx
f0124ebe:	01 d0                	add    %edx,%eax
f0124ec0:	8b 00                	mov    (%eax),%eax
f0124ec2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124ec7:	89 c1                	mov    %eax,%ecx
f0124ec9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124ecf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124ed2:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124ed5:	39 c1                	cmp    %eax,%ecx
f0124ed7:	74 17                	je     f0124ef0 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124ed9:	83 ec 04             	sub    $0x4,%esp
f0124edc:	68 f5 bf 13 f0       	push   $0xf013bff5
f0124ee1:	68 60 08 00 00       	push   $0x860
f0124ee6:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124eeb:	e8 15 b3 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124ef0:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124ef7:	ff 45 dc             	incl   -0x24(%ebp)
f0124efa:	ff 45 e4             	incl   -0x1c(%ebp)
f0124efd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f00:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124f06:	7d 09                	jge    f0124f11 <test_kheap_phys_addr+0xdd4>
f0124f08:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124f0f:	7e a1                	jle    f0124eb2 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124f11:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124f14:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124f1a:	0f 82 46 ff ff ff    	jb     f0124e66 <test_kheap_phys_addr+0xd29>
f0124f20:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124f22:	83 ec 0c             	sub    $0xc,%esp
f0124f25:	68 14 c0 13 f0       	push   $0xf013c014
f0124f2a:	e8 df bd fd ff       	call   f0100d0e <cprintf>
f0124f2f:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124f32:	e8 36 82 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124f37:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124f3d:	e8 b2 ee fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124f42:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124f48:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124f4e:	83 ec 0c             	sub    $0xc,%esp
f0124f51:	50                   	push   %eax
f0124f52:	e8 cf 2b fe ff       	call   f0107b26 <kfree>
f0124f57:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f5a:	e8 95 ee fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124f5f:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124f65:	74 17                	je     f0124f7e <test_kheap_phys_addr+0xe41>
f0124f67:	83 ec 04             	sub    $0x4,%esp
f0124f6a:	68 14 b6 13 f0       	push   $0xf013b614
f0124f6f:	68 6e 08 00 00       	push   $0x86e
f0124f74:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124f79:	e8 87 b2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124f7e:	e8 ea 81 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124f83:	89 c2                	mov    %eax,%edx
f0124f85:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124f8b:	29 c2                	sub    %eax,%edx
f0124f8d:	89 d0                	mov    %edx,%eax
f0124f8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124f94:	74 17                	je     f0124fad <test_kheap_phys_addr+0xe70>
f0124f96:	83 ec 04             	sub    $0x4,%esp
f0124f99:	68 84 bd 13 f0       	push   $0xf013bd84
f0124f9e:	68 6f 08 00 00       	push   $0x86f
f0124fa3:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124fa8:	e8 58 b2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124fad:	e8 bb 81 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124fb2:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124fb8:	e8 37 ee fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124fbd:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124fc3:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124fc9:	83 ec 0c             	sub    $0xc,%esp
f0124fcc:	50                   	push   %eax
f0124fcd:	e8 54 2b fe ff       	call   f0107b26 <kfree>
f0124fd2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124fd5:	e8 1a ee fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0124fda:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124fe0:	74 17                	je     f0124ff9 <test_kheap_phys_addr+0xebc>
f0124fe2:	83 ec 04             	sub    $0x4,%esp
f0124fe5:	68 14 b6 13 f0       	push   $0xf013b614
f0124fea:	68 75 08 00 00       	push   $0x875
f0124fef:	68 fa b5 13 f0       	push   $0xf013b5fa
f0124ff4:	e8 0c b2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124ff9:	e8 6f 81 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0124ffe:	89 c2                	mov    %eax,%edx
f0125000:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0125006:	29 c2                	sub    %eax,%edx
f0125008:	89 d0                	mov    %edx,%eax
f012500a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012500f:	74 17                	je     f0125028 <test_kheap_phys_addr+0xeeb>
f0125011:	83 ec 04             	sub    $0x4,%esp
f0125014:	68 84 bd 13 f0       	push   $0xf013bd84
f0125019:	68 76 08 00 00       	push   $0x876
f012501e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125023:	e8 dd b1 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125028:	e8 40 81 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012502d:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125033:	e8 bc ed fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125038:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f012503e:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125044:	83 ec 0c             	sub    $0xc,%esp
f0125047:	50                   	push   %eax
f0125048:	e8 d9 2a fe ff       	call   f0107b26 <kfree>
f012504d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125050:	e8 9f ed fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125055:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012505b:	74 17                	je     f0125074 <test_kheap_phys_addr+0xf37>
f012505d:	83 ec 04             	sub    $0x4,%esp
f0125060:	68 14 b6 13 f0       	push   $0xf013b614
f0125065:	68 7c 08 00 00       	push   $0x87c
f012506a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012506f:	e8 91 b1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125074:	e8 f4 80 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125079:	89 c2                	mov    %eax,%edx
f012507b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0125081:	29 c2                	sub    %eax,%edx
f0125083:	89 d0                	mov    %edx,%eax
f0125085:	3d 00 06 00 00       	cmp    $0x600,%eax
f012508a:	74 17                	je     f01250a3 <test_kheap_phys_addr+0xf66>
f012508c:	83 ec 04             	sub    $0x4,%esp
f012508f:	68 84 bd 13 f0       	push   $0xf013bd84
f0125094:	68 7d 08 00 00       	push   $0x87d
f0125099:	68 fa b5 13 f0       	push   $0xf013b5fa
f012509e:	e8 62 b1 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01250a3:	89 e0                	mov    %esp,%eax
f01250a5:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01250a7:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01250ae:	10 00 00 
f01250b1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01250b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250bc:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01250c2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01250c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01250cd:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01250d3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01250d9:	29 d0                	sub    %edx,%eax
f01250db:	89 c1                	mov    %eax,%ecx
f01250dd:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01250e4:	10 00 00 
f01250e7:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01250ec:	0f b6 d0             	movzbl %al,%edx
f01250ef:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01250f5:	01 d0                	add    %edx,%eax
f01250f7:	48                   	dec    %eax
f01250f8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01250fe:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0125104:	ba 00 00 00 00       	mov    $0x0,%edx
f0125109:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012510f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0125115:	29 d0                	sub    %edx,%eax
f0125117:	01 c1                	add    %eax,%ecx
f0125119:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125120:	10 00 00 
f0125123:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125128:	0f b6 c0             	movzbl %al,%eax
f012512b:	c1 e0 04             	shl    $0x4,%eax
f012512e:	89 c2                	mov    %eax,%edx
f0125130:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125136:	01 d0                	add    %edx,%eax
f0125138:	48                   	dec    %eax
f0125139:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012513f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125145:	ba 00 00 00 00       	mov    $0x0,%edx
f012514a:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125150:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125156:	29 d0                	sub    %edx,%eax
f0125158:	01 c8                	add    %ecx,%eax
f012515a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012515f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0125165:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f012516c:	10 00 00 
f012516f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125175:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012517a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0125180:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125186:	ba 00 00 00 00       	mov    $0x0,%edx
f012518b:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0125191:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125197:	29 d0                	sub    %edx,%eax
f0125199:	89 c1                	mov    %eax,%ecx
f012519b:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01251a2:	10 00 00 
f01251a5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01251aa:	0f b6 d0             	movzbl %al,%edx
f01251ad:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01251b3:	01 d0                	add    %edx,%eax
f01251b5:	48                   	dec    %eax
f01251b6:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01251bc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01251c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01251c7:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01251cd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01251d3:	29 d0                	sub    %edx,%eax
f01251d5:	01 c1                	add    %eax,%ecx
f01251d7:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01251de:	10 00 00 
f01251e1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01251e6:	0f b6 c0             	movzbl %al,%eax
f01251e9:	c1 e0 04             	shl    $0x4,%eax
f01251ec:	89 c2                	mov    %eax,%edx
f01251ee:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01251f4:	01 d0                	add    %edx,%eax
f01251f6:	48                   	dec    %eax
f01251f7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01251fd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125203:	ba 00 00 00 00       	mov    $0x0,%edx
f0125208:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012520e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125214:	29 d0                	sub    %edx,%eax
f0125216:	01 c8                	add    %ecx,%eax
f0125218:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012521d:	c1 e8 0c             	shr    $0xc,%eax
f0125220:	89 c2                	mov    %eax,%edx
f0125222:	4a                   	dec    %edx
f0125223:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0125229:	c1 e0 02             	shl    $0x2,%eax
f012522c:	8d 50 03             	lea    0x3(%eax),%edx
f012522f:	b8 10 00 00 00       	mov    $0x10,%eax
f0125234:	48                   	dec    %eax
f0125235:	01 d0                	add    %edx,%eax
f0125237:	bf 10 00 00 00       	mov    $0x10,%edi
f012523c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125241:	f7 f7                	div    %edi
f0125243:	6b c0 10             	imul   $0x10,%eax,%eax
f0125246:	29 c4                	sub    %eax,%esp
f0125248:	89 e0                	mov    %esp,%eax
f012524a:	83 c0 03             	add    $0x3,%eax
f012524d:	c1 e8 02             	shr    $0x2,%eax
f0125250:	c1 e0 02             	shl    $0x2,%eax
f0125253:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0125259:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0125260:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125267:	10 00 00 
f012526a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125270:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125275:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f012527b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125281:	ba 00 00 00 00       	mov    $0x0,%edx
f0125286:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012528c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125292:	29 d0                	sub    %edx,%eax
f0125294:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125299:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012529c:	eb 29                	jmp    f01252c7 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f012529e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01252a1:	8d 43 01             	lea    0x1(%ebx),%eax
f01252a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01252a7:	83 ec 0c             	sub    $0xc,%esp
f01252aa:	ff 75 d8             	pushl  -0x28(%ebp)
f01252ad:	e8 ba 29 fe ff       	call   f0107c6c <kheap_physical_address>
f01252b2:	83 c4 10             	add    $0x10,%esp
f01252b5:	89 c2                	mov    %eax,%edx
f01252b7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01252bd:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01252c0:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01252c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01252ca:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01252d0:	72 cc                	jb     f012529e <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01252d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01252d5:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f01252db:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01252e2:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01252e9:	10 00 00 
f01252ec:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01252f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252f7:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01252fd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125303:	ba 00 00 00 00       	mov    $0x0,%edx
f0125308:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012530e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125314:	29 d0                	sub    %edx,%eax
f0125316:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012531b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012531e:	e9 ab 00 00 00       	jmp    f01253ce <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125323:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0125328:	83 ec 04             	sub    $0x4,%esp
f012532b:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0125331:	52                   	push   %edx
f0125332:	ff 75 d8             	pushl  -0x28(%ebp)
f0125335:	50                   	push   %eax
f0125336:	e8 a2 17 fe ff       	call   f0106add <get_page_table>
f012533b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012533e:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125344:	85 c0                	test   %eax,%eax
f0125346:	75 17                	jne    f012535f <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125348:	83 ec 04             	sub    $0x4,%esp
f012534b:	68 9c bf 13 f0       	push   $0xf013bf9c
f0125350:	68 93 08 00 00       	push   $0x893
f0125355:	68 fa b5 13 f0       	push   $0xf013b5fa
f012535a:	e8 a6 ae fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012535f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125362:	c1 e8 0c             	shr    $0xc,%eax
f0125365:	25 ff 03 00 00       	and    $0x3ff,%eax
f012536a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f012536d:	eb 4b                	jmp    f01253ba <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012536f:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125375:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0125378:	c1 e2 02             	shl    $0x2,%edx
f012537b:	01 d0                	add    %edx,%eax
f012537d:	8b 00                	mov    (%eax),%eax
f012537f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125384:	89 c1                	mov    %eax,%ecx
f0125386:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012538c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012538f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125392:	39 c1                	cmp    %eax,%ecx
f0125394:	74 17                	je     f01253ad <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0125396:	83 ec 04             	sub    $0x4,%esp
f0125399:	68 f5 bf 13 f0       	push   $0xf013bff5
f012539e:	68 9a 08 00 00       	push   $0x89a
f01253a3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01253a8:	e8 58 ae fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f01253ad:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01253b4:	ff 45 d4             	incl   -0x2c(%ebp)
f01253b7:	ff 45 e4             	incl   -0x1c(%ebp)
f01253ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01253bd:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f01253c3:	7d 09                	jge    f01253ce <test_kheap_phys_addr+0x1291>
f01253c5:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01253cc:	7e a1                	jle    f012536f <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01253ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01253d1:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01253d7:	0f 82 46 ff ff ff    	jb     f0125323 <test_kheap_phys_addr+0x11e6>
f01253dd:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f01253df:	83 ec 0c             	sub    $0xc,%esp
f01253e2:	68 85 b7 13 f0       	push   $0xf013b785
f01253e7:	e8 22 b9 fd ff       	call   f0100d0e <cprintf>
f01253ec:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01253ef:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01253f6:	10 00 00 
f01253f9:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01253ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125404:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f012540a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125410:	ba 00 00 00 00       	mov    $0x0,%edx
f0125415:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f012541b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125421:	29 d0                	sub    %edx,%eax
f0125423:	89 c1                	mov    %eax,%ecx
f0125425:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f012542c:	10 00 00 
f012542f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125434:	0f b6 d0             	movzbl %al,%edx
f0125437:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012543d:	01 d0                	add    %edx,%eax
f012543f:	48                   	dec    %eax
f0125440:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125446:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125451:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125457:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012545d:	29 d0                	sub    %edx,%eax
f012545f:	01 c1                	add    %eax,%ecx
f0125461:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0125468:	10 00 00 
f012546b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125470:	0f b6 c0             	movzbl %al,%eax
f0125473:	c1 e0 04             	shl    $0x4,%eax
f0125476:	89 c2                	mov    %eax,%edx
f0125478:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012547e:	01 d0                	add    %edx,%eax
f0125480:	48                   	dec    %eax
f0125481:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0125487:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012548d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125492:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0125498:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012549e:	29 d0                	sub    %edx,%eax
f01254a0:	01 c8                	add    %ecx,%eax
f01254a2:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01254a7:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f01254ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01254b4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01254ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01254bd:	eb 0a                	jmp    f01254c9 <test_kheap_phys_addr+0x138c>
		{
			i++;
f01254bf:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01254c2:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01254c9:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01254d0:	76 ed                	jbe    f01254bf <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01254d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01254d5:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01254db:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01254e2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01254e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01254eb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01254f2:	e9 cc 00 00 00       	jmp    f01255c3 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01254f7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01254fa:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01254ff:	83 ec 04             	sub    $0x4,%esp
f0125502:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0125508:	51                   	push   %ecx
f0125509:	52                   	push   %edx
f012550a:	50                   	push   %eax
f012550b:	e8 cd 15 fe ff       	call   f0106add <get_page_table>
f0125510:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125513:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125519:	85 c0                	test   %eax,%eax
f012551b:	75 17                	jne    f0125534 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012551d:	83 ec 04             	sub    $0x4,%esp
f0125520:	68 9c bf 13 f0       	push   $0xf013bf9c
f0125525:	68 b6 08 00 00       	push   $0x8b6
f012552a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012552f:	e8 d1 ac fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125534:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f012553b:	eb 67                	jmp    f01255a4 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f012553d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125540:	c1 e0 0c             	shl    $0xc,%eax
f0125543:	89 c2                	mov    %eax,%edx
f0125545:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012554b:	01 d0                	add    %edx,%eax
f012554d:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0125553:	83 ec 0c             	sub    $0xc,%esp
f0125556:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f012555c:	e8 0b 27 fe ff       	call   f0107c6c <kheap_physical_address>
f0125561:	83 c4 10             	add    $0x10,%esp
f0125564:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f012556a:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125570:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125573:	c1 e2 02             	shl    $0x2,%edx
f0125576:	01 d0                	add    %edx,%eax
f0125578:	8b 00                	mov    (%eax),%eax
f012557a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012557f:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0125585:	74 17                	je     f012559e <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0125587:	83 ec 04             	sub    $0x4,%esp
f012558a:	68 f5 bf 13 f0       	push   $0xf013bff5
f012558f:	68 c0 08 00 00       	push   $0x8c0
f0125594:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125599:	e8 67 ac fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012559e:	ff 45 cc             	incl   -0x34(%ebp)
f01255a1:	ff 45 e4             	incl   -0x1c(%ebp)
f01255a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01255a7:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f01255ad:	7d 09                	jge    f01255b8 <test_kheap_phys_addr+0x147b>
f01255af:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01255b6:	7e 85                	jle    f012553d <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01255b8:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01255bf:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01255c3:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01255c7:	0f 88 2a ff ff ff    	js     f01254f7 <test_kheap_phys_addr+0x13ba>
f01255cd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01255d1:	7f 0d                	jg     f01255e0 <test_kheap_phys_addr+0x14a3>
f01255d3:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01255da:	0f 86 17 ff ff ff    	jbe    f01254f7 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01255e0:	83 ec 0c             	sub    $0xc,%esp
f01255e3:	68 de b7 13 f0       	push   $0xf013b7de
f01255e8:	e8 21 b7 fd ff       	call   f0100d0e <cprintf>
f01255ed:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01255f0:	83 ec 0c             	sub    $0xc,%esp
f01255f3:	68 48 c0 13 f0       	push   $0xf013c048
f01255f8:	e8 11 b7 fd ff       	call   f0100d0e <cprintf>
f01255fd:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125600:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0125605:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125608:	5b                   	pop    %ebx
f0125609:	5e                   	pop    %esi
f012560a:	5f                   	pop    %edi
f012560b:	5d                   	pop    %ebp
f012560c:	c3                   	ret    

f012560d <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f012560d:	55                   	push   %ebp
f012560e:	89 e5                	mov    %esp,%ebp
f0125610:	57                   	push   %edi
f0125611:	56                   	push   %esi
f0125612:	53                   	push   %ebx
f0125613:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0125619:	89 e0                	mov    %esp,%eax
f012561b:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f012561d:	83 ec 0c             	sub    $0xc,%esp
f0125620:	68 3c b5 13 f0       	push   $0xf013b53c
f0125625:	e8 e4 b6 fd ff       	call   f0100d0e <cprintf>
f012562a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012562d:	83 ec 0c             	sub    $0xc,%esp
f0125630:	68 6c b5 13 f0       	push   $0xf013b56c
f0125635:	e8 d4 b6 fd ff       	call   f0100d0e <cprintf>
f012563a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012563d:	83 ec 0c             	sub    $0xc,%esp
f0125640:	68 3c b5 13 f0       	push   $0xf013b53c
f0125645:	e8 c4 b6 fd ff       	call   f0100d0e <cprintf>
f012564a:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012564d:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0125651:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0125655:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f012565b:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0125661:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125668:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012566f:	e8 f9 7a fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125674:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125677:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012567d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125682:	b8 00 00 00 00       	mov    $0x0,%eax
f0125687:	89 d7                	mov    %edx,%edi
f0125689:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012568b:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0125691:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125696:	b8 00 00 00 00       	mov    $0x0,%eax
f012569b:	89 d7                	mov    %edx,%edi
f012569d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012569f:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f01256a5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01256aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01256af:	89 d7                	mov    %edx,%edi
f01256b1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01256b3:	e8 b5 7a fe ff       	call   f010d16d <sys_calculate_free_frames>
f01256b8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256bb:	e8 34 e7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01256c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01256c3:	83 ec 0c             	sub    $0xc,%esp
f01256c6:	68 00 fc 1f 00       	push   $0x1ffc00
f01256cb:	e8 96 23 fe ff       	call   f0107a66 <kmalloc>
f01256d0:	83 c4 10             	add    $0x10,%esp
f01256d3:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256d9:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01256df:	89 c1                	mov    %eax,%ecx
f01256e1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01256e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01256eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01256f0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01256f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01256f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01256fb:	f7 75 b4             	divl   -0x4c(%ebp)
f01256fe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125701:	29 d0                	sub    %edx,%eax
f0125703:	89 c3                	mov    %eax,%ebx
f0125705:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012570c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125711:	0f b6 d0             	movzbl %al,%edx
f0125714:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125717:	01 d0                	add    %edx,%eax
f0125719:	48                   	dec    %eax
f012571a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012571d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125720:	ba 00 00 00 00       	mov    $0x0,%edx
f0125725:	f7 75 ac             	divl   -0x54(%ebp)
f0125728:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012572b:	29 d0                	sub    %edx,%eax
f012572d:	01 c3                	add    %eax,%ebx
f012572f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0125736:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012573b:	0f b6 c0             	movzbl %al,%eax
f012573e:	c1 e0 04             	shl    $0x4,%eax
f0125741:	89 c2                	mov    %eax,%edx
f0125743:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125746:	01 d0                	add    %edx,%eax
f0125748:	48                   	dec    %eax
f0125749:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012574c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012574f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125754:	f7 75 a4             	divl   -0x5c(%ebp)
f0125757:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012575a:	29 d0                	sub    %edx,%eax
f012575c:	01 d8                	add    %ebx,%eax
f012575e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125763:	39 c1                	cmp    %eax,%ecx
f0125765:	74 17                	je     f012577e <test_kheap_virt_addr+0x171>
f0125767:	83 ec 04             	sub    $0x4,%esp
f012576a:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012576f:	68 ed 08 00 00       	push   $0x8ed
f0125774:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125779:	e8 87 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012577e:	e8 71 e6 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125783:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125786:	74 17                	je     f012579f <test_kheap_virt_addr+0x192>
f0125788:	83 ec 04             	sub    $0x4,%esp
f012578b:	68 14 b6 13 f0       	push   $0xf013b614
f0125790:	68 ee 08 00 00       	push   $0x8ee
f0125795:	68 fa b5 13 f0       	push   $0xf013b5fa
f012579a:	e8 66 aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012579f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01257a2:	e8 c6 79 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01257a7:	29 c3                	sub    %eax,%ebx
f01257a9:	89 d8                	mov    %ebx,%eax
f01257ab:	3d 00 02 00 00       	cmp    $0x200,%eax
f01257b0:	74 17                	je     f01257c9 <test_kheap_virt_addr+0x1bc>
f01257b2:	83 ec 04             	sub    $0x4,%esp
f01257b5:	68 7c b6 13 f0       	push   $0xf013b67c
f01257ba:	68 ef 08 00 00       	push   $0x8ef
f01257bf:	68 fa b5 13 f0       	push   $0xf013b5fa
f01257c4:	e8 3c aa fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01257c9:	e8 9f 79 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01257ce:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257d1:	e8 1e e6 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01257d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01257d9:	83 ec 0c             	sub    $0xc,%esp
f01257dc:	68 00 fc 1f 00       	push   $0x1ffc00
f01257e1:	e8 80 22 fe ff       	call   f0107a66 <kmalloc>
f01257e6:	83 c4 10             	add    $0x10,%esp
f01257e9:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01257ef:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01257f5:	89 c1                	mov    %eax,%ecx
f01257f7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01257fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125801:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125806:	89 45 98             	mov    %eax,-0x68(%ebp)
f0125809:	8b 45 98             	mov    -0x68(%ebp),%eax
f012580c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125811:	f7 75 9c             	divl   -0x64(%ebp)
f0125814:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125817:	29 d0                	sub    %edx,%eax
f0125819:	89 c3                	mov    %eax,%ebx
f012581b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125822:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125827:	0f b6 d0             	movzbl %al,%edx
f012582a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012582d:	01 d0                	add    %edx,%eax
f012582f:	48                   	dec    %eax
f0125830:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125833:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125836:	ba 00 00 00 00       	mov    $0x0,%edx
f012583b:	f7 75 94             	divl   -0x6c(%ebp)
f012583e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125841:	29 d0                	sub    %edx,%eax
f0125843:	01 c3                	add    %eax,%ebx
f0125845:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012584c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125851:	0f b6 c0             	movzbl %al,%eax
f0125854:	c1 e0 04             	shl    $0x4,%eax
f0125857:	89 c2                	mov    %eax,%edx
f0125859:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012585c:	01 d0                	add    %edx,%eax
f012585e:	48                   	dec    %eax
f012585f:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125862:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125865:	ba 00 00 00 00       	mov    $0x0,%edx
f012586a:	f7 75 8c             	divl   -0x74(%ebp)
f012586d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125870:	29 d0                	sub    %edx,%eax
f0125872:	01 d8                	add    %ebx,%eax
f0125874:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125879:	39 c1                	cmp    %eax,%ecx
f012587b:	74 17                	je     f0125894 <test_kheap_virt_addr+0x287>
f012587d:	83 ec 04             	sub    $0x4,%esp
f0125880:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0125885:	68 f5 08 00 00       	push   $0x8f5
f012588a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012588f:	e8 71 a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125894:	e8 5b e5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125899:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012589c:	74 17                	je     f01258b5 <test_kheap_virt_addr+0x2a8>
f012589e:	83 ec 04             	sub    $0x4,%esp
f01258a1:	68 14 b6 13 f0       	push   $0xf013b614
f01258a6:	68 f6 08 00 00       	push   $0x8f6
f01258ab:	68 fa b5 13 f0       	push   $0xf013b5fa
f01258b0:	e8 50 a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01258b5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01258b8:	e8 b0 78 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01258bd:	29 c3                	sub    %eax,%ebx
f01258bf:	89 d8                	mov    %ebx,%eax
f01258c1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01258c6:	74 17                	je     f01258df <test_kheap_virt_addr+0x2d2>
f01258c8:	83 ec 04             	sub    $0x4,%esp
f01258cb:	68 7c b6 13 f0       	push   $0xf013b67c
f01258d0:	68 f7 08 00 00       	push   $0x8f7
f01258d5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01258da:	e8 26 a9 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01258df:	e8 89 78 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01258e4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01258e7:	e8 08 e5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01258ec:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01258ef:	83 ec 0c             	sub    $0xc,%esp
f01258f2:	68 00 08 00 00       	push   $0x800
f01258f7:	e8 6a 21 fe ff       	call   f0107a66 <kmalloc>
f01258fc:	83 c4 10             	add    $0x10,%esp
f01258ff:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125905:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012590b:	89 c1                	mov    %eax,%ecx
f012590d:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125914:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125917:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012591c:	89 45 80             	mov    %eax,-0x80(%ebp)
f012591f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125922:	ba 00 00 00 00       	mov    $0x0,%edx
f0125927:	f7 75 84             	divl   -0x7c(%ebp)
f012592a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012592d:	29 d0                	sub    %edx,%eax
f012592f:	89 c3                	mov    %eax,%ebx
f0125931:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0125938:	10 00 00 
f012593b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125940:	0f b6 d0             	movzbl %al,%edx
f0125943:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125949:	01 d0                	add    %edx,%eax
f012594b:	48                   	dec    %eax
f012594c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125952:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125958:	ba 00 00 00 00       	mov    $0x0,%edx
f012595d:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125963:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125969:	29 d0                	sub    %edx,%eax
f012596b:	01 c3                	add    %eax,%ebx
f012596d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125974:	10 00 00 
f0125977:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012597c:	0f b6 c0             	movzbl %al,%eax
f012597f:	c1 e0 04             	shl    $0x4,%eax
f0125982:	89 c2                	mov    %eax,%edx
f0125984:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012598a:	01 d0                	add    %edx,%eax
f012598c:	48                   	dec    %eax
f012598d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125993:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125999:	ba 00 00 00 00       	mov    $0x0,%edx
f012599e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01259a4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01259aa:	29 d0                	sub    %edx,%eax
f01259ac:	01 d8                	add    %ebx,%eax
f01259ae:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01259b3:	39 c1                	cmp    %eax,%ecx
f01259b5:	74 17                	je     f01259ce <test_kheap_virt_addr+0x3c1>
f01259b7:	83 ec 04             	sub    $0x4,%esp
f01259ba:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01259bf:	68 fd 08 00 00       	push   $0x8fd
f01259c4:	68 fa b5 13 f0       	push   $0xf013b5fa
f01259c9:	e8 37 a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259ce:	e8 21 e4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01259d3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01259d6:	74 17                	je     f01259ef <test_kheap_virt_addr+0x3e2>
f01259d8:	83 ec 04             	sub    $0x4,%esp
f01259db:	68 14 b6 13 f0       	push   $0xf013b614
f01259e0:	68 fe 08 00 00       	push   $0x8fe
f01259e5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01259ea:	e8 16 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01259ef:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01259f2:	e8 76 77 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01259f7:	29 c3                	sub    %eax,%ebx
f01259f9:	89 d8                	mov    %ebx,%eax
f01259fb:	83 f8 01             	cmp    $0x1,%eax
f01259fe:	74 17                	je     f0125a17 <test_kheap_virt_addr+0x40a>
f0125a00:	83 ec 04             	sub    $0x4,%esp
f0125a03:	68 7c b6 13 f0       	push   $0xf013b67c
f0125a08:	68 ff 08 00 00       	push   $0x8ff
f0125a0d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125a12:	e8 ee a7 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125a17:	e8 51 77 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125a1c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a1f:	e8 d0 e3 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125a24:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125a27:	83 ec 0c             	sub    $0xc,%esp
f0125a2a:	68 00 08 00 00       	push   $0x800
f0125a2f:	e8 32 20 fe ff       	call   f0107a66 <kmalloc>
f0125a34:	83 c4 10             	add    $0x10,%esp
f0125a37:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a3d:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125a43:	89 c1                	mov    %eax,%ecx
f0125a45:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125a4c:	10 00 00 
f0125a4f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125a55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a5a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125a60:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a66:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a6b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125a71:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a77:	29 d0                	sub    %edx,%eax
f0125a79:	89 c3                	mov    %eax,%ebx
f0125a7b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125a82:	10 00 00 
f0125a85:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125a8a:	0f b6 d0             	movzbl %al,%edx
f0125a8d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125a93:	01 d0                	add    %edx,%eax
f0125a95:	48                   	dec    %eax
f0125a96:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125a9c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125aa2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125aa7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125aad:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125ab3:	29 d0                	sub    %edx,%eax
f0125ab5:	01 c3                	add    %eax,%ebx
f0125ab7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125abe:	10 00 00 
f0125ac1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125ac6:	0f b6 c0             	movzbl %al,%eax
f0125ac9:	c1 e0 04             	shl    $0x4,%eax
f0125acc:	89 c2                	mov    %eax,%edx
f0125ace:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125ad4:	01 d0                	add    %edx,%eax
f0125ad6:	48                   	dec    %eax
f0125ad7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125add:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125ae3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125aee:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125af4:	29 d0                	sub    %edx,%eax
f0125af6:	01 d8                	add    %ebx,%eax
f0125af8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125afd:	39 c1                	cmp    %eax,%ecx
f0125aff:	74 17                	je     f0125b18 <test_kheap_virt_addr+0x50b>
f0125b01:	83 ec 04             	sub    $0x4,%esp
f0125b04:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0125b09:	68 05 09 00 00       	push   $0x905
f0125b0e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125b13:	e8 ed a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b18:	e8 d7 e2 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125b1d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125b20:	74 17                	je     f0125b39 <test_kheap_virt_addr+0x52c>
f0125b22:	83 ec 04             	sub    $0x4,%esp
f0125b25:	68 14 b6 13 f0       	push   $0xf013b614
f0125b2a:	68 06 09 00 00       	push   $0x906
f0125b2f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125b34:	e8 cc a6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b39:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125b3c:	e8 2c 76 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125b41:	29 c3                	sub    %eax,%ebx
f0125b43:	89 d8                	mov    %ebx,%eax
f0125b45:	83 f8 01             	cmp    $0x1,%eax
f0125b48:	74 17                	je     f0125b61 <test_kheap_virt_addr+0x554>
f0125b4a:	83 ec 04             	sub    $0x4,%esp
f0125b4d:	68 7c b6 13 f0       	push   $0xf013b67c
f0125b52:	68 07 09 00 00       	push   $0x907
f0125b57:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125b5c:	e8 a4 a6 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125b61:	e8 07 76 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125b66:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b69:	e8 86 e2 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125b6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125b71:	83 ec 0c             	sub    $0xc,%esp
f0125b74:	68 00 1c 00 00       	push   $0x1c00
f0125b79:	e8 e8 1e fe ff       	call   f0107a66 <kmalloc>
f0125b7e:	83 c4 10             	add    $0x10,%esp
f0125b81:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b87:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125b8d:	89 c1                	mov    %eax,%ecx
f0125b8f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125b96:	10 00 00 
f0125b99:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125b9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ba4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125baa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125bb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bb5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125bbb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125bc1:	29 d0                	sub    %edx,%eax
f0125bc3:	89 c3                	mov    %eax,%ebx
f0125bc5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125bcc:	10 00 00 
f0125bcf:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125bd4:	0f b6 d0             	movzbl %al,%edx
f0125bd7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125bdd:	01 d0                	add    %edx,%eax
f0125bdf:	48                   	dec    %eax
f0125be0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125be6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125bec:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bf1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125bf7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125bfd:	29 d0                	sub    %edx,%eax
f0125bff:	01 c3                	add    %eax,%ebx
f0125c01:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125c08:	10 00 00 
f0125c0b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125c10:	0f b6 c0             	movzbl %al,%eax
f0125c13:	c1 e0 04             	shl    $0x4,%eax
f0125c16:	89 c2                	mov    %eax,%edx
f0125c18:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125c1e:	01 d0                	add    %edx,%eax
f0125c20:	48                   	dec    %eax
f0125c21:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125c27:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125c2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c32:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125c38:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125c3e:	29 d0                	sub    %edx,%eax
f0125c40:	01 d8                	add    %ebx,%eax
f0125c42:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125c47:	39 c1                	cmp    %eax,%ecx
f0125c49:	74 17                	je     f0125c62 <test_kheap_virt_addr+0x655>
f0125c4b:	83 ec 04             	sub    $0x4,%esp
f0125c4e:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0125c53:	68 0d 09 00 00       	push   $0x90d
f0125c58:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125c5d:	e8 a3 a5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c62:	e8 8d e1 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125c67:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125c6a:	74 17                	je     f0125c83 <test_kheap_virt_addr+0x676>
f0125c6c:	83 ec 04             	sub    $0x4,%esp
f0125c6f:	68 14 b6 13 f0       	push   $0xf013b614
f0125c74:	68 0e 09 00 00       	push   $0x90e
f0125c79:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125c7e:	e8 82 a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c83:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125c86:	e8 e2 74 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125c8b:	29 c3                	sub    %eax,%ebx
f0125c8d:	89 d8                	mov    %ebx,%eax
f0125c8f:	83 f8 02             	cmp    $0x2,%eax
f0125c92:	74 17                	je     f0125cab <test_kheap_virt_addr+0x69e>
f0125c94:	83 ec 04             	sub    $0x4,%esp
f0125c97:	68 7c b6 13 f0       	push   $0xf013b67c
f0125c9c:	68 0f 09 00 00       	push   $0x90f
f0125ca1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125ca6:	e8 5a a5 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125cab:	e8 bd 74 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125cb0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cb3:	e8 3c e1 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125cb8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125cbb:	83 ec 0c             	sub    $0xc,%esp
f0125cbe:	68 00 fc 2f 00       	push   $0x2ffc00
f0125cc3:	e8 9e 1d fe ff       	call   f0107a66 <kmalloc>
f0125cc8:	83 c4 10             	add    $0x10,%esp
f0125ccb:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125cd1:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125cd7:	89 c1                	mov    %eax,%ecx
f0125cd9:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125ce0:	10 00 00 
f0125ce3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125ce9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125cee:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125cf4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125cfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cff:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125d05:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d0b:	29 d0                	sub    %edx,%eax
f0125d0d:	89 c3                	mov    %eax,%ebx
f0125d0f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125d16:	10 00 00 
f0125d19:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125d1e:	0f b6 d0             	movzbl %al,%edx
f0125d21:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125d27:	01 d0                	add    %edx,%eax
f0125d29:	48                   	dec    %eax
f0125d2a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125d30:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d36:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d3b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125d41:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d47:	29 d0                	sub    %edx,%eax
f0125d49:	01 c3                	add    %eax,%ebx
f0125d4b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125d52:	10 00 00 
f0125d55:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125d5a:	0f b6 c0             	movzbl %al,%eax
f0125d5d:	c1 e0 04             	shl    $0x4,%eax
f0125d60:	89 c2                	mov    %eax,%edx
f0125d62:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125d68:	01 d0                	add    %edx,%eax
f0125d6a:	48                   	dec    %eax
f0125d6b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125d71:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d7c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125d82:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125d88:	29 d0                	sub    %edx,%eax
f0125d8a:	01 d8                	add    %ebx,%eax
f0125d8c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125d91:	39 c1                	cmp    %eax,%ecx
f0125d93:	74 17                	je     f0125dac <test_kheap_virt_addr+0x79f>
f0125d95:	83 ec 04             	sub    $0x4,%esp
f0125d98:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0125d9d:	68 15 09 00 00       	push   $0x915
f0125da2:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125da7:	e8 59 a4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125dac:	e8 43 e0 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125db1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125db4:	74 17                	je     f0125dcd <test_kheap_virt_addr+0x7c0>
f0125db6:	83 ec 04             	sub    $0x4,%esp
f0125db9:	68 14 b6 13 f0       	push   $0xf013b614
f0125dbe:	68 16 09 00 00       	push   $0x916
f0125dc3:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125dc8:	e8 38 a4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125dcd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125dd0:	e8 98 73 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125dd5:	29 c3                	sub    %eax,%ebx
f0125dd7:	89 d8                	mov    %ebx,%eax
f0125dd9:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125dde:	74 17                	je     f0125df7 <test_kheap_virt_addr+0x7ea>
f0125de0:	83 ec 04             	sub    $0x4,%esp
f0125de3:	68 7c b6 13 f0       	push   $0xf013b67c
f0125de8:	68 17 09 00 00       	push   $0x917
f0125ded:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125df2:	e8 0e a4 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125df7:	e8 71 73 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125dfc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125dff:	e8 f0 df fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125e04:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125e07:	83 ec 0c             	sub    $0xc,%esp
f0125e0a:	68 00 fc 5f 00       	push   $0x5ffc00
f0125e0f:	e8 52 1c fe ff       	call   f0107a66 <kmalloc>
f0125e14:	83 c4 10             	add    $0x10,%esp
f0125e17:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e1d:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125e23:	89 c1                	mov    %eax,%ecx
f0125e25:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125e2c:	10 00 00 
f0125e2f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125e35:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e3a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125e40:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e4b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125e51:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e57:	29 d0                	sub    %edx,%eax
f0125e59:	89 c3                	mov    %eax,%ebx
f0125e5b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125e62:	10 00 00 
f0125e65:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125e6a:	0f b6 d0             	movzbl %al,%edx
f0125e6d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125e73:	01 d0                	add    %edx,%eax
f0125e75:	48                   	dec    %eax
f0125e76:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125e7c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125e82:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e87:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125e8d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125e93:	29 d0                	sub    %edx,%eax
f0125e95:	01 c3                	add    %eax,%ebx
f0125e97:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125e9e:	10 00 00 
f0125ea1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125ea6:	0f b6 c0             	movzbl %al,%eax
f0125ea9:	c1 e0 04             	shl    $0x4,%eax
f0125eac:	89 c2                	mov    %eax,%edx
f0125eae:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125eb4:	01 d0                	add    %edx,%eax
f0125eb6:	48                   	dec    %eax
f0125eb7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125ebd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125ec3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ec8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125ece:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125ed4:	29 d0                	sub    %edx,%eax
f0125ed6:	01 d8                	add    %ebx,%eax
f0125ed8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125edd:	39 c1                	cmp    %eax,%ecx
f0125edf:	74 17                	je     f0125ef8 <test_kheap_virt_addr+0x8eb>
f0125ee1:	83 ec 04             	sub    $0x4,%esp
f0125ee4:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0125ee9:	68 1d 09 00 00       	push   $0x91d
f0125eee:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125ef3:	e8 0d a3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ef8:	e8 f7 de fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125efd:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125f00:	74 17                	je     f0125f19 <test_kheap_virt_addr+0x90c>
f0125f02:	83 ec 04             	sub    $0x4,%esp
f0125f05:	68 14 b6 13 f0       	push   $0xf013b614
f0125f0a:	68 1e 09 00 00       	push   $0x91e
f0125f0f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125f14:	e8 ec a2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f19:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125f1c:	e8 4c 72 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125f21:	29 c3                	sub    %eax,%ebx
f0125f23:	89 d8                	mov    %ebx,%eax
f0125f25:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125f2a:	74 17                	je     f0125f43 <test_kheap_virt_addr+0x936>
f0125f2c:	83 ec 04             	sub    $0x4,%esp
f0125f2f:	68 7c b6 13 f0       	push   $0xf013b67c
f0125f34:	68 1f 09 00 00       	push   $0x91f
f0125f39:	68 fa b5 13 f0       	push   $0xf013b5fa
f0125f3e:	e8 c2 a2 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f43:	e8 25 72 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0125f48:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f4b:	e8 a4 de fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0125f50:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125f53:	83 ec 0c             	sub    $0xc,%esp
f0125f56:	68 00 38 00 00       	push   $0x3800
f0125f5b:	e8 06 1b fe ff       	call   f0107a66 <kmalloc>
f0125f60:	83 c4 10             	add    $0x10,%esp
f0125f63:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f69:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125f6f:	89 c1                	mov    %eax,%ecx
f0125f71:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125f78:	10 00 00 
f0125f7b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125f81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f86:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125f8c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125f92:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f97:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125f9d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125fa3:	29 d0                	sub    %edx,%eax
f0125fa5:	89 c3                	mov    %eax,%ebx
f0125fa7:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125fae:	10 00 00 
f0125fb1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125fb6:	0f b6 d0             	movzbl %al,%edx
f0125fb9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125fbf:	01 d0                	add    %edx,%eax
f0125fc1:	48                   	dec    %eax
f0125fc2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125fc8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125fce:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fd3:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125fd9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125fdf:	29 d0                	sub    %edx,%eax
f0125fe1:	01 c3                	add    %eax,%ebx
f0125fe3:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125fea:	10 00 00 
f0125fed:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0125ff2:	0f b6 c0             	movzbl %al,%eax
f0125ff5:	c1 e0 04             	shl    $0x4,%eax
f0125ff8:	89 c2                	mov    %eax,%edx
f0125ffa:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126000:	01 d0                	add    %edx,%eax
f0126002:	48                   	dec    %eax
f0126003:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126009:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012600f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126014:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012601a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126020:	29 d0                	sub    %edx,%eax
f0126022:	01 d8                	add    %ebx,%eax
f0126024:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126029:	39 c1                	cmp    %eax,%ecx
f012602b:	74 17                	je     f0126044 <test_kheap_virt_addr+0xa37>
f012602d:	83 ec 04             	sub    $0x4,%esp
f0126030:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0126035:	68 25 09 00 00       	push   $0x925
f012603a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012603f:	e8 c1 a1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126044:	e8 ab dd fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126049:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012604c:	74 17                	je     f0126065 <test_kheap_virt_addr+0xa58>
f012604e:	83 ec 04             	sub    $0x4,%esp
f0126051:	68 14 b6 13 f0       	push   $0xf013b614
f0126056:	68 26 09 00 00       	push   $0x926
f012605b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126060:	e8 a0 a1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126065:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0126068:	e8 00 71 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012606d:	29 c3                	sub    %eax,%ebx
f012606f:	89 d8                	mov    %ebx,%eax
f0126071:	83 f8 04             	cmp    $0x4,%eax
f0126074:	74 17                	je     f012608d <test_kheap_virt_addr+0xa80>
f0126076:	83 ec 04             	sub    $0x4,%esp
f0126079:	68 7c b6 13 f0       	push   $0xf013b67c
f012607e:	68 27 09 00 00       	push   $0x927
f0126083:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126088:	e8 78 a1 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f012608d:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126094:	10 00 00 
f0126097:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012609d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260a2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01260a8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01260ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01260b3:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01260b9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01260bf:	29 d0                	sub    %edx,%eax
f01260c1:	89 c1                	mov    %eax,%ecx
f01260c3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01260ca:	10 00 00 
f01260cd:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01260d2:	0f b6 d0             	movzbl %al,%edx
f01260d5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01260db:	01 d0                	add    %edx,%eax
f01260dd:	48                   	dec    %eax
f01260de:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01260e4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01260ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01260ef:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01260f5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01260fb:	29 d0                	sub    %edx,%eax
f01260fd:	01 c1                	add    %eax,%ecx
f01260ff:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0126106:	10 00 00 
f0126109:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012610e:	0f b6 c0             	movzbl %al,%eax
f0126111:	c1 e0 04             	shl    $0x4,%eax
f0126114:	89 c2                	mov    %eax,%edx
f0126116:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012611c:	01 d0                	add    %edx,%eax
f012611e:	48                   	dec    %eax
f012611f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126125:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012612b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126130:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126136:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012613c:	29 d0                	sub    %edx,%eax
f012613e:	01 c1                	add    %eax,%ecx
f0126140:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126147:	10 00 00 
f012614a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126150:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126155:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012615b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126161:	ba 00 00 00 00       	mov    $0x0,%edx
f0126166:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012616c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126172:	29 d0                	sub    %edx,%eax
f0126174:	29 c1                	sub    %eax,%ecx
f0126176:	89 c8                	mov    %ecx,%eax
f0126178:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012617d:	c1 e8 0c             	shr    $0xc,%eax
f0126180:	89 c2                	mov    %eax,%edx
f0126182:	4a                   	dec    %edx
f0126183:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0126189:	c1 e0 02             	shl    $0x2,%eax
f012618c:	8d 50 03             	lea    0x3(%eax),%edx
f012618f:	b8 10 00 00 00       	mov    $0x10,%eax
f0126194:	48                   	dec    %eax
f0126195:	01 d0                	add    %edx,%eax
f0126197:	bf 10 00 00 00       	mov    $0x10,%edi
f012619c:	ba 00 00 00 00       	mov    $0x0,%edx
f01261a1:	f7 f7                	div    %edi
f01261a3:	6b c0 10             	imul   $0x10,%eax,%eax
f01261a6:	29 c4                	sub    %eax,%esp
f01261a8:	89 e0                	mov    %esp,%eax
f01261aa:	83 c0 03             	add    $0x3,%eax
f01261ad:	c1 e8 02             	shr    $0x2,%eax
f01261b0:	c1 e0 02             	shl    $0x2,%eax
f01261b3:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01261b9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01261c0:	10 00 00 
f01261c3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01261c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261ce:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01261d4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01261da:	ba 00 00 00 00       	mov    $0x0,%edx
f01261df:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01261e5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01261eb:	29 d0                	sub    %edx,%eax
f01261ed:	89 c1                	mov    %eax,%ecx
f01261ef:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01261f6:	10 00 00 
f01261f9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01261fe:	0f b6 d0             	movzbl %al,%edx
f0126201:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126207:	01 d0                	add    %edx,%eax
f0126209:	48                   	dec    %eax
f012620a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126210:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126216:	ba 00 00 00 00       	mov    $0x0,%edx
f012621b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126221:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126227:	29 d0                	sub    %edx,%eax
f0126229:	01 c1                	add    %eax,%ecx
f012622b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126232:	10 00 00 
f0126235:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012623a:	0f b6 c0             	movzbl %al,%eax
f012623d:	c1 e0 04             	shl    $0x4,%eax
f0126240:	89 c2                	mov    %eax,%edx
f0126242:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126248:	01 d0                	add    %edx,%eax
f012624a:	48                   	dec    %eax
f012624b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126251:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126257:	ba 00 00 00 00       	mov    $0x0,%edx
f012625c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126262:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126268:	29 d0                	sub    %edx,%eax
f012626a:	01 c1                	add    %eax,%ecx
f012626c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0126273:	10 00 00 
f0126276:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012627c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126281:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0126287:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012628d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126292:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0126298:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012629e:	29 d0                	sub    %edx,%eax
f01262a0:	29 c1                	sub    %eax,%ecx
f01262a2:	89 c8                	mov    %ecx,%eax
f01262a4:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01262a9:	c1 e8 0c             	shr    $0xc,%eax
f01262ac:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01262b2:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01262b9:	10 00 00 
f01262bc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01262c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01262c7:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01262cd:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01262d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01262d8:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01262de:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01262e4:	29 d0                	sub    %edx,%eax
f01262e6:	89 c1                	mov    %eax,%ecx
f01262e8:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01262ef:	10 00 00 
f01262f2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01262f7:	0f b6 d0             	movzbl %al,%edx
f01262fa:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0126300:	01 d0                	add    %edx,%eax
f0126302:	48                   	dec    %eax
f0126303:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0126309:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012630f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126314:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012631a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126320:	29 d0                	sub    %edx,%eax
f0126322:	01 c1                	add    %eax,%ecx
f0126324:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012632b:	10 00 00 
f012632e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126333:	0f b6 c0             	movzbl %al,%eax
f0126336:	c1 e0 04             	shl    $0x4,%eax
f0126339:	89 c2                	mov    %eax,%edx
f012633b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0126341:	01 d0                	add    %edx,%eax
f0126343:	48                   	dec    %eax
f0126344:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012634a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126350:	ba 00 00 00 00       	mov    $0x0,%edx
f0126355:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012635b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126361:	29 d0                	sub    %edx,%eax
f0126363:	01 c8                	add    %ecx,%eax
f0126365:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012636a:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0126370:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0126377:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f012637e:	10 00 00 
f0126381:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0126387:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012638c:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0126392:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126398:	ba 00 00 00 00       	mov    $0x0,%edx
f012639d:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01263a3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01263a9:	29 d0                	sub    %edx,%eax
f01263ab:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01263b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01263b3:	e9 21 01 00 00       	jmp    f01264d9 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01263b8:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01263bd:	83 ec 04             	sub    $0x4,%esp
f01263c0:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01263c6:	52                   	push   %edx
f01263c7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01263ca:	50                   	push   %eax
f01263cb:	e8 0d 07 fe ff       	call   f0106add <get_page_table>
f01263d0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01263d3:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01263d9:	85 c0                	test   %eax,%eax
f01263db:	75 17                	jne    f01263f4 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01263dd:	83 ec 04             	sub    $0x4,%esp
f01263e0:	68 9c bf 13 f0       	push   $0xf013bf9c
f01263e5:	68 38 09 00 00       	push   $0x938
f01263ea:	68 fa b5 13 f0       	push   $0xf013b5fa
f01263ef:	e8 11 9e fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01263f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01263f7:	c1 e8 0c             	shr    $0xc,%eax
f01263fa:	25 ff 03 00 00       	and    $0x3ff,%eax
f01263ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0126402:	e9 ba 00 00 00       	jmp    f01264c1 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0126407:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012640d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126410:	c1 e2 02             	shl    $0x2,%edx
f0126413:	01 d0                	add    %edx,%eax
f0126415:	8b 00                	mov    (%eax),%eax
f0126417:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012641c:	89 c1                	mov    %eax,%ecx
f012641e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126424:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126427:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012642a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126430:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126433:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126436:	83 ec 0c             	sub    $0xc,%esp
f0126439:	50                   	push   %eax
f012643a:	e8 0e 18 fe ff       	call   f0107c4d <kheap_virtual_address>
f012643f:	83 c4 10             	add    $0x10,%esp
f0126442:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0126448:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012644e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0126451:	74 61                	je     f01264b4 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0126453:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126459:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012645c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012645f:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0126465:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0126468:	c1 e1 02             	shl    $0x2,%ecx
f012646b:	01 ca                	add    %ecx,%edx
f012646d:	8b 12                	mov    (%edx),%edx
f012646f:	89 d1                	mov    %edx,%ecx
f0126471:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0126477:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012647a:	c1 e2 0c             	shl    $0xc,%edx
f012647d:	89 d3                	mov    %edx,%ebx
f012647f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0126482:	01 da                	add    %ebx,%edx
f0126484:	83 ec 0c             	sub    $0xc,%esp
f0126487:	50                   	push   %eax
f0126488:	51                   	push   %ecx
f0126489:	52                   	push   %edx
f012648a:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0126490:	68 90 c0 13 f0       	push   $0xf013c090
f0126495:	e8 74 a8 fd ff       	call   f0100d0e <cprintf>
f012649a:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012649d:	83 ec 04             	sub    $0x4,%esp
f01264a0:	68 d3 c0 13 f0       	push   $0xf013c0d3
f01264a5:	68 42 09 00 00       	push   $0x942
f01264aa:	68 fa b5 13 f0       	push   $0xf013b5fa
f01264af:	e8 51 9d fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f01264b4:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01264bb:	ff 45 dc             	incl   -0x24(%ebp)
f01264be:	ff 45 e0             	incl   -0x20(%ebp)
f01264c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01264c4:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01264ca:	7d 0d                	jge    f01264d9 <test_kheap_virt_addr+0xecc>
f01264cc:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01264d3:	0f 8e 2e ff ff ff    	jle    f0126407 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01264d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01264dc:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01264e2:	0f 82 d0 fe ff ff    	jb     f01263b8 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01264e8:	83 ec 0c             	sub    $0xc,%esp
f01264eb:	68 f0 c0 13 f0       	push   $0xf013c0f0
f01264f0:	e8 19 a8 fd ff       	call   f0100d0e <cprintf>
f01264f5:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01264f8:	e8 70 6c fe ff       	call   f010d16d <sys_calculate_free_frames>
f01264fd:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126503:	e8 ec d8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126508:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f012650e:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0126514:	83 ec 0c             	sub    $0xc,%esp
f0126517:	50                   	push   %eax
f0126518:	e8 09 16 fe ff       	call   f0107b26 <kfree>
f012651d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126520:	e8 cf d8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126525:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f012652b:	74 17                	je     f0126544 <test_kheap_virt_addr+0xf37>
f012652d:	83 ec 04             	sub    $0x4,%esp
f0126530:	68 14 b6 13 f0       	push   $0xf013b614
f0126535:	68 50 09 00 00       	push   $0x950
f012653a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012653f:	e8 c1 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126544:	e8 24 6c fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126549:	89 c2                	mov    %eax,%edx
f012654b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126551:	29 c2                	sub    %eax,%edx
f0126553:	89 d0                	mov    %edx,%eax
f0126555:	3d 00 02 00 00       	cmp    $0x200,%eax
f012655a:	74 17                	je     f0126573 <test_kheap_virt_addr+0xf66>
f012655c:	83 ec 04             	sub    $0x4,%esp
f012655f:	68 84 bd 13 f0       	push   $0xf013bd84
f0126564:	68 51 09 00 00       	push   $0x951
f0126569:	68 fa b5 13 f0       	push   $0xf013b5fa
f012656e:	e8 92 9c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126573:	e8 f5 6b fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126578:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012657e:	e8 71 d8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126583:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0126589:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012658f:	83 ec 0c             	sub    $0xc,%esp
f0126592:	50                   	push   %eax
f0126593:	e8 8e 15 fe ff       	call   f0107b26 <kfree>
f0126598:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012659b:	e8 54 d8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01265a0:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01265a6:	74 17                	je     f01265bf <test_kheap_virt_addr+0xfb2>
f01265a8:	83 ec 04             	sub    $0x4,%esp
f01265ab:	68 14 b6 13 f0       	push   $0xf013b614
f01265b0:	68 57 09 00 00       	push   $0x957
f01265b5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01265ba:	e8 46 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01265bf:	e8 a9 6b fe ff       	call   f010d16d <sys_calculate_free_frames>
f01265c4:	89 c2                	mov    %eax,%edx
f01265c6:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01265cc:	29 c2                	sub    %eax,%edx
f01265ce:	89 d0                	mov    %edx,%eax
f01265d0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01265d5:	74 17                	je     f01265ee <test_kheap_virt_addr+0xfe1>
f01265d7:	83 ec 04             	sub    $0x4,%esp
f01265da:	68 84 bd 13 f0       	push   $0xf013bd84
f01265df:	68 58 09 00 00       	push   $0x958
f01265e4:	68 fa b5 13 f0       	push   $0xf013b5fa
f01265e9:	e8 17 9c fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01265ee:	e8 7a 6b fe ff       	call   f010d16d <sys_calculate_free_frames>
f01265f3:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265f9:	e8 f6 d7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01265fe:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0126604:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012660a:	83 ec 0c             	sub    $0xc,%esp
f012660d:	50                   	push   %eax
f012660e:	e8 13 15 fe ff       	call   f0107b26 <kfree>
f0126613:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126616:	e8 d9 d7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012661b:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126621:	74 17                	je     f012663a <test_kheap_virt_addr+0x102d>
f0126623:	83 ec 04             	sub    $0x4,%esp
f0126626:	68 14 b6 13 f0       	push   $0xf013b614
f012662b:	68 5e 09 00 00       	push   $0x95e
f0126630:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126635:	e8 cb 9b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012663a:	e8 2e 6b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012663f:	89 c2                	mov    %eax,%edx
f0126641:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126647:	29 c2                	sub    %eax,%edx
f0126649:	89 d0                	mov    %edx,%eax
f012664b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126650:	74 17                	je     f0126669 <test_kheap_virt_addr+0x105c>
f0126652:	83 ec 04             	sub    $0x4,%esp
f0126655:	68 84 bd 13 f0       	push   $0xf013bd84
f012665a:	68 5f 09 00 00       	push   $0x95f
f012665f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126664:	e8 9c 9b fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0126669:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0126670:	10 00 00 
f0126673:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126679:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012667e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126684:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012668a:	ba 00 00 00 00       	mov    $0x0,%edx
f012668f:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0126695:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012669b:	29 d0                	sub    %edx,%eax
f012669d:	89 c1                	mov    %eax,%ecx
f012669f:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01266a6:	10 00 00 
f01266a9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01266ae:	0f b6 d0             	movzbl %al,%edx
f01266b1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01266b7:	01 d0                	add    %edx,%eax
f01266b9:	48                   	dec    %eax
f01266ba:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01266c0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01266c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01266cb:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01266d1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01266d7:	29 d0                	sub    %edx,%eax
f01266d9:	01 c1                	add    %eax,%ecx
f01266db:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01266e2:	10 00 00 
f01266e5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01266ea:	0f b6 c0             	movzbl %al,%eax
f01266ed:	c1 e0 04             	shl    $0x4,%eax
f01266f0:	89 c2                	mov    %eax,%edx
f01266f2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01266f8:	01 d0                	add    %edx,%eax
f01266fa:	48                   	dec    %eax
f01266fb:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0126701:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0126707:	ba 00 00 00 00       	mov    $0x0,%edx
f012670c:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0126712:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0126718:	29 d0                	sub    %edx,%eax
f012671a:	01 c8                	add    %ecx,%eax
f012671c:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126721:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0126727:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f012672e:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0126735:	10 00 00 
f0126738:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012673e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126743:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0126749:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012674f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126754:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012675a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126760:	29 d0                	sub    %edx,%eax
f0126762:	89 c1                	mov    %eax,%ecx
f0126764:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f012676b:	10 00 00 
f012676e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126773:	0f b6 d0             	movzbl %al,%edx
f0126776:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012677c:	01 d0                	add    %edx,%eax
f012677e:	48                   	dec    %eax
f012677f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0126785:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012678b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126790:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0126796:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012679c:	29 d0                	sub    %edx,%eax
f012679e:	01 c1                	add    %eax,%ecx
f01267a0:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01267a7:	10 00 00 
f01267aa:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01267af:	0f b6 c0             	movzbl %al,%eax
f01267b2:	c1 e0 04             	shl    $0x4,%eax
f01267b5:	89 c2                	mov    %eax,%edx
f01267b7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01267bd:	01 d0                	add    %edx,%eax
f01267bf:	48                   	dec    %eax
f01267c0:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01267c6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01267cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01267d1:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01267d7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01267dd:	29 d0                	sub    %edx,%eax
f01267df:	01 c1                	add    %eax,%ecx
f01267e1:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01267e8:	10 00 00 
f01267eb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01267f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267f6:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01267fc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126802:	ba 00 00 00 00       	mov    $0x0,%edx
f0126807:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f012680d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126813:	29 d0                	sub    %edx,%eax
f0126815:	29 c1                	sub    %eax,%ecx
f0126817:	89 c8                	mov    %ecx,%eax
f0126819:	05 00 40 00 00       	add    $0x4000,%eax
f012681e:	c1 e8 0c             	shr    $0xc,%eax
f0126821:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126827:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012682d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126830:	eb 41                	jmp    f0126873 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126832:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126838:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012683b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012683e:	83 ec 0c             	sub    $0xc,%esp
f0126841:	50                   	push   %eax
f0126842:	e8 06 14 fe ff       	call   f0107c4d <kheap_virtual_address>
f0126847:	83 c4 10             	add    $0x10,%esp
f012684a:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0126850:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0126857:	74 17                	je     f0126870 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0126859:	83 ec 04             	sub    $0x4,%esp
f012685c:	68 d3 c0 13 f0       	push   $0xf013c0d3
f0126861:	68 70 09 00 00       	push   $0x970
f0126866:	68 fa b5 13 f0       	push   $0xf013b5fa
f012686b:	e8 95 99 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126870:	ff 45 d8             	incl   -0x28(%ebp)
f0126873:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126879:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f012687f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126882:	39 c2                	cmp    %eax,%edx
f0126884:	77 ac                	ja     f0126832 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126886:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012688c:	05 00 04 00 00       	add    $0x400,%eax
f0126891:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126894:	e9 83 00 00 00       	jmp    f012691c <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126899:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012689f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01268a2:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01268a5:	83 ec 0c             	sub    $0xc,%esp
f01268a8:	50                   	push   %eax
f01268a9:	e8 9f 13 fe ff       	call   f0107c4d <kheap_virtual_address>
f01268ae:	83 c4 10             	add    $0x10,%esp
f01268b1:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01268b7:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01268be:	10 00 00 
f01268c1:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01268c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01268cc:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01268d2:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01268d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01268dd:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01268e3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01268e9:	29 d0                	sub    %edx,%eax
f01268eb:	89 c2                	mov    %eax,%edx
f01268ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01268f0:	c1 e0 0c             	shl    $0xc,%eax
f01268f3:	01 d0                	add    %edx,%eax
f01268f5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01268fa:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0126900:	74 17                	je     f0126919 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0126902:	83 ec 04             	sub    $0x4,%esp
f0126905:	68 d3 c0 13 f0       	push   $0xf013c0d3
f012690a:	68 7a 09 00 00       	push   $0x97a
f012690f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126914:	e8 ec 98 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126919:	ff 45 d8             	incl   -0x28(%ebp)
f012691c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126922:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0126928:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012692b:	39 c2                	cmp    %eax,%edx
f012692d:	0f 87 66 ff ff ff    	ja     f0126899 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126933:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126939:	05 04 07 00 00       	add    $0x704,%eax
f012693e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126941:	eb 41                	jmp    f0126984 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126943:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126949:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012694c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012694f:	83 ec 0c             	sub    $0xc,%esp
f0126952:	50                   	push   %eax
f0126953:	e8 f5 12 fe ff       	call   f0107c4d <kheap_virtual_address>
f0126958:	83 c4 10             	add    $0x10,%esp
f012695b:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126961:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0126968:	74 17                	je     f0126981 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f012696a:	83 ec 04             	sub    $0x4,%esp
f012696d:	68 d3 c0 13 f0       	push   $0xf013c0d3
f0126972:	68 83 09 00 00       	push   $0x983
f0126977:	68 fa b5 13 f0       	push   $0xf013b5fa
f012697c:	e8 84 98 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126981:	ff 45 d8             	incl   -0x28(%ebp)
f0126984:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012698a:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0126990:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126993:	39 c2                	cmp    %eax,%edx
f0126995:	77 ac                	ja     f0126943 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126997:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012699d:	05 04 0d 00 00       	add    $0xd04,%eax
f01269a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01269a5:	e9 83 00 00 00       	jmp    f0126a2d <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01269aa:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01269b0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01269b3:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01269b6:	83 ec 0c             	sub    $0xc,%esp
f01269b9:	50                   	push   %eax
f01269ba:	e8 8e 12 fe ff       	call   f0107c4d <kheap_virtual_address>
f01269bf:	83 c4 10             	add    $0x10,%esp
f01269c2:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01269c8:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f01269cf:	10 00 00 
f01269d2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01269d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01269dd:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01269e3:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01269e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01269ee:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f01269f4:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01269fa:	29 d0                	sub    %edx,%eax
f01269fc:	89 c2                	mov    %eax,%edx
f01269fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126a01:	c1 e0 0c             	shl    $0xc,%eax
f0126a04:	01 d0                	add    %edx,%eax
f0126a06:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126a0b:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0126a11:	74 17                	je     f0126a2a <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0126a13:	83 ec 04             	sub    $0x4,%esp
f0126a16:	68 d3 c0 13 f0       	push   $0xf013c0d3
f0126a1b:	68 8c 09 00 00       	push   $0x98c
f0126a20:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126a25:	e8 db 97 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126a2a:	ff 45 d8             	incl   -0x28(%ebp)
f0126a2d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126a33:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0126a39:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126a3c:	39 c2                	cmp    %eax,%edx
f0126a3e:	0f 87 66 ff ff ff    	ja     f01269aa <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126a44:	83 ec 0c             	sub    $0xc,%esp
f0126a47:	68 85 b7 13 f0       	push   $0xf013b785
f0126a4c:	e8 bd a2 fd ff       	call   f0100d0e <cprintf>
f0126a51:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126a54:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126a5b:	eb 54                	jmp    f0126ab1 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126a5d:	83 ec 0c             	sub    $0xc,%esp
f0126a60:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126a63:	e8 e5 11 fe ff       	call   f0107c4d <kheap_virtual_address>
f0126a68:	83 c4 10             	add    $0x10,%esp
f0126a6b:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126a71:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126a78:	74 30                	je     f0126aaa <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126a7a:	83 ec 04             	sub    $0x4,%esp
f0126a7d:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126a83:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126a86:	68 21 c1 13 f0       	push   $0xf013c121
f0126a8b:	e8 7e a2 fd ff       	call   f0100d0e <cprintf>
f0126a90:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126a93:	83 ec 04             	sub    $0x4,%esp
f0126a96:	68 d3 c0 13 f0       	push   $0xf013c0d3
f0126a9b:	68 9c 09 00 00       	push   $0x99c
f0126aa0:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126aa5:	e8 5b 97 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126aaa:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0126ab1:	b8 bc 08 86 00       	mov    $0x8608bc,%eax
f0126ab6:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126ab9:	72 a2                	jb     f0126a5d <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0126abb:	83 ec 0c             	sub    $0xc,%esp
f0126abe:	68 de b7 13 f0       	push   $0xf013b7de
f0126ac3:	e8 46 a2 fd ff       	call   f0100d0e <cprintf>
f0126ac8:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0126acb:	83 ec 0c             	sub    $0xc,%esp
f0126ace:	68 40 c1 13 f0       	push   $0xf013c140
f0126ad3:	e8 36 a2 fd ff       	call   f0100d0e <cprintf>
f0126ad8:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126adb:	b8 01 00 00 00       	mov    $0x1,%eax
f0126ae0:	89 f4                	mov    %esi,%esp

}
f0126ae2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126ae5:	5b                   	pop    %ebx
f0126ae6:	5e                   	pop    %esi
f0126ae7:	5f                   	pop    %edi
f0126ae8:	5d                   	pop    %ebp
f0126ae9:	c3                   	ret    

f0126aea <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126aea:	55                   	push   %ebp
f0126aeb:	89 e5                	mov    %esp,%ebp
f0126aed:	57                   	push   %edi
f0126aee:	56                   	push   %esi
f0126aef:	53                   	push   %ebx
f0126af0:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0126af6:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f0126afb:	84 c0                	test   %al,%al
f0126afd:	74 56                	je     f0126b55 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0126aff:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f0126b06:	e8 62 66 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126b0b:	a3 b8 08 86 f0       	mov    %eax,0xf08608b8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0126b10:	e8 df d2 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126b15:	a3 b4 08 86 f0       	mov    %eax,0xf08608b4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0126b1a:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126b20:	bb 9d c2 13 f0       	mov    $0xf013c29d,%ebx
f0126b25:	ba 11 00 00 00       	mov    $0x11,%edx
f0126b2a:	89 c7                	mov    %eax,%edi
f0126b2c:	89 de                	mov    %ebx,%esi
f0126b2e:	89 d1                	mov    %edx,%ecx
f0126b30:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0126b32:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126b38:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126b3d:	b0 00                	mov    $0x0,%al
f0126b3f:	89 d7                	mov    %edx,%edi
f0126b41:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126b43:	83 ec 0c             	sub    $0xc,%esp
f0126b46:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126b4c:	50                   	push   %eax
f0126b4d:	e8 1e a2 fd ff       	call   f0100d70 <execute_command>
f0126b52:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126b55:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126b5c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126b63:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f0126b68:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126b6b:	eb 2d                	jmp    f0126b9a <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126b6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126b70:	05 5c 05 00 00       	add    $0x55c,%eax
f0126b75:	83 ec 08             	sub    $0x8,%esp
f0126b78:	68 87 c1 13 f0       	push   $0xf013c187
f0126b7d:	50                   	push   %eax
f0126b7e:	e8 79 af 00 00       	call   f0131afc <strcmp>
f0126b83:	83 c4 10             	add    $0x10,%esp
f0126b86:	85 c0                	test   %eax,%eax
f0126b88:	75 08                	jne    f0126b92 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126b8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126b8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126b90:	eb 2f                	jmp    f0126bc1 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126b92:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0126b97:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126b9a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126b9e:	74 08                	je     f0126ba8 <test_three_creation_functions+0xbe>
f0126ba0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126ba3:	8b 40 44             	mov    0x44(%eax),%eax
f0126ba6:	eb 05                	jmp    f0126bad <test_three_creation_functions+0xc3>
f0126ba8:	b8 00 00 00 00       	mov    $0x0,%eax
f0126bad:	a3 f8 06 86 f0       	mov    %eax,0xf08606f8
f0126bb2:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0126bb7:	85 c0                	test   %eax,%eax
f0126bb9:	75 b2                	jne    f0126b6d <test_three_creation_functions+0x83>
f0126bbb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126bbf:	75 ac                	jne    f0126b6d <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0126bc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126bc4:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126bca:	85 c0                	test   %eax,%eax
f0126bcc:	74 17                	je     f0126be5 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0126bce:	83 ec 04             	sub    $0x4,%esp
f0126bd1:	68 90 c1 13 f0       	push   $0xf013c190
f0126bd6:	68 c6 09 00 00       	push   $0x9c6
f0126bdb:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126be0:	e8 20 96 fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0126be5:	83 ec 0c             	sub    $0xc,%esp
f0126be8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126beb:	e8 96 13 fe ff       	call   f0107f86 <env_page_ws_get_size>
f0126bf0:	83 c4 10             	add    $0x10,%esp
f0126bf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0126bf6:	e8 72 65 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126bfb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126bfe:	e8 f1 d1 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126c03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c06:	a1 b4 08 86 f0       	mov    0xf08608b4,%eax
f0126c0b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126c0e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0126c11:	74 17                	je     f0126c2a <test_three_creation_functions+0x140>
f0126c13:	83 ec 04             	sub    $0x4,%esp
f0126c16:	68 14 b6 13 f0       	push   $0xf013b614
f0126c1b:	68 cc 09 00 00       	push   $0x9cc
f0126c20:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126c25:	e8 db 95 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c2a:	a1 b8 08 86 f0       	mov    0xf08608b8,%eax
f0126c2f:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0126c32:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126c35:	83 c2 15             	add    $0x15,%edx
f0126c38:	39 d0                	cmp    %edx,%eax
f0126c3a:	74 17                	je     f0126c53 <test_three_creation_functions+0x169>
f0126c3c:	83 ec 04             	sub    $0x4,%esp
f0126c3f:	68 7c b6 13 f0       	push   $0xf013b67c
f0126c44:	68 ce 09 00 00       	push   $0x9ce
f0126c49:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126c4e:	e8 b2 95 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126c53:	83 ec 0c             	sub    $0xc,%esp
f0126c56:	68 00 10 00 00       	push   $0x1000
f0126c5b:	e8 06 0e fe ff       	call   f0107a66 <kmalloc>
f0126c60:	83 c4 10             	add    $0x10,%esp
f0126c63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126c66:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126c6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126c70:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126c75:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126c78:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126c7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c80:	f7 75 cc             	divl   -0x34(%ebp)
f0126c83:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126c86:	29 d0                	sub    %edx,%eax
f0126c88:	89 c1                	mov    %eax,%ecx
f0126c8a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126c91:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126c96:	0f b6 d0             	movzbl %al,%edx
f0126c99:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126c9c:	01 d0                	add    %edx,%eax
f0126c9e:	48                   	dec    %eax
f0126c9f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126ca2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126ca5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126caa:	f7 75 c4             	divl   -0x3c(%ebp)
f0126cad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126cb0:	29 d0                	sub    %edx,%eax
f0126cb2:	01 c1                	add    %eax,%ecx
f0126cb4:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126cbb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126cc0:	0f b6 c0             	movzbl %al,%eax
f0126cc3:	c1 e0 04             	shl    $0x4,%eax
f0126cc6:	89 c2                	mov    %eax,%edx
f0126cc8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126ccb:	01 d0                	add    %edx,%eax
f0126ccd:	48                   	dec    %eax
f0126cce:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126cd1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126cd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cd9:	f7 75 bc             	divl   -0x44(%ebp)
f0126cdc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126cdf:	29 d0                	sub    %edx,%eax
f0126ce1:	01 c8                	add    %ecx,%eax
f0126ce3:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126ce9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126cec:	39 c2                	cmp    %eax,%edx
f0126cee:	74 17                	je     f0126d07 <test_three_creation_functions+0x21d>
f0126cf0:	83 ec 04             	sub    $0x4,%esp
f0126cf3:	68 e0 c1 13 f0       	push   $0xf013c1e0
f0126cf8:	68 d2 09 00 00       	push   $0x9d2
f0126cfd:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126d02:	e8 fe 94 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126d07:	83 ec 0c             	sub    $0xc,%esp
f0126d0a:	68 50 c2 13 f0       	push   $0xf013c250
f0126d0f:	e8 fa 9f fd ff       	call   f0100d0e <cprintf>
f0126d14:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126d17:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126d1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126d1f:	5b                   	pop    %ebx
f0126d20:	5e                   	pop    %esi
f0126d21:	5f                   	pop    %edi
f0126d22:	5d                   	pop    %ebp
f0126d23:	c3                   	ret    

f0126d24 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0126d24:	55                   	push   %ebp
f0126d25:	89 e5                	mov    %esp,%ebp
f0126d27:	57                   	push   %edi
f0126d28:	53                   	push   %ebx
f0126d29:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126d2f:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0126d33:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126d37:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126d3d:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126d43:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126d4a:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126d51:	e8 17 64 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126d56:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126d59:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126d5f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d64:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d69:	89 d7                	mov    %edx,%edi
f0126d6b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126d6d:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126d73:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d78:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d7d:	89 d7                	mov    %edx,%edi
f0126d7f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126d81:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126d87:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d8c:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d91:	89 d7                	mov    %edx,%edi
f0126d93:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126d95:	e8 d3 63 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126d9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d9d:	e8 52 d0 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126da2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126da5:	83 ec 0c             	sub    $0xc,%esp
f0126da8:	68 00 fc 1f 00       	push   $0x1ffc00
f0126dad:	e8 b4 0c fe ff       	call   f0107a66 <kmalloc>
f0126db2:	83 c4 10             	add    $0x10,%esp
f0126db5:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126dbb:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126dc1:	89 c1                	mov    %eax,%ecx
f0126dc3:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126dca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126dcd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126dd2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126dd5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126dd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ddd:	f7 75 c8             	divl   -0x38(%ebp)
f0126de0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126de3:	29 d0                	sub    %edx,%eax
f0126de5:	89 c3                	mov    %eax,%ebx
f0126de7:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126dee:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126df3:	0f b6 d0             	movzbl %al,%edx
f0126df6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126df9:	01 d0                	add    %edx,%eax
f0126dfb:	48                   	dec    %eax
f0126dfc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126dff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e02:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e07:	f7 75 c0             	divl   -0x40(%ebp)
f0126e0a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e0d:	29 d0                	sub    %edx,%eax
f0126e0f:	01 c3                	add    %eax,%ebx
f0126e11:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126e18:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126e1d:	0f b6 c0             	movzbl %al,%eax
f0126e20:	c1 e0 04             	shl    $0x4,%eax
f0126e23:	89 c2                	mov    %eax,%edx
f0126e25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e28:	01 d0                	add    %edx,%eax
f0126e2a:	48                   	dec    %eax
f0126e2b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126e2e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126e31:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e36:	f7 75 b8             	divl   -0x48(%ebp)
f0126e39:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126e3c:	29 d0                	sub    %edx,%eax
f0126e3e:	01 d8                	add    %ebx,%eax
f0126e40:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126e45:	39 c1                	cmp    %eax,%ecx
f0126e47:	74 17                	je     f0126e60 <test_kfreeall+0x13c>
f0126e49:	83 ec 04             	sub    $0x4,%esp
f0126e4c:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0126e51:	68 f9 09 00 00       	push   $0x9f9
f0126e56:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126e5b:	e8 a5 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e60:	e8 8f cf fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126e65:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e68:	74 17                	je     f0126e81 <test_kfreeall+0x15d>
f0126e6a:	83 ec 04             	sub    $0x4,%esp
f0126e6d:	68 14 b6 13 f0       	push   $0xf013b614
f0126e72:	68 fa 09 00 00       	push   $0x9fa
f0126e77:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126e7c:	e8 84 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e81:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e84:	e8 e4 62 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126e89:	29 c3                	sub    %eax,%ebx
f0126e8b:	89 d8                	mov    %ebx,%eax
f0126e8d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126e92:	74 17                	je     f0126eab <test_kfreeall+0x187>
f0126e94:	83 ec 04             	sub    $0x4,%esp
f0126e97:	68 7c b6 13 f0       	push   $0xf013b67c
f0126e9c:	68 fb 09 00 00       	push   $0x9fb
f0126ea1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126ea6:	e8 5a 93 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126eab:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126eb2:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126eb5:	e8 b3 62 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126eba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ebd:	e8 32 cf fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126ec2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126ec5:	83 ec 0c             	sub    $0xc,%esp
f0126ec8:	68 00 fc 1f 00       	push   $0x1ffc00
f0126ecd:	e8 94 0b fe ff       	call   f0107a66 <kmalloc>
f0126ed2:	83 c4 10             	add    $0x10,%esp
f0126ed5:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126edb:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126ee1:	89 c1                	mov    %eax,%ecx
f0126ee3:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126eea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126eed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ef2:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126ef5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126efd:	f7 75 b0             	divl   -0x50(%ebp)
f0126f00:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126f03:	29 d0                	sub    %edx,%eax
f0126f05:	89 c3                	mov    %eax,%ebx
f0126f07:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126f0e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126f13:	0f b6 d0             	movzbl %al,%edx
f0126f16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126f19:	01 d0                	add    %edx,%eax
f0126f1b:	48                   	dec    %eax
f0126f1c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126f1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f22:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f27:	f7 75 a8             	divl   -0x58(%ebp)
f0126f2a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f2d:	29 d0                	sub    %edx,%eax
f0126f2f:	01 c3                	add    %eax,%ebx
f0126f31:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126f38:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0126f3d:	0f b6 c0             	movzbl %al,%eax
f0126f40:	c1 e0 04             	shl    $0x4,%eax
f0126f43:	89 c2                	mov    %eax,%edx
f0126f45:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126f48:	01 d0                	add    %edx,%eax
f0126f4a:	48                   	dec    %eax
f0126f4b:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126f4e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126f51:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f56:	f7 75 a0             	divl   -0x60(%ebp)
f0126f59:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126f5c:	29 d0                	sub    %edx,%eax
f0126f5e:	01 d8                	add    %ebx,%eax
f0126f60:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126f65:	39 c1                	cmp    %eax,%ecx
f0126f67:	74 17                	je     f0126f80 <test_kfreeall+0x25c>
f0126f69:	83 ec 04             	sub    $0x4,%esp
f0126f6c:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0126f71:	68 02 0a 00 00       	push   $0xa02
f0126f76:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126f7b:	e8 85 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f80:	e8 6f ce fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126f85:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f88:	74 17                	je     f0126fa1 <test_kfreeall+0x27d>
f0126f8a:	83 ec 04             	sub    $0x4,%esp
f0126f8d:	68 14 b6 13 f0       	push   $0xf013b614
f0126f92:	68 03 0a 00 00       	push   $0xa03
f0126f97:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126f9c:	e8 64 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126fa1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126fa4:	e8 c4 61 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126fa9:	29 c3                	sub    %eax,%ebx
f0126fab:	89 d8                	mov    %ebx,%eax
f0126fad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126fb2:	74 17                	je     f0126fcb <test_kfreeall+0x2a7>
f0126fb4:	83 ec 04             	sub    $0x4,%esp
f0126fb7:	68 7c b6 13 f0       	push   $0xf013b67c
f0126fbc:	68 04 0a 00 00       	push   $0xa04
f0126fc1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0126fc6:	e8 3a 92 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126fcb:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126fd2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126fd5:	e8 93 61 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0126fda:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126fdd:	e8 12 ce fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0126fe2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126fe5:	83 ec 0c             	sub    $0xc,%esp
f0126fe8:	68 00 08 00 00       	push   $0x800
f0126fed:	e8 74 0a fe ff       	call   f0107a66 <kmalloc>
f0126ff2:	83 c4 10             	add    $0x10,%esp
f0126ff5:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ffb:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127001:	89 c1                	mov    %eax,%ecx
f0127003:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012700a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012700d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127012:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127015:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127018:	ba 00 00 00 00       	mov    $0x0,%edx
f012701d:	f7 75 98             	divl   -0x68(%ebp)
f0127020:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127023:	29 d0                	sub    %edx,%eax
f0127025:	89 c3                	mov    %eax,%ebx
f0127027:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012702e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127033:	0f b6 d0             	movzbl %al,%edx
f0127036:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127039:	01 d0                	add    %edx,%eax
f012703b:	48                   	dec    %eax
f012703c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012703f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127042:	ba 00 00 00 00       	mov    $0x0,%edx
f0127047:	f7 75 90             	divl   -0x70(%ebp)
f012704a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012704d:	29 d0                	sub    %edx,%eax
f012704f:	01 c3                	add    %eax,%ebx
f0127051:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127058:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012705d:	0f b6 c0             	movzbl %al,%eax
f0127060:	c1 e0 04             	shl    $0x4,%eax
f0127063:	89 c2                	mov    %eax,%edx
f0127065:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127068:	01 d0                	add    %edx,%eax
f012706a:	48                   	dec    %eax
f012706b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012706e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127071:	ba 00 00 00 00       	mov    $0x0,%edx
f0127076:	f7 75 88             	divl   -0x78(%ebp)
f0127079:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012707c:	29 d0                	sub    %edx,%eax
f012707e:	01 d8                	add    %ebx,%eax
f0127080:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127085:	39 c1                	cmp    %eax,%ecx
f0127087:	74 17                	je     f01270a0 <test_kfreeall+0x37c>
f0127089:	83 ec 04             	sub    $0x4,%esp
f012708c:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0127091:	68 0b 0a 00 00       	push   $0xa0b
f0127096:	68 fa b5 13 f0       	push   $0xf013b5fa
f012709b:	e8 65 91 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270a0:	e8 4f cd fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01270a5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01270a8:	74 17                	je     f01270c1 <test_kfreeall+0x39d>
f01270aa:	83 ec 04             	sub    $0x4,%esp
f01270ad:	68 14 b6 13 f0       	push   $0xf013b614
f01270b2:	68 0c 0a 00 00       	push   $0xa0c
f01270b7:	68 fa b5 13 f0       	push   $0xf013b5fa
f01270bc:	e8 44 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270c1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01270c4:	e8 a4 60 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01270c9:	29 c3                	sub    %eax,%ebx
f01270cb:	89 d8                	mov    %ebx,%eax
f01270cd:	83 f8 01             	cmp    $0x1,%eax
f01270d0:	74 17                	je     f01270e9 <test_kfreeall+0x3c5>
f01270d2:	83 ec 04             	sub    $0x4,%esp
f01270d5:	68 7c b6 13 f0       	push   $0xf013b67c
f01270da:	68 0d 0a 00 00       	push   $0xa0d
f01270df:	68 fa b5 13 f0       	push   $0xf013b5fa
f01270e4:	e8 1c 91 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01270e9:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01270f0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01270f3:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01270f9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01270fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127103:	eb 0e                	jmp    f0127113 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0127105:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127108:	8b 45 80             	mov    -0x80(%ebp),%eax
f012710b:	01 d0                	add    %edx,%eax
f012710d:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127110:	ff 45 f4             	incl   -0xc(%ebp)
f0127113:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127119:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012711c:	7f e7                	jg     f0127105 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012711e:	e8 4a 60 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127123:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127126:	e8 c9 cc fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012712b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012712e:	83 ec 0c             	sub    $0xc,%esp
f0127131:	68 00 08 00 00       	push   $0x800
f0127136:	e8 2b 09 fe ff       	call   f0107a66 <kmalloc>
f012713b:	83 c4 10             	add    $0x10,%esp
f012713e:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127144:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012714a:	89 c1                	mov    %eax,%ecx
f012714c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0127153:	10 00 00 
f0127156:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012715c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127161:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0127167:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012716d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127172:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0127178:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012717e:	29 d0                	sub    %edx,%eax
f0127180:	89 c3                	mov    %eax,%ebx
f0127182:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0127189:	10 00 00 
f012718c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127191:	0f b6 d0             	movzbl %al,%edx
f0127194:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012719a:	01 d0                	add    %edx,%eax
f012719c:	48                   	dec    %eax
f012719d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01271a3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01271a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ae:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01271b4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01271ba:	29 d0                	sub    %edx,%eax
f01271bc:	01 c3                	add    %eax,%ebx
f01271be:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01271c5:	10 00 00 
f01271c8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01271cd:	0f b6 c0             	movzbl %al,%eax
f01271d0:	c1 e0 04             	shl    $0x4,%eax
f01271d3:	89 c2                	mov    %eax,%edx
f01271d5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01271db:	01 d0                	add    %edx,%eax
f01271dd:	48                   	dec    %eax
f01271de:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01271e4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01271ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ef:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01271f5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01271fb:	29 d0                	sub    %edx,%eax
f01271fd:	01 d8                	add    %ebx,%eax
f01271ff:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127204:	39 c1                	cmp    %eax,%ecx
f0127206:	74 17                	je     f012721f <test_kfreeall+0x4fb>
f0127208:	83 ec 04             	sub    $0x4,%esp
f012720b:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0127210:	68 19 0a 00 00       	push   $0xa19
f0127215:	68 fa b5 13 f0       	push   $0xf013b5fa
f012721a:	e8 e6 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012721f:	e8 d0 cb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127224:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127227:	74 17                	je     f0127240 <test_kfreeall+0x51c>
f0127229:	83 ec 04             	sub    $0x4,%esp
f012722c:	68 14 b6 13 f0       	push   $0xf013b614
f0127231:	68 1a 0a 00 00       	push   $0xa1a
f0127236:	68 fa b5 13 f0       	push   $0xf013b5fa
f012723b:	e8 c5 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127240:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127243:	e8 25 5f fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127248:	29 c3                	sub    %eax,%ebx
f012724a:	89 d8                	mov    %ebx,%eax
f012724c:	83 f8 01             	cmp    $0x1,%eax
f012724f:	74 17                	je     f0127268 <test_kfreeall+0x544>
f0127251:	83 ec 04             	sub    $0x4,%esp
f0127254:	68 7c b6 13 f0       	push   $0xf013b67c
f0127259:	68 1b 0a 00 00       	push   $0xa1b
f012725e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127263:	e8 9d 8f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127268:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f012726f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127272:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127278:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012727b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127282:	eb 0e                	jmp    f0127292 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0127284:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127287:	8b 45 80             	mov    -0x80(%ebp),%eax
f012728a:	01 d0                	add    %edx,%eax
f012728c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012728f:	ff 45 f4             	incl   -0xc(%ebp)
f0127292:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127298:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012729b:	7f e7                	jg     f0127284 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012729d:	e8 cb 5e fe ff       	call   f010d16d <sys_calculate_free_frames>
f01272a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272a5:	e8 4a cb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01272aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01272ad:	83 ec 0c             	sub    $0xc,%esp
f01272b0:	68 00 1c 00 00       	push   $0x1c00
f01272b5:	e8 ac 07 fe ff       	call   f0107a66 <kmalloc>
f01272ba:	83 c4 10             	add    $0x10,%esp
f01272bd:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01272c3:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01272c9:	89 c1                	mov    %eax,%ecx
f01272cb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01272d2:	10 00 00 
f01272d5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01272db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01272e0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01272e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01272ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01272f1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01272f7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01272fd:	29 d0                	sub    %edx,%eax
f01272ff:	89 c3                	mov    %eax,%ebx
f0127301:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0127308:	10 00 00 
f012730b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127310:	0f b6 d0             	movzbl %al,%edx
f0127313:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127319:	01 d0                	add    %edx,%eax
f012731b:	48                   	dec    %eax
f012731c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0127322:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127328:	ba 00 00 00 00       	mov    $0x0,%edx
f012732d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0127333:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127339:	29 d0                	sub    %edx,%eax
f012733b:	01 c3                	add    %eax,%ebx
f012733d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0127344:	10 00 00 
f0127347:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012734c:	0f b6 c0             	movzbl %al,%eax
f012734f:	c1 e0 04             	shl    $0x4,%eax
f0127352:	89 c2                	mov    %eax,%edx
f0127354:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012735a:	01 d0                	add    %edx,%eax
f012735c:	48                   	dec    %eax
f012735d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0127363:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127369:	ba 00 00 00 00       	mov    $0x0,%edx
f012736e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0127374:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012737a:	29 d0                	sub    %edx,%eax
f012737c:	01 d8                	add    %ebx,%eax
f012737e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127383:	39 c1                	cmp    %eax,%ecx
f0127385:	74 17                	je     f012739e <test_kfreeall+0x67a>
f0127387:	83 ec 04             	sub    $0x4,%esp
f012738a:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012738f:	68 27 0a 00 00       	push   $0xa27
f0127394:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127399:	e8 67 8e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012739e:	e8 51 ca fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01273a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273a6:	74 17                	je     f01273bf <test_kfreeall+0x69b>
f01273a8:	83 ec 04             	sub    $0x4,%esp
f01273ab:	68 14 b6 13 f0       	push   $0xf013b614
f01273b0:	68 28 0a 00 00       	push   $0xa28
f01273b5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01273ba:	e8 46 8e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273c2:	e8 a6 5d fe ff       	call   f010d16d <sys_calculate_free_frames>
f01273c7:	29 c3                	sub    %eax,%ebx
f01273c9:	89 d8                	mov    %ebx,%eax
f01273cb:	83 f8 02             	cmp    $0x2,%eax
f01273ce:	74 17                	je     f01273e7 <test_kfreeall+0x6c3>
f01273d0:	83 ec 04             	sub    $0x4,%esp
f01273d3:	68 7c b6 13 f0       	push   $0xf013b67c
f01273d8:	68 29 0a 00 00       	push   $0xa29
f01273dd:	68 fa b5 13 f0       	push   $0xf013b5fa
f01273e2:	e8 1e 8e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01273e7:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01273ee:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01273f1:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01273f7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01273fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127401:	eb 0e                	jmp    f0127411 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0127403:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127406:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127409:	01 d0                	add    %edx,%eax
f012740b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012740e:	ff 45 f4             	incl   -0xc(%ebp)
f0127411:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127417:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012741a:	7f e7                	jg     f0127403 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012741c:	e8 4c 5d fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127421:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127424:	e8 cb c9 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127429:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012742c:	83 ec 0c             	sub    $0xc,%esp
f012742f:	68 00 fc 2f 00       	push   $0x2ffc00
f0127434:	e8 2d 06 fe ff       	call   f0107a66 <kmalloc>
f0127439:	83 c4 10             	add    $0x10,%esp
f012743c:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127442:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127448:	89 c1                	mov    %eax,%ecx
f012744a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0127451:	10 00 00 
f0127454:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012745a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012745f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0127465:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012746b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127470:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0127476:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012747c:	29 d0                	sub    %edx,%eax
f012747e:	89 c3                	mov    %eax,%ebx
f0127480:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0127487:	10 00 00 
f012748a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012748f:	0f b6 d0             	movzbl %al,%edx
f0127492:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127498:	01 d0                	add    %edx,%eax
f012749a:	48                   	dec    %eax
f012749b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01274a1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01274a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01274ac:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01274b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01274b8:	29 d0                	sub    %edx,%eax
f01274ba:	01 c3                	add    %eax,%ebx
f01274bc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01274c3:	10 00 00 
f01274c6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01274cb:	0f b6 c0             	movzbl %al,%eax
f01274ce:	c1 e0 04             	shl    $0x4,%eax
f01274d1:	89 c2                	mov    %eax,%edx
f01274d3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01274d9:	01 d0                	add    %edx,%eax
f01274db:	48                   	dec    %eax
f01274dc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01274e2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01274e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01274ed:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01274f3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01274f9:	29 d0                	sub    %edx,%eax
f01274fb:	01 d8                	add    %ebx,%eax
f01274fd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127502:	39 c1                	cmp    %eax,%ecx
f0127504:	74 17                	je     f012751d <test_kfreeall+0x7f9>
f0127506:	83 ec 04             	sub    $0x4,%esp
f0127509:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012750e:	68 35 0a 00 00       	push   $0xa35
f0127513:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127518:	e8 e8 8c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012751d:	e8 d2 c8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127522:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127525:	74 17                	je     f012753e <test_kfreeall+0x81a>
f0127527:	83 ec 04             	sub    $0x4,%esp
f012752a:	68 14 b6 13 f0       	push   $0xf013b614
f012752f:	68 36 0a 00 00       	push   $0xa36
f0127534:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127539:	e8 c7 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012753e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127541:	e8 27 5c fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127546:	29 c3                	sub    %eax,%ebx
f0127548:	89 d8                	mov    %ebx,%eax
f012754a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012754f:	74 17                	je     f0127568 <test_kfreeall+0x844>
f0127551:	83 ec 04             	sub    $0x4,%esp
f0127554:	68 7c b6 13 f0       	push   $0xf013b67c
f0127559:	68 37 0a 00 00       	push   $0xa37
f012755e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127563:	e8 9d 8c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127568:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012756f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127572:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127578:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012757b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127582:	eb 0e                	jmp    f0127592 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127584:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127587:	8b 45 80             	mov    -0x80(%ebp),%eax
f012758a:	01 d0                	add    %edx,%eax
f012758c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012758f:	ff 45 f4             	incl   -0xc(%ebp)
f0127592:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127598:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012759b:	7f e7                	jg     f0127584 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012759d:	e8 cb 5b fe ff       	call   f010d16d <sys_calculate_free_frames>
f01275a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275a5:	e8 4a c8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01275aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01275ad:	83 ec 0c             	sub    $0xc,%esp
f01275b0:	68 00 fc 5f 00       	push   $0x5ffc00
f01275b5:	e8 ac 04 fe ff       	call   f0107a66 <kmalloc>
f01275ba:	83 c4 10             	add    $0x10,%esp
f01275bd:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275c3:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01275c9:	89 c1                	mov    %eax,%ecx
f01275cb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01275d2:	10 00 00 
f01275d5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01275db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01275e0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01275e6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01275ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01275f1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01275f7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01275fd:	29 d0                	sub    %edx,%eax
f01275ff:	89 c3                	mov    %eax,%ebx
f0127601:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0127608:	10 00 00 
f012760b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127610:	0f b6 d0             	movzbl %al,%edx
f0127613:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127619:	01 d0                	add    %edx,%eax
f012761b:	48                   	dec    %eax
f012761c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0127622:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127628:	ba 00 00 00 00       	mov    $0x0,%edx
f012762d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0127633:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127639:	29 d0                	sub    %edx,%eax
f012763b:	01 c3                	add    %eax,%ebx
f012763d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0127644:	10 00 00 
f0127647:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012764c:	0f b6 c0             	movzbl %al,%eax
f012764f:	c1 e0 04             	shl    $0x4,%eax
f0127652:	89 c2                	mov    %eax,%edx
f0127654:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012765a:	01 d0                	add    %edx,%eax
f012765c:	48                   	dec    %eax
f012765d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127663:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127669:	ba 00 00 00 00       	mov    $0x0,%edx
f012766e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127674:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012767a:	29 d0                	sub    %edx,%eax
f012767c:	01 d8                	add    %ebx,%eax
f012767e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127683:	39 c1                	cmp    %eax,%ecx
f0127685:	74 17                	je     f012769e <test_kfreeall+0x97a>
f0127687:	83 ec 04             	sub    $0x4,%esp
f012768a:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012768f:	68 43 0a 00 00       	push   $0xa43
f0127694:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127699:	e8 67 8b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012769e:	e8 51 c7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01276a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01276a6:	74 17                	je     f01276bf <test_kfreeall+0x99b>
f01276a8:	83 ec 04             	sub    $0x4,%esp
f01276ab:	68 14 b6 13 f0       	push   $0xf013b614
f01276b0:	68 44 0a 00 00       	push   $0xa44
f01276b5:	68 fa b5 13 f0       	push   $0xf013b5fa
f01276ba:	e8 46 8b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01276c2:	e8 a6 5a fe ff       	call   f010d16d <sys_calculate_free_frames>
f01276c7:	29 c3                	sub    %eax,%ebx
f01276c9:	89 d8                	mov    %ebx,%eax
f01276cb:	3d 00 06 00 00       	cmp    $0x600,%eax
f01276d0:	74 17                	je     f01276e9 <test_kfreeall+0x9c5>
f01276d2:	83 ec 04             	sub    $0x4,%esp
f01276d5:	68 7c b6 13 f0       	push   $0xf013b67c
f01276da:	68 45 0a 00 00       	push   $0xa45
f01276df:	68 fa b5 13 f0       	push   $0xf013b5fa
f01276e4:	e8 1c 8b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01276e9:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01276f0:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01276f3:	e8 75 5a fe ff       	call   f010d16d <sys_calculate_free_frames>
f01276f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276fb:	e8 f4 c6 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127700:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0127703:	83 ec 0c             	sub    $0xc,%esp
f0127706:	68 00 38 00 00       	push   $0x3800
f012770b:	e8 56 03 fe ff       	call   f0107a66 <kmalloc>
f0127710:	83 c4 10             	add    $0x10,%esp
f0127713:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127719:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012771f:	89 c1                	mov    %eax,%ecx
f0127721:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0127728:	10 00 00 
f012772b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127731:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127736:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012773c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127742:	ba 00 00 00 00       	mov    $0x0,%edx
f0127747:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012774d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127753:	29 d0                	sub    %edx,%eax
f0127755:	89 c3                	mov    %eax,%ebx
f0127757:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012775e:	10 00 00 
f0127761:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127766:	0f b6 d0             	movzbl %al,%edx
f0127769:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012776f:	01 d0                	add    %edx,%eax
f0127771:	48                   	dec    %eax
f0127772:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0127778:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012777e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127783:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0127789:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012778f:	29 d0                	sub    %edx,%eax
f0127791:	01 c3                	add    %eax,%ebx
f0127793:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012779a:	10 00 00 
f012779d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01277a2:	0f b6 c0             	movzbl %al,%eax
f01277a5:	c1 e0 04             	shl    $0x4,%eax
f01277a8:	89 c2                	mov    %eax,%edx
f01277aa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01277b0:	01 d0                	add    %edx,%eax
f01277b2:	48                   	dec    %eax
f01277b3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01277b9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01277bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01277c4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01277ca:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01277d0:	29 d0                	sub    %edx,%eax
f01277d2:	01 d8                	add    %ebx,%eax
f01277d4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01277d9:	39 c1                	cmp    %eax,%ecx
f01277db:	74 17                	je     f01277f4 <test_kfreeall+0xad0>
f01277dd:	83 ec 04             	sub    $0x4,%esp
f01277e0:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01277e5:	68 4c 0a 00 00       	push   $0xa4c
f01277ea:	68 fa b5 13 f0       	push   $0xf013b5fa
f01277ef:	e8 11 8a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01277f4:	e8 fb c5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01277f9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01277fc:	74 17                	je     f0127815 <test_kfreeall+0xaf1>
f01277fe:	83 ec 04             	sub    $0x4,%esp
f0127801:	68 14 b6 13 f0       	push   $0xf013b614
f0127806:	68 4d 0a 00 00       	push   $0xa4d
f012780b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127810:	e8 f0 89 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127815:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127818:	e8 50 59 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012781d:	29 c3                	sub    %eax,%ebx
f012781f:	89 d8                	mov    %ebx,%eax
f0127821:	83 f8 04             	cmp    $0x4,%eax
f0127824:	74 17                	je     f012783d <test_kfreeall+0xb19>
f0127826:	83 ec 04             	sub    $0x4,%esp
f0127829:	68 7c b6 13 f0       	push   $0xf013b67c
f012782e:	68 4e 0a 00 00       	push   $0xa4e
f0127833:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127838:	e8 c8 89 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012783d:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0127844:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0127847:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012784d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127850:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127857:	eb 0e                	jmp    f0127867 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0127859:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012785c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012785f:	01 d0                	add    %edx,%eax
f0127861:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127864:	ff 45 f4             	incl   -0xc(%ebp)
f0127867:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012786d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127870:	7f e7                	jg     f0127859 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0127872:	e8 f6 58 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127877:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012787d:	e8 72 c5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127882:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0127888:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012788e:	83 ec 0c             	sub    $0xc,%esp
f0127891:	50                   	push   %eax
f0127892:	e8 8f 02 fe ff       	call   f0107b26 <kfree>
f0127897:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012789a:	e8 55 c5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012789f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01278a5:	74 17                	je     f01278be <test_kfreeall+0xb9a>
f01278a7:	83 ec 04             	sub    $0x4,%esp
f01278aa:	68 14 b6 13 f0       	push   $0xf013b614
f01278af:	68 5d 0a 00 00       	push   $0xa5d
f01278b4:	68 fa b5 13 f0       	push   $0xf013b5fa
f01278b9:	e8 47 89 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01278be:	e8 aa 58 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01278c3:	89 c2                	mov    %eax,%edx
f01278c5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01278cb:	29 c2                	sub    %eax,%edx
f01278cd:	89 d0                	mov    %edx,%eax
f01278cf:	3d 00 02 00 00       	cmp    $0x200,%eax
f01278d4:	74 17                	je     f01278ed <test_kfreeall+0xbc9>
f01278d6:	83 ec 04             	sub    $0x4,%esp
f01278d9:	68 84 bd 13 f0       	push   $0xf013bd84
f01278de:	68 5e 0a 00 00       	push   $0xa5e
f01278e3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01278e8:	e8 18 89 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01278ed:	e8 7b 58 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01278f2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278f8:	e8 f7 c4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01278fd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0127903:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0127909:	83 ec 0c             	sub    $0xc,%esp
f012790c:	50                   	push   %eax
f012790d:	e8 14 02 fe ff       	call   f0107b26 <kfree>
f0127912:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127915:	e8 da c4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012791a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127920:	74 17                	je     f0127939 <test_kfreeall+0xc15>
f0127922:	83 ec 04             	sub    $0x4,%esp
f0127925:	68 14 b6 13 f0       	push   $0xf013b614
f012792a:	68 64 0a 00 00       	push   $0xa64
f012792f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127934:	e8 cc 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0127939:	e8 2f 58 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012793e:	89 c2                	mov    %eax,%edx
f0127940:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127946:	29 c2                	sub    %eax,%edx
f0127948:	89 d0                	mov    %edx,%eax
f012794a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012794f:	74 17                	je     f0127968 <test_kfreeall+0xc44>
f0127951:	83 ec 04             	sub    $0x4,%esp
f0127954:	68 84 bd 13 f0       	push   $0xf013bd84
f0127959:	68 65 0a 00 00       	push   $0xa65
f012795e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127963:	e8 9d 88 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127968:	e8 00 58 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012796d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127973:	e8 7c c4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127978:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012797e:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127984:	83 ec 0c             	sub    $0xc,%esp
f0127987:	50                   	push   %eax
f0127988:	e8 99 01 fe ff       	call   f0107b26 <kfree>
f012798d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127990:	e8 5f c4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127995:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012799b:	74 17                	je     f01279b4 <test_kfreeall+0xc90>
f012799d:	83 ec 04             	sub    $0x4,%esp
f01279a0:	68 14 b6 13 f0       	push   $0xf013b614
f01279a5:	68 6b 0a 00 00       	push   $0xa6b
f01279aa:	68 fa b5 13 f0       	push   $0xf013b5fa
f01279af:	e8 51 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01279b4:	e8 b4 57 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01279b9:	89 c2                	mov    %eax,%edx
f01279bb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01279c1:	29 c2                	sub    %eax,%edx
f01279c3:	89 d0                	mov    %edx,%eax
f01279c5:	3d 00 06 00 00       	cmp    $0x600,%eax
f01279ca:	74 17                	je     f01279e3 <test_kfreeall+0xcbf>
f01279cc:	83 ec 04             	sub    $0x4,%esp
f01279cf:	68 84 bd 13 f0       	push   $0xf013bd84
f01279d4:	68 6c 0a 00 00       	push   $0xa6c
f01279d9:	68 fa b5 13 f0       	push   $0xf013b5fa
f01279de:	e8 22 88 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01279e3:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01279e9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01279ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01279f3:	eb 1e                	jmp    f0127a13 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f01279f5:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01279fb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01279fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a01:	01 c8                	add    %ecx,%eax
f0127a03:	8a 00                	mov    (%eax),%al
f0127a05:	0f be c0             	movsbl %al,%eax
f0127a08:	01 d0                	add    %edx,%eax
f0127a0a:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127a10:	ff 45 f4             	incl   -0xc(%ebp)
f0127a13:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127a19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a1c:	7f d7                	jg     f01279f5 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127a1e:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127a24:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127a2a:	01 c0                	add    %eax,%eax
f0127a2c:	39 c2                	cmp    %eax,%edx
f0127a2e:	74 17                	je     f0127a47 <test_kfreeall+0xd23>
f0127a30:	83 ec 04             	sub    $0x4,%esp
f0127a33:	68 e0 bd 13 f0       	push   $0xf013bde0
f0127a38:	68 78 0a 00 00       	push   $0xa78
f0127a3d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127a42:	e8 be 87 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127a47:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127a4d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127a50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a57:	eb 1e                	jmp    f0127a77 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127a59:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127a5f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127a62:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a65:	01 c8                	add    %ecx,%eax
f0127a67:	8a 00                	mov    (%eax),%al
f0127a69:	0f be c0             	movsbl %al,%eax
f0127a6c:	01 d0                	add    %edx,%eax
f0127a6e:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127a74:	ff 45 f4             	incl   -0xc(%ebp)
f0127a77:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127a7d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a80:	7f d7                	jg     f0127a59 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127a82:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127a88:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127a8e:	89 c1                	mov    %eax,%ecx
f0127a90:	01 c9                	add    %ecx,%ecx
f0127a92:	01 c8                	add    %ecx,%eax
f0127a94:	39 c2                	cmp    %eax,%edx
f0127a96:	74 17                	je     f0127aaf <test_kfreeall+0xd8b>
f0127a98:	83 ec 04             	sub    $0x4,%esp
f0127a9b:	68 e0 bd 13 f0       	push   $0xf013bde0
f0127aa0:	68 80 0a 00 00       	push   $0xa80
f0127aa5:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127aaa:	e8 56 87 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0127aaf:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127ab5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127ab8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127abf:	eb 1e                	jmp    f0127adf <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0127ac1:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127ac7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127aca:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127acd:	01 c8                	add    %ecx,%eax
f0127acf:	8a 00                	mov    (%eax),%al
f0127ad1:	0f be c0             	movsbl %al,%eax
f0127ad4:	01 d0                	add    %edx,%eax
f0127ad6:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127adc:	ff 45 f4             	incl   -0xc(%ebp)
f0127adf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127ae5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ae8:	7f d7                	jg     f0127ac1 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127aea:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0127af0:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0127af6:	c1 e2 02             	shl    $0x2,%edx
f0127af9:	39 d0                	cmp    %edx,%eax
f0127afb:	74 17                	je     f0127b14 <test_kfreeall+0xdf0>
f0127afd:	83 ec 04             	sub    $0x4,%esp
f0127b00:	68 e0 bd 13 f0       	push   $0xf013bde0
f0127b05:	68 88 0a 00 00       	push   $0xa88
f0127b0a:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127b0f:	e8 f1 86 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0127b14:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127b1a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127b1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b24:	eb 1e                	jmp    f0127b44 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127b26:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127b2c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127b2f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b32:	01 c8                	add    %ecx,%eax
f0127b34:	8a 00                	mov    (%eax),%al
f0127b36:	0f be c0             	movsbl %al,%eax
f0127b39:	01 d0                	add    %edx,%eax
f0127b3b:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127b41:	ff 45 f4             	incl   -0xc(%ebp)
f0127b44:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127b4a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b4d:	7f d7                	jg     f0127b26 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127b4f:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127b55:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127b5b:	89 d0                	mov    %edx,%eax
f0127b5d:	c1 e0 02             	shl    $0x2,%eax
f0127b60:	01 d0                	add    %edx,%eax
f0127b62:	39 c1                	cmp    %eax,%ecx
f0127b64:	74 17                	je     f0127b7d <test_kfreeall+0xe59>
f0127b66:	83 ec 04             	sub    $0x4,%esp
f0127b69:	68 e0 bd 13 f0       	push   $0xf013bde0
f0127b6e:	68 90 0a 00 00       	push   $0xa90
f0127b73:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127b78:	e8 88 86 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127b7d:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127b83:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127b86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b8d:	eb 1e                	jmp    f0127bad <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127b8f:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127b95:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127b98:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b9b:	01 c8                	add    %ecx,%eax
f0127b9d:	8a 00                	mov    (%eax),%al
f0127b9f:	0f be c0             	movsbl %al,%eax
f0127ba2:	01 d0                	add    %edx,%eax
f0127ba4:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127baa:	ff 45 f4             	incl   -0xc(%ebp)
f0127bad:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127bb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127bb6:	7f d7                	jg     f0127b8f <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127bb8:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0127bbe:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127bc4:	89 d0                	mov    %edx,%eax
f0127bc6:	01 c0                	add    %eax,%eax
f0127bc8:	01 d0                	add    %edx,%eax
f0127bca:	01 c0                	add    %eax,%eax
f0127bcc:	01 d0                	add    %edx,%eax
f0127bce:	39 c1                	cmp    %eax,%ecx
f0127bd0:	74 17                	je     f0127be9 <test_kfreeall+0xec5>
f0127bd2:	83 ec 04             	sub    $0x4,%esp
f0127bd5:	68 e0 bd 13 f0       	push   $0xf013bde0
f0127bda:	68 98 0a 00 00       	push   $0xa98
f0127bdf:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127be4:	e8 1c 86 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127be9:	e8 7f 55 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127bee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bf1:	e8 fe c1 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127bf6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127bf9:	83 ec 0c             	sub    $0xc,%esp
f0127bfc:	68 00 50 00 00       	push   $0x5000
f0127c01:	e8 60 fe fd ff       	call   f0107a66 <kmalloc>
f0127c06:	83 c4 10             	add    $0x10,%esp
f0127c09:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c0f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127c15:	89 c1                	mov    %eax,%ecx
f0127c17:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127c1e:	10 00 00 
f0127c21:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127c27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127c2c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0127c32:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127c38:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c3d:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127c43:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127c49:	29 d0                	sub    %edx,%eax
f0127c4b:	89 c3                	mov    %eax,%ebx
f0127c4d:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127c54:	10 00 00 
f0127c57:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127c5c:	0f b6 d0             	movzbl %al,%edx
f0127c5f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127c65:	01 d0                	add    %edx,%eax
f0127c67:	48                   	dec    %eax
f0127c68:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127c6e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127c74:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c79:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127c7f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127c85:	29 d0                	sub    %edx,%eax
f0127c87:	01 c3                	add    %eax,%ebx
f0127c89:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127c90:	10 00 00 
f0127c93:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127c98:	0f b6 c0             	movzbl %al,%eax
f0127c9b:	c1 e0 04             	shl    $0x4,%eax
f0127c9e:	89 c2                	mov    %eax,%edx
f0127ca0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127ca6:	01 d0                	add    %edx,%eax
f0127ca8:	48                   	dec    %eax
f0127ca9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0127caf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127cb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cba:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127cc0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127cc6:	29 d0                	sub    %edx,%eax
f0127cc8:	01 d8                	add    %ebx,%eax
f0127cca:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0127ccf:	39 c1                	cmp    %eax,%ecx
f0127cd1:	74 17                	je     f0127cea <test_kfreeall+0xfc6>
f0127cd3:	83 ec 04             	sub    $0x4,%esp
f0127cd6:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0127cdb:	68 a1 0a 00 00       	push   $0xaa1
f0127ce0:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127ce5:	e8 1b 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cea:	e8 05 c1 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127cef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127cf2:	74 17                	je     f0127d0b <test_kfreeall+0xfe7>
f0127cf4:	83 ec 04             	sub    $0x4,%esp
f0127cf7:	68 14 b6 13 f0       	push   $0xf013b614
f0127cfc:	68 a2 0a 00 00       	push   $0xaa2
f0127d01:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127d06:	e8 fa 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d0b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127d0e:	e8 5a 54 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127d13:	29 c3                	sub    %eax,%ebx
f0127d15:	89 d8                	mov    %ebx,%eax
f0127d17:	83 f8 05             	cmp    $0x5,%eax
f0127d1a:	74 17                	je     f0127d33 <test_kfreeall+0x100f>
f0127d1c:	83 ec 04             	sub    $0x4,%esp
f0127d1f:	68 7c b6 13 f0       	push   $0xf013b67c
f0127d24:	68 a3 0a 00 00       	push   $0xaa3
f0127d29:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127d2e:	e8 d2 84 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0127d33:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127d3a:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127d3d:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127d43:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127d46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127d4d:	eb 0e                	jmp    f0127d5d <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127d4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127d52:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127d55:	01 d0                	add    %edx,%eax
f0127d57:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127d5a:	ff 45 f4             	incl   -0xc(%ebp)
f0127d5d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127d63:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127d66:	7f e7                	jg     f0127d4f <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d68:	e8 00 54 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127d6d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d70:	e8 7f c0 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127d75:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127d78:	83 ec 0c             	sub    $0xc,%esp
f0127d7b:	68 00 00 10 00       	push   $0x100000
f0127d80:	e8 e1 fc fd ff       	call   f0107a66 <kmalloc>
f0127d85:	83 c4 10             	add    $0x10,%esp
f0127d88:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d8e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127d94:	89 c1                	mov    %eax,%ecx
f0127d96:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127d9d:	10 00 00 
f0127da0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127da6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127dab:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127db1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127db7:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dbc:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127dc2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127dc8:	29 d0                	sub    %edx,%eax
f0127dca:	89 c3                	mov    %eax,%ebx
f0127dcc:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127dd3:	10 00 00 
f0127dd6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127ddb:	0f b6 d0             	movzbl %al,%edx
f0127dde:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127de4:	01 d0                	add    %edx,%eax
f0127de6:	48                   	dec    %eax
f0127de7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127ded:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127df3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127df8:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127dfe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127e04:	29 d0                	sub    %edx,%eax
f0127e06:	01 c3                	add    %eax,%ebx
f0127e08:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127e0f:	10 00 00 
f0127e12:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127e17:	0f b6 c0             	movzbl %al,%eax
f0127e1a:	c1 e0 04             	shl    $0x4,%eax
f0127e1d:	89 c2                	mov    %eax,%edx
f0127e1f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127e25:	01 d0                	add    %edx,%eax
f0127e27:	48                   	dec    %eax
f0127e28:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127e2e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e34:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e39:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127e3f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e45:	29 d0                	sub    %edx,%eax
f0127e47:	01 d8                	add    %ebx,%eax
f0127e49:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127e4e:	39 c1                	cmp    %eax,%ecx
f0127e50:	74 17                	je     f0127e69 <test_kfreeall+0x1145>
f0127e52:	83 ec 04             	sub    $0x4,%esp
f0127e55:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0127e5a:	68 af 0a 00 00       	push   $0xaaf
f0127e5f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127e64:	e8 9c 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e69:	e8 86 bf fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127e6e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e71:	74 17                	je     f0127e8a <test_kfreeall+0x1166>
f0127e73:	83 ec 04             	sub    $0x4,%esp
f0127e76:	68 14 b6 13 f0       	push   $0xf013b614
f0127e7b:	68 b0 0a 00 00       	push   $0xab0
f0127e80:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127e85:	e8 7b 83 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e8a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127e8d:	e8 db 52 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127e92:	29 c3                	sub    %eax,%ebx
f0127e94:	89 d8                	mov    %ebx,%eax
f0127e96:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127e9b:	74 17                	je     f0127eb4 <test_kfreeall+0x1190>
f0127e9d:	83 ec 04             	sub    $0x4,%esp
f0127ea0:	68 7c b6 13 f0       	push   $0xf013b67c
f0127ea5:	68 b1 0a 00 00       	push   $0xab1
f0127eaa:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127eaf:	e8 51 83 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127eb4:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127ebb:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127ebe:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127ec4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127ec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ece:	eb 0e                	jmp    f0127ede <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127ed3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127ed6:	01 d0                	add    %edx,%eax
f0127ed8:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127edb:	ff 45 f4             	incl   -0xc(%ebp)
f0127ede:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127ee4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ee7:	7f e7                	jg     f0127ed0 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127ee9:	e8 7f 52 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127eee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ef1:	e8 fe be fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127ef6:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127ef9:	e8 b1 fd fd ff       	call   f0107caf <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127efe:	e8 f1 be fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0127f03:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127f06:	74 17                	je     f0127f1f <test_kfreeall+0x11fb>
f0127f08:	83 ec 04             	sub    $0x4,%esp
f0127f0b:	68 14 b6 13 f0       	push   $0xf013b614
f0127f10:	68 c1 0a 00 00       	push   $0xac1
f0127f15:	68 fa b5 13 f0       	push   $0xf013b5fa
f0127f1a:	e8 e6 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127f1f:	e8 49 52 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0127f24:	89 c2                	mov    %eax,%edx
f0127f26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f29:	89 d1                	mov    %edx,%ecx
f0127f2b:	29 c1                	sub    %eax,%ecx
f0127f2d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127f34:	10 00 00 
f0127f37:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127f3d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f42:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127f48:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f53:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127f59:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127f5f:	29 d0                	sub    %edx,%eax
f0127f61:	89 c3                	mov    %eax,%ebx
f0127f63:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127f6a:	10 00 00 
f0127f6d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127f72:	0f b6 d0             	movzbl %al,%edx
f0127f75:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127f7b:	01 d0                	add    %edx,%eax
f0127f7d:	48                   	dec    %eax
f0127f7e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127f84:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127f8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f8f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127f95:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127f9b:	29 d0                	sub    %edx,%eax
f0127f9d:	01 c3                	add    %eax,%ebx
f0127f9f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127fa6:	10 00 00 
f0127fa9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0127fae:	0f b6 c0             	movzbl %al,%eax
f0127fb1:	c1 e0 04             	shl    $0x4,%eax
f0127fb4:	89 c2                	mov    %eax,%edx
f0127fb6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127fbc:	01 d0                	add    %edx,%eax
f0127fbe:	48                   	dec    %eax
f0127fbf:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127fc5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127fcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fd0:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127fd6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127fdc:	29 d0                	sub    %edx,%eax
f0127fde:	01 d8                	add    %ebx,%eax
f0127fe0:	05 00 40 00 00       	add    $0x4000,%eax
f0127fe5:	c1 e8 0c             	shr    $0xc,%eax
f0127fe8:	05 0d 04 00 00       	add    $0x40d,%eax
f0127fed:	39 c1                	cmp    %eax,%ecx
f0127fef:	74 17                	je     f0128008 <test_kfreeall+0x12e4>
f0127ff1:	83 ec 04             	sub    $0x4,%esp
f0127ff4:	68 84 bd 13 f0       	push   $0xf013bd84
f0127ff9:	68 c2 0a 00 00       	push   $0xac2
f0127ffe:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128003:	e8 fd 81 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128008:	83 ec 0c             	sub    $0xc,%esp
f012800b:	6a 03                	push   $0x3
f012800d:	e8 fb 55 fe ff       	call   f010d60d <sys_bypassPageFault>
f0128012:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0128015:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012801c:	e9 82 00 00 00       	jmp    f01280a3 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0128021:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128024:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f012802b:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012802e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128031:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0128034:	e8 c2 55 fe ff       	call   f010d5fb <sys_rcr2>
f0128039:	89 c2                	mov    %eax,%edx
f012803b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012803e:	39 c2                	cmp    %eax,%edx
f0128040:	74 17                	je     f0128059 <test_kfreeall+0x1335>
f0128042:	83 ec 04             	sub    $0x4,%esp
f0128045:	68 60 be 13 f0       	push   $0xf013be60
f012804a:	68 d0 0a 00 00       	push   $0xad0
f012804f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128054:	e8 ac 81 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0128059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012805c:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0128063:	89 c2                	mov    %eax,%edx
f0128065:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128068:	01 d0                	add    %edx,%eax
f012806a:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012806d:	e8 89 55 fe ff       	call   f010d5fb <sys_rcr2>
f0128072:	89 c2                	mov    %eax,%edx
f0128074:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128077:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012807e:	89 c1                	mov    %eax,%ecx
f0128080:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128083:	01 c8                	add    %ecx,%eax
f0128085:	39 c2                	cmp    %eax,%edx
f0128087:	74 17                	je     f01280a0 <test_kfreeall+0x137c>
f0128089:	83 ec 04             	sub    $0x4,%esp
f012808c:	68 60 be 13 f0       	push   $0xf013be60
f0128091:	68 d2 0a 00 00       	push   $0xad2
f0128096:	68 fa b5 13 f0       	push   $0xf013b5fa
f012809b:	e8 65 81 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01280a0:	ff 45 f4             	incl   -0xc(%ebp)
f01280a3:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01280a7:	0f 8e 74 ff ff ff    	jle    f0128021 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01280ad:	83 ec 0c             	sub    $0xc,%esp
f01280b0:	6a 00                	push   $0x0
f01280b2:	e8 56 55 fe ff       	call   f010d60d <sys_bypassPageFault>
f01280b7:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01280ba:	e8 ae 50 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01280bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280c2:	e8 2d bd fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01280c7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01280ca:	83 ec 0c             	sub    $0xc,%esp
f01280cd:	68 00 00 40 00       	push   $0x400000
f01280d2:	e8 8f f9 fd ff       	call   f0107a66 <kmalloc>
f01280d7:	83 c4 10             	add    $0x10,%esp
f01280da:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01280e0:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01280e6:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01280eb:	74 17                	je     f0128104 <test_kfreeall+0x13e0>
f01280ed:	83 ec 04             	sub    $0x4,%esp
f01280f0:	68 04 c3 13 f0       	push   $0xf013c304
f01280f5:	68 de 0a 00 00       	push   $0xade
f01280fa:	68 fa b5 13 f0       	push   $0xf013b5fa
f01280ff:	e8 01 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128104:	e8 eb bc fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128109:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012810c:	74 17                	je     f0128125 <test_kfreeall+0x1401>
f012810e:	83 ec 04             	sub    $0x4,%esp
f0128111:	68 14 b6 13 f0       	push   $0xf013b614
f0128116:	68 df 0a 00 00       	push   $0xadf
f012811b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128120:	e8 e0 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128125:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0128128:	e8 40 50 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012812d:	29 c3                	sub    %eax,%ebx
f012812f:	89 d8                	mov    %ebx,%eax
f0128131:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128136:	74 17                	je     f012814f <test_kfreeall+0x142b>
f0128138:	83 ec 04             	sub    $0x4,%esp
f012813b:	68 7c b6 13 f0       	push   $0xf013b67c
f0128140:	68 e0 0a 00 00       	push   $0xae0
f0128145:	68 fa b5 13 f0       	push   $0xf013b5fa
f012814a:	e8 b6 80 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f012814f:	e8 19 50 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128154:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128157:	e8 98 bc fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012815c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f012815f:	83 ec 0c             	sub    $0xc,%esp
f0128162:	68 00 30 00 00       	push   $0x3000
f0128167:	e8 fa f8 fd ff       	call   f0107a66 <kmalloc>
f012816c:	83 c4 10             	add    $0x10,%esp
f012816f:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0128175:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012817b:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0128180:	74 17                	je     f0128199 <test_kfreeall+0x1475>
f0128182:	83 ec 04             	sub    $0x4,%esp
f0128185:	68 04 c3 13 f0       	push   $0xf013c304
f012818a:	68 e6 0a 00 00       	push   $0xae6
f012818f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128194:	e8 6c 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128199:	e8 56 bc fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012819e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01281a1:	74 17                	je     f01281ba <test_kfreeall+0x1496>
f01281a3:	83 ec 04             	sub    $0x4,%esp
f01281a6:	68 14 b6 13 f0       	push   $0xf013b614
f01281ab:	68 e7 0a 00 00       	push   $0xae7
f01281b0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01281b5:	e8 4b 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01281ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01281bd:	e8 ab 4f fe ff       	call   f010d16d <sys_calculate_free_frames>
f01281c2:	29 c3                	sub    %eax,%ebx
f01281c4:	89 d8                	mov    %ebx,%eax
f01281c6:	83 f8 03             	cmp    $0x3,%eax
f01281c9:	74 17                	je     f01281e2 <test_kfreeall+0x14be>
f01281cb:	83 ec 04             	sub    $0x4,%esp
f01281ce:	68 7c b6 13 f0       	push   $0xf013b67c
f01281d3:	68 e8 0a 00 00       	push   $0xae8
f01281d8:	68 fa b5 13 f0       	push   $0xf013b5fa
f01281dd:	e8 23 80 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01281e2:	e8 86 4f fe ff       	call   f010d16d <sys_calculate_free_frames>
f01281e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281ea:	e8 05 bc fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01281ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01281f2:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01281f8:	83 ec 0c             	sub    $0xc,%esp
f01281fb:	50                   	push   %eax
f01281fc:	e8 25 f9 fd ff       	call   f0107b26 <kfree>
f0128201:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128204:	e8 eb bb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128209:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012820c:	74 17                	je     f0128225 <test_kfreeall+0x1501>
f012820e:	83 ec 04             	sub    $0x4,%esp
f0128211:	68 14 b6 13 f0       	push   $0xf013b614
f0128216:	68 f2 0a 00 00       	push   $0xaf2
f012821b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128220:	e8 e0 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128225:	e8 43 4f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012822a:	89 c2                	mov    %eax,%edx
f012822c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012822f:	29 c2                	sub    %eax,%edx
f0128231:	89 d0                	mov    %edx,%eax
f0128233:	83 f8 03             	cmp    $0x3,%eax
f0128236:	74 17                	je     f012824f <test_kfreeall+0x152b>
f0128238:	83 ec 04             	sub    $0x4,%esp
f012823b:	68 ac be 13 f0       	push   $0xf013beac
f0128240:	68 f3 0a 00 00       	push   $0xaf3
f0128245:	68 fa b5 13 f0       	push   $0xf013b5fa
f012824a:	e8 b6 7f fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012824f:	e8 19 4f fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128254:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128257:	e8 98 bb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012825c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012825f:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0128265:	83 ec 0c             	sub    $0xc,%esp
f0128268:	50                   	push   %eax
f0128269:	e8 b8 f8 fd ff       	call   f0107b26 <kfree>
f012826e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128271:	e8 7e bb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128276:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128279:	74 17                	je     f0128292 <test_kfreeall+0x156e>
f012827b:	83 ec 04             	sub    $0x4,%esp
f012827e:	68 14 b6 13 f0       	push   $0xf013b614
f0128283:	68 fc 0a 00 00       	push   $0xafc
f0128288:	68 fa b5 13 f0       	push   $0xf013b5fa
f012828d:	e8 73 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128292:	e8 d6 4e fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128297:	89 c2                	mov    %eax,%edx
f0128299:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012829c:	39 c2                	cmp    %eax,%edx
f012829e:	74 17                	je     f01282b7 <test_kfreeall+0x1593>
f01282a0:	83 ec 04             	sub    $0x4,%esp
f01282a3:	68 ac be 13 f0       	push   $0xf013beac
f01282a8:	68 fd 0a 00 00       	push   $0xafd
f01282ad:	68 fa b5 13 f0       	push   $0xf013b5fa
f01282b2:	e8 4e 7f fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01282b7:	e8 b1 4e fe ff       	call   f010d16d <sys_calculate_free_frames>
f01282bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282bf:	e8 30 bb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01282c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01282c7:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01282cd:	83 ec 0c             	sub    $0xc,%esp
f01282d0:	50                   	push   %eax
f01282d1:	e8 50 f8 fd ff       	call   f0107b26 <kfree>
f01282d6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282d9:	e8 16 bb fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01282de:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01282e1:	74 17                	je     f01282fa <test_kfreeall+0x15d6>
f01282e3:	83 ec 04             	sub    $0x4,%esp
f01282e6:	68 14 b6 13 f0       	push   $0xf013b614
f01282eb:	68 03 0b 00 00       	push   $0xb03
f01282f0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01282f5:	e8 0b 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01282fa:	e8 6e 4e fe ff       	call   f010d16d <sys_calculate_free_frames>
f01282ff:	89 c2                	mov    %eax,%edx
f0128301:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128304:	39 c2                	cmp    %eax,%edx
f0128306:	74 17                	je     f012831f <test_kfreeall+0x15fb>
f0128308:	83 ec 04             	sub    $0x4,%esp
f012830b:	68 ac be 13 f0       	push   $0xf013beac
f0128310:	68 04 0b 00 00       	push   $0xb04
f0128315:	68 fa b5 13 f0       	push   $0xf013b5fa
f012831a:	e8 e6 7e fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012831f:	e8 49 4e fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128324:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128327:	e8 c8 ba fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012832c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012832f:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128335:	83 ec 0c             	sub    $0xc,%esp
f0128338:	50                   	push   %eax
f0128339:	e8 e8 f7 fd ff       	call   f0107b26 <kfree>
f012833e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128341:	e8 ae ba fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128346:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128349:	74 17                	je     f0128362 <test_kfreeall+0x163e>
f012834b:	83 ec 04             	sub    $0x4,%esp
f012834e:	68 14 b6 13 f0       	push   $0xf013b614
f0128353:	68 0a 0b 00 00       	push   $0xb0a
f0128358:	68 fa b5 13 f0       	push   $0xf013b5fa
f012835d:	e8 a3 7e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128362:	e8 06 4e fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128367:	89 c2                	mov    %eax,%edx
f0128369:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012836c:	39 c2                	cmp    %eax,%edx
f012836e:	74 17                	je     f0128387 <test_kfreeall+0x1663>
f0128370:	83 ec 04             	sub    $0x4,%esp
f0128373:	68 ac be 13 f0       	push   $0xf013beac
f0128378:	68 0b 0b 00 00       	push   $0xb0b
f012837d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128382:	e8 7e 7e fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0128387:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012838e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0128395:	eb 48                	jmp    f01283df <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0128397:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012839a:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f012839f:	83 ec 04             	sub    $0x4,%esp
f01283a2:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01283a8:	51                   	push   %ecx
f01283a9:	52                   	push   %edx
f01283aa:	50                   	push   %eax
f01283ab:	e8 2d e7 fd ff       	call   f0106add <get_page_table>
f01283b0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01283b3:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01283b9:	85 c0                	test   %eax,%eax
f01283bb:	75 17                	jne    f01283d4 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01283bd:	83 ec 04             	sub    $0x4,%esp
f01283c0:	68 fc be 13 f0       	push   $0xf013befc
f01283c5:	68 18 0b 00 00       	push   $0xb18
f01283ca:	68 fa b5 13 f0       	push   $0xf013b5fa
f01283cf:	e8 31 7e fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01283d4:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01283db:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01283df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01283e3:	78 b2                	js     f0128397 <test_kfreeall+0x1673>
f01283e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01283e9:	7f 09                	jg     f01283f4 <test_kfreeall+0x16d0>
f01283eb:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01283f2:	76 a3                	jbe    f0128397 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01283f4:	83 ec 0c             	sub    $0xc,%esp
f01283f7:	68 58 c3 13 f0       	push   $0xf013c358
f01283fc:	e8 0d 89 fd ff       	call   f0100d0e <cprintf>
f0128401:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128404:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0128409:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012840c:	5b                   	pop    %ebx
f012840d:	5f                   	pop    %edi
f012840e:	5d                   	pop    %ebp
f012840f:	c3                   	ret    

f0128410 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0128410:	55                   	push   %ebp
f0128411:	89 e5                	mov    %esp,%ebp
f0128413:	57                   	push   %edi
f0128414:	53                   	push   %ebx
f0128415:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f012841b:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f012841f:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128423:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128429:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f012842f:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128436:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012843d:	e8 2b 4d fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128442:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128445:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f012844b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128450:	b8 00 00 00 00       	mov    $0x0,%eax
f0128455:	89 d7                	mov    %edx,%edi
f0128457:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128459:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f012845f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128464:	b8 00 00 00 00       	mov    $0x0,%eax
f0128469:	89 d7                	mov    %edx,%edi
f012846b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012846d:	e8 fb 4c fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128472:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128475:	e8 7a b9 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012847a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012847d:	83 ec 0c             	sub    $0xc,%esp
f0128480:	68 00 fc 1f 00       	push   $0x1ffc00
f0128485:	e8 dc f5 fd ff       	call   f0107a66 <kmalloc>
f012848a:	83 c4 10             	add    $0x10,%esp
f012848d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128493:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128499:	89 c1                	mov    %eax,%ecx
f012849b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01284a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01284a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01284aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01284ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01284b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01284b5:	f7 75 d4             	divl   -0x2c(%ebp)
f01284b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01284bb:	29 d0                	sub    %edx,%eax
f01284bd:	89 c3                	mov    %eax,%ebx
f01284bf:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01284c6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01284cb:	0f b6 d0             	movzbl %al,%edx
f01284ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01284d1:	01 d0                	add    %edx,%eax
f01284d3:	48                   	dec    %eax
f01284d4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01284d7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01284da:	ba 00 00 00 00       	mov    $0x0,%edx
f01284df:	f7 75 cc             	divl   -0x34(%ebp)
f01284e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01284e5:	29 d0                	sub    %edx,%eax
f01284e7:	01 c3                	add    %eax,%ebx
f01284e9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01284f0:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01284f5:	0f b6 c0             	movzbl %al,%eax
f01284f8:	c1 e0 04             	shl    $0x4,%eax
f01284fb:	89 c2                	mov    %eax,%edx
f01284fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128500:	01 d0                	add    %edx,%eax
f0128502:	48                   	dec    %eax
f0128503:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128506:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128509:	ba 00 00 00 00       	mov    $0x0,%edx
f012850e:	f7 75 c4             	divl   -0x3c(%ebp)
f0128511:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128514:	29 d0                	sub    %edx,%eax
f0128516:	01 d8                	add    %ebx,%eax
f0128518:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012851d:	39 c1                	cmp    %eax,%ecx
f012851f:	74 17                	je     f0128538 <test_kexpand+0x128>
f0128521:	83 ec 04             	sub    $0x4,%esp
f0128524:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0128529:	68 43 0b 00 00       	push   $0xb43
f012852e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128533:	e8 cd 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128538:	e8 b7 b8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012853d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128540:	74 17                	je     f0128559 <test_kexpand+0x149>
f0128542:	83 ec 04             	sub    $0x4,%esp
f0128545:	68 14 b6 13 f0       	push   $0xf013b614
f012854a:	68 44 0b 00 00       	push   $0xb44
f012854f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128554:	e8 ac 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128559:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012855c:	e8 0c 4c fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128561:	29 c3                	sub    %eax,%ebx
f0128563:	89 d8                	mov    %ebx,%eax
f0128565:	3d 00 02 00 00       	cmp    $0x200,%eax
f012856a:	74 17                	je     f0128583 <test_kexpand+0x173>
f012856c:	83 ec 04             	sub    $0x4,%esp
f012856f:	68 7c b6 13 f0       	push   $0xf013b67c
f0128574:	68 45 0b 00 00       	push   $0xb45
f0128579:	68 fa b5 13 f0       	push   $0xf013b5fa
f012857e:	e8 82 7c fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128583:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f012858a:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012858d:	e8 db 4b fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128592:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128595:	e8 5a b8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012859a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012859d:	83 ec 0c             	sub    $0xc,%esp
f01285a0:	68 00 fc 1f 00       	push   $0x1ffc00
f01285a5:	e8 bc f4 fd ff       	call   f0107a66 <kmalloc>
f01285aa:	83 c4 10             	add    $0x10,%esp
f01285ad:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01285b3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01285b9:	89 c1                	mov    %eax,%ecx
f01285bb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01285c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01285c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285ca:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01285cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01285d5:	f7 75 bc             	divl   -0x44(%ebp)
f01285d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285db:	29 d0                	sub    %edx,%eax
f01285dd:	89 c3                	mov    %eax,%ebx
f01285df:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01285e6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01285eb:	0f b6 d0             	movzbl %al,%edx
f01285ee:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01285f1:	01 d0                	add    %edx,%eax
f01285f3:	48                   	dec    %eax
f01285f4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01285f7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01285fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01285ff:	f7 75 b4             	divl   -0x4c(%ebp)
f0128602:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128605:	29 d0                	sub    %edx,%eax
f0128607:	01 c3                	add    %eax,%ebx
f0128609:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128610:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128615:	0f b6 c0             	movzbl %al,%eax
f0128618:	c1 e0 04             	shl    $0x4,%eax
f012861b:	89 c2                	mov    %eax,%edx
f012861d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128620:	01 d0                	add    %edx,%eax
f0128622:	48                   	dec    %eax
f0128623:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128626:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128629:	ba 00 00 00 00       	mov    $0x0,%edx
f012862e:	f7 75 ac             	divl   -0x54(%ebp)
f0128631:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128634:	29 d0                	sub    %edx,%eax
f0128636:	01 d8                	add    %ebx,%eax
f0128638:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012863d:	39 c1                	cmp    %eax,%ecx
f012863f:	74 17                	je     f0128658 <test_kexpand+0x248>
f0128641:	83 ec 04             	sub    $0x4,%esp
f0128644:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0128649:	68 4c 0b 00 00       	push   $0xb4c
f012864e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128653:	e8 ad 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128658:	e8 97 b7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012865d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128660:	74 17                	je     f0128679 <test_kexpand+0x269>
f0128662:	83 ec 04             	sub    $0x4,%esp
f0128665:	68 14 b6 13 f0       	push   $0xf013b614
f012866a:	68 4d 0b 00 00       	push   $0xb4d
f012866f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128674:	e8 8c 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128679:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012867c:	e8 ec 4a fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128681:	29 c3                	sub    %eax,%ebx
f0128683:	89 d8                	mov    %ebx,%eax
f0128685:	3d 00 02 00 00       	cmp    $0x200,%eax
f012868a:	74 17                	je     f01286a3 <test_kexpand+0x293>
f012868c:	83 ec 04             	sub    $0x4,%esp
f012868f:	68 7c b6 13 f0       	push   $0xf013b67c
f0128694:	68 4e 0b 00 00       	push   $0xb4e
f0128699:	68 fa b5 13 f0       	push   $0xf013b5fa
f012869e:	e8 62 7b fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01286a3:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01286aa:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01286ad:	e8 bb 4a fe ff       	call   f010d16d <sys_calculate_free_frames>
f01286b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286b5:	e8 3a b7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01286ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01286bd:	83 ec 0c             	sub    $0xc,%esp
f01286c0:	68 00 08 00 00       	push   $0x800
f01286c5:	e8 9c f3 fd ff       	call   f0107a66 <kmalloc>
f01286ca:	83 c4 10             	add    $0x10,%esp
f01286cd:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286d3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01286d9:	89 c1                	mov    %eax,%ecx
f01286db:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01286e2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01286e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01286ea:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01286ed:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01286f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01286f5:	f7 75 a4             	divl   -0x5c(%ebp)
f01286f8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01286fb:	29 d0                	sub    %edx,%eax
f01286fd:	89 c3                	mov    %eax,%ebx
f01286ff:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128706:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012870b:	0f b6 d0             	movzbl %al,%edx
f012870e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128711:	01 d0                	add    %edx,%eax
f0128713:	48                   	dec    %eax
f0128714:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128717:	8b 45 98             	mov    -0x68(%ebp),%eax
f012871a:	ba 00 00 00 00       	mov    $0x0,%edx
f012871f:	f7 75 9c             	divl   -0x64(%ebp)
f0128722:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128725:	29 d0                	sub    %edx,%eax
f0128727:	01 c3                	add    %eax,%ebx
f0128729:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128730:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128735:	0f b6 c0             	movzbl %al,%eax
f0128738:	c1 e0 04             	shl    $0x4,%eax
f012873b:	89 c2                	mov    %eax,%edx
f012873d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128740:	01 d0                	add    %edx,%eax
f0128742:	48                   	dec    %eax
f0128743:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128746:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128749:	ba 00 00 00 00       	mov    $0x0,%edx
f012874e:	f7 75 94             	divl   -0x6c(%ebp)
f0128751:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128754:	29 d0                	sub    %edx,%eax
f0128756:	01 d8                	add    %ebx,%eax
f0128758:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012875d:	39 c1                	cmp    %eax,%ecx
f012875f:	74 17                	je     f0128778 <test_kexpand+0x368>
f0128761:	83 ec 04             	sub    $0x4,%esp
f0128764:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0128769:	68 55 0b 00 00       	push   $0xb55
f012876e:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128773:	e8 8d 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128778:	e8 77 b6 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012877d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128780:	74 17                	je     f0128799 <test_kexpand+0x389>
f0128782:	83 ec 04             	sub    $0x4,%esp
f0128785:	68 14 b6 13 f0       	push   $0xf013b614
f012878a:	68 56 0b 00 00       	push   $0xb56
f012878f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128794:	e8 6c 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128799:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012879c:	e8 cc 49 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01287a1:	29 c3                	sub    %eax,%ebx
f01287a3:	89 d8                	mov    %ebx,%eax
f01287a5:	83 f8 01             	cmp    $0x1,%eax
f01287a8:	74 17                	je     f01287c1 <test_kexpand+0x3b1>
f01287aa:	83 ec 04             	sub    $0x4,%esp
f01287ad:	68 7c b6 13 f0       	push   $0xf013b67c
f01287b2:	68 57 0b 00 00       	push   $0xb57
f01287b7:	68 fa b5 13 f0       	push   $0xf013b5fa
f01287bc:	e8 44 7a fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01287c1:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f01287c8:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01287cb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01287d1:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01287d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287db:	eb 0e                	jmp    f01287eb <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01287dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01287e0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01287e3:	01 d0                	add    %edx,%eax
f01287e5:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01287e8:	ff 45 f4             	incl   -0xc(%ebp)
f01287eb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01287f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287f4:	7f e7                	jg     f01287dd <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01287f6:	e8 72 49 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01287fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287fe:	e8 f1 b5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128803:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128806:	83 ec 0c             	sub    $0xc,%esp
f0128809:	68 00 08 00 00       	push   $0x800
f012880e:	e8 53 f2 fd ff       	call   f0107a66 <kmalloc>
f0128813:	83 c4 10             	add    $0x10,%esp
f0128816:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012881c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128822:	89 c1                	mov    %eax,%ecx
f0128824:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012882b:	8b 45 88             	mov    -0x78(%ebp),%eax
f012882e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128833:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128836:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128839:	ba 00 00 00 00       	mov    $0x0,%edx
f012883e:	f7 75 88             	divl   -0x78(%ebp)
f0128841:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128844:	29 d0                	sub    %edx,%eax
f0128846:	89 c3                	mov    %eax,%ebx
f0128848:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012884f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128854:	0f b6 d0             	movzbl %al,%edx
f0128857:	8b 45 80             	mov    -0x80(%ebp),%eax
f012885a:	01 d0                	add    %edx,%eax
f012885c:	48                   	dec    %eax
f012885d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128863:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128869:	ba 00 00 00 00       	mov    $0x0,%edx
f012886e:	f7 75 80             	divl   -0x80(%ebp)
f0128871:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128877:	29 d0                	sub    %edx,%eax
f0128879:	01 c3                	add    %eax,%ebx
f012887b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128882:	10 00 00 
f0128885:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012888a:	0f b6 c0             	movzbl %al,%eax
f012888d:	c1 e0 04             	shl    $0x4,%eax
f0128890:	89 c2                	mov    %eax,%edx
f0128892:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128898:	01 d0                	add    %edx,%eax
f012889a:	48                   	dec    %eax
f012889b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01288a1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01288a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01288ac:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01288b2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01288b8:	29 d0                	sub    %edx,%eax
f01288ba:	01 d8                	add    %ebx,%eax
f01288bc:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01288c1:	39 c1                	cmp    %eax,%ecx
f01288c3:	74 17                	je     f01288dc <test_kexpand+0x4cc>
f01288c5:	83 ec 04             	sub    $0x4,%esp
f01288c8:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01288cd:	68 63 0b 00 00       	push   $0xb63
f01288d2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01288d7:	e8 29 79 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288dc:	e8 13 b5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01288e1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288e4:	74 17                	je     f01288fd <test_kexpand+0x4ed>
f01288e6:	83 ec 04             	sub    $0x4,%esp
f01288e9:	68 14 b6 13 f0       	push   $0xf013b614
f01288ee:	68 64 0b 00 00       	push   $0xb64
f01288f3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01288f8:	e8 08 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01288fd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128900:	e8 68 48 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128905:	29 c3                	sub    %eax,%ebx
f0128907:	89 d8                	mov    %ebx,%eax
f0128909:	83 f8 01             	cmp    $0x1,%eax
f012890c:	74 17                	je     f0128925 <test_kexpand+0x515>
f012890e:	83 ec 04             	sub    $0x4,%esp
f0128911:	68 7c b6 13 f0       	push   $0xf013b67c
f0128916:	68 65 0b 00 00       	push   $0xb65
f012891b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128920:	e8 e0 78 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128925:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012892c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012892f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128935:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128938:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012893f:	eb 0e                	jmp    f012894f <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0128941:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128944:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128947:	01 d0                	add    %edx,%eax
f0128949:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012894c:	ff 45 f4             	incl   -0xc(%ebp)
f012894f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0128955:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128958:	7f e7                	jg     f0128941 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012895a:	e8 0e 48 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012895f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128962:	e8 8d b4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128967:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012896a:	83 ec 0c             	sub    $0xc,%esp
f012896d:	68 00 1c 00 00       	push   $0x1c00
f0128972:	e8 ef f0 fd ff       	call   f0107a66 <kmalloc>
f0128977:	83 c4 10             	add    $0x10,%esp
f012897a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128980:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128986:	89 c1                	mov    %eax,%ecx
f0128988:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012898f:	10 00 00 
f0128992:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128998:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012899d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01289a3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01289a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01289ae:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01289b4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01289ba:	29 d0                	sub    %edx,%eax
f01289bc:	89 c3                	mov    %eax,%ebx
f01289be:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01289c5:	10 00 00 
f01289c8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01289cd:	0f b6 d0             	movzbl %al,%edx
f01289d0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01289d6:	01 d0                	add    %edx,%eax
f01289d8:	48                   	dec    %eax
f01289d9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01289df:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01289e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01289ea:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01289f0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01289f6:	29 d0                	sub    %edx,%eax
f01289f8:	01 c3                	add    %eax,%ebx
f01289fa:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128a01:	10 00 00 
f0128a04:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128a09:	0f b6 c0             	movzbl %al,%eax
f0128a0c:	c1 e0 04             	shl    $0x4,%eax
f0128a0f:	89 c2                	mov    %eax,%edx
f0128a11:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128a17:	01 d0                	add    %edx,%eax
f0128a19:	48                   	dec    %eax
f0128a1a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128a20:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a26:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a2b:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128a31:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a37:	29 d0                	sub    %edx,%eax
f0128a39:	01 d8                	add    %ebx,%eax
f0128a3b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128a40:	39 c1                	cmp    %eax,%ecx
f0128a42:	74 17                	je     f0128a5b <test_kexpand+0x64b>
f0128a44:	83 ec 04             	sub    $0x4,%esp
f0128a47:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0128a4c:	68 71 0b 00 00       	push   $0xb71
f0128a51:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128a56:	e8 aa 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a5b:	e8 94 b3 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128a60:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128a63:	74 17                	je     f0128a7c <test_kexpand+0x66c>
f0128a65:	83 ec 04             	sub    $0x4,%esp
f0128a68:	68 14 b6 13 f0       	push   $0xf013b614
f0128a6d:	68 72 0b 00 00       	push   $0xb72
f0128a72:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128a77:	e8 89 77 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a7c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a7f:	e8 e9 46 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128a84:	29 c3                	sub    %eax,%ebx
f0128a86:	89 d8                	mov    %ebx,%eax
f0128a88:	83 f8 02             	cmp    $0x2,%eax
f0128a8b:	74 17                	je     f0128aa4 <test_kexpand+0x694>
f0128a8d:	83 ec 04             	sub    $0x4,%esp
f0128a90:	68 7c b6 13 f0       	push   $0xf013b67c
f0128a95:	68 73 0b 00 00       	push   $0xb73
f0128a9a:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128a9f:	e8 61 77 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128aa4:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0128aab:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128aae:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128ab4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128ab7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128abe:	eb 0e                	jmp    f0128ace <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0128ac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ac3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ac6:	01 d0                	add    %edx,%eax
f0128ac8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128acb:	ff 45 f4             	incl   -0xc(%ebp)
f0128ace:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128ad4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ad7:	7f e7                	jg     f0128ac0 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ad9:	e8 8f 46 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128ade:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ae1:	e8 0e b3 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128ae6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128ae9:	83 ec 0c             	sub    $0xc,%esp
f0128aec:	68 00 fc 2f 00       	push   $0x2ffc00
f0128af1:	e8 70 ef fd ff       	call   f0107a66 <kmalloc>
f0128af6:	83 c4 10             	add    $0x10,%esp
f0128af9:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128aff:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128b05:	89 c1                	mov    %eax,%ecx
f0128b07:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128b0e:	10 00 00 
f0128b11:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128b17:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b1c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128b22:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b28:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b2d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128b33:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b39:	29 d0                	sub    %edx,%eax
f0128b3b:	89 c3                	mov    %eax,%ebx
f0128b3d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128b44:	10 00 00 
f0128b47:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128b4c:	0f b6 d0             	movzbl %al,%edx
f0128b4f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128b55:	01 d0                	add    %edx,%eax
f0128b57:	48                   	dec    %eax
f0128b58:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128b5e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b64:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b69:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128b6f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b75:	29 d0                	sub    %edx,%eax
f0128b77:	01 c3                	add    %eax,%ebx
f0128b79:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128b80:	10 00 00 
f0128b83:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128b88:	0f b6 c0             	movzbl %al,%eax
f0128b8b:	c1 e0 04             	shl    $0x4,%eax
f0128b8e:	89 c2                	mov    %eax,%edx
f0128b90:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128b96:	01 d0                	add    %edx,%eax
f0128b98:	48                   	dec    %eax
f0128b99:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128b9f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128ba5:	ba 00 00 00 00       	mov    $0x0,%edx
f0128baa:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128bb0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128bb6:	29 d0                	sub    %edx,%eax
f0128bb8:	01 d8                	add    %ebx,%eax
f0128bba:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128bbf:	39 c1                	cmp    %eax,%ecx
f0128bc1:	74 17                	je     f0128bda <test_kexpand+0x7ca>
f0128bc3:	83 ec 04             	sub    $0x4,%esp
f0128bc6:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0128bcb:	68 7f 0b 00 00       	push   $0xb7f
f0128bd0:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128bd5:	e8 2b 76 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bda:	e8 15 b2 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128bdf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128be2:	74 17                	je     f0128bfb <test_kexpand+0x7eb>
f0128be4:	83 ec 04             	sub    $0x4,%esp
f0128be7:	68 14 b6 13 f0       	push   $0xf013b614
f0128bec:	68 80 0b 00 00       	push   $0xb80
f0128bf1:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128bf6:	e8 0a 76 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128bfb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128bfe:	e8 6a 45 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128c03:	29 c3                	sub    %eax,%ebx
f0128c05:	89 d8                	mov    %ebx,%eax
f0128c07:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128c0c:	74 17                	je     f0128c25 <test_kexpand+0x815>
f0128c0e:	83 ec 04             	sub    $0x4,%esp
f0128c11:	68 7c b6 13 f0       	push   $0xf013b67c
f0128c16:	68 81 0b 00 00       	push   $0xb81
f0128c1b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128c20:	e8 e0 75 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128c25:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128c2c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128c2f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128c35:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128c38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c3f:	eb 0e                	jmp    f0128c4f <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128c41:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c44:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c47:	01 d0                	add    %edx,%eax
f0128c49:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128c4c:	ff 45 f4             	incl   -0xc(%ebp)
f0128c4f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128c55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c58:	7f e7                	jg     f0128c41 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c5a:	e8 0e 45 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128c5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c62:	e8 8d b1 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128c67:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128c6a:	83 ec 0c             	sub    $0xc,%esp
f0128c6d:	68 00 00 60 00       	push   $0x600000
f0128c72:	e8 ef ed fd ff       	call   f0107a66 <kmalloc>
f0128c77:	83 c4 10             	add    $0x10,%esp
f0128c7a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c80:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128c86:	89 c1                	mov    %eax,%ecx
f0128c88:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128c8f:	10 00 00 
f0128c92:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128c98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c9d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128ca3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128ca9:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cae:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128cb4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128cba:	29 d0                	sub    %edx,%eax
f0128cbc:	89 c3                	mov    %eax,%ebx
f0128cbe:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128cc5:	10 00 00 
f0128cc8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128ccd:	0f b6 d0             	movzbl %al,%edx
f0128cd0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128cd6:	01 d0                	add    %edx,%eax
f0128cd8:	48                   	dec    %eax
f0128cd9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128cdf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128ce5:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cea:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128cf0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128cf6:	29 d0                	sub    %edx,%eax
f0128cf8:	01 c3                	add    %eax,%ebx
f0128cfa:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128d01:	10 00 00 
f0128d04:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128d09:	0f b6 c0             	movzbl %al,%eax
f0128d0c:	c1 e0 04             	shl    $0x4,%eax
f0128d0f:	89 c2                	mov    %eax,%edx
f0128d11:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128d17:	01 d0                	add    %edx,%eax
f0128d19:	48                   	dec    %eax
f0128d1a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128d20:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d26:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d2b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128d31:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d37:	29 d0                	sub    %edx,%eax
f0128d39:	01 d8                	add    %ebx,%eax
f0128d3b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128d40:	39 c1                	cmp    %eax,%ecx
f0128d42:	74 17                	je     f0128d5b <test_kexpand+0x94b>
f0128d44:	83 ec 04             	sub    $0x4,%esp
f0128d47:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0128d4c:	68 8d 0b 00 00       	push   $0xb8d
f0128d51:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128d56:	e8 aa 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d5b:	e8 94 b0 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128d60:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d63:	74 17                	je     f0128d7c <test_kexpand+0x96c>
f0128d65:	83 ec 04             	sub    $0x4,%esp
f0128d68:	68 14 b6 13 f0       	push   $0xf013b614
f0128d6d:	68 8e 0b 00 00       	push   $0xb8e
f0128d72:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128d77:	e8 89 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d7c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d7f:	e8 e9 43 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128d84:	29 c3                	sub    %eax,%ebx
f0128d86:	89 d8                	mov    %ebx,%eax
f0128d88:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128d8d:	74 17                	je     f0128da6 <test_kexpand+0x996>
f0128d8f:	83 ec 04             	sub    $0x4,%esp
f0128d92:	68 7c b6 13 f0       	push   $0xf013b67c
f0128d97:	68 8f 0b 00 00       	push   $0xb8f
f0128d9c:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128da1:	e8 5f 74 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128da6:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128dad:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128db0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128db6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128dbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128dc3:	eb 1a                	jmp    f0128ddf <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128dc8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128dcf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128dd5:	01 c2                	add    %eax,%edx
f0128dd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128dda:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128ddc:	ff 45 f4             	incl   -0xc(%ebp)
f0128ddf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128de5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128de8:	7d db                	jge    f0128dc5 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128dea:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128df1:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128df4:	e8 74 43 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128df9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128dfc:	e8 f3 af fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128e01:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128e04:	83 ec 0c             	sub    $0xc,%esp
f0128e07:	68 00 00 70 00       	push   $0x700000
f0128e0c:	e8 d8 ee fd ff       	call   f0107ce9 <kexpand>
f0128e11:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128e14:	e8 db af fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128e19:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e1c:	74 19                	je     f0128e37 <test_kexpand+0xa27>
f0128e1e:	68 94 c3 13 f0       	push   $0xf013c394
f0128e23:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0128e28:	68 a0 0b 00 00       	push   $0xba0
f0128e2d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128e32:	e8 ce 73 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128e37:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e3a:	e8 2e 43 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128e3f:	29 c3                	sub    %eax,%ebx
f0128e41:	89 d8                	mov    %ebx,%eax
f0128e43:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128e48:	74 19                	je     f0128e63 <test_kexpand+0xa53>
f0128e4a:	68 dc c3 13 f0       	push   $0xf013c3dc
f0128e4f:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0128e54:	68 a1 0b 00 00       	push   $0xba1
f0128e59:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128e5e:	e8 a2 73 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128e63:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128e69:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128e6c:	eb 1a                	jmp    f0128e88 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128e6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e71:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128e78:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e7e:	01 c2                	add    %eax,%edx
f0128e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e83:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128e85:	ff 45 f4             	incl   -0xc(%ebp)
f0128e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e8b:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128e91:	7c db                	jl     f0128e6e <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128e93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e9a:	eb 37                	jmp    f0128ed3 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128ea6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128eac:	01 d0                	add    %edx,%eax
f0128eae:	8b 10                	mov    (%eax),%edx
f0128eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128eb3:	39 c2                	cmp    %eax,%edx
f0128eb5:	74 19                	je     f0128ed0 <test_kexpand+0xac0>
f0128eb7:	68 0c c4 13 f0       	push   $0xf013c40c
f0128ebc:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0128ec1:	68 ad 0b 00 00       	push   $0xbad
f0128ec6:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128ecb:	e8 35 73 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128ed0:	ff 45 f4             	incl   -0xc(%ebp)
f0128ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ed6:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128edc:	7c be                	jl     f0128e9c <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ede:	e8 8a 42 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128ee3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ee6:	e8 09 af fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128eeb:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128eee:	83 ec 0c             	sub    $0xc,%esp
f0128ef1:	68 00 00 a0 00       	push   $0xa00000
f0128ef6:	e8 ee ed fd ff       	call   f0107ce9 <kexpand>
f0128efb:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128efe:	e8 f1 ae fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128f03:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f06:	74 19                	je     f0128f21 <test_kexpand+0xb11>
f0128f08:	68 94 c3 13 f0       	push   $0xf013c394
f0128f0d:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0128f12:	68 b8 0b 00 00       	push   $0xbb8
f0128f17:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128f1c:	e8 e4 72 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128f21:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f24:	e8 44 42 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128f29:	29 c3                	sub    %eax,%ebx
f0128f2b:	89 d8                	mov    %ebx,%eax
f0128f2d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128f32:	74 19                	je     f0128f4d <test_kexpand+0xb3d>
f0128f34:	68 18 c4 13 f0       	push   $0xf013c418
f0128f39:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0128f3e:	68 b9 0b 00 00       	push   $0xbb9
f0128f43:	68 fa b5 13 f0       	push   $0xf013b5fa
f0128f48:	e8 b8 72 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f4d:	e8 1b 42 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0128f52:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f55:	e8 9a ae fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0128f5a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128f5d:	83 ec 0c             	sub    $0xc,%esp
f0128f60:	68 00 00 40 00       	push   $0x400000
f0128f65:	e8 fc ea fd ff       	call   f0107a66 <kmalloc>
f0128f6a:	83 c4 10             	add    $0x10,%esp
f0128f6d:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128f73:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128f79:	89 c1                	mov    %eax,%ecx
f0128f7b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128f82:	10 00 00 
f0128f85:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128f8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128f90:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128f96:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128f9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fa1:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128fa7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128fad:	29 d0                	sub    %edx,%eax
f0128faf:	89 c3                	mov    %eax,%ebx
f0128fb1:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128fb8:	10 00 00 
f0128fbb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128fc0:	0f b6 d0             	movzbl %al,%edx
f0128fc3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128fc9:	01 d0                	add    %edx,%eax
f0128fcb:	48                   	dec    %eax
f0128fcc:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128fd2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fdd:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128fe3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fe9:	29 d0                	sub    %edx,%eax
f0128feb:	01 c3                	add    %eax,%ebx
f0128fed:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128ff4:	10 00 00 
f0128ff7:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0128ffc:	0f b6 c0             	movzbl %al,%eax
f0128fff:	c1 e0 04             	shl    $0x4,%eax
f0129002:	89 c2                	mov    %eax,%edx
f0129004:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012900a:	01 d0                	add    %edx,%eax
f012900c:	48                   	dec    %eax
f012900d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129013:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129019:	ba 00 00 00 00       	mov    $0x0,%edx
f012901e:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129024:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012902a:	29 d0                	sub    %edx,%eax
f012902c:	01 d8                	add    %ebx,%eax
f012902e:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0129033:	39 c1                	cmp    %eax,%ecx
f0129035:	74 17                	je     f012904e <test_kexpand+0xc3e>
f0129037:	83 ec 04             	sub    $0x4,%esp
f012903a:	68 48 c4 13 f0       	push   $0xf013c448
f012903f:	68 c4 0b 00 00       	push   $0xbc4
f0129044:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129049:	e8 b7 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012904e:	e8 a1 ad fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129053:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129056:	74 17                	je     f012906f <test_kexpand+0xc5f>
f0129058:	83 ec 04             	sub    $0x4,%esp
f012905b:	68 14 b6 13 f0       	push   $0xf013b614
f0129060:	68 c5 0b 00 00       	push   $0xbc5
f0129065:	68 fa b5 13 f0       	push   $0xf013b5fa
f012906a:	e8 96 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012906f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129072:	e8 f6 40 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129077:	29 c3                	sub    %eax,%ebx
f0129079:	89 d8                	mov    %ebx,%eax
f012907b:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129080:	74 17                	je     f0129099 <test_kexpand+0xc89>
f0129082:	83 ec 04             	sub    $0x4,%esp
f0129085:	68 7c b6 13 f0       	push   $0xf013b67c
f012908a:	68 c6 0b 00 00       	push   $0xbc6
f012908f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129094:	e8 6c 71 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0129099:	e8 cf 40 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012909e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290a1:	e8 4e ad fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01290a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01290a9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01290af:	83 ec 0c             	sub    $0xc,%esp
f01290b2:	50                   	push   %eax
f01290b3:	e8 6e ea fd ff       	call   f0107b26 <kfree>
f01290b8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01290bb:	e8 34 ad fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01290c0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01290c3:	74 17                	je     f01290dc <test_kexpand+0xccc>
f01290c5:	83 ec 04             	sub    $0x4,%esp
f01290c8:	68 14 b6 13 f0       	push   $0xf013b614
f01290cd:	68 cf 0b 00 00       	push   $0xbcf
f01290d2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01290d7:	e8 29 71 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01290dc:	e8 8c 40 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01290e1:	89 c2                	mov    %eax,%edx
f01290e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01290e6:	29 c2                	sub    %eax,%edx
f01290e8:	89 d0                	mov    %edx,%eax
f01290ea:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01290ef:	74 17                	je     f0129108 <test_kexpand+0xcf8>
f01290f1:	83 ec 04             	sub    $0x4,%esp
f01290f4:	68 ac be 13 f0       	push   $0xf013beac
f01290f9:	68 d0 0b 00 00       	push   $0xbd0
f01290fe:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129103:	e8 fd 70 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129108:	e8 60 40 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012910d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129110:	e8 df ac fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129115:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0129118:	83 ec 0c             	sub    $0xc,%esp
f012911b:	68 00 50 40 00       	push   $0x405000
f0129120:	e8 c4 eb fd ff       	call   f0107ce9 <kexpand>
f0129125:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129128:	e8 c7 ac fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012912d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129130:	74 19                	je     f012914b <test_kexpand+0xd3b>
f0129132:	68 94 c3 13 f0       	push   $0xf013c394
f0129137:	68 c5 c3 13 f0       	push   $0xf013c3c5
f012913c:	68 da 0b 00 00       	push   $0xbda
f0129141:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129146:	e8 ba 70 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f012914b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012914e:	e8 1a 40 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129153:	29 c3                	sub    %eax,%ebx
f0129155:	89 d8                	mov    %ebx,%eax
f0129157:	83 f8 05             	cmp    $0x5,%eax
f012915a:	74 19                	je     f0129175 <test_kexpand+0xd65>
f012915c:	68 70 c4 13 f0       	push   $0xf013c470
f0129161:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129166:	68 db 0b 00 00       	push   $0xbdb
f012916b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129170:	e8 90 70 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129175:	83 ec 0c             	sub    $0xc,%esp
f0129178:	68 58 c3 13 f0       	push   $0xf013c358
f012917d:	e8 8c 7b fd ff       	call   f0100d0e <cprintf>
f0129182:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129185:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012918a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012918d:	5b                   	pop    %ebx
f012918e:	5f                   	pop    %edi
f012918f:	5d                   	pop    %ebp
f0129190:	c3                   	ret    

f0129191 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0129191:	55                   	push   %ebp
f0129192:	89 e5                	mov    %esp,%ebp
f0129194:	57                   	push   %edi
f0129195:	53                   	push   %ebx
f0129196:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f012919c:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01291a0:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01291a4:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01291aa:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01291b0:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01291b7:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01291be:	e8 aa 3f fe ff       	call   f010d16d <sys_calculate_free_frames>
f01291c3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01291c6:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01291cc:	b9 14 00 00 00       	mov    $0x14,%ecx
f01291d1:	b8 00 00 00 00       	mov    $0x0,%eax
f01291d6:	89 d7                	mov    %edx,%edi
f01291d8:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01291da:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01291e0:	b9 14 00 00 00       	mov    $0x14,%ecx
f01291e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01291ea:	89 d7                	mov    %edx,%edi
f01291ec:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01291ee:	e8 7a 3f fe ff       	call   f010d16d <sys_calculate_free_frames>
f01291f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291f6:	e8 f9 ab fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01291fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01291fe:	83 ec 0c             	sub    $0xc,%esp
f0129201:	68 00 fc 1f 00       	push   $0x1ffc00
f0129206:	e8 5b e8 fd ff       	call   f0107a66 <kmalloc>
f012920b:	83 c4 10             	add    $0x10,%esp
f012920e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129214:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012921a:	89 c1                	mov    %eax,%ecx
f012921c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0129223:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129226:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012922b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012922e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0129231:	ba 00 00 00 00       	mov    $0x0,%edx
f0129236:	f7 75 d4             	divl   -0x2c(%ebp)
f0129239:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012923c:	29 d0                	sub    %edx,%eax
f012923e:	89 c3                	mov    %eax,%ebx
f0129240:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129247:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012924c:	0f b6 d0             	movzbl %al,%edx
f012924f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129252:	01 d0                	add    %edx,%eax
f0129254:	48                   	dec    %eax
f0129255:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129258:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012925b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129260:	f7 75 cc             	divl   -0x34(%ebp)
f0129263:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129266:	29 d0                	sub    %edx,%eax
f0129268:	01 c3                	add    %eax,%ebx
f012926a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129271:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129276:	0f b6 c0             	movzbl %al,%eax
f0129279:	c1 e0 04             	shl    $0x4,%eax
f012927c:	89 c2                	mov    %eax,%edx
f012927e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129281:	01 d0                	add    %edx,%eax
f0129283:	48                   	dec    %eax
f0129284:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129287:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012928a:	ba 00 00 00 00       	mov    $0x0,%edx
f012928f:	f7 75 c4             	divl   -0x3c(%ebp)
f0129292:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129295:	29 d0                	sub    %edx,%eax
f0129297:	01 d8                	add    %ebx,%eax
f0129299:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012929e:	39 c1                	cmp    %eax,%ecx
f01292a0:	74 17                	je     f01292b9 <test_kshrink+0x128>
f01292a2:	83 ec 04             	sub    $0x4,%esp
f01292a5:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01292aa:	68 01 0c 00 00       	push   $0xc01
f01292af:	68 fa b5 13 f0       	push   $0xf013b5fa
f01292b4:	e8 4c 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01292b9:	e8 36 ab fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01292be:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292c1:	74 17                	je     f01292da <test_kshrink+0x149>
f01292c3:	83 ec 04             	sub    $0x4,%esp
f01292c6:	68 14 b6 13 f0       	push   $0xf013b614
f01292cb:	68 02 0c 00 00       	push   $0xc02
f01292d0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01292d5:	e8 2b 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292da:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01292dd:	e8 8b 3e fe ff       	call   f010d16d <sys_calculate_free_frames>
f01292e2:	29 c3                	sub    %eax,%ebx
f01292e4:	89 d8                	mov    %ebx,%eax
f01292e6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01292eb:	74 17                	je     f0129304 <test_kshrink+0x173>
f01292ed:	83 ec 04             	sub    $0x4,%esp
f01292f0:	68 7c b6 13 f0       	push   $0xf013b67c
f01292f5:	68 03 0c 00 00       	push   $0xc03
f01292fa:	68 fa b5 13 f0       	push   $0xf013b5fa
f01292ff:	e8 01 6f fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129304:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f012930b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012930e:	e8 5a 3e fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129313:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129316:	e8 d9 aa fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012931b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012931e:	83 ec 0c             	sub    $0xc,%esp
f0129321:	68 00 fc 1f 00       	push   $0x1ffc00
f0129326:	e8 3b e7 fd ff       	call   f0107a66 <kmalloc>
f012932b:	83 c4 10             	add    $0x10,%esp
f012932e:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129334:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012933a:	89 c1                	mov    %eax,%ecx
f012933c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129343:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129346:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012934b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012934e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129351:	ba 00 00 00 00       	mov    $0x0,%edx
f0129356:	f7 75 bc             	divl   -0x44(%ebp)
f0129359:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012935c:	29 d0                	sub    %edx,%eax
f012935e:	89 c3                	mov    %eax,%ebx
f0129360:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129367:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012936c:	0f b6 d0             	movzbl %al,%edx
f012936f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129372:	01 d0                	add    %edx,%eax
f0129374:	48                   	dec    %eax
f0129375:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129378:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012937b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129380:	f7 75 b4             	divl   -0x4c(%ebp)
f0129383:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129386:	29 d0                	sub    %edx,%eax
f0129388:	01 c3                	add    %eax,%ebx
f012938a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129391:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129396:	0f b6 c0             	movzbl %al,%eax
f0129399:	c1 e0 04             	shl    $0x4,%eax
f012939c:	89 c2                	mov    %eax,%edx
f012939e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01293a1:	01 d0                	add    %edx,%eax
f01293a3:	48                   	dec    %eax
f01293a4:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01293a7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01293aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01293af:	f7 75 ac             	divl   -0x54(%ebp)
f01293b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01293b5:	29 d0                	sub    %edx,%eax
f01293b7:	01 d8                	add    %ebx,%eax
f01293b9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01293be:	39 c1                	cmp    %eax,%ecx
f01293c0:	74 17                	je     f01293d9 <test_kshrink+0x248>
f01293c2:	83 ec 04             	sub    $0x4,%esp
f01293c5:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01293ca:	68 0a 0c 00 00       	push   $0xc0a
f01293cf:	68 fa b5 13 f0       	push   $0xf013b5fa
f01293d4:	e8 2c 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293d9:	e8 16 aa fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01293de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01293e1:	74 17                	je     f01293fa <test_kshrink+0x269>
f01293e3:	83 ec 04             	sub    $0x4,%esp
f01293e6:	68 14 b6 13 f0       	push   $0xf013b614
f01293eb:	68 0b 0c 00 00       	push   $0xc0b
f01293f0:	68 fa b5 13 f0       	push   $0xf013b5fa
f01293f5:	e8 0b 6e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293fa:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01293fd:	e8 6b 3d fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129402:	29 c3                	sub    %eax,%ebx
f0129404:	89 d8                	mov    %ebx,%eax
f0129406:	3d 00 02 00 00       	cmp    $0x200,%eax
f012940b:	74 17                	je     f0129424 <test_kshrink+0x293>
f012940d:	83 ec 04             	sub    $0x4,%esp
f0129410:	68 7c b6 13 f0       	push   $0xf013b67c
f0129415:	68 0c 0c 00 00       	push   $0xc0c
f012941a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012941f:	e8 e1 6d fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129424:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f012942b:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012942e:	e8 3a 3d fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129433:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129436:	e8 b9 a9 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012943b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012943e:	83 ec 0c             	sub    $0xc,%esp
f0129441:	68 00 08 00 00       	push   $0x800
f0129446:	e8 1b e6 fd ff       	call   f0107a66 <kmalloc>
f012944b:	83 c4 10             	add    $0x10,%esp
f012944e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129454:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012945a:	89 c1                	mov    %eax,%ecx
f012945c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129463:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129466:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012946b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012946e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129471:	ba 00 00 00 00       	mov    $0x0,%edx
f0129476:	f7 75 a4             	divl   -0x5c(%ebp)
f0129479:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012947c:	29 d0                	sub    %edx,%eax
f012947e:	89 c3                	mov    %eax,%ebx
f0129480:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129487:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012948c:	0f b6 d0             	movzbl %al,%edx
f012948f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129492:	01 d0                	add    %edx,%eax
f0129494:	48                   	dec    %eax
f0129495:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129498:	8b 45 98             	mov    -0x68(%ebp),%eax
f012949b:	ba 00 00 00 00       	mov    $0x0,%edx
f01294a0:	f7 75 9c             	divl   -0x64(%ebp)
f01294a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01294a6:	29 d0                	sub    %edx,%eax
f01294a8:	01 c3                	add    %eax,%ebx
f01294aa:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01294b1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01294b6:	0f b6 c0             	movzbl %al,%eax
f01294b9:	c1 e0 04             	shl    $0x4,%eax
f01294bc:	89 c2                	mov    %eax,%edx
f01294be:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01294c1:	01 d0                	add    %edx,%eax
f01294c3:	48                   	dec    %eax
f01294c4:	89 45 90             	mov    %eax,-0x70(%ebp)
f01294c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01294ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01294cf:	f7 75 94             	divl   -0x6c(%ebp)
f01294d2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01294d5:	29 d0                	sub    %edx,%eax
f01294d7:	01 d8                	add    %ebx,%eax
f01294d9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01294de:	39 c1                	cmp    %eax,%ecx
f01294e0:	74 17                	je     f01294f9 <test_kshrink+0x368>
f01294e2:	83 ec 04             	sub    $0x4,%esp
f01294e5:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01294ea:	68 13 0c 00 00       	push   $0xc13
f01294ef:	68 fa b5 13 f0       	push   $0xf013b5fa
f01294f4:	e8 0c 6d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294f9:	e8 f6 a8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01294fe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129501:	74 17                	je     f012951a <test_kshrink+0x389>
f0129503:	83 ec 04             	sub    $0x4,%esp
f0129506:	68 14 b6 13 f0       	push   $0xf013b614
f012950b:	68 14 0c 00 00       	push   $0xc14
f0129510:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129515:	e8 eb 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012951a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012951d:	e8 4b 3c fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129522:	29 c3                	sub    %eax,%ebx
f0129524:	89 d8                	mov    %ebx,%eax
f0129526:	83 f8 01             	cmp    $0x1,%eax
f0129529:	74 17                	je     f0129542 <test_kshrink+0x3b1>
f012952b:	83 ec 04             	sub    $0x4,%esp
f012952e:	68 7c b6 13 f0       	push   $0xf013b67c
f0129533:	68 15 0c 00 00       	push   $0xc15
f0129538:	68 fa b5 13 f0       	push   $0xf013b5fa
f012953d:	e8 c3 6c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129542:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0129549:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012954c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129552:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129555:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012955c:	eb 0e                	jmp    f012956c <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f012955e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129561:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129564:	01 d0                	add    %edx,%eax
f0129566:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129569:	ff 45 f4             	incl   -0xc(%ebp)
f012956c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129572:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129575:	7f e7                	jg     f012955e <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129577:	e8 f1 3b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012957c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012957f:	e8 70 a8 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129584:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129587:	83 ec 0c             	sub    $0xc,%esp
f012958a:	68 00 08 00 00       	push   $0x800
f012958f:	e8 d2 e4 fd ff       	call   f0107a66 <kmalloc>
f0129594:	83 c4 10             	add    $0x10,%esp
f0129597:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012959d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01295a3:	89 c1                	mov    %eax,%ecx
f01295a5:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01295ac:	8b 45 88             	mov    -0x78(%ebp),%eax
f01295af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01295b4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01295b7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01295ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01295bf:	f7 75 88             	divl   -0x78(%ebp)
f01295c2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01295c5:	29 d0                	sub    %edx,%eax
f01295c7:	89 c3                	mov    %eax,%ebx
f01295c9:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01295d0:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01295d5:	0f b6 d0             	movzbl %al,%edx
f01295d8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01295db:	01 d0                	add    %edx,%eax
f01295dd:	48                   	dec    %eax
f01295de:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01295e4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01295ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01295ef:	f7 75 80             	divl   -0x80(%ebp)
f01295f2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01295f8:	29 d0                	sub    %edx,%eax
f01295fa:	01 c3                	add    %eax,%ebx
f01295fc:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129603:	10 00 00 
f0129606:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012960b:	0f b6 c0             	movzbl %al,%eax
f012960e:	c1 e0 04             	shl    $0x4,%eax
f0129611:	89 c2                	mov    %eax,%edx
f0129613:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129619:	01 d0                	add    %edx,%eax
f012961b:	48                   	dec    %eax
f012961c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129622:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129628:	ba 00 00 00 00       	mov    $0x0,%edx
f012962d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129633:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129639:	29 d0                	sub    %edx,%eax
f012963b:	01 d8                	add    %ebx,%eax
f012963d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129642:	39 c1                	cmp    %eax,%ecx
f0129644:	74 17                	je     f012965d <test_kshrink+0x4cc>
f0129646:	83 ec 04             	sub    $0x4,%esp
f0129649:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012964e:	68 21 0c 00 00       	push   $0xc21
f0129653:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129658:	e8 a8 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012965d:	e8 92 a7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129662:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129665:	74 17                	je     f012967e <test_kshrink+0x4ed>
f0129667:	83 ec 04             	sub    $0x4,%esp
f012966a:	68 14 b6 13 f0       	push   $0xf013b614
f012966f:	68 22 0c 00 00       	push   $0xc22
f0129674:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129679:	e8 87 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012967e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129681:	e8 e7 3a fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129686:	29 c3                	sub    %eax,%ebx
f0129688:	89 d8                	mov    %ebx,%eax
f012968a:	83 f8 01             	cmp    $0x1,%eax
f012968d:	74 17                	je     f01296a6 <test_kshrink+0x515>
f012968f:	83 ec 04             	sub    $0x4,%esp
f0129692:	68 7c b6 13 f0       	push   $0xf013b67c
f0129697:	68 23 0c 00 00       	push   $0xc23
f012969c:	68 fa b5 13 f0       	push   $0xf013b5fa
f01296a1:	e8 5f 6b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01296a6:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f01296ad:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01296b0:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01296b6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01296b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296c0:	eb 0e                	jmp    f01296d0 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f01296c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01296c5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01296c8:	01 d0                	add    %edx,%eax
f01296ca:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01296cd:	ff 45 f4             	incl   -0xc(%ebp)
f01296d0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01296d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01296d9:	7f e7                	jg     f01296c2 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01296db:	e8 8d 3a fe ff       	call   f010d16d <sys_calculate_free_frames>
f01296e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296e3:	e8 0c a7 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01296e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01296eb:	83 ec 0c             	sub    $0xc,%esp
f01296ee:	68 00 1c 00 00       	push   $0x1c00
f01296f3:	e8 6e e3 fd ff       	call   f0107a66 <kmalloc>
f01296f8:	83 c4 10             	add    $0x10,%esp
f01296fb:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129701:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0129707:	89 c1                	mov    %eax,%ecx
f0129709:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129710:	10 00 00 
f0129713:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129719:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012971e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129724:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012972a:	ba 00 00 00 00       	mov    $0x0,%edx
f012972f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129735:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012973b:	29 d0                	sub    %edx,%eax
f012973d:	89 c3                	mov    %eax,%ebx
f012973f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129746:	10 00 00 
f0129749:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012974e:	0f b6 d0             	movzbl %al,%edx
f0129751:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129757:	01 d0                	add    %edx,%eax
f0129759:	48                   	dec    %eax
f012975a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129760:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129766:	ba 00 00 00 00       	mov    $0x0,%edx
f012976b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129771:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129777:	29 d0                	sub    %edx,%eax
f0129779:	01 c3                	add    %eax,%ebx
f012977b:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129782:	10 00 00 
f0129785:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012978a:	0f b6 c0             	movzbl %al,%eax
f012978d:	c1 e0 04             	shl    $0x4,%eax
f0129790:	89 c2                	mov    %eax,%edx
f0129792:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129798:	01 d0                	add    %edx,%eax
f012979a:	48                   	dec    %eax
f012979b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01297a1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01297a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01297ac:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01297b2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01297b8:	29 d0                	sub    %edx,%eax
f01297ba:	01 d8                	add    %ebx,%eax
f01297bc:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01297c1:	39 c1                	cmp    %eax,%ecx
f01297c3:	74 17                	je     f01297dc <test_kshrink+0x64b>
f01297c5:	83 ec 04             	sub    $0x4,%esp
f01297c8:	68 e0 b6 13 f0       	push   $0xf013b6e0
f01297cd:	68 2f 0c 00 00       	push   $0xc2f
f01297d2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01297d7:	e8 29 6a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297dc:	e8 13 a6 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01297e1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297e4:	74 17                	je     f01297fd <test_kshrink+0x66c>
f01297e6:	83 ec 04             	sub    $0x4,%esp
f01297e9:	68 14 b6 13 f0       	push   $0xf013b614
f01297ee:	68 30 0c 00 00       	push   $0xc30
f01297f3:	68 fa b5 13 f0       	push   $0xf013b5fa
f01297f8:	e8 08 6a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297fd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129800:	e8 68 39 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129805:	29 c3                	sub    %eax,%ebx
f0129807:	89 d8                	mov    %ebx,%eax
f0129809:	83 f8 02             	cmp    $0x2,%eax
f012980c:	74 17                	je     f0129825 <test_kshrink+0x694>
f012980e:	83 ec 04             	sub    $0x4,%esp
f0129811:	68 7c b6 13 f0       	push   $0xf013b67c
f0129816:	68 31 0c 00 00       	push   $0xc31
f012981b:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129820:	e8 e0 69 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129825:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f012982c:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012982f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0129835:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129838:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012983f:	eb 0e                	jmp    f012984f <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0129841:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129844:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129847:	01 d0                	add    %edx,%eax
f0129849:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012984c:	ff 45 f4             	incl   -0xc(%ebp)
f012984f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129855:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129858:	7f e7                	jg     f0129841 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012985a:	e8 0e 39 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012985f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129862:	e8 8d a5 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129867:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012986a:	83 ec 0c             	sub    $0xc,%esp
f012986d:	68 00 fc 2f 00       	push   $0x2ffc00
f0129872:	e8 ef e1 fd ff       	call   f0107a66 <kmalloc>
f0129877:	83 c4 10             	add    $0x10,%esp
f012987a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129880:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129886:	89 c1                	mov    %eax,%ecx
f0129888:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012988f:	10 00 00 
f0129892:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129898:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012989d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01298a3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01298ae:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01298b4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298ba:	29 d0                	sub    %edx,%eax
f01298bc:	89 c3                	mov    %eax,%ebx
f01298be:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01298c5:	10 00 00 
f01298c8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01298cd:	0f b6 d0             	movzbl %al,%edx
f01298d0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01298d6:	01 d0                	add    %edx,%eax
f01298d8:	48                   	dec    %eax
f01298d9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01298df:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01298e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01298ea:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01298f0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01298f6:	29 d0                	sub    %edx,%eax
f01298f8:	01 c3                	add    %eax,%ebx
f01298fa:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129901:	10 00 00 
f0129904:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129909:	0f b6 c0             	movzbl %al,%eax
f012990c:	c1 e0 04             	shl    $0x4,%eax
f012990f:	89 c2                	mov    %eax,%edx
f0129911:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129917:	01 d0                	add    %edx,%eax
f0129919:	48                   	dec    %eax
f012991a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129920:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129926:	ba 00 00 00 00       	mov    $0x0,%edx
f012992b:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129931:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129937:	29 d0                	sub    %edx,%eax
f0129939:	01 d8                	add    %ebx,%eax
f012993b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129940:	39 c1                	cmp    %eax,%ecx
f0129942:	74 17                	je     f012995b <test_kshrink+0x7ca>
f0129944:	83 ec 04             	sub    $0x4,%esp
f0129947:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012994c:	68 3d 0c 00 00       	push   $0xc3d
f0129951:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129956:	e8 aa 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012995b:	e8 94 a4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129960:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129963:	74 17                	je     f012997c <test_kshrink+0x7eb>
f0129965:	83 ec 04             	sub    $0x4,%esp
f0129968:	68 14 b6 13 f0       	push   $0xf013b614
f012996d:	68 3e 0c 00 00       	push   $0xc3e
f0129972:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129977:	e8 89 68 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012997c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012997f:	e8 e9 37 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129984:	29 c3                	sub    %eax,%ebx
f0129986:	89 d8                	mov    %ebx,%eax
f0129988:	3d 00 03 00 00       	cmp    $0x300,%eax
f012998d:	74 17                	je     f01299a6 <test_kshrink+0x815>
f012998f:	83 ec 04             	sub    $0x4,%esp
f0129992:	68 7c b6 13 f0       	push   $0xf013b67c
f0129997:	68 3f 0c 00 00       	push   $0xc3f
f012999c:	68 fa b5 13 f0       	push   $0xf013b5fa
f01299a1:	e8 5f 68 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01299a6:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f01299ad:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01299b0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01299b6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01299b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01299c0:	eb 0e                	jmp    f01299d0 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f01299c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01299c5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01299c8:	01 d0                	add    %edx,%eax
f01299ca:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01299cd:	ff 45 f4             	incl   -0xc(%ebp)
f01299d0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01299d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01299d9:	7f e7                	jg     f01299c2 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01299db:	e8 8d 37 fe ff       	call   f010d16d <sys_calculate_free_frames>
f01299e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299e3:	e8 0c a4 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01299e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01299eb:	83 ec 0c             	sub    $0xc,%esp
f01299ee:	68 00 00 60 00       	push   $0x600000
f01299f3:	e8 6e e0 fd ff       	call   f0107a66 <kmalloc>
f01299f8:	83 c4 10             	add    $0x10,%esp
f01299fb:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129a01:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129a07:	89 c1                	mov    %eax,%ecx
f0129a09:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129a10:	10 00 00 
f0129a13:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129a19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a1e:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129a24:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a2f:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129a35:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a3b:	29 d0                	sub    %edx,%eax
f0129a3d:	89 c3                	mov    %eax,%ebx
f0129a3f:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129a46:	10 00 00 
f0129a49:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129a4e:	0f b6 d0             	movzbl %al,%edx
f0129a51:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129a57:	01 d0                	add    %edx,%eax
f0129a59:	48                   	dec    %eax
f0129a5a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129a60:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129a66:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a6b:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129a71:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129a77:	29 d0                	sub    %edx,%eax
f0129a79:	01 c3                	add    %eax,%ebx
f0129a7b:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129a82:	10 00 00 
f0129a85:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129a8a:	0f b6 c0             	movzbl %al,%eax
f0129a8d:	c1 e0 04             	shl    $0x4,%eax
f0129a90:	89 c2                	mov    %eax,%edx
f0129a92:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129a98:	01 d0                	add    %edx,%eax
f0129a9a:	48                   	dec    %eax
f0129a9b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129aa1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129aa7:	ba 00 00 00 00       	mov    $0x0,%edx
f0129aac:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129ab2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129ab8:	29 d0                	sub    %edx,%eax
f0129aba:	01 d8                	add    %ebx,%eax
f0129abc:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129ac1:	39 c1                	cmp    %eax,%ecx
f0129ac3:	74 17                	je     f0129adc <test_kshrink+0x94b>
f0129ac5:	83 ec 04             	sub    $0x4,%esp
f0129ac8:	68 e0 b6 13 f0       	push   $0xf013b6e0
f0129acd:	68 4b 0c 00 00       	push   $0xc4b
f0129ad2:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129ad7:	e8 29 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129adc:	e8 13 a3 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129ae1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129ae4:	74 17                	je     f0129afd <test_kshrink+0x96c>
f0129ae6:	83 ec 04             	sub    $0x4,%esp
f0129ae9:	68 14 b6 13 f0       	push   $0xf013b614
f0129aee:	68 4c 0c 00 00       	push   $0xc4c
f0129af3:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129af8:	e8 08 67 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129afd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129b00:	e8 68 36 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129b05:	29 c3                	sub    %eax,%ebx
f0129b07:	89 d8                	mov    %ebx,%eax
f0129b09:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129b0e:	74 17                	je     f0129b27 <test_kshrink+0x996>
f0129b10:	83 ec 04             	sub    $0x4,%esp
f0129b13:	68 7c b6 13 f0       	push   $0xf013b67c
f0129b18:	68 4d 0c 00 00       	push   $0xc4d
f0129b1d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129b22:	e8 de 66 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129b27:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129b2e:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0129b31:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129b37:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129b3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b44:	eb 1a                	jmp    f0129b60 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b49:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129b50:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129b56:	01 c2                	add    %eax,%edx
f0129b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b5b:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129b5d:	ff 45 f4             	incl   -0xc(%ebp)
f0129b60:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129b66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b69:	7d db                	jge    f0129b46 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129b6b:	e8 fd 35 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129b70:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b73:	e8 7c a2 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129b78:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129b7b:	83 ec 0c             	sub    $0xc,%esp
f0129b7e:	68 00 00 50 00       	push   $0x500000
f0129b83:	e8 44 e1 fd ff       	call   f0107ccc <kshrink>
f0129b88:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129b8b:	e8 64 a2 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129b90:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129b93:	74 19                	je     f0129bae <test_kshrink+0xa1d>
f0129b95:	68 94 c3 13 f0       	push   $0xf013c394
f0129b9a:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129b9f:	68 5d 0c 00 00       	push   $0xc5d
f0129ba4:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129ba9:	e8 57 66 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0129bae:	e8 ba 35 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129bb3:	89 c2                	mov    %eax,%edx
f0129bb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129bb8:	29 c2                	sub    %eax,%edx
f0129bba:	89 d0                	mov    %edx,%eax
f0129bbc:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129bc1:	74 19                	je     f0129bdc <test_kshrink+0xa4b>
f0129bc3:	68 a0 c4 13 f0       	push   $0xf013c4a0
f0129bc8:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129bcd:	68 5e 0c 00 00       	push   $0xc5e
f0129bd2:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129bd7:	e8 29 66 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129bdc:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0129be3:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129be6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129bed:	eb 37                	jmp    f0129c26 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bf2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129bf9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129bff:	01 d0                	add    %edx,%eax
f0129c01:	8b 10                	mov    (%eax),%edx
f0129c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c06:	39 c2                	cmp    %eax,%edx
f0129c08:	74 19                	je     f0129c23 <test_kshrink+0xa92>
f0129c0a:	68 d0 c4 13 f0       	push   $0xf013c4d0
f0129c0f:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129c14:	68 66 0c 00 00       	push   $0xc66
f0129c19:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129c1e:	e8 e2 65 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129c23:	ff 45 f4             	incl   -0xc(%ebp)
f0129c26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c29:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129c2f:	7e be                	jle    f0129bef <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129c31:	83 ec 0c             	sub    $0xc,%esp
f0129c34:	6a 03                	push   $0x3
f0129c36:	e8 d2 39 fe ff       	call   f010d60d <sys_bypassPageFault>
f0129c3b:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129c3e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129c44:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129c47:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c4a:	05 00 00 50 00       	add    $0x500000,%eax
f0129c4f:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129c52:	e8 a4 39 fe ff       	call   f010d5fb <sys_rcr2>
f0129c57:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129c5a:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129c60:	39 d0                	cmp    %edx,%eax
f0129c62:	74 19                	je     f0129c7d <test_kshrink+0xaec>
f0129c64:	68 dc c4 13 f0       	push   $0xf013c4dc
f0129c69:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129c6e:	68 6f 0c 00 00       	push   $0xc6f
f0129c73:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129c78:	e8 88 65 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129c7d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c80:	05 00 10 50 00       	add    $0x501000,%eax
f0129c85:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129c88:	e8 6e 39 fe ff       	call   f010d5fb <sys_rcr2>
f0129c8d:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129c90:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129c96:	39 d0                	cmp    %edx,%eax
f0129c98:	74 19                	je     f0129cb3 <test_kshrink+0xb22>
f0129c9a:	68 04 c5 13 f0       	push   $0xf013c504
f0129c9f:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129ca4:	68 72 0c 00 00       	push   $0xc72
f0129ca9:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129cae:	e8 52 65 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129cb3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129cb6:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129cbb:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0129cbe:	e8 38 39 fe ff       	call   f010d5fb <sys_rcr2>
f0129cc3:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129cc6:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129ccc:	39 d0                	cmp    %edx,%eax
f0129cce:	74 19                	je     f0129ce9 <test_kshrink+0xb58>
f0129cd0:	68 30 c5 13 f0       	push   $0xf013c530
f0129cd5:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129cda:	68 75 0c 00 00       	push   $0xc75
f0129cdf:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129ce4:	e8 1c 65 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129ce9:	83 ec 0c             	sub    $0xc,%esp
f0129cec:	6a 00                	push   $0x0
f0129cee:	e8 1a 39 fe ff       	call   f010d60d <sys_bypassPageFault>
f0129cf3:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129cf6:	e8 72 34 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129cfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cfe:	e8 f1 a0 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129d03:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129d06:	83 ec 0c             	sub    $0xc,%esp
f0129d09:	68 00 00 20 00       	push   $0x200000
f0129d0e:	e8 b9 df fd ff       	call   f0107ccc <kshrink>
f0129d13:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129d16:	e8 d9 a0 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129d1b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129d1e:	74 19                	je     f0129d39 <test_kshrink+0xba8>
f0129d20:	68 94 c3 13 f0       	push   $0xf013c394
f0129d25:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129d2a:	68 82 0c 00 00       	push   $0xc82
f0129d2f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129d34:	e8 cc 64 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129d39:	e8 2f 34 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129d3e:	89 c2                	mov    %eax,%edx
f0129d40:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129d43:	29 c2                	sub    %eax,%edx
f0129d45:	89 d0                	mov    %edx,%eax
f0129d47:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129d4c:	74 19                	je     f0129d67 <test_kshrink+0xbd6>
f0129d4e:	68 5c c5 13 f0       	push   $0xf013c55c
f0129d53:	68 c5 c3 13 f0       	push   $0xf013c3c5
f0129d58:	68 83 0c 00 00       	push   $0xc83
f0129d5d:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129d62:	e8 9e 64 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d67:	e8 01 34 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129d6c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d6f:	e8 80 a0 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129d74:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129d77:	83 ec 0c             	sub    $0xc,%esp
f0129d7a:	68 00 00 40 00       	push   $0x400000
f0129d7f:	e8 e2 dc fd ff       	call   f0107a66 <kmalloc>
f0129d84:	83 c4 10             	add    $0x10,%esp
f0129d87:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129d8d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129d94:	10 00 00 
f0129d97:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129d9d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129da2:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129da8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129dae:	ba 00 00 00 00       	mov    $0x0,%edx
f0129db3:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129db9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129dbf:	29 d0                	sub    %edx,%eax
f0129dc1:	89 c1                	mov    %eax,%ecx
f0129dc3:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129dca:	10 00 00 
f0129dcd:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129dd2:	0f b6 d0             	movzbl %al,%edx
f0129dd5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129ddb:	01 d0                	add    %edx,%eax
f0129ddd:	48                   	dec    %eax
f0129dde:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129de4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129dea:	ba 00 00 00 00       	mov    $0x0,%edx
f0129def:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129df5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129dfb:	29 d0                	sub    %edx,%eax
f0129dfd:	01 c1                	add    %eax,%ecx
f0129dff:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129e06:	10 00 00 
f0129e09:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129e0e:	0f b6 c0             	movzbl %al,%eax
f0129e11:	c1 e0 04             	shl    $0x4,%eax
f0129e14:	89 c2                	mov    %eax,%edx
f0129e16:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129e1c:	01 d0                	add    %edx,%eax
f0129e1e:	48                   	dec    %eax
f0129e1f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129e25:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129e2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e30:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129e36:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129e3c:	29 d0                	sub    %edx,%eax
f0129e3e:	01 c8                	add    %ecx,%eax
f0129e40:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129e46:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129e4c:	83 ec 04             	sub    $0x4,%esp
f0129e4f:	52                   	push   %edx
f0129e50:	50                   	push   %eax
f0129e51:	68 8c c5 13 f0       	push   $0xf013c58c
f0129e56:	e8 b3 6e fd ff       	call   f0100d0e <cprintf>
f0129e5b:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129e5e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129e64:	89 c1                	mov    %eax,%ecx
f0129e66:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129e6d:	10 00 00 
f0129e70:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129e76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e7b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129e81:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129e87:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e8c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129e92:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129e98:	29 d0                	sub    %edx,%eax
f0129e9a:	89 c3                	mov    %eax,%ebx
f0129e9c:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129ea3:	10 00 00 
f0129ea6:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129eab:	0f b6 d0             	movzbl %al,%edx
f0129eae:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129eb4:	01 d0                	add    %edx,%eax
f0129eb6:	48                   	dec    %eax
f0129eb7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129ebd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129ec3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ec8:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129ece:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129ed4:	29 d0                	sub    %edx,%eax
f0129ed6:	01 c3                	add    %eax,%ebx
f0129ed8:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129edf:	10 00 00 
f0129ee2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0129ee7:	0f b6 c0             	movzbl %al,%eax
f0129eea:	c1 e0 04             	shl    $0x4,%eax
f0129eed:	89 c2                	mov    %eax,%edx
f0129eef:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129ef5:	01 d0                	add    %edx,%eax
f0129ef7:	48                   	dec    %eax
f0129ef8:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129efe:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f04:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f09:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129f0f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f15:	29 d0                	sub    %edx,%eax
f0129f17:	01 d8                	add    %ebx,%eax
f0129f19:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129f1e:	39 c1                	cmp    %eax,%ecx
f0129f20:	74 17                	je     f0129f39 <test_kshrink+0xda8>
f0129f22:	83 ec 04             	sub    $0x4,%esp
f0129f25:	68 a8 c5 13 f0       	push   $0xf013c5a8
f0129f2a:	68 8e 0c 00 00       	push   $0xc8e
f0129f2f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129f34:	e8 cc 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f39:	e8 b6 9e fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129f3e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129f41:	74 17                	je     f0129f5a <test_kshrink+0xdc9>
f0129f43:	83 ec 04             	sub    $0x4,%esp
f0129f46:	68 14 b6 13 f0       	push   $0xf013b614
f0129f4b:	68 8f 0c 00 00       	push   $0xc8f
f0129f50:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129f55:	e8 ab 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129f5a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129f5d:	e8 0b 32 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129f62:	29 c3                	sub    %eax,%ebx
f0129f64:	89 d8                	mov    %ebx,%eax
f0129f66:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129f6b:	74 17                	je     f0129f84 <test_kshrink+0xdf3>
f0129f6d:	83 ec 04             	sub    $0x4,%esp
f0129f70:	68 7c b6 13 f0       	push   $0xf013b67c
f0129f75:	68 90 0c 00 00       	push   $0xc90
f0129f7a:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129f7f:	e8 81 62 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129f84:	e8 e4 31 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129f89:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f8c:	e8 63 9e fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129f91:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129f94:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129f9a:	83 ec 0c             	sub    $0xc,%esp
f0129f9d:	50                   	push   %eax
f0129f9e:	e8 83 db fd ff       	call   f0107b26 <kfree>
f0129fa3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129fa6:	e8 49 9e fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0129fab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129fae:	74 17                	je     f0129fc7 <test_kshrink+0xe36>
f0129fb0:	83 ec 04             	sub    $0x4,%esp
f0129fb3:	68 14 b6 13 f0       	push   $0xf013b614
f0129fb8:	68 9a 0c 00 00       	push   $0xc9a
f0129fbd:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129fc2:	e8 3e 62 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129fc7:	e8 a1 31 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129fcc:	89 c2                	mov    %eax,%edx
f0129fce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129fd1:	29 c2                	sub    %eax,%edx
f0129fd3:	89 d0                	mov    %edx,%eax
f0129fd5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129fda:	74 17                	je     f0129ff3 <test_kshrink+0xe62>
f0129fdc:	83 ec 04             	sub    $0x4,%esp
f0129fdf:	68 ac be 13 f0       	push   $0xf013beac
f0129fe4:	68 9b 0c 00 00       	push   $0xc9b
f0129fe9:	68 fa b5 13 f0       	push   $0xf013b5fa
f0129fee:	e8 12 62 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129ff3:	e8 75 31 fe ff       	call   f010d16d <sys_calculate_free_frames>
f0129ff8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ffb:	e8 f4 9d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a000:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f012a003:	83 ec 0c             	sub    $0xc,%esp
f012a006:	68 00 b0 3f 00       	push   $0x3fb000
f012a00b:	e8 bc dc fd ff       	call   f0107ccc <kshrink>
f012a010:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012a013:	e8 dc 9d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a018:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012a01b:	74 19                	je     f012a036 <test_kshrink+0xea5>
f012a01d:	68 94 c3 13 f0       	push   $0xf013c394
f012a022:	68 c5 c3 13 f0       	push   $0xf013c3c5
f012a027:	68 a5 0c 00 00       	push   $0xca5
f012a02c:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a031:	e8 cf 61 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f012a036:	e8 32 31 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a03b:	89 c2                	mov    %eax,%edx
f012a03d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012a040:	29 c2                	sub    %eax,%edx
f012a042:	89 d0                	mov    %edx,%eax
f012a044:	83 f8 05             	cmp    $0x5,%eax
f012a047:	74 19                	je     f012a062 <test_kshrink+0xed1>
f012a049:	68 fc c5 13 f0       	push   $0xf013c5fc
f012a04e:	68 c5 c3 13 f0       	push   $0xf013c3c5
f012a053:	68 a6 0c 00 00       	push   $0xca6
f012a058:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a05d:	e8 a3 61 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012a062:	83 ec 0c             	sub    $0xc,%esp
f012a065:	68 58 c3 13 f0       	push   $0xf013c358
f012a06a:	e8 9f 6c fd ff       	call   f0100d0e <cprintf>
f012a06f:	83 c4 10             	add    $0x10,%esp

	return 1;
f012a072:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012a077:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012a07a:	5b                   	pop    %ebx
f012a07b:	5f                   	pop    %edi
f012a07c:	5d                   	pop    %ebp
f012a07d:	c3                   	ret    

f012a07e <test_kfreelast>:


int test_kfreelast()
{
f012a07e:	55                   	push   %ebp
f012a07f:	89 e5                	mov    %esp,%ebp
f012a081:	57                   	push   %edi
f012a082:	53                   	push   %ebx
f012a083:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012a089:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012a08d:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012a091:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f012a097:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012a09d:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f012a0a4:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012a0ab:	e8 bd 30 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a0b0:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012a0b3:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f012a0b9:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0be:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0c3:	89 d7                	mov    %edx,%edi
f012a0c5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012a0c7:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f012a0cd:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0d2:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0d7:	89 d7                	mov    %edx,%edi
f012a0d9:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012a0db:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f012a0e1:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0e6:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0eb:	89 d7                	mov    %edx,%edi
f012a0ed:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a0ef:	e8 79 30 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a0f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a0f7:	e8 f8 9c fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a0fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012a0ff:	83 ec 0c             	sub    $0xc,%esp
f012a102:	68 00 fc 1f 00       	push   $0x1ffc00
f012a107:	e8 5a d9 fd ff       	call   f0107a66 <kmalloc>
f012a10c:	83 c4 10             	add    $0x10,%esp
f012a10f:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a115:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a11b:	89 c1                	mov    %eax,%ecx
f012a11d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012a124:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012a127:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a12c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012a12f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a132:	ba 00 00 00 00       	mov    $0x0,%edx
f012a137:	f7 75 cc             	divl   -0x34(%ebp)
f012a13a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a13d:	29 d0                	sub    %edx,%eax
f012a13f:	89 c3                	mov    %eax,%ebx
f012a141:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012a148:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a14d:	0f b6 d0             	movzbl %al,%edx
f012a150:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012a153:	01 d0                	add    %edx,%eax
f012a155:	48                   	dec    %eax
f012a156:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012a159:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a15c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a161:	f7 75 c4             	divl   -0x3c(%ebp)
f012a164:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a167:	29 d0                	sub    %edx,%eax
f012a169:	01 c3                	add    %eax,%ebx
f012a16b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012a172:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a177:	0f b6 c0             	movzbl %al,%eax
f012a17a:	c1 e0 04             	shl    $0x4,%eax
f012a17d:	89 c2                	mov    %eax,%edx
f012a17f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012a182:	01 d0                	add    %edx,%eax
f012a184:	48                   	dec    %eax
f012a185:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012a188:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a18b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a190:	f7 75 bc             	divl   -0x44(%ebp)
f012a193:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a196:	29 d0                	sub    %edx,%eax
f012a198:	01 d8                	add    %ebx,%eax
f012a19a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a19f:	39 c1                	cmp    %eax,%ecx
f012a1a1:	74 17                	je     f012a1ba <test_kfreelast+0x13c>
f012a1a3:	83 ec 04             	sub    $0x4,%esp
f012a1a6:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012a1ab:	68 ca 0c 00 00       	push   $0xcca
f012a1b0:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a1b5:	e8 4b 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a1ba:	e8 35 9c fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a1bf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1c2:	74 17                	je     f012a1db <test_kfreelast+0x15d>
f012a1c4:	83 ec 04             	sub    $0x4,%esp
f012a1c7:	68 14 b6 13 f0       	push   $0xf013b614
f012a1cc:	68 cb 0c 00 00       	push   $0xccb
f012a1d1:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a1d6:	e8 2a 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a1db:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1de:	e8 8a 2f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a1e3:	29 c3                	sub    %eax,%ebx
f012a1e5:	89 d8                	mov    %ebx,%eax
f012a1e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a1ec:	74 17                	je     f012a205 <test_kfreelast+0x187>
f012a1ee:	83 ec 04             	sub    $0x4,%esp
f012a1f1:	68 7c b6 13 f0       	push   $0xf013b67c
f012a1f6:	68 cc 0c 00 00       	push   $0xccc
f012a1fb:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a200:	e8 00 60 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012a205:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012a20c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a20f:	e8 59 2f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a214:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a217:	e8 d8 9b fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a21c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012a21f:	83 ec 0c             	sub    $0xc,%esp
f012a222:	68 00 fc 1f 00       	push   $0x1ffc00
f012a227:	e8 3a d8 fd ff       	call   f0107a66 <kmalloc>
f012a22c:	83 c4 10             	add    $0x10,%esp
f012a22f:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a235:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a23b:	89 c1                	mov    %eax,%ecx
f012a23d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a244:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a247:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a24c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a24f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a252:	ba 00 00 00 00       	mov    $0x0,%edx
f012a257:	f7 75 b4             	divl   -0x4c(%ebp)
f012a25a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a25d:	29 d0                	sub    %edx,%eax
f012a25f:	89 c3                	mov    %eax,%ebx
f012a261:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a268:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a26d:	0f b6 d0             	movzbl %al,%edx
f012a270:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a273:	01 d0                	add    %edx,%eax
f012a275:	48                   	dec    %eax
f012a276:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a279:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a27c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a281:	f7 75 ac             	divl   -0x54(%ebp)
f012a284:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a287:	29 d0                	sub    %edx,%eax
f012a289:	01 c3                	add    %eax,%ebx
f012a28b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a292:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a297:	0f b6 c0             	movzbl %al,%eax
f012a29a:	c1 e0 04             	shl    $0x4,%eax
f012a29d:	89 c2                	mov    %eax,%edx
f012a29f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a2a2:	01 d0                	add    %edx,%eax
f012a2a4:	48                   	dec    %eax
f012a2a5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a2a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a2ab:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2b0:	f7 75 a4             	divl   -0x5c(%ebp)
f012a2b3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a2b6:	29 d0                	sub    %edx,%eax
f012a2b8:	01 d8                	add    %ebx,%eax
f012a2ba:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a2bf:	39 c1                	cmp    %eax,%ecx
f012a2c1:	74 17                	je     f012a2da <test_kfreelast+0x25c>
f012a2c3:	83 ec 04             	sub    $0x4,%esp
f012a2c6:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012a2cb:	68 d3 0c 00 00       	push   $0xcd3
f012a2d0:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a2d5:	e8 2b 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2da:	e8 15 9b fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a2df:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2e2:	74 17                	je     f012a2fb <test_kfreelast+0x27d>
f012a2e4:	83 ec 04             	sub    $0x4,%esp
f012a2e7:	68 14 b6 13 f0       	push   $0xf013b614
f012a2ec:	68 d4 0c 00 00       	push   $0xcd4
f012a2f1:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a2f6:	e8 0a 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a2fb:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a2fe:	e8 6a 2e fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a303:	29 c3                	sub    %eax,%ebx
f012a305:	89 d8                	mov    %ebx,%eax
f012a307:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a30c:	74 17                	je     f012a325 <test_kfreelast+0x2a7>
f012a30e:	83 ec 04             	sub    $0x4,%esp
f012a311:	68 7c b6 13 f0       	push   $0xf013b67c
f012a316:	68 d5 0c 00 00       	push   $0xcd5
f012a31b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a320:	e8 e0 5e fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012a325:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f012a32c:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a32f:	e8 39 2e fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a334:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a337:	e8 b8 9a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a33c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012a33f:	83 ec 0c             	sub    $0xc,%esp
f012a342:	68 00 08 00 00       	push   $0x800
f012a347:	e8 1a d7 fd ff       	call   f0107a66 <kmalloc>
f012a34c:	83 c4 10             	add    $0x10,%esp
f012a34f:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a355:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a35b:	89 c1                	mov    %eax,%ecx
f012a35d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a364:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a367:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a36c:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a36f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a372:	ba 00 00 00 00       	mov    $0x0,%edx
f012a377:	f7 75 9c             	divl   -0x64(%ebp)
f012a37a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a37d:	29 d0                	sub    %edx,%eax
f012a37f:	89 c3                	mov    %eax,%ebx
f012a381:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a388:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a38d:	0f b6 d0             	movzbl %al,%edx
f012a390:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a393:	01 d0                	add    %edx,%eax
f012a395:	48                   	dec    %eax
f012a396:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a399:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a39c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3a1:	f7 75 94             	divl   -0x6c(%ebp)
f012a3a4:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a3a7:	29 d0                	sub    %edx,%eax
f012a3a9:	01 c3                	add    %eax,%ebx
f012a3ab:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a3b2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a3b7:	0f b6 c0             	movzbl %al,%eax
f012a3ba:	c1 e0 04             	shl    $0x4,%eax
f012a3bd:	89 c2                	mov    %eax,%edx
f012a3bf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a3c2:	01 d0                	add    %edx,%eax
f012a3c4:	48                   	dec    %eax
f012a3c5:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a3c8:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a3cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3d0:	f7 75 8c             	divl   -0x74(%ebp)
f012a3d3:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a3d6:	29 d0                	sub    %edx,%eax
f012a3d8:	01 d8                	add    %ebx,%eax
f012a3da:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a3df:	39 c1                	cmp    %eax,%ecx
f012a3e1:	74 17                	je     f012a3fa <test_kfreelast+0x37c>
f012a3e3:	83 ec 04             	sub    $0x4,%esp
f012a3e6:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012a3eb:	68 dc 0c 00 00       	push   $0xcdc
f012a3f0:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a3f5:	e8 0b 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3fa:	e8 f5 99 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a3ff:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a402:	74 17                	je     f012a41b <test_kfreelast+0x39d>
f012a404:	83 ec 04             	sub    $0x4,%esp
f012a407:	68 14 b6 13 f0       	push   $0xf013b614
f012a40c:	68 dd 0c 00 00       	push   $0xcdd
f012a411:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a416:	e8 ea 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a41b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a41e:	e8 4a 2d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a423:	29 c3                	sub    %eax,%ebx
f012a425:	89 d8                	mov    %ebx,%eax
f012a427:	83 f8 01             	cmp    $0x1,%eax
f012a42a:	74 17                	je     f012a443 <test_kfreelast+0x3c5>
f012a42c:	83 ec 04             	sub    $0x4,%esp
f012a42f:	68 7c b6 13 f0       	push   $0xf013b67c
f012a434:	68 de 0c 00 00       	push   $0xcde
f012a439:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a43e:	e8 c2 5d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a443:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a44a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a44d:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a453:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a45d:	eb 0e                	jmp    f012a46d <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a45f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a462:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a465:	01 d0                	add    %edx,%eax
f012a467:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a46a:	ff 45 f4             	incl   -0xc(%ebp)
f012a46d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a473:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a476:	7f e7                	jg     f012a45f <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a478:	e8 f0 2c fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a47d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a480:	e8 6f 99 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a485:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a488:	83 ec 0c             	sub    $0xc,%esp
f012a48b:	68 00 08 00 00       	push   $0x800
f012a490:	e8 d1 d5 fd ff       	call   f0107a66 <kmalloc>
f012a495:	83 c4 10             	add    $0x10,%esp
f012a498:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a49e:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a4a4:	89 c1                	mov    %eax,%ecx
f012a4a6:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a4ad:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a4b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a4b5:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a4bb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a4c1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4c6:	f7 75 80             	divl   -0x80(%ebp)
f012a4c9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a4cf:	29 d0                	sub    %edx,%eax
f012a4d1:	89 c3                	mov    %eax,%ebx
f012a4d3:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a4da:	10 00 00 
f012a4dd:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a4e2:	0f b6 d0             	movzbl %al,%edx
f012a4e5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a4eb:	01 d0                	add    %edx,%eax
f012a4ed:	48                   	dec    %eax
f012a4ee:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a4f4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a4fa:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4ff:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a505:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a50b:	29 d0                	sub    %edx,%eax
f012a50d:	01 c3                	add    %eax,%ebx
f012a50f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a516:	10 00 00 
f012a519:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a51e:	0f b6 c0             	movzbl %al,%eax
f012a521:	c1 e0 04             	shl    $0x4,%eax
f012a524:	89 c2                	mov    %eax,%edx
f012a526:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a52c:	01 d0                	add    %edx,%eax
f012a52e:	48                   	dec    %eax
f012a52f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a535:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a53b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a540:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a546:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a54c:	29 d0                	sub    %edx,%eax
f012a54e:	01 d8                	add    %ebx,%eax
f012a550:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a555:	39 c1                	cmp    %eax,%ecx
f012a557:	74 17                	je     f012a570 <test_kfreelast+0x4f2>
f012a559:	83 ec 04             	sub    $0x4,%esp
f012a55c:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012a561:	68 ea 0c 00 00       	push   $0xcea
f012a566:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a56b:	e8 95 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a570:	e8 7f 98 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a575:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a578:	74 17                	je     f012a591 <test_kfreelast+0x513>
f012a57a:	83 ec 04             	sub    $0x4,%esp
f012a57d:	68 14 b6 13 f0       	push   $0xf013b614
f012a582:	68 eb 0c 00 00       	push   $0xceb
f012a587:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a58c:	e8 74 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a591:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a594:	e8 d4 2b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a599:	29 c3                	sub    %eax,%ebx
f012a59b:	89 d8                	mov    %ebx,%eax
f012a59d:	83 f8 01             	cmp    $0x1,%eax
f012a5a0:	74 17                	je     f012a5b9 <test_kfreelast+0x53b>
f012a5a2:	83 ec 04             	sub    $0x4,%esp
f012a5a5:	68 7c b6 13 f0       	push   $0xf013b67c
f012a5aa:	68 ec 0c 00 00       	push   $0xcec
f012a5af:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a5b4:	e8 4c 5c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a5b9:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a5c0:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a5c3:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a5c9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a5cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a5d3:	eb 0e                	jmp    f012a5e3 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a5d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a5d8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a5db:	01 d0                	add    %edx,%eax
f012a5dd:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a5e0:	ff 45 f4             	incl   -0xc(%ebp)
f012a5e3:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a5e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a5ec:	7f e7                	jg     f012a5d5 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a5ee:	e8 7a 2b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a5f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5f6:	e8 f9 97 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a5fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a5fe:	83 ec 0c             	sub    $0xc,%esp
f012a601:	68 00 1c 00 00       	push   $0x1c00
f012a606:	e8 5b d4 fd ff       	call   f0107a66 <kmalloc>
f012a60b:	83 c4 10             	add    $0x10,%esp
f012a60e:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a614:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a61a:	89 c1                	mov    %eax,%ecx
f012a61c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a623:	10 00 00 
f012a626:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a62c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a631:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a637:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a63d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a642:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a648:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a64e:	29 d0                	sub    %edx,%eax
f012a650:	89 c3                	mov    %eax,%ebx
f012a652:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a659:	10 00 00 
f012a65c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a661:	0f b6 d0             	movzbl %al,%edx
f012a664:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a66a:	01 d0                	add    %edx,%eax
f012a66c:	48                   	dec    %eax
f012a66d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a673:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a679:	ba 00 00 00 00       	mov    $0x0,%edx
f012a67e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a684:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a68a:	29 d0                	sub    %edx,%eax
f012a68c:	01 c3                	add    %eax,%ebx
f012a68e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a695:	10 00 00 
f012a698:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a69d:	0f b6 c0             	movzbl %al,%eax
f012a6a0:	c1 e0 04             	shl    $0x4,%eax
f012a6a3:	89 c2                	mov    %eax,%edx
f012a6a5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a6ab:	01 d0                	add    %edx,%eax
f012a6ad:	48                   	dec    %eax
f012a6ae:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a6b4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a6ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6bf:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a6c5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a6cb:	29 d0                	sub    %edx,%eax
f012a6cd:	01 d8                	add    %ebx,%eax
f012a6cf:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a6d4:	39 c1                	cmp    %eax,%ecx
f012a6d6:	74 17                	je     f012a6ef <test_kfreelast+0x671>
f012a6d8:	83 ec 04             	sub    $0x4,%esp
f012a6db:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012a6e0:	68 f8 0c 00 00       	push   $0xcf8
f012a6e5:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a6ea:	e8 16 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a6ef:	e8 00 97 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a6f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a6f7:	74 17                	je     f012a710 <test_kfreelast+0x692>
f012a6f9:	83 ec 04             	sub    $0x4,%esp
f012a6fc:	68 14 b6 13 f0       	push   $0xf013b614
f012a701:	68 f9 0c 00 00       	push   $0xcf9
f012a706:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a70b:	e8 f5 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a710:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a713:	e8 55 2a fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a718:	29 c3                	sub    %eax,%ebx
f012a71a:	89 d8                	mov    %ebx,%eax
f012a71c:	83 f8 02             	cmp    $0x2,%eax
f012a71f:	74 17                	je     f012a738 <test_kfreelast+0x6ba>
f012a721:	83 ec 04             	sub    $0x4,%esp
f012a724:	68 7c b6 13 f0       	push   $0xf013b67c
f012a729:	68 fa 0c 00 00       	push   $0xcfa
f012a72e:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a733:	e8 cd 5a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a738:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a73f:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a742:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a748:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a74b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a752:	eb 0e                	jmp    f012a762 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a754:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a757:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a75a:	01 d0                	add    %edx,%eax
f012a75c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a75f:	ff 45 f4             	incl   -0xc(%ebp)
f012a762:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a768:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a76b:	7f e7                	jg     f012a754 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a76d:	e8 fb 29 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a772:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a775:	e8 7a 96 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a77a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a77d:	83 ec 0c             	sub    $0xc,%esp
f012a780:	68 00 fc 2f 00       	push   $0x2ffc00
f012a785:	e8 dc d2 fd ff       	call   f0107a66 <kmalloc>
f012a78a:	83 c4 10             	add    $0x10,%esp
f012a78d:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a793:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a799:	89 c1                	mov    %eax,%ecx
f012a79b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a7a2:	10 00 00 
f012a7a5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a7ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a7b0:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a7b6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a7bc:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7c1:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a7c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a7cd:	29 d0                	sub    %edx,%eax
f012a7cf:	89 c3                	mov    %eax,%ebx
f012a7d1:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a7d8:	10 00 00 
f012a7db:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a7e0:	0f b6 d0             	movzbl %al,%edx
f012a7e3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a7e9:	01 d0                	add    %edx,%eax
f012a7eb:	48                   	dec    %eax
f012a7ec:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a7f2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a7f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7fd:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a803:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a809:	29 d0                	sub    %edx,%eax
f012a80b:	01 c3                	add    %eax,%ebx
f012a80d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a814:	10 00 00 
f012a817:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a81c:	0f b6 c0             	movzbl %al,%eax
f012a81f:	c1 e0 04             	shl    $0x4,%eax
f012a822:	89 c2                	mov    %eax,%edx
f012a824:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a82a:	01 d0                	add    %edx,%eax
f012a82c:	48                   	dec    %eax
f012a82d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a833:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a839:	ba 00 00 00 00       	mov    $0x0,%edx
f012a83e:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a844:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a84a:	29 d0                	sub    %edx,%eax
f012a84c:	01 d8                	add    %ebx,%eax
f012a84e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a853:	39 c1                	cmp    %eax,%ecx
f012a855:	74 17                	je     f012a86e <test_kfreelast+0x7f0>
f012a857:	83 ec 04             	sub    $0x4,%esp
f012a85a:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012a85f:	68 06 0d 00 00       	push   $0xd06
f012a864:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a869:	e8 97 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a86e:	e8 81 95 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a873:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a876:	74 17                	je     f012a88f <test_kfreelast+0x811>
f012a878:	83 ec 04             	sub    $0x4,%esp
f012a87b:	68 14 b6 13 f0       	push   $0xf013b614
f012a880:	68 07 0d 00 00       	push   $0xd07
f012a885:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a88a:	e8 76 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a88f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a892:	e8 d6 28 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a897:	29 c3                	sub    %eax,%ebx
f012a899:	89 d8                	mov    %ebx,%eax
f012a89b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a8a0:	74 17                	je     f012a8b9 <test_kfreelast+0x83b>
f012a8a2:	83 ec 04             	sub    $0x4,%esp
f012a8a5:	68 7c b6 13 f0       	push   $0xf013b67c
f012a8aa:	68 08 0d 00 00       	push   $0xd08
f012a8af:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a8b4:	e8 4c 59 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a8b9:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a8c0:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a8c3:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a8c9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a8cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8d3:	eb 0e                	jmp    f012a8e3 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a8d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8d8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8db:	01 d0                	add    %edx,%eax
f012a8dd:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a8e0:	ff 45 f4             	incl   -0xc(%ebp)
f012a8e3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a8e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a8ec:	7f e7                	jg     f012a8d5 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8ee:	e8 7a 28 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012a8f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8f6:	e8 f9 94 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a8fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a8fe:	83 ec 0c             	sub    $0xc,%esp
f012a901:	68 00 fc 5f 00       	push   $0x5ffc00
f012a906:	e8 5b d1 fd ff       	call   f0107a66 <kmalloc>
f012a90b:	83 c4 10             	add    $0x10,%esp
f012a90e:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a914:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a91a:	89 c1                	mov    %eax,%ecx
f012a91c:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a923:	10 00 00 
f012a926:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a92c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a931:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a937:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a93d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a942:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a948:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a94e:	29 d0                	sub    %edx,%eax
f012a950:	89 c3                	mov    %eax,%ebx
f012a952:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a959:	10 00 00 
f012a95c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a961:	0f b6 d0             	movzbl %al,%edx
f012a964:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a96a:	01 d0                	add    %edx,%eax
f012a96c:	48                   	dec    %eax
f012a96d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a973:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a979:	ba 00 00 00 00       	mov    $0x0,%edx
f012a97e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a984:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a98a:	29 d0                	sub    %edx,%eax
f012a98c:	01 c3                	add    %eax,%ebx
f012a98e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a995:	10 00 00 
f012a998:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012a99d:	0f b6 c0             	movzbl %al,%eax
f012a9a0:	c1 e0 04             	shl    $0x4,%eax
f012a9a3:	89 c2                	mov    %eax,%edx
f012a9a5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a9ab:	01 d0                	add    %edx,%eax
f012a9ad:	48                   	dec    %eax
f012a9ae:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a9b4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a9ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9bf:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a9c5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a9cb:	29 d0                	sub    %edx,%eax
f012a9cd:	01 d8                	add    %ebx,%eax
f012a9cf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a9d4:	39 c1                	cmp    %eax,%ecx
f012a9d6:	74 17                	je     f012a9ef <test_kfreelast+0x971>
f012a9d8:	83 ec 04             	sub    $0x4,%esp
f012a9db:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012a9e0:	68 14 0d 00 00       	push   $0xd14
f012a9e5:	68 fa b5 13 f0       	push   $0xf013b5fa
f012a9ea:	e8 16 58 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a9ef:	e8 00 94 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012a9f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9f7:	74 17                	je     f012aa10 <test_kfreelast+0x992>
f012a9f9:	83 ec 04             	sub    $0x4,%esp
f012a9fc:	68 14 b6 13 f0       	push   $0xf013b614
f012aa01:	68 15 0d 00 00       	push   $0xd15
f012aa06:	68 fa b5 13 f0       	push   $0xf013b5fa
f012aa0b:	e8 f5 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aa10:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa13:	e8 55 27 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012aa18:	29 c3                	sub    %eax,%ebx
f012aa1a:	89 d8                	mov    %ebx,%eax
f012aa1c:	3d 00 06 00 00       	cmp    $0x600,%eax
f012aa21:	74 17                	je     f012aa3a <test_kfreelast+0x9bc>
f012aa23:	83 ec 04             	sub    $0x4,%esp
f012aa26:	68 7c b6 13 f0       	push   $0xf013b67c
f012aa2b:	68 16 0d 00 00       	push   $0xd16
f012aa30:	68 fa b5 13 f0       	push   $0xf013b5fa
f012aa35:	e8 cb 57 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012aa3a:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012aa41:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa44:	e8 24 27 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012aa49:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa4c:	e8 a3 93 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012aa51:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012aa54:	83 ec 0c             	sub    $0xc,%esp
f012aa57:	68 00 38 00 00       	push   $0x3800
f012aa5c:	e8 05 d0 fd ff       	call   f0107a66 <kmalloc>
f012aa61:	83 c4 10             	add    $0x10,%esp
f012aa64:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aa6a:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aa70:	89 c1                	mov    %eax,%ecx
f012aa72:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012aa79:	10 00 00 
f012aa7c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aa82:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aa87:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012aa8d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012aa93:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa98:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012aa9e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012aaa4:	29 d0                	sub    %edx,%eax
f012aaa6:	89 c3                	mov    %eax,%ebx
f012aaa8:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012aaaf:	10 00 00 
f012aab2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012aab7:	0f b6 d0             	movzbl %al,%edx
f012aaba:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012aac0:	01 d0                	add    %edx,%eax
f012aac2:	48                   	dec    %eax
f012aac3:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012aac9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012aacf:	ba 00 00 00 00       	mov    $0x0,%edx
f012aad4:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012aada:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012aae0:	29 d0                	sub    %edx,%eax
f012aae2:	01 c3                	add    %eax,%ebx
f012aae4:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012aaeb:	10 00 00 
f012aaee:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012aaf3:	0f b6 c0             	movzbl %al,%eax
f012aaf6:	c1 e0 04             	shl    $0x4,%eax
f012aaf9:	89 c2                	mov    %eax,%edx
f012aafb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ab01:	01 d0                	add    %edx,%eax
f012ab03:	48                   	dec    %eax
f012ab04:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012ab0a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ab10:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab15:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012ab1b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ab21:	29 d0                	sub    %edx,%eax
f012ab23:	01 d8                	add    %ebx,%eax
f012ab25:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012ab2a:	39 c1                	cmp    %eax,%ecx
f012ab2c:	74 17                	je     f012ab45 <test_kfreelast+0xac7>
f012ab2e:	83 ec 04             	sub    $0x4,%esp
f012ab31:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012ab36:	68 1d 0d 00 00       	push   $0xd1d
f012ab3b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ab40:	e8 c0 56 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ab45:	e8 aa 92 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ab4a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab4d:	74 17                	je     f012ab66 <test_kfreelast+0xae8>
f012ab4f:	83 ec 04             	sub    $0x4,%esp
f012ab52:	68 14 b6 13 f0       	push   $0xf013b614
f012ab57:	68 1e 0d 00 00       	push   $0xd1e
f012ab5c:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ab61:	e8 9f 56 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ab66:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ab69:	e8 ff 25 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ab6e:	29 c3                	sub    %eax,%ebx
f012ab70:	89 d8                	mov    %ebx,%eax
f012ab72:	83 f8 04             	cmp    $0x4,%eax
f012ab75:	74 17                	je     f012ab8e <test_kfreelast+0xb10>
f012ab77:	83 ec 04             	sub    $0x4,%esp
f012ab7a:	68 7c b6 13 f0       	push   $0xf013b67c
f012ab7f:	68 1f 0d 00 00       	push   $0xd1f
f012ab84:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ab89:	e8 77 56 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012ab8e:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012ab95:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012ab98:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ab9e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aba1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aba8:	eb 0e                	jmp    f012abb8 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012abaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012abad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012abb0:	01 d0                	add    %edx,%eax
f012abb2:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012abb5:	ff 45 f4             	incl   -0xc(%ebp)
f012abb8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012abbe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012abc1:	7f e7                	jg     f012abaa <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012abc3:	e8 a5 25 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012abc8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012abce:	e8 21 92 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012abd3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012abd9:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012abdf:	83 ec 0c             	sub    $0xc,%esp
f012abe2:	50                   	push   %eax
f012abe3:	e8 3e cf fd ff       	call   f0107b26 <kfree>
f012abe8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012abeb:	e8 04 92 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012abf0:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012abf6:	74 17                	je     f012ac0f <test_kfreelast+0xb91>
f012abf8:	83 ec 04             	sub    $0x4,%esp
f012abfb:	68 14 b6 13 f0       	push   $0xf013b614
f012ac00:	68 2e 0d 00 00       	push   $0xd2e
f012ac05:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ac0a:	e8 f6 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012ac0f:	e8 59 25 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ac14:	89 c2                	mov    %eax,%edx
f012ac16:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ac1c:	29 c2                	sub    %eax,%edx
f012ac1e:	89 d0                	mov    %edx,%eax
f012ac20:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ac25:	74 17                	je     f012ac3e <test_kfreelast+0xbc0>
f012ac27:	83 ec 04             	sub    $0x4,%esp
f012ac2a:	68 84 bd 13 f0       	push   $0xf013bd84
f012ac2f:	68 2f 0d 00 00       	push   $0xd2f
f012ac34:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ac39:	e8 c7 55 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac3e:	e8 2a 25 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ac43:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac49:	e8 a6 91 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ac4e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012ac54:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012ac5a:	83 ec 0c             	sub    $0xc,%esp
f012ac5d:	50                   	push   %eax
f012ac5e:	e8 c3 ce fd ff       	call   f0107b26 <kfree>
f012ac63:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac66:	e8 89 91 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ac6b:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ac71:	74 17                	je     f012ac8a <test_kfreelast+0xc0c>
f012ac73:	83 ec 04             	sub    $0x4,%esp
f012ac76:	68 14 b6 13 f0       	push   $0xf013b614
f012ac7b:	68 35 0d 00 00       	push   $0xd35
f012ac80:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ac85:	e8 7b 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012ac8a:	e8 de 24 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ac8f:	89 c2                	mov    %eax,%edx
f012ac91:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ac97:	29 c2                	sub    %eax,%edx
f012ac99:	89 d0                	mov    %edx,%eax
f012ac9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f012aca0:	74 17                	je     f012acb9 <test_kfreelast+0xc3b>
f012aca2:	83 ec 04             	sub    $0x4,%esp
f012aca5:	68 84 bd 13 f0       	push   $0xf013bd84
f012acaa:	68 36 0d 00 00       	push   $0xd36
f012acaf:	68 fa b5 13 f0       	push   $0xf013b5fa
f012acb4:	e8 4c 55 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012acb9:	e8 af 24 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012acbe:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acc4:	e8 2b 91 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012acc9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012accf:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012acd5:	83 ec 0c             	sub    $0xc,%esp
f012acd8:	50                   	push   %eax
f012acd9:	e8 48 ce fd ff       	call   f0107b26 <kfree>
f012acde:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ace1:	e8 0e 91 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ace6:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012acec:	74 17                	je     f012ad05 <test_kfreelast+0xc87>
f012acee:	83 ec 04             	sub    $0x4,%esp
f012acf1:	68 14 b6 13 f0       	push   $0xf013b614
f012acf6:	68 3c 0d 00 00       	push   $0xd3c
f012acfb:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ad00:	e8 00 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012ad05:	e8 63 24 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ad0a:	89 c2                	mov    %eax,%edx
f012ad0c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ad12:	29 c2                	sub    %eax,%edx
f012ad14:	89 d0                	mov    %edx,%eax
f012ad16:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ad1b:	74 17                	je     f012ad34 <test_kfreelast+0xcb6>
f012ad1d:	83 ec 04             	sub    $0x4,%esp
f012ad20:	68 84 bd 13 f0       	push   $0xf013bd84
f012ad25:	68 3d 0d 00 00       	push   $0xd3d
f012ad2a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ad2f:	e8 d1 54 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012ad34:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ad3a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012ad3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad44:	eb 1e                	jmp    f012ad64 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012ad46:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ad4c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ad4f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad52:	01 c8                	add    %ecx,%eax
f012ad54:	8a 00                	mov    (%eax),%al
f012ad56:	0f be c0             	movsbl %al,%eax
f012ad59:	01 d0                	add    %edx,%eax
f012ad5b:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012ad61:	ff 45 f4             	incl   -0xc(%ebp)
f012ad64:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ad6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad6d:	7f d7                	jg     f012ad46 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012ad6f:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ad75:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ad7b:	01 c0                	add    %eax,%eax
f012ad7d:	39 c2                	cmp    %eax,%edx
f012ad7f:	74 17                	je     f012ad98 <test_kfreelast+0xd1a>
f012ad81:	83 ec 04             	sub    $0x4,%esp
f012ad84:	68 e0 bd 13 f0       	push   $0xf013bde0
f012ad89:	68 48 0d 00 00       	push   $0xd48
f012ad8e:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ad93:	e8 6d 54 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012ad98:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012ad9e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012ada1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ada8:	eb 1e                	jmp    f012adc8 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012adaa:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012adb0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012adb3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012adb6:	01 c8                	add    %ecx,%eax
f012adb8:	8a 00                	mov    (%eax),%al
f012adba:	0f be c0             	movsbl %al,%eax
f012adbd:	01 d0                	add    %edx,%eax
f012adbf:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012adc5:	ff 45 f4             	incl   -0xc(%ebp)
f012adc8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012adce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012add1:	7f d7                	jg     f012adaa <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012add3:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012add9:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012addf:	89 c1                	mov    %eax,%ecx
f012ade1:	01 c9                	add    %ecx,%ecx
f012ade3:	01 c8                	add    %ecx,%eax
f012ade5:	39 c2                	cmp    %eax,%edx
f012ade7:	74 17                	je     f012ae00 <test_kfreelast+0xd82>
f012ade9:	83 ec 04             	sub    $0x4,%esp
f012adec:	68 e0 bd 13 f0       	push   $0xf013bde0
f012adf1:	68 50 0d 00 00       	push   $0xd50
f012adf6:	68 fa b5 13 f0       	push   $0xf013b5fa
f012adfb:	e8 05 54 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012ae00:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012ae06:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012ae09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae10:	eb 1e                	jmp    f012ae30 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012ae12:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012ae18:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae1b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae1e:	01 c8                	add    %ecx,%eax
f012ae20:	8a 00                	mov    (%eax),%al
f012ae22:	0f be c0             	movsbl %al,%eax
f012ae25:	01 d0                	add    %edx,%eax
f012ae27:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012ae2d:	ff 45 f4             	incl   -0xc(%ebp)
f012ae30:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012ae36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae39:	7f d7                	jg     f012ae12 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012ae3b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012ae41:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012ae47:	c1 e2 02             	shl    $0x2,%edx
f012ae4a:	39 d0                	cmp    %edx,%eax
f012ae4c:	74 17                	je     f012ae65 <test_kfreelast+0xde7>
f012ae4e:	83 ec 04             	sub    $0x4,%esp
f012ae51:	68 e0 bd 13 f0       	push   $0xf013bde0
f012ae56:	68 58 0d 00 00       	push   $0xd58
f012ae5b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ae60:	e8 a0 53 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012ae65:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012ae6b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012ae6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae75:	eb 1e                	jmp    f012ae95 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012ae77:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012ae7d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae80:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae83:	01 c8                	add    %ecx,%eax
f012ae85:	8a 00                	mov    (%eax),%al
f012ae87:	0f be c0             	movsbl %al,%eax
f012ae8a:	01 d0                	add    %edx,%eax
f012ae8c:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012ae92:	ff 45 f4             	incl   -0xc(%ebp)
f012ae95:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ae9b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae9e:	7f d7                	jg     f012ae77 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012aea0:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012aea6:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012aeac:	89 d0                	mov    %edx,%eax
f012aeae:	c1 e0 02             	shl    $0x2,%eax
f012aeb1:	01 d0                	add    %edx,%eax
f012aeb3:	39 c1                	cmp    %eax,%ecx
f012aeb5:	74 17                	je     f012aece <test_kfreelast+0xe50>
f012aeb7:	83 ec 04             	sub    $0x4,%esp
f012aeba:	68 e0 bd 13 f0       	push   $0xf013bde0
f012aebf:	68 60 0d 00 00       	push   $0xd60
f012aec4:	68 fa b5 13 f0       	push   $0xf013b5fa
f012aec9:	e8 37 53 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012aece:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aed4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aed7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aede:	eb 1e                	jmp    f012aefe <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012aee0:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012aee6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aee9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aeec:	01 c8                	add    %ecx,%eax
f012aeee:	8a 00                	mov    (%eax),%al
f012aef0:	0f be c0             	movsbl %al,%eax
f012aef3:	01 d0                	add    %edx,%eax
f012aef5:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012aefb:	ff 45 f4             	incl   -0xc(%ebp)
f012aefe:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012af04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012af07:	7f d7                	jg     f012aee0 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012af09:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012af0f:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012af15:	89 d0                	mov    %edx,%eax
f012af17:	01 c0                	add    %eax,%eax
f012af19:	01 d0                	add    %edx,%eax
f012af1b:	01 c0                	add    %eax,%eax
f012af1d:	01 d0                	add    %edx,%eax
f012af1f:	39 c1                	cmp    %eax,%ecx
f012af21:	74 17                	je     f012af3a <test_kfreelast+0xebc>
f012af23:	83 ec 04             	sub    $0x4,%esp
f012af26:	68 e0 bd 13 f0       	push   $0xf013bde0
f012af2b:	68 68 0d 00 00       	push   $0xd68
f012af30:	68 fa b5 13 f0       	push   $0xf013b5fa
f012af35:	e8 cb 52 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012af3a:	e8 2e 22 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012af3f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af42:	e8 ad 8e fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012af47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012af4a:	83 ec 0c             	sub    $0xc,%esp
f012af4d:	68 00 50 00 00       	push   $0x5000
f012af52:	e8 0f cb fd ff       	call   f0107a66 <kmalloc>
f012af57:	83 c4 10             	add    $0x10,%esp
f012af5a:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012af60:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012af66:	89 c1                	mov    %eax,%ecx
f012af68:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012af6f:	10 00 00 
f012af72:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012af78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012af7d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012af83:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012af89:	ba 00 00 00 00       	mov    $0x0,%edx
f012af8e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012af94:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012af9a:	29 d0                	sub    %edx,%eax
f012af9c:	89 c3                	mov    %eax,%ebx
f012af9e:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012afa5:	10 00 00 
f012afa8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012afad:	0f b6 d0             	movzbl %al,%edx
f012afb0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012afb6:	01 d0                	add    %edx,%eax
f012afb8:	48                   	dec    %eax
f012afb9:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012afbf:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012afc5:	ba 00 00 00 00       	mov    $0x0,%edx
f012afca:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012afd0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012afd6:	29 d0                	sub    %edx,%eax
f012afd8:	01 c3                	add    %eax,%ebx
f012afda:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012afe1:	10 00 00 
f012afe4:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012afe9:	0f b6 c0             	movzbl %al,%eax
f012afec:	c1 e0 04             	shl    $0x4,%eax
f012afef:	89 c2                	mov    %eax,%edx
f012aff1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012aff7:	01 d0                	add    %edx,%eax
f012aff9:	48                   	dec    %eax
f012affa:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012b000:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b006:	ba 00 00 00 00       	mov    $0x0,%edx
f012b00b:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012b011:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b017:	29 d0                	sub    %edx,%eax
f012b019:	01 d8                	add    %ebx,%eax
f012b01b:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012b020:	39 c1                	cmp    %eax,%ecx
f012b022:	74 17                	je     f012b03b <test_kfreelast+0xfbd>
f012b024:	83 ec 04             	sub    $0x4,%esp
f012b027:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012b02c:	68 71 0d 00 00       	push   $0xd71
f012b031:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b036:	e8 ca 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b03b:	e8 b4 8d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b040:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b043:	74 17                	je     f012b05c <test_kfreelast+0xfde>
f012b045:	83 ec 04             	sub    $0x4,%esp
f012b048:	68 14 b6 13 f0       	push   $0xf013b614
f012b04d:	68 72 0d 00 00       	push   $0xd72
f012b052:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b057:	e8 a9 51 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b05c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b05f:	e8 09 21 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b064:	29 c3                	sub    %eax,%ebx
f012b066:	89 d8                	mov    %ebx,%eax
f012b068:	83 f8 05             	cmp    $0x5,%eax
f012b06b:	74 17                	je     f012b084 <test_kfreelast+0x1006>
f012b06d:	83 ec 04             	sub    $0x4,%esp
f012b070:	68 7c b6 13 f0       	push   $0xf013b67c
f012b075:	68 73 0d 00 00       	push   $0xd73
f012b07a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b07f:	e8 81 51 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012b084:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012b08b:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012b08e:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b094:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012b097:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b09e:	eb 0e                	jmp    f012b0ae <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012b0a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b0a3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0a6:	01 d0                	add    %edx,%eax
f012b0a8:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012b0ab:	ff 45 f4             	incl   -0xc(%ebp)
f012b0ae:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012b0b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b0b7:	7f e7                	jg     f012b0a0 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b0b9:	e8 af 20 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b0be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0c1:	e8 2e 8d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b0c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012b0c9:	83 ec 0c             	sub    $0xc,%esp
f012b0cc:	68 00 00 10 00       	push   $0x100000
f012b0d1:	e8 90 c9 fd ff       	call   f0107a66 <kmalloc>
f012b0d6:	83 c4 10             	add    $0x10,%esp
f012b0d9:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b0df:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b0e5:	89 c1                	mov    %eax,%ecx
f012b0e7:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012b0ee:	10 00 00 
f012b0f1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b0f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b0fc:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012b102:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b108:	ba 00 00 00 00       	mov    $0x0,%edx
f012b10d:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012b113:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b119:	29 d0                	sub    %edx,%eax
f012b11b:	89 c3                	mov    %eax,%ebx
f012b11d:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012b124:	10 00 00 
f012b127:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b12c:	0f b6 d0             	movzbl %al,%edx
f012b12f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b135:	01 d0                	add    %edx,%eax
f012b137:	48                   	dec    %eax
f012b138:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012b13e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b144:	ba 00 00 00 00       	mov    $0x0,%edx
f012b149:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012b14f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b155:	29 d0                	sub    %edx,%eax
f012b157:	01 c3                	add    %eax,%ebx
f012b159:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012b160:	10 00 00 
f012b163:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b168:	0f b6 c0             	movzbl %al,%eax
f012b16b:	c1 e0 04             	shl    $0x4,%eax
f012b16e:	89 c2                	mov    %eax,%edx
f012b170:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012b176:	01 d0                	add    %edx,%eax
f012b178:	48                   	dec    %eax
f012b179:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012b17f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b185:	ba 00 00 00 00       	mov    $0x0,%edx
f012b18a:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012b190:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b196:	29 d0                	sub    %edx,%eax
f012b198:	01 d8                	add    %ebx,%eax
f012b19a:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b19f:	39 c1                	cmp    %eax,%ecx
f012b1a1:	74 17                	je     f012b1ba <test_kfreelast+0x113c>
f012b1a3:	83 ec 04             	sub    $0x4,%esp
f012b1a6:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012b1ab:	68 7f 0d 00 00       	push   $0xd7f
f012b1b0:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b1b5:	e8 4b 50 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b1ba:	e8 35 8c fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b1bf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1c2:	74 17                	je     f012b1db <test_kfreelast+0x115d>
f012b1c4:	83 ec 04             	sub    $0x4,%esp
f012b1c7:	68 14 b6 13 f0       	push   $0xf013b614
f012b1cc:	68 80 0d 00 00       	push   $0xd80
f012b1d1:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b1d6:	e8 2a 50 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b1db:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b1de:	e8 8a 1f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b1e3:	29 c3                	sub    %eax,%ebx
f012b1e5:	89 d8                	mov    %ebx,%eax
f012b1e7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b1ec:	74 17                	je     f012b205 <test_kfreelast+0x1187>
f012b1ee:	83 ec 04             	sub    $0x4,%esp
f012b1f1:	68 7c b6 13 f0       	push   $0xf013b67c
f012b1f6:	68 81 0d 00 00       	push   $0xd81
f012b1fb:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b200:	e8 00 50 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012b205:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012b20c:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012b20f:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b215:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012b218:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b21f:	eb 0e                	jmp    f012b22f <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012b221:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b224:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b227:	01 d0                	add    %edx,%eax
f012b229:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012b22c:	ff 45 f4             	incl   -0xc(%ebp)
f012b22f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012b235:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b238:	7f e7                	jg     f012b221 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012b23a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b241:	e8 27 1f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b246:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b249:	e8 a6 8b fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b24e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b251:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b257:	83 ec 0c             	sub    $0xc,%esp
f012b25a:	50                   	push   %eax
f012b25b:	e8 c6 c8 fd ff       	call   f0107b26 <kfree>
f012b260:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b263:	e8 8c 8b fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b268:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b26b:	74 17                	je     f012b284 <test_kfreelast+0x1206>
f012b26d:	83 ec 04             	sub    $0x4,%esp
f012b270:	68 14 b6 13 f0       	push   $0xf013b614
f012b275:	68 91 0d 00 00       	push   $0xd91
f012b27a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b27f:	e8 81 4f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012b284:	e8 e4 1e fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b289:	89 c2                	mov    %eax,%edx
f012b28b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b28e:	29 c2                	sub    %eax,%edx
f012b290:	89 d0                	mov    %edx,%eax
f012b292:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b297:	74 17                	je     f012b2b0 <test_kfreelast+0x1232>
f012b299:	83 ec 04             	sub    $0x4,%esp
f012b29c:	68 84 bd 13 f0       	push   $0xf013bd84
f012b2a1:	68 92 0d 00 00       	push   $0xd92
f012b2a6:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b2ab:	e8 55 4f fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b2b0:	e8 b8 1e fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b2b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2b8:	e8 37 8b fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b2bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012b2c0:	83 ec 0c             	sub    $0xc,%esp
f012b2c3:	68 00 78 00 00       	push   $0x7800
f012b2c8:	e8 99 c7 fd ff       	call   f0107a66 <kmalloc>
f012b2cd:	83 c4 10             	add    $0x10,%esp
f012b2d0:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b2d6:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b2dc:	89 c1                	mov    %eax,%ecx
f012b2de:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012b2e5:	10 00 00 
f012b2e8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012b2ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b2f3:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012b2f9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b2ff:	ba 00 00 00 00       	mov    $0x0,%edx
f012b304:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012b30a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b310:	29 d0                	sub    %edx,%eax
f012b312:	89 c3                	mov    %eax,%ebx
f012b314:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012b31b:	10 00 00 
f012b31e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b323:	0f b6 d0             	movzbl %al,%edx
f012b326:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012b32c:	01 d0                	add    %edx,%eax
f012b32e:	48                   	dec    %eax
f012b32f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012b335:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b33b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b340:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012b346:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b34c:	29 d0                	sub    %edx,%eax
f012b34e:	01 c3                	add    %eax,%ebx
f012b350:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012b357:	10 00 00 
f012b35a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b35f:	0f b6 c0             	movzbl %al,%eax
f012b362:	c1 e0 04             	shl    $0x4,%eax
f012b365:	89 c2                	mov    %eax,%edx
f012b367:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b36d:	01 d0                	add    %edx,%eax
f012b36f:	48                   	dec    %eax
f012b370:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012b376:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b37c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b381:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012b387:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b38d:	29 d0                	sub    %edx,%eax
f012b38f:	01 d8                	add    %ebx,%eax
f012b391:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b396:	39 c1                	cmp    %eax,%ecx
f012b398:	74 17                	je     f012b3b1 <test_kfreelast+0x1333>
f012b39a:	83 ec 04             	sub    $0x4,%esp
f012b39d:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012b3a2:	68 9b 0d 00 00       	push   $0xd9b
f012b3a7:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b3ac:	e8 54 4e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b3b1:	e8 3e 8a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b3b6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3b9:	74 17                	je     f012b3d2 <test_kfreelast+0x1354>
f012b3bb:	83 ec 04             	sub    $0x4,%esp
f012b3be:	68 14 b6 13 f0       	push   $0xf013b614
f012b3c3:	68 9c 0d 00 00       	push   $0xd9c
f012b3c8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b3cd:	e8 33 4e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b3d2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b3d5:	e8 93 1d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b3da:	29 c3                	sub    %eax,%ebx
f012b3dc:	89 d8                	mov    %ebx,%eax
f012b3de:	83 f8 08             	cmp    $0x8,%eax
f012b3e1:	74 17                	je     f012b3fa <test_kfreelast+0x137c>
f012b3e3:	83 ec 04             	sub    $0x4,%esp
f012b3e6:	68 7c b6 13 f0       	push   $0xf013b67c
f012b3eb:	68 9d 0d 00 00       	push   $0xd9d
f012b3f0:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b3f5:	e8 0b 4e fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012b3fa:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012b401:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012b404:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b40a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012b40d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b414:	eb 0e                	jmp    f012b424 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012b416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b419:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b41c:	01 d0                	add    %edx,%eax
f012b41e:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012b421:	ff 45 f4             	incl   -0xc(%ebp)
f012b424:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012b42a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b42d:	7f e7                	jg     f012b416 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b42f:	e8 39 1d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b434:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b437:	e8 b8 89 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b43c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012b43f:	83 ec 0c             	sub    $0xc,%esp
f012b442:	68 00 00 10 00       	push   $0x100000
f012b447:	e8 1a c6 fd ff       	call   f0107a66 <kmalloc>
f012b44c:	83 c4 10             	add    $0x10,%esp
f012b44f:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b455:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b45b:	89 c1                	mov    %eax,%ecx
f012b45d:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b464:	10 00 00 
f012b467:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b46d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b472:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b478:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b47e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b483:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b489:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b48f:	29 d0                	sub    %edx,%eax
f012b491:	89 c3                	mov    %eax,%ebx
f012b493:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b49a:	10 00 00 
f012b49d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b4a2:	0f b6 d0             	movzbl %al,%edx
f012b4a5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b4ab:	01 d0                	add    %edx,%eax
f012b4ad:	48                   	dec    %eax
f012b4ae:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b4b4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4bf:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b4c5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4cb:	29 d0                	sub    %edx,%eax
f012b4cd:	01 c3                	add    %eax,%ebx
f012b4cf:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b4d6:	10 00 00 
f012b4d9:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b4de:	0f b6 c0             	movzbl %al,%eax
f012b4e1:	c1 e0 04             	shl    $0x4,%eax
f012b4e4:	89 c2                	mov    %eax,%edx
f012b4e6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b4ec:	01 d0                	add    %edx,%eax
f012b4ee:	48                   	dec    %eax
f012b4ef:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b4f5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b4fb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b500:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b506:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b50c:	29 d0                	sub    %edx,%eax
f012b50e:	01 d8                	add    %ebx,%eax
f012b510:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b515:	39 c1                	cmp    %eax,%ecx
f012b517:	74 17                	je     f012b530 <test_kfreelast+0x14b2>
f012b519:	83 ec 04             	sub    $0x4,%esp
f012b51c:	68 e0 b6 13 f0       	push   $0xf013b6e0
f012b521:	68 a9 0d 00 00       	push   $0xda9
f012b526:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b52b:	e8 d5 4c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b530:	e8 bf 88 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b535:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b538:	74 17                	je     f012b551 <test_kfreelast+0x14d3>
f012b53a:	83 ec 04             	sub    $0x4,%esp
f012b53d:	68 14 b6 13 f0       	push   $0xf013b614
f012b542:	68 aa 0d 00 00       	push   $0xdaa
f012b547:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b54c:	e8 b4 4c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b551:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b554:	e8 14 1c fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b559:	29 c3                	sub    %eax,%ebx
f012b55b:	89 d8                	mov    %ebx,%eax
f012b55d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b562:	74 17                	je     f012b57b <test_kfreelast+0x14fd>
f012b564:	83 ec 04             	sub    $0x4,%esp
f012b567:	68 7c b6 13 f0       	push   $0xf013b67c
f012b56c:	68 ab 0d 00 00       	push   $0xdab
f012b571:	68 fa b5 13 f0       	push   $0xf013b5fa
f012b576:	e8 8a 4c fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b57b:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b582:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b585:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b58b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b58e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b595:	eb 0e                	jmp    f012b5a5 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b597:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b59a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b59d:	01 d0                	add    %edx,%eax
f012b59f:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b5a2:	ff 45 f4             	incl   -0xc(%ebp)
f012b5a5:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b5ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b5ae:	7f e7                	jg     f012b597 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b5b0:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b5b4:	83 ec 08             	sub    $0x8,%esp
f012b5b7:	ff 75 f0             	pushl  -0x10(%ebp)
f012b5ba:	68 2c c6 13 f0       	push   $0xf013c62c
f012b5bf:	e8 4a 57 fd ff       	call   f0100d0e <cprintf>
f012b5c4:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b5c7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b5ce:	e8 9a 1b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b5d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5d6:	e8 19 88 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b5db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b5de:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b5e4:	83 ec 0c             	sub    $0xc,%esp
f012b5e7:	50                   	push   %eax
f012b5e8:	e8 39 c5 fd ff       	call   f0107b26 <kfree>
f012b5ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b5f0:	e8 ff 87 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b5f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5f8:	74 1d                	je     f012b617 <test_kfreelast+0x1599>
f012b5fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5fe:	75 17                	jne    f012b617 <test_kfreelast+0x1599>
f012b600:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b607:	83 ec 0c             	sub    $0xc,%esp
f012b60a:	68 54 c6 13 f0       	push   $0xf013c654
f012b60f:	e8 fa 56 fd ff       	call   f0100d0e <cprintf>
f012b614:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b617:	e8 51 1b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b61c:	89 c2                	mov    %eax,%edx
f012b61e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b621:	29 c2                	sub    %eax,%edx
f012b623:	89 d0                	mov    %edx,%eax
f012b625:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b62a:	74 1d                	je     f012b649 <test_kfreelast+0x15cb>
f012b62c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b630:	75 17                	jne    f012b649 <test_kfreelast+0x15cb>
f012b632:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b639:	83 ec 0c             	sub    $0xc,%esp
f012b63c:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012b641:	e8 c8 56 fd ff       	call   f0100d0e <cprintf>
f012b646:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b649:	e8 1f 1b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b64e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b651:	e8 9e 87 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b656:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b659:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b65f:	83 ec 0c             	sub    $0xc,%esp
f012b662:	50                   	push   %eax
f012b663:	e8 be c4 fd ff       	call   f0107b26 <kfree>
f012b668:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b66b:	e8 84 87 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b670:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b673:	74 1d                	je     f012b692 <test_kfreelast+0x1614>
f012b675:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b679:	75 17                	jne    f012b692 <test_kfreelast+0x1614>
f012b67b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b682:	83 ec 0c             	sub    $0xc,%esp
f012b685:	68 54 c6 13 f0       	push   $0xf013c654
f012b68a:	e8 7f 56 fd ff       	call   f0100d0e <cprintf>
f012b68f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b692:	e8 d6 1a fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b697:	89 c2                	mov    %eax,%edx
f012b699:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b69c:	29 c2                	sub    %eax,%edx
f012b69e:	89 d0                	mov    %edx,%eax
f012b6a0:	83 f8 08             	cmp    $0x8,%eax
f012b6a3:	74 1d                	je     f012b6c2 <test_kfreelast+0x1644>
f012b6a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6a9:	75 17                	jne    f012b6c2 <test_kfreelast+0x1644>
f012b6ab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6b2:	83 ec 0c             	sub    $0xc,%esp
f012b6b5:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012b6ba:	e8 4f 56 fd ff       	call   f0100d0e <cprintf>
f012b6bf:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6c2:	e8 a6 1a fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b6c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6ca:	e8 25 87 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b6cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b6d2:	83 ec 0c             	sub    $0xc,%esp
f012b6d5:	68 00 28 00 00       	push   $0x2800
f012b6da:	e8 87 c3 fd ff       	call   f0107a66 <kmalloc>
f012b6df:	83 c4 10             	add    $0x10,%esp
f012b6e2:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b6e8:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b6ee:	89 c1                	mov    %eax,%ecx
f012b6f0:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b6f7:	10 00 00 
f012b6fa:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b700:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b705:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b70b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b711:	ba 00 00 00 00       	mov    $0x0,%edx
f012b716:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b71c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b722:	29 d0                	sub    %edx,%eax
f012b724:	89 c3                	mov    %eax,%ebx
f012b726:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b72d:	10 00 00 
f012b730:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b735:	0f b6 d0             	movzbl %al,%edx
f012b738:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b73e:	01 d0                	add    %edx,%eax
f012b740:	48                   	dec    %eax
f012b741:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b747:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b74d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b752:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b758:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b75e:	29 d0                	sub    %edx,%eax
f012b760:	01 c3                	add    %eax,%ebx
f012b762:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b769:	10 00 00 
f012b76c:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012b771:	0f b6 c0             	movzbl %al,%eax
f012b774:	c1 e0 04             	shl    $0x4,%eax
f012b777:	89 c2                	mov    %eax,%edx
f012b779:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b77f:	01 d0                	add    %edx,%eax
f012b781:	48                   	dec    %eax
f012b782:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b788:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b78e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b793:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b799:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b79f:	29 d0                	sub    %edx,%eax
f012b7a1:	01 d8                	add    %ebx,%eax
f012b7a3:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b7a8:	39 c1                	cmp    %eax,%ecx
f012b7aa:	74 1d                	je     f012b7c9 <test_kfreelast+0x174b>
f012b7ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7b0:	75 17                	jne    f012b7c9 <test_kfreelast+0x174b>
f012b7b2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7b9:	83 ec 0c             	sub    $0xc,%esp
f012b7bc:	68 f8 c6 13 f0       	push   $0xf013c6f8
f012b7c1:	e8 48 55 fd ff       	call   f0100d0e <cprintf>
f012b7c6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7c9:	e8 26 86 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b7ce:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7d1:	74 1d                	je     f012b7f0 <test_kfreelast+0x1772>
f012b7d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7d7:	75 17                	jne    f012b7f0 <test_kfreelast+0x1772>
f012b7d9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7e0:	83 ec 0c             	sub    $0xc,%esp
f012b7e3:	68 54 c6 13 f0       	push   $0xf013c654
f012b7e8:	e8 21 55 fd ff       	call   f0100d0e <cprintf>
f012b7ed:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b7f0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b7f3:	e8 75 19 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b7f8:	29 c3                	sub    %eax,%ebx
f012b7fa:	89 d8                	mov    %ebx,%eax
f012b7fc:	83 f8 03             	cmp    $0x3,%eax
f012b7ff:	74 1d                	je     f012b81e <test_kfreelast+0x17a0>
f012b801:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b805:	75 17                	jne    f012b81e <test_kfreelast+0x17a0>
f012b807:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b80e:	83 ec 0c             	sub    $0xc,%esp
f012b811:	68 60 c7 13 f0       	push   $0xf013c760
f012b816:	e8 f3 54 fd ff       	call   f0100d0e <cprintf>
f012b81b:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b81e:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b825:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b828:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b82e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b831:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b838:	eb 0e                	jmp    f012b848 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b83a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b83d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b840:	01 d0                	add    %edx,%eax
f012b842:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b845:	ff 45 f4             	incl   -0xc(%ebp)
f012b848:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b84e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b851:	7f e7                	jg     f012b83a <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b853:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b857:	75 17                	jne    f012b870 <test_kfreelast+0x17f2>
f012b859:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b85d:	83 ec 08             	sub    $0x8,%esp
f012b860:	ff 75 f0             	pushl  -0x10(%ebp)
f012b863:	68 2c c6 13 f0       	push   $0xf013c62c
f012b868:	e8 a1 54 fd ff       	call   f0100d0e <cprintf>
f012b86d:	83 c4 10             	add    $0x10,%esp
f012b870:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b877:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b87d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b880:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b887:	eb 1e                	jmp    f012b8a7 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b889:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b88f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b892:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b895:	01 c8                	add    %ecx,%eax
f012b897:	8a 00                	mov    (%eax),%al
f012b899:	0f be c0             	movsbl %al,%eax
f012b89c:	01 d0                	add    %edx,%eax
f012b89e:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b8a4:	ff 45 f4             	incl   -0xc(%ebp)
f012b8a7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b8ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b8b0:	7f d7                	jg     f012b889 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b8b2:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b8b8:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b8be:	89 d0                	mov    %edx,%eax
f012b8c0:	01 c0                	add    %eax,%eax
f012b8c2:	01 d0                	add    %edx,%eax
f012b8c4:	c1 e0 02             	shl    $0x2,%eax
f012b8c7:	39 c1                	cmp    %eax,%ecx
f012b8c9:	74 1d                	je     f012b8e8 <test_kfreelast+0x186a>
f012b8cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8cf:	75 17                	jne    f012b8e8 <test_kfreelast+0x186a>
f012b8d1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8d8:	83 ec 0c             	sub    $0xc,%esp
f012b8db:	68 a4 c7 13 f0       	push   $0xf013c7a4
f012b8e0:	e8 29 54 fd ff       	call   f0100d0e <cprintf>
f012b8e5:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b8e8:	83 ec 0c             	sub    $0xc,%esp
f012b8eb:	6a 03                	push   $0x3
f012b8ed:	e8 1b 1d fe ff       	call   f010d60d <sys_bypassPageFault>
f012b8f2:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b8f5:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b8fb:	05 00 30 00 00       	add    $0x3000,%eax
f012b900:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b90a:	eb 3c                	jmp    f012b948 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b90c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b90f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b912:	01 d0                	add    %edx,%eax
f012b914:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b917:	e8 df 1c fe ff       	call   f010d5fb <sys_rcr2>
f012b91c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b91f:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b922:	01 ca                	add    %ecx,%edx
f012b924:	39 d0                	cmp    %edx,%eax
f012b926:	74 1d                	je     f012b945 <test_kfreelast+0x18c7>
f012b928:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b92c:	75 17                	jne    f012b945 <test_kfreelast+0x18c7>
f012b92e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b935:	83 ec 0c             	sub    $0xc,%esp
f012b938:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012b93d:	e8 cc 53 fd ff       	call   f0100d0e <cprintf>
f012b942:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b945:	ff 45 f4             	incl   -0xc(%ebp)
f012b948:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b94f:	7e bb                	jle    f012b90c <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b951:	83 ec 0c             	sub    $0xc,%esp
f012b954:	6a 00                	push   $0x0
f012b956:	e8 b2 1c fe ff       	call   f010d60d <sys_bypassPageFault>
f012b95b:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b95e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b962:	75 17                	jne    f012b97b <test_kfreelast+0x18fd>
f012b964:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b968:	83 ec 08             	sub    $0x8,%esp
f012b96b:	ff 75 f0             	pushl  -0x10(%ebp)
f012b96e:	68 2c c6 13 f0       	push   $0xf013c62c
f012b973:	e8 96 53 fd ff       	call   f0100d0e <cprintf>
f012b978:	83 c4 10             	add    $0x10,%esp
f012b97b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b982:	e8 e6 17 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b987:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b98a:	e8 65 84 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b98f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b992:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b998:	83 ec 0c             	sub    $0xc,%esp
f012b99b:	50                   	push   %eax
f012b99c:	e8 85 c1 fd ff       	call   f0107b26 <kfree>
f012b9a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b9a4:	e8 4b 84 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012b9a9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b9ac:	74 1d                	je     f012b9cb <test_kfreelast+0x194d>
f012b9ae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9b2:	75 17                	jne    f012b9cb <test_kfreelast+0x194d>
f012b9b4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9bb:	83 ec 0c             	sub    $0xc,%esp
f012b9be:	68 54 c6 13 f0       	push   $0xf013c654
f012b9c3:	e8 46 53 fd ff       	call   f0100d0e <cprintf>
f012b9c8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b9cb:	e8 9d 17 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012b9d0:	89 c2                	mov    %eax,%edx
f012b9d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b9d5:	29 c2                	sub    %eax,%edx
f012b9d7:	89 d0                	mov    %edx,%eax
f012b9d9:	83 f8 03             	cmp    $0x3,%eax
f012b9dc:	74 1d                	je     f012b9fb <test_kfreelast+0x197d>
f012b9de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9e2:	75 17                	jne    f012b9fb <test_kfreelast+0x197d>
f012b9e4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9eb:	83 ec 0c             	sub    $0xc,%esp
f012b9ee:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012b9f3:	e8 16 53 fd ff       	call   f0100d0e <cprintf>
f012b9f8:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9fb:	e8 6d 17 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ba00:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba03:	e8 ec 83 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ba08:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012ba0b:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ba11:	83 ec 0c             	sub    $0xc,%esp
f012ba14:	50                   	push   %eax
f012ba15:	e8 0c c1 fd ff       	call   f0107b26 <kfree>
f012ba1a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba1d:	e8 d2 83 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ba22:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba25:	74 1d                	je     f012ba44 <test_kfreelast+0x19c6>
f012ba27:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba2b:	75 17                	jne    f012ba44 <test_kfreelast+0x19c6>
f012ba2d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba34:	83 ec 0c             	sub    $0xc,%esp
f012ba37:	68 54 c6 13 f0       	push   $0xf013c654
f012ba3c:	e8 cd 52 fd ff       	call   f0100d0e <cprintf>
f012ba41:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba44:	e8 24 17 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ba49:	89 c2                	mov    %eax,%edx
f012ba4b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba4e:	29 c2                	sub    %eax,%edx
f012ba50:	89 d0                	mov    %edx,%eax
f012ba52:	83 f8 04             	cmp    $0x4,%eax
f012ba55:	74 1d                	je     f012ba74 <test_kfreelast+0x19f6>
f012ba57:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba5b:	75 17                	jne    f012ba74 <test_kfreelast+0x19f6>
f012ba5d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba64:	83 ec 0c             	sub    $0xc,%esp
f012ba67:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012ba6c:	e8 9d 52 fd ff       	call   f0100d0e <cprintf>
f012ba71:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba74:	e8 f4 16 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ba79:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba7c:	e8 73 83 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ba81:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ba84:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ba8a:	83 ec 0c             	sub    $0xc,%esp
f012ba8d:	50                   	push   %eax
f012ba8e:	e8 93 c0 fd ff       	call   f0107b26 <kfree>
f012ba93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba96:	e8 59 83 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012ba9b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba9e:	74 1d                	je     f012babd <test_kfreelast+0x1a3f>
f012baa0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012baa4:	75 17                	jne    f012babd <test_kfreelast+0x1a3f>
f012baa6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012baad:	83 ec 0c             	sub    $0xc,%esp
f012bab0:	68 54 c6 13 f0       	push   $0xf013c654
f012bab5:	e8 54 52 fd ff       	call   f0100d0e <cprintf>
f012baba:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012babd:	e8 ab 16 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012bac2:	89 c2                	mov    %eax,%edx
f012bac4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bac7:	29 c2                	sub    %eax,%edx
f012bac9:	89 d0                	mov    %edx,%eax
f012bacb:	83 f8 05             	cmp    $0x5,%eax
f012bace:	74 1d                	je     f012baed <test_kfreelast+0x1a6f>
f012bad0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bad4:	75 17                	jne    f012baed <test_kfreelast+0x1a6f>
f012bad6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012badd:	83 ec 0c             	sub    $0xc,%esp
f012bae0:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012bae5:	e8 24 52 fd ff       	call   f0100d0e <cprintf>
f012baea:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012baed:	e8 7b 16 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012baf2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012baf5:	e8 fa 82 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012bafa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012bafd:	83 ec 0c             	sub    $0xc,%esp
f012bb00:	68 00 c8 00 00       	push   $0xc800
f012bb05:	e8 5c bf fd ff       	call   f0107a66 <kmalloc>
f012bb0a:	83 c4 10             	add    $0x10,%esp
f012bb0d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bb13:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bb19:	89 c1                	mov    %eax,%ecx
f012bb1b:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012bb22:	10 00 00 
f012bb25:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012bb2b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb30:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012bb36:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bb3c:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb41:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012bb47:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bb4d:	29 d0                	sub    %edx,%eax
f012bb4f:	89 c3                	mov    %eax,%ebx
f012bb51:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012bb58:	10 00 00 
f012bb5b:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012bb60:	0f b6 d0             	movzbl %al,%edx
f012bb63:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012bb69:	01 d0                	add    %edx,%eax
f012bb6b:	48                   	dec    %eax
f012bb6c:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012bb72:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bb78:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb7d:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012bb83:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bb89:	29 d0                	sub    %edx,%eax
f012bb8b:	01 c3                	add    %eax,%ebx
f012bb8d:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012bb94:	10 00 00 
f012bb97:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012bb9c:	0f b6 c0             	movzbl %al,%eax
f012bb9f:	c1 e0 04             	shl    $0x4,%eax
f012bba2:	89 c2                	mov    %eax,%edx
f012bba4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012bbaa:	01 d0                	add    %edx,%eax
f012bbac:	48                   	dec    %eax
f012bbad:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012bbb3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bbb9:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbbe:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012bbc4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bbca:	29 d0                	sub    %edx,%eax
f012bbcc:	01 d8                	add    %ebx,%eax
f012bbce:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012bbd3:	39 c1                	cmp    %eax,%ecx
f012bbd5:	74 1d                	je     f012bbf4 <test_kfreelast+0x1b76>
f012bbd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbdb:	75 17                	jne    f012bbf4 <test_kfreelast+0x1b76>
f012bbdd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbe4:	83 ec 0c             	sub    $0xc,%esp
f012bbe7:	68 f8 c6 13 f0       	push   $0xf013c6f8
f012bbec:	e8 1d 51 fd ff       	call   f0100d0e <cprintf>
f012bbf1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bbf4:	e8 fb 81 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012bbf9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bbfc:	74 1d                	je     f012bc1b <test_kfreelast+0x1b9d>
f012bbfe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc02:	75 17                	jne    f012bc1b <test_kfreelast+0x1b9d>
f012bc04:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc0b:	83 ec 0c             	sub    $0xc,%esp
f012bc0e:	68 54 c6 13 f0       	push   $0xf013c654
f012bc13:	e8 f6 50 fd ff       	call   f0100d0e <cprintf>
f012bc18:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bc1b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bc1e:	e8 4a 15 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012bc23:	29 c3                	sub    %eax,%ebx
f012bc25:	89 d8                	mov    %ebx,%eax
f012bc27:	83 f8 0d             	cmp    $0xd,%eax
f012bc2a:	74 1d                	je     f012bc49 <test_kfreelast+0x1bcb>
f012bc2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc30:	75 17                	jne    f012bc49 <test_kfreelast+0x1bcb>
f012bc32:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc39:	83 ec 0c             	sub    $0xc,%esp
f012bc3c:	68 60 c7 13 f0       	push   $0xf013c760
f012bc41:	e8 c8 50 fd ff       	call   f0100d0e <cprintf>
f012bc46:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012bc49:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012bc50:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012bc53:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bc59:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012bc5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bc63:	eb 0e                	jmp    f012bc73 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012bc65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bc68:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bc6b:	01 d0                	add    %edx,%eax
f012bc6d:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012bc70:	ff 45 f4             	incl   -0xc(%ebp)
f012bc73:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012bc79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bc7c:	7f e7                	jg     f012bc65 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bc7e:	e8 ea 14 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012bc83:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc86:	e8 69 81 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012bc8b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012bc8e:	83 ec 0c             	sub    $0xc,%esp
f012bc91:	68 00 fc 2f 00       	push   $0x2ffc00
f012bc96:	e8 cb bd fd ff       	call   f0107a66 <kmalloc>
f012bc9b:	83 c4 10             	add    $0x10,%esp
f012bc9e:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bca4:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bcaa:	89 c1                	mov    %eax,%ecx
f012bcac:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012bcb3:	10 00 00 
f012bcb6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bcbc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bcc1:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012bcc7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bccd:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcd2:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012bcd8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bcde:	29 d0                	sub    %edx,%eax
f012bce0:	89 c3                	mov    %eax,%ebx
f012bce2:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012bce9:	10 00 00 
f012bcec:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012bcf1:	0f b6 d0             	movzbl %al,%edx
f012bcf4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bcfa:	01 d0                	add    %edx,%eax
f012bcfc:	48                   	dec    %eax
f012bcfd:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012bd03:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bd09:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd0e:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012bd14:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bd1a:	29 d0                	sub    %edx,%eax
f012bd1c:	01 c3                	add    %eax,%ebx
f012bd1e:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012bd25:	10 00 00 
f012bd28:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012bd2d:	0f b6 c0             	movzbl %al,%eax
f012bd30:	c1 e0 04             	shl    $0x4,%eax
f012bd33:	89 c2                	mov    %eax,%edx
f012bd35:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bd3b:	01 d0                	add    %edx,%eax
f012bd3d:	48                   	dec    %eax
f012bd3e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012bd44:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bd4a:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd4f:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012bd55:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bd5b:	29 d0                	sub    %edx,%eax
f012bd5d:	01 d8                	add    %ebx,%eax
f012bd5f:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012bd64:	39 c1                	cmp    %eax,%ecx
f012bd66:	74 1d                	je     f012bd85 <test_kfreelast+0x1d07>
f012bd68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd6c:	75 17                	jne    f012bd85 <test_kfreelast+0x1d07>
f012bd6e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd75:	83 ec 0c             	sub    $0xc,%esp
f012bd78:	68 f8 c6 13 f0       	push   $0xf013c6f8
f012bd7d:	e8 8c 4f fd ff       	call   f0100d0e <cprintf>
f012bd82:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd85:	e8 6a 80 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012bd8a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bd8d:	74 1d                	je     f012bdac <test_kfreelast+0x1d2e>
f012bd8f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd93:	75 17                	jne    f012bdac <test_kfreelast+0x1d2e>
f012bd95:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd9c:	83 ec 0c             	sub    $0xc,%esp
f012bd9f:	68 54 c6 13 f0       	push   $0xf013c654
f012bda4:	e8 65 4f fd ff       	call   f0100d0e <cprintf>
f012bda9:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bdac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bdaf:	e8 b9 13 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012bdb4:	29 c3                	sub    %eax,%ebx
f012bdb6:	89 d8                	mov    %ebx,%eax
f012bdb8:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bdbd:	74 1d                	je     f012bddc <test_kfreelast+0x1d5e>
f012bdbf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdc3:	75 17                	jne    f012bddc <test_kfreelast+0x1d5e>
f012bdc5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdcc:	83 ec 0c             	sub    $0xc,%esp
f012bdcf:	68 60 c7 13 f0       	push   $0xf013c760
f012bdd4:	e8 35 4f fd ff       	call   f0100d0e <cprintf>
f012bdd9:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012bddc:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012bde3:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012bde6:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bdec:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bdef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bdf6:	eb 0e                	jmp    f012be06 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012bdf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bdfb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bdfe:	01 d0                	add    %edx,%eax
f012be00:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012be03:	ff 45 f4             	incl   -0xc(%ebp)
f012be06:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012be0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012be0f:	7f e7                	jg     f012bdf8 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012be11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be15:	75 17                	jne    f012be2e <test_kfreelast+0x1db0>
f012be17:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012be1b:	83 ec 08             	sub    $0x8,%esp
f012be1e:	ff 75 f0             	pushl  -0x10(%ebp)
f012be21:	68 2c c6 13 f0       	push   $0xf013c62c
f012be26:	e8 e3 4e fd ff       	call   f0100d0e <cprintf>
f012be2b:	83 c4 10             	add    $0x10,%esp
f012be2e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012be35:	e8 33 13 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012be3a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012be3d:	e8 b2 7f fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012be42:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012be45:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012be4b:	83 ec 0c             	sub    $0xc,%esp
f012be4e:	50                   	push   %eax
f012be4f:	e8 d2 bc fd ff       	call   f0107b26 <kfree>
f012be54:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012be57:	e8 98 7f fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012be5c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012be5f:	74 1d                	je     f012be7e <test_kfreelast+0x1e00>
f012be61:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be65:	75 17                	jne    f012be7e <test_kfreelast+0x1e00>
f012be67:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be6e:	83 ec 0c             	sub    $0xc,%esp
f012be71:	68 54 c6 13 f0       	push   $0xf013c654
f012be76:	e8 93 4e fd ff       	call   f0100d0e <cprintf>
f012be7b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012be7e:	e8 ea 12 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012be83:	89 c2                	mov    %eax,%edx
f012be85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012be88:	29 c2                	sub    %eax,%edx
f012be8a:	89 d0                	mov    %edx,%eax
f012be8c:	83 f8 0d             	cmp    $0xd,%eax
f012be8f:	74 1d                	je     f012beae <test_kfreelast+0x1e30>
f012be91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be95:	75 17                	jne    f012beae <test_kfreelast+0x1e30>
f012be97:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be9e:	83 ec 0c             	sub    $0xc,%esp
f012bea1:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012bea6:	e8 63 4e fd ff       	call   f0100d0e <cprintf>
f012beab:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012beae:	83 ec 0c             	sub    $0xc,%esp
f012beb1:	6a 03                	push   $0x3
f012beb3:	e8 55 17 fe ff       	call   f010d60d <sys_bypassPageFault>
f012beb8:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012bebb:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bec1:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012bec4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012becb:	eb 3c                	jmp    f012bf09 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012becd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bed0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bed3:	01 d0                	add    %edx,%eax
f012bed5:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bed8:	e8 1e 17 fe ff       	call   f010d5fb <sys_rcr2>
f012bedd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bee0:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012bee3:	01 ca                	add    %ecx,%edx
f012bee5:	39 d0                	cmp    %edx,%eax
f012bee7:	74 1d                	je     f012bf06 <test_kfreelast+0x1e88>
f012bee9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012beed:	75 17                	jne    f012bf06 <test_kfreelast+0x1e88>
f012beef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bef6:	83 ec 0c             	sub    $0xc,%esp
f012bef9:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012befe:	e8 0b 4e fd ff       	call   f0100d0e <cprintf>
f012bf03:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bf06:	ff 45 f4             	incl   -0xc(%ebp)
f012bf09:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bf10:	7e bb                	jle    f012becd <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bf12:	83 ec 0c             	sub    $0xc,%esp
f012bf15:	6a 00                	push   $0x0
f012bf17:	e8 f1 16 fe ff       	call   f010d60d <sys_bypassPageFault>
f012bf1c:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bf1f:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bf25:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bf28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bf2f:	eb 1e                	jmp    f012bf4f <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012bf31:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012bf37:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bf3a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf3d:	01 c8                	add    %ecx,%eax
f012bf3f:	8a 00                	mov    (%eax),%al
f012bf41:	0f be c0             	movsbl %al,%eax
f012bf44:	01 d0                	add    %edx,%eax
f012bf46:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bf4c:	ff 45 f4             	incl   -0xc(%ebp)
f012bf4f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bf55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bf58:	7f d7                	jg     f012bf31 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bf5a:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bf60:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bf66:	89 d0                	mov    %edx,%eax
f012bf68:	01 c0                	add    %eax,%eax
f012bf6a:	01 d0                	add    %edx,%eax
f012bf6c:	01 c0                	add    %eax,%eax
f012bf6e:	01 d0                	add    %edx,%eax
f012bf70:	01 c0                	add    %eax,%eax
f012bf72:	39 c1                	cmp    %eax,%ecx
f012bf74:	74 1d                	je     f012bf93 <test_kfreelast+0x1f15>
f012bf76:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf7a:	75 17                	jne    f012bf93 <test_kfreelast+0x1f15>
f012bf7c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf83:	83 ec 0c             	sub    $0xc,%esp
f012bf86:	68 a4 c7 13 f0       	push   $0xf013c7a4
f012bf8b:	e8 7e 4d fd ff       	call   f0100d0e <cprintf>
f012bf90:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bf93:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf97:	75 17                	jne    f012bfb0 <test_kfreelast+0x1f32>
f012bf99:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012bf9d:	83 ec 08             	sub    $0x8,%esp
f012bfa0:	ff 75 f0             	pushl  -0x10(%ebp)
f012bfa3:	68 2c c6 13 f0       	push   $0xf013c62c
f012bfa8:	e8 61 4d fd ff       	call   f0100d0e <cprintf>
f012bfad:	83 c4 10             	add    $0x10,%esp
f012bfb0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012bfb7:	e8 b1 11 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012bfbc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bfbf:	e8 30 7e fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012bfc4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012bfc7:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bfcd:	83 ec 0c             	sub    $0xc,%esp
f012bfd0:	50                   	push   %eax
f012bfd1:	e8 50 bb fd ff       	call   f0107b26 <kfree>
f012bfd6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfd9:	e8 16 7e fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012bfde:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bfe1:	74 1d                	je     f012c000 <test_kfreelast+0x1f82>
f012bfe3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfe7:	75 17                	jne    f012c000 <test_kfreelast+0x1f82>
f012bfe9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bff0:	83 ec 0c             	sub    $0xc,%esp
f012bff3:	68 54 c6 13 f0       	push   $0xf013c654
f012bff8:	e8 11 4d fd ff       	call   f0100d0e <cprintf>
f012bffd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c000:	e8 68 11 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c005:	89 c2                	mov    %eax,%edx
f012c007:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c00a:	29 c2                	sub    %eax,%edx
f012c00c:	89 d0                	mov    %edx,%eax
f012c00e:	83 f8 02             	cmp    $0x2,%eax
f012c011:	74 1d                	je     f012c030 <test_kfreelast+0x1fb2>
f012c013:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c017:	75 17                	jne    f012c030 <test_kfreelast+0x1fb2>
f012c019:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c020:	83 ec 0c             	sub    $0xc,%esp
f012c023:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012c028:	e8 e1 4c fd ff       	call   f0100d0e <cprintf>
f012c02d:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c030:	e8 38 11 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c035:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c038:	e8 b7 7d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c03d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012c040:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012c046:	83 ec 0c             	sub    $0xc,%esp
f012c049:	50                   	push   %eax
f012c04a:	e8 d7 ba fd ff       	call   f0107b26 <kfree>
f012c04f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c052:	e8 9d 7d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c057:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c05a:	74 1d                	je     f012c079 <test_kfreelast+0x1ffb>
f012c05c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c060:	75 17                	jne    f012c079 <test_kfreelast+0x1ffb>
f012c062:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c069:	83 ec 0c             	sub    $0xc,%esp
f012c06c:	68 54 c6 13 f0       	push   $0xf013c654
f012c071:	e8 98 4c fd ff       	call   f0100d0e <cprintf>
f012c076:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c079:	e8 ef 10 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c07e:	89 c2                	mov    %eax,%edx
f012c080:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c083:	29 c2                	sub    %eax,%edx
f012c085:	89 d0                	mov    %edx,%eax
f012c087:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c08c:	74 1d                	je     f012c0ab <test_kfreelast+0x202d>
f012c08e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c092:	75 17                	jne    f012c0ab <test_kfreelast+0x202d>
f012c094:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c09b:	83 ec 0c             	sub    $0xc,%esp
f012c09e:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012c0a3:	e8 66 4c fd ff       	call   f0100d0e <cprintf>
f012c0a8:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c0ab:	e8 bd 10 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c0b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c0b3:	e8 3c 7d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c0b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012c0bb:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012c0c1:	83 ec 0c             	sub    $0xc,%esp
f012c0c4:	50                   	push   %eax
f012c0c5:	e8 5c ba fd ff       	call   f0107b26 <kfree>
f012c0ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c0cd:	e8 22 7d fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c0d2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c0d5:	74 1d                	je     f012c0f4 <test_kfreelast+0x2076>
f012c0d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0db:	75 17                	jne    f012c0f4 <test_kfreelast+0x2076>
f012c0dd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0e4:	83 ec 0c             	sub    $0xc,%esp
f012c0e7:	68 54 c6 13 f0       	push   $0xf013c654
f012c0ec:	e8 1d 4c fd ff       	call   f0100d0e <cprintf>
f012c0f1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c0f4:	e8 74 10 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c0f9:	89 c2                	mov    %eax,%edx
f012c0fb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c0fe:	29 c2                	sub    %eax,%edx
f012c100:	89 d0                	mov    %edx,%eax
f012c102:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c107:	74 1d                	je     f012c126 <test_kfreelast+0x20a8>
f012c109:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c10d:	75 17                	jne    f012c126 <test_kfreelast+0x20a8>
f012c10f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c116:	83 ec 0c             	sub    $0xc,%esp
f012c119:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012c11e:	e8 eb 4b fd ff       	call   f0100d0e <cprintf>
f012c123:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c126:	e8 42 10 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c12b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c12e:	e8 c1 7c fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c133:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c136:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c13c:	83 ec 0c             	sub    $0xc,%esp
f012c13f:	50                   	push   %eax
f012c140:	e8 e1 b9 fd ff       	call   f0107b26 <kfree>
f012c145:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c148:	e8 a7 7c fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c14d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c150:	74 1d                	je     f012c16f <test_kfreelast+0x20f1>
f012c152:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c156:	75 17                	jne    f012c16f <test_kfreelast+0x20f1>
f012c158:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c15f:	83 ec 0c             	sub    $0xc,%esp
f012c162:	68 54 c6 13 f0       	push   $0xf013c654
f012c167:	e8 a2 4b fd ff       	call   f0100d0e <cprintf>
f012c16c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c16f:	e8 f9 0f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c174:	89 c2                	mov    %eax,%edx
f012c176:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c179:	29 c2                	sub    %eax,%edx
f012c17b:	89 d0                	mov    %edx,%eax
f012c17d:	83 f8 01             	cmp    $0x1,%eax
f012c180:	74 1d                	je     f012c19f <test_kfreelast+0x2121>
f012c182:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c186:	75 17                	jne    f012c19f <test_kfreelast+0x2121>
f012c188:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c18f:	83 ec 0c             	sub    $0xc,%esp
f012c192:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012c197:	e8 72 4b fd ff       	call   f0100d0e <cprintf>
f012c19c:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c19f:	e8 c9 0f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c1a4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c1a7:	e8 48 7c fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c1ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012c1af:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012c1b5:	83 ec 0c             	sub    $0xc,%esp
f012c1b8:	50                   	push   %eax
f012c1b9:	e8 68 b9 fd ff       	call   f0107b26 <kfree>
f012c1be:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c1c1:	e8 2e 7c fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c1c6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c1c9:	74 1d                	je     f012c1e8 <test_kfreelast+0x216a>
f012c1cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1cf:	75 17                	jne    f012c1e8 <test_kfreelast+0x216a>
f012c1d1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c1d8:	83 ec 0c             	sub    $0xc,%esp
f012c1db:	68 54 c6 13 f0       	push   $0xf013c654
f012c1e0:	e8 29 4b fd ff       	call   f0100d0e <cprintf>
f012c1e5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c1e8:	e8 80 0f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c1ed:	89 c2                	mov    %eax,%edx
f012c1ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c1f2:	29 c2                	sub    %eax,%edx
f012c1f4:	89 d0                	mov    %edx,%eax
f012c1f6:	83 f8 01             	cmp    $0x1,%eax
f012c1f9:	74 1d                	je     f012c218 <test_kfreelast+0x219a>
f012c1fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1ff:	75 17                	jne    f012c218 <test_kfreelast+0x219a>
f012c201:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c208:	83 ec 0c             	sub    $0xc,%esp
f012c20b:	68 c0 c6 13 f0       	push   $0xf013c6c0
f012c210:	e8 f9 4a fd ff       	call   f0100d0e <cprintf>
f012c215:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012c218:	e8 50 0f fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c21d:	89 c2                	mov    %eax,%edx
f012c21f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012c222:	39 c2                	cmp    %eax,%edx
f012c224:	74 1d                	je     f012c243 <test_kfreelast+0x21c5>
f012c226:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c22a:	75 17                	jne    f012c243 <test_kfreelast+0x21c5>
f012c22c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c233:	83 ec 0c             	sub    $0xc,%esp
f012c236:	68 20 c8 13 f0       	push   $0xf013c820
f012c23b:	e8 ce 4a fd ff       	call   f0100d0e <cprintf>
f012c240:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012c243:	83 ec 0c             	sub    $0xc,%esp
f012c246:	6a 03                	push   $0x3
f012c248:	e8 c0 13 fe ff       	call   f010d60d <sys_bypassPageFault>
f012c24d:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012c250:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c257:	e9 8e 00 00 00       	jmp    f012c2ea <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012c25c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c25f:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012c266:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012c269:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c26c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c26f:	e8 87 13 fe ff       	call   f010d5fb <sys_rcr2>
f012c274:	89 c2                	mov    %eax,%edx
f012c276:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c279:	39 c2                	cmp    %eax,%edx
f012c27b:	74 1d                	je     f012c29a <test_kfreelast+0x221c>
f012c27d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c281:	75 17                	jne    f012c29a <test_kfreelast+0x221c>
f012c283:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c28a:	83 ec 0c             	sub    $0xc,%esp
f012c28d:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012c292:	e8 77 4a fd ff       	call   f0100d0e <cprintf>
f012c297:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012c29a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c29d:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c2a4:	89 c2                	mov    %eax,%edx
f012c2a6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2a9:	01 d0                	add    %edx,%eax
f012c2ab:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c2ae:	e8 48 13 fe ff       	call   f010d5fb <sys_rcr2>
f012c2b3:	89 c2                	mov    %eax,%edx
f012c2b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c2b8:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c2bf:	89 c1                	mov    %eax,%ecx
f012c2c1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2c4:	01 c8                	add    %ecx,%eax
f012c2c6:	39 c2                	cmp    %eax,%edx
f012c2c8:	74 1d                	je     f012c2e7 <test_kfreelast+0x2269>
f012c2ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c2ce:	75 17                	jne    f012c2e7 <test_kfreelast+0x2269>
f012c2d0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c2d7:	83 ec 0c             	sub    $0xc,%esp
f012c2da:	68 d8 c7 13 f0       	push   $0xf013c7d8
f012c2df:	e8 2a 4a fd ff       	call   f0100d0e <cprintf>
f012c2e4:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012c2e7:	ff 45 f4             	incl   -0xc(%ebp)
f012c2ea:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012c2ee:	0f 8e 68 ff ff ff    	jle    f012c25c <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012c2f4:	83 ec 0c             	sub    $0xc,%esp
f012c2f7:	6a 00                	push   $0x0
f012c2f9:	e8 0f 13 fe ff       	call   f010d60d <sys_bypassPageFault>
f012c2fe:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012c301:	e8 67 0e fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c306:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c309:	e8 e6 7a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c30e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012c311:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012c317:	83 ec 0c             	sub    $0xc,%esp
f012c31a:	50                   	push   %eax
f012c31b:	e8 06 b8 fd ff       	call   f0107b26 <kfree>
f012c320:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c323:	e8 cc 7a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c328:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c32b:	74 1d                	je     f012c34a <test_kfreelast+0x22cc>
f012c32d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c331:	75 17                	jne    f012c34a <test_kfreelast+0x22cc>
f012c333:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c33a:	83 ec 0c             	sub    $0xc,%esp
f012c33d:	68 54 c6 13 f0       	push   $0xf013c654
f012c342:	e8 c7 49 fd ff       	call   f0100d0e <cprintf>
f012c347:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c34a:	e8 1e 0e fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c34f:	89 c2                	mov    %eax,%edx
f012c351:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c354:	39 c2                	cmp    %eax,%edx
f012c356:	74 1d                	je     f012c375 <test_kfreelast+0x22f7>
f012c358:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c35c:	75 17                	jne    f012c375 <test_kfreelast+0x22f7>
f012c35e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c365:	83 ec 0c             	sub    $0xc,%esp
f012c368:	68 58 c8 13 f0       	push   $0xf013c858
f012c36d:	e8 9c 49 fd ff       	call   f0100d0e <cprintf>
f012c372:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c375:	e8 f3 0d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c37a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c37d:	e8 72 7a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c382:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c385:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c38b:	83 ec 0c             	sub    $0xc,%esp
f012c38e:	50                   	push   %eax
f012c38f:	e8 92 b7 fd ff       	call   f0107b26 <kfree>
f012c394:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c397:	e8 58 7a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c39c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c39f:	74 1d                	je     f012c3be <test_kfreelast+0x2340>
f012c3a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3a5:	75 17                	jne    f012c3be <test_kfreelast+0x2340>
f012c3a7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3ae:	83 ec 0c             	sub    $0xc,%esp
f012c3b1:	68 54 c6 13 f0       	push   $0xf013c654
f012c3b6:	e8 53 49 fd ff       	call   f0100d0e <cprintf>
f012c3bb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c3be:	e8 aa 0d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c3c3:	89 c2                	mov    %eax,%edx
f012c3c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c3c8:	39 c2                	cmp    %eax,%edx
f012c3ca:	74 1d                	je     f012c3e9 <test_kfreelast+0x236b>
f012c3cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3d0:	75 17                	jne    f012c3e9 <test_kfreelast+0x236b>
f012c3d2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3d9:	83 ec 0c             	sub    $0xc,%esp
f012c3dc:	68 58 c8 13 f0       	push   $0xf013c858
f012c3e1:	e8 28 49 fd ff       	call   f0100d0e <cprintf>
f012c3e6:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012c3e9:	e8 7f 0d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c3ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c3f1:	e8 fe 79 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c3f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012c3f9:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012c3ff:	83 ec 0c             	sub    $0xc,%esp
f012c402:	50                   	push   %eax
f012c403:	e8 1e b7 fd ff       	call   f0107b26 <kfree>
f012c408:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c40b:	e8 e4 79 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c410:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c413:	74 1d                	je     f012c432 <test_kfreelast+0x23b4>
f012c415:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c419:	75 17                	jne    f012c432 <test_kfreelast+0x23b4>
f012c41b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c422:	83 ec 0c             	sub    $0xc,%esp
f012c425:	68 54 c6 13 f0       	push   $0xf013c654
f012c42a:	e8 df 48 fd ff       	call   f0100d0e <cprintf>
f012c42f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c432:	e8 36 0d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c437:	89 c2                	mov    %eax,%edx
f012c439:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c43c:	39 c2                	cmp    %eax,%edx
f012c43e:	74 1d                	je     f012c45d <test_kfreelast+0x23df>
f012c440:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c444:	75 17                	jne    f012c45d <test_kfreelast+0x23df>
f012c446:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c44d:	83 ec 0c             	sub    $0xc,%esp
f012c450:	68 58 c8 13 f0       	push   $0xf013c858
f012c455:	e8 b4 48 fd ff       	call   f0100d0e <cprintf>
f012c45a:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c45d:	e8 0b 0d fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c462:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c465:	e8 8a 79 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c46a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c46d:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c473:	83 ec 0c             	sub    $0xc,%esp
f012c476:	50                   	push   %eax
f012c477:	e8 aa b6 fd ff       	call   f0107b26 <kfree>
f012c47c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c47f:	e8 70 79 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012c484:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c487:	74 1d                	je     f012c4a6 <test_kfreelast+0x2428>
f012c489:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c48d:	75 17                	jne    f012c4a6 <test_kfreelast+0x2428>
f012c48f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c496:	83 ec 0c             	sub    $0xc,%esp
f012c499:	68 54 c6 13 f0       	push   $0xf013c654
f012c49e:	e8 6b 48 fd ff       	call   f0100d0e <cprintf>
f012c4a3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c4a6:	e8 c2 0c fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c4ab:	89 c2                	mov    %eax,%edx
f012c4ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c4b0:	39 c2                	cmp    %eax,%edx
f012c4b2:	74 1d                	je     f012c4d1 <test_kfreelast+0x2453>
f012c4b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c4b8:	75 17                	jne    f012c4d1 <test_kfreelast+0x2453>
f012c4ba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c4c1:	83 ec 0c             	sub    $0xc,%esp
f012c4c4:	68 58 c8 13 f0       	push   $0xf013c858
f012c4c9:	e8 40 48 fd ff       	call   f0100d0e <cprintf>
f012c4ce:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c4d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c4d5:	75 17                	jne    f012c4ee <test_kfreelast+0x2470>
f012c4d7:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c4db:	83 ec 08             	sub    $0x8,%esp
f012c4de:	ff 75 f0             	pushl  -0x10(%ebp)
f012c4e1:	68 2c c6 13 f0       	push   $0xf013c62c
f012c4e6:	e8 23 48 fd ff       	call   f0100d0e <cprintf>
f012c4eb:	83 c4 10             	add    $0x10,%esp
f012c4ee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c4f5:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c4fa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c4fd:	5b                   	pop    %ebx
f012c4fe:	5f                   	pop    %edi
f012c4ff:	5d                   	pop    %ebp
f012c500:	c3                   	ret    

f012c501 <test_krealloc>:

int test_krealloc() {
f012c501:	55                   	push   %ebp
f012c502:	89 e5                	mov    %esp,%ebp
f012c504:	57                   	push   %edi
f012c505:	53                   	push   %ebx
f012c506:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c50c:	83 ec 0c             	sub    $0xc,%esp
f012c50f:	68 3c b5 13 f0       	push   $0xf013b53c
f012c514:	e8 f5 47 fd ff       	call   f0100d0e <cprintf>
f012c519:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c51c:	83 ec 0c             	sub    $0xc,%esp
f012c51f:	68 6c b5 13 f0       	push   $0xf013b56c
f012c524:	e8 e5 47 fd ff       	call   f0100d0e <cprintf>
f012c529:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c52c:	83 ec 0c             	sub    $0xc,%esp
f012c52f:	68 3c b5 13 f0       	push   $0xf013b53c
f012c534:	e8 d5 47 fd ff       	call   f0100d0e <cprintf>
f012c539:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c53c:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c540:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c544:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c54a:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c550:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c557:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c55e:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c564:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c569:	b8 00 00 00 00       	mov    $0x0,%eax
f012c56e:	89 d7                	mov    %edx,%edi
f012c570:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c572:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c579:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c57f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c584:	b8 00 00 00 00       	mov    $0x0,%eax
f012c589:	89 d7                	mov    %edx,%edi
f012c58b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c58d:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c593:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c598:	b8 00 00 00 00       	mov    $0x0,%eax
f012c59d:	89 d7                	mov    %edx,%edi
f012c59f:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c5a1:	e8 c7 0b fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c5a6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c5a9:	83 ec 08             	sub    $0x8,%esp
f012c5ac:	68 00 fc 0f 00       	push   $0xffc00
f012c5b1:	6a 00                	push   $0x0
f012c5b3:	e8 4e b7 fd ff       	call   f0107d06 <krealloc>
f012c5b8:	83 c4 10             	add    $0x10,%esp
f012c5bb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c5c1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c5c7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c5cc:	77 17                	ja     f012c5e5 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5ce:	83 ec 04             	sub    $0x4,%esp
f012c5d1:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012c5d6:	68 e2 0e 00 00       	push   $0xee2
f012c5db:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c5e0:	e8 20 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c5e5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c5eb:	89 c1                	mov    %eax,%ecx
f012c5ed:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c5f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c5f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c5fc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c5ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c602:	ba 00 00 00 00       	mov    $0x0,%edx
f012c607:	f7 75 b4             	divl   -0x4c(%ebp)
f012c60a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c60d:	29 d0                	sub    %edx,%eax
f012c60f:	89 c3                	mov    %eax,%ebx
f012c611:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c618:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c61d:	0f b6 d0             	movzbl %al,%edx
f012c620:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c623:	01 d0                	add    %edx,%eax
f012c625:	48                   	dec    %eax
f012c626:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c629:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c62c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c631:	f7 75 ac             	divl   -0x54(%ebp)
f012c634:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c637:	29 d0                	sub    %edx,%eax
f012c639:	01 c3                	add    %eax,%ebx
f012c63b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c642:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c647:	0f b6 c0             	movzbl %al,%eax
f012c64a:	c1 e0 04             	shl    $0x4,%eax
f012c64d:	89 c2                	mov    %eax,%edx
f012c64f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c652:	01 d0                	add    %edx,%eax
f012c654:	48                   	dec    %eax
f012c655:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c658:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c65b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c660:	f7 75 a4             	divl   -0x5c(%ebp)
f012c663:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c666:	29 d0                	sub    %edx,%eax
f012c668:	01 d8                	add    %ebx,%eax
f012c66a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c66f:	39 c1                	cmp    %eax,%ecx
f012c671:	74 17                	je     f012c68a <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c673:	83 ec 04             	sub    $0x4,%esp
f012c676:	68 dc c8 13 f0       	push   $0xf013c8dc
f012c67b:	68 e4 0e 00 00       	push   $0xee4
f012c680:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c685:	e8 7b 3b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c68a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c68d:	e8 db 0a fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c692:	29 c3                	sub    %eax,%ebx
f012c694:	89 d8                	mov    %ebx,%eax
f012c696:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c69b:	74 17                	je     f012c6b4 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c69d:	83 ec 04             	sub    $0x4,%esp
f012c6a0:	68 0e c9 13 f0       	push   $0xf013c90e
f012c6a5:	68 e7 0e 00 00       	push   $0xee7
f012c6aa:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c6af:	e8 51 3b fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c6b4:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c6bb:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c6be:	e8 aa 0a fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c6c3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c6c6:	83 ec 08             	sub    $0x8,%esp
f012c6c9:	68 00 fc 0f 00       	push   $0xffc00
f012c6ce:	6a 00                	push   $0x0
f012c6d0:	e8 31 b6 fd ff       	call   f0107d06 <krealloc>
f012c6d5:	83 c4 10             	add    $0x10,%esp
f012c6d8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c6de:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c6e4:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c6e9:	77 17                	ja     f012c702 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c6eb:	83 ec 04             	sub    $0x4,%esp
f012c6ee:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012c6f3:	68 ef 0e 00 00       	push   $0xeef
f012c6f8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c6fd:	e8 03 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c702:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c708:	89 c1                	mov    %eax,%ecx
f012c70a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c711:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c714:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c719:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c71c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c71f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c724:	f7 75 9c             	divl   -0x64(%ebp)
f012c727:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c72a:	29 d0                	sub    %edx,%eax
f012c72c:	89 c3                	mov    %eax,%ebx
f012c72e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c735:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c73a:	0f b6 d0             	movzbl %al,%edx
f012c73d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c740:	01 d0                	add    %edx,%eax
f012c742:	48                   	dec    %eax
f012c743:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c746:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c749:	ba 00 00 00 00       	mov    $0x0,%edx
f012c74e:	f7 75 94             	divl   -0x6c(%ebp)
f012c751:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c754:	29 d0                	sub    %edx,%eax
f012c756:	01 c3                	add    %eax,%ebx
f012c758:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c75f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c764:	0f b6 c0             	movzbl %al,%eax
f012c767:	c1 e0 04             	shl    $0x4,%eax
f012c76a:	89 c2                	mov    %eax,%edx
f012c76c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c76f:	01 d0                	add    %edx,%eax
f012c771:	48                   	dec    %eax
f012c772:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c775:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c778:	ba 00 00 00 00       	mov    $0x0,%edx
f012c77d:	f7 75 8c             	divl   -0x74(%ebp)
f012c780:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c783:	29 d0                	sub    %edx,%eax
f012c785:	01 d8                	add    %ebx,%eax
f012c787:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c78c:	39 c1                	cmp    %eax,%ecx
f012c78e:	74 17                	je     f012c7a7 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c790:	83 ec 04             	sub    $0x4,%esp
f012c793:	68 dc c8 13 f0       	push   $0xf013c8dc
f012c798:	68 f1 0e 00 00       	push   $0xef1
f012c79d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c7a2:	e8 5e 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c7a7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c7aa:	e8 be 09 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c7af:	29 c3                	sub    %eax,%ebx
f012c7b1:	89 d8                	mov    %ebx,%eax
f012c7b3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c7b8:	74 17                	je     f012c7d1 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c7ba:	83 ec 04             	sub    $0x4,%esp
f012c7bd:	68 0e c9 13 f0       	push   $0xf013c90e
f012c7c2:	68 f3 0e 00 00       	push   $0xef3
f012c7c7:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c7cc:	e8 34 3a fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c7d1:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c7d8:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7db:	e8 8d 09 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c7e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c7e3:	83 ec 08             	sub    $0x8,%esp
f012c7e6:	68 00 fc 0f 00       	push   $0xffc00
f012c7eb:	6a 00                	push   $0x0
f012c7ed:	e8 14 b5 fd ff       	call   f0107d06 <krealloc>
f012c7f2:	83 c4 10             	add    $0x10,%esp
f012c7f5:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c7fb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c801:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c806:	77 17                	ja     f012c81f <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c808:	83 ec 04             	sub    $0x4,%esp
f012c80b:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012c810:	68 fb 0e 00 00       	push   $0xefb
f012c815:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c81a:	e8 e6 39 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c81f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c825:	89 c1                	mov    %eax,%ecx
f012c827:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c82e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c831:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c836:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c839:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c83c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c841:	f7 75 84             	divl   -0x7c(%ebp)
f012c844:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c847:	29 d0                	sub    %edx,%eax
f012c849:	89 c3                	mov    %eax,%ebx
f012c84b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c852:	10 00 00 
f012c855:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c85a:	0f b6 d0             	movzbl %al,%edx
f012c85d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c863:	01 d0                	add    %edx,%eax
f012c865:	48                   	dec    %eax
f012c866:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c86c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c872:	ba 00 00 00 00       	mov    $0x0,%edx
f012c877:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c87d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c883:	29 d0                	sub    %edx,%eax
f012c885:	01 c3                	add    %eax,%ebx
f012c887:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c88e:	10 00 00 
f012c891:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c896:	0f b6 c0             	movzbl %al,%eax
f012c899:	c1 e0 04             	shl    $0x4,%eax
f012c89c:	89 c2                	mov    %eax,%edx
f012c89e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c8a4:	01 d0                	add    %edx,%eax
f012c8a6:	48                   	dec    %eax
f012c8a7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c8ad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c8b3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8b8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c8be:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c8c4:	29 d0                	sub    %edx,%eax
f012c8c6:	01 d8                	add    %ebx,%eax
f012c8c8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c8cd:	39 c1                	cmp    %eax,%ecx
f012c8cf:	74 17                	je     f012c8e8 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c8d1:	83 ec 04             	sub    $0x4,%esp
f012c8d4:	68 dc c8 13 f0       	push   $0xf013c8dc
f012c8d9:	68 fd 0e 00 00       	push   $0xefd
f012c8de:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c8e3:	e8 1d 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c8e8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c8eb:	e8 7d 08 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c8f0:	29 c3                	sub    %eax,%ebx
f012c8f2:	89 d8                	mov    %ebx,%eax
f012c8f4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c8f9:	74 17                	je     f012c912 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c8fb:	83 ec 04             	sub    $0x4,%esp
f012c8fe:	68 0e c9 13 f0       	push   $0xf013c90e
f012c903:	68 ff 0e 00 00       	push   $0xeff
f012c908:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c90d:	e8 f3 38 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c912:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c919:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c91c:	e8 4c 08 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012c921:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c924:	83 ec 08             	sub    $0x8,%esp
f012c927:	68 00 fc 0f 00       	push   $0xffc00
f012c92c:	6a 00                	push   $0x0
f012c92e:	e8 d3 b3 fd ff       	call   f0107d06 <krealloc>
f012c933:	83 c4 10             	add    $0x10,%esp
f012c936:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c93c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c942:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c947:	77 17                	ja     f012c960 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c949:	83 ec 04             	sub    $0x4,%esp
f012c94c:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012c951:	68 06 0f 00 00       	push   $0xf06
f012c956:	68 fa b5 13 f0       	push   $0xf013b5fa
f012c95b:	e8 a5 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c960:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c966:	89 c1                	mov    %eax,%ecx
f012c968:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c96f:	10 00 00 
f012c972:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c978:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c97d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c983:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c989:	ba 00 00 00 00       	mov    $0x0,%edx
f012c98e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c994:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c99a:	29 d0                	sub    %edx,%eax
f012c99c:	89 c3                	mov    %eax,%ebx
f012c99e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c9a5:	10 00 00 
f012c9a8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c9ad:	0f b6 d0             	movzbl %al,%edx
f012c9b0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c9b6:	01 d0                	add    %edx,%eax
f012c9b8:	48                   	dec    %eax
f012c9b9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c9bf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c9c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9ca:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c9d0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c9d6:	29 d0                	sub    %edx,%eax
f012c9d8:	01 c3                	add    %eax,%ebx
f012c9da:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c9e1:	10 00 00 
f012c9e4:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012c9e9:	0f b6 c0             	movzbl %al,%eax
f012c9ec:	c1 e0 04             	shl    $0x4,%eax
f012c9ef:	89 c2                	mov    %eax,%edx
f012c9f1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c9f7:	01 d0                	add    %edx,%eax
f012c9f9:	48                   	dec    %eax
f012c9fa:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012ca00:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ca06:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca0b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012ca11:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ca17:	29 d0                	sub    %edx,%eax
f012ca19:	01 d8                	add    %ebx,%eax
f012ca1b:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012ca20:	39 c1                	cmp    %eax,%ecx
f012ca22:	74 17                	je     f012ca3b <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012ca24:	83 ec 04             	sub    $0x4,%esp
f012ca27:	68 dc c8 13 f0       	push   $0xf013c8dc
f012ca2c:	68 08 0f 00 00       	push   $0xf08
f012ca31:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ca36:	e8 ca 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ca3b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ca3e:	e8 2a 07 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ca43:	29 c3                	sub    %eax,%ebx
f012ca45:	89 d8                	mov    %ebx,%eax
f012ca47:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ca4c:	74 17                	je     f012ca65 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012ca4e:	83 ec 04             	sub    $0x4,%esp
f012ca51:	68 0e c9 13 f0       	push   $0xf013c90e
f012ca56:	68 0a 0f 00 00       	push   $0xf0a
f012ca5b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ca60:	e8 a0 37 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012ca65:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012ca6c:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ca6f:	e8 f9 06 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ca74:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ca77:	83 ec 08             	sub    $0x8,%esp
f012ca7a:	68 00 fc 1f 00       	push   $0x1ffc00
f012ca7f:	6a 00                	push   $0x0
f012ca81:	e8 80 b2 fd ff       	call   f0107d06 <krealloc>
f012ca86:	83 c4 10             	add    $0x10,%esp
f012ca89:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012ca8f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca95:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012ca9a:	77 17                	ja     f012cab3 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca9c:	83 ec 04             	sub    $0x4,%esp
f012ca9f:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012caa4:	68 11 0f 00 00       	push   $0xf11
f012caa9:	68 fa b5 13 f0       	push   $0xf013b5fa
f012caae:	e8 52 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012cab3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cab9:	89 c1                	mov    %eax,%ecx
f012cabb:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012cac2:	10 00 00 
f012cac5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012cacb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cad0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012cad6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012cadc:	ba 00 00 00 00       	mov    $0x0,%edx
f012cae1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012cae7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012caed:	29 d0                	sub    %edx,%eax
f012caef:	89 c3                	mov    %eax,%ebx
f012caf1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012caf8:	10 00 00 
f012cafb:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cb00:	0f b6 d0             	movzbl %al,%edx
f012cb03:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012cb09:	01 d0                	add    %edx,%eax
f012cb0b:	48                   	dec    %eax
f012cb0c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012cb12:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cb18:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb1d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012cb23:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cb29:	29 d0                	sub    %edx,%eax
f012cb2b:	01 c3                	add    %eax,%ebx
f012cb2d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012cb34:	10 00 00 
f012cb37:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cb3c:	0f b6 c0             	movzbl %al,%eax
f012cb3f:	c1 e0 04             	shl    $0x4,%eax
f012cb42:	89 c2                	mov    %eax,%edx
f012cb44:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012cb4a:	01 d0                	add    %edx,%eax
f012cb4c:	48                   	dec    %eax
f012cb4d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012cb53:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cb59:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb5e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012cb64:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cb6a:	29 d0                	sub    %edx,%eax
f012cb6c:	01 d8                	add    %ebx,%eax
f012cb6e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012cb73:	39 c1                	cmp    %eax,%ecx
f012cb75:	74 17                	je     f012cb8e <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012cb77:	83 ec 04             	sub    $0x4,%esp
f012cb7a:	68 dc c8 13 f0       	push   $0xf013c8dc
f012cb7f:	68 13 0f 00 00       	push   $0xf13
f012cb84:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cb89:	e8 77 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012cb8e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cb91:	e8 d7 05 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012cb96:	29 c3                	sub    %eax,%ebx
f012cb98:	89 d8                	mov    %ebx,%eax
f012cb9a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cb9f:	74 17                	je     f012cbb8 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012cba1:	83 ec 04             	sub    $0x4,%esp
f012cba4:	68 0e c9 13 f0       	push   $0xf013c90e
f012cba9:	68 15 0f 00 00       	push   $0xf15
f012cbae:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cbb3:	e8 4d 36 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cbb8:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012cbbf:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012cbc2:	e8 a6 05 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012cbc7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012cbca:	83 ec 08             	sub    $0x8,%esp
f012cbcd:	68 00 fc 1f 00       	push   $0x1ffc00
f012cbd2:	6a 00                	push   $0x0
f012cbd4:	e8 2d b1 fd ff       	call   f0107d06 <krealloc>
f012cbd9:	83 c4 10             	add    $0x10,%esp
f012cbdc:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012cbe2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cbe8:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012cbed:	77 17                	ja     f012cc06 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cbef:	83 ec 04             	sub    $0x4,%esp
f012cbf2:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012cbf7:	68 1c 0f 00 00       	push   $0xf1c
f012cbfc:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cc01:	e8 ff 35 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012cc06:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cc0c:	89 c1                	mov    %eax,%ecx
f012cc0e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012cc15:	10 00 00 
f012cc18:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012cc1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cc23:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012cc29:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cc2f:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc34:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012cc3a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cc40:	29 d0                	sub    %edx,%eax
f012cc42:	89 c3                	mov    %eax,%ebx
f012cc44:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012cc4b:	10 00 00 
f012cc4e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cc53:	0f b6 d0             	movzbl %al,%edx
f012cc56:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012cc5c:	01 d0                	add    %edx,%eax
f012cc5e:	48                   	dec    %eax
f012cc5f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012cc65:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cc6b:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc70:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012cc76:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cc7c:	29 d0                	sub    %edx,%eax
f012cc7e:	01 c3                	add    %eax,%ebx
f012cc80:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012cc87:	10 00 00 
f012cc8a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cc8f:	0f b6 c0             	movzbl %al,%eax
f012cc92:	c1 e0 04             	shl    $0x4,%eax
f012cc95:	89 c2                	mov    %eax,%edx
f012cc97:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cc9d:	01 d0                	add    %edx,%eax
f012cc9f:	48                   	dec    %eax
f012cca0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012cca6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ccac:	ba 00 00 00 00       	mov    $0x0,%edx
f012ccb1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012ccb7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ccbd:	29 d0                	sub    %edx,%eax
f012ccbf:	01 d8                	add    %ebx,%eax
f012ccc1:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012ccc6:	39 c1                	cmp    %eax,%ecx
f012ccc8:	74 17                	je     f012cce1 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012ccca:	83 ec 04             	sub    $0x4,%esp
f012cccd:	68 dc c8 13 f0       	push   $0xf013c8dc
f012ccd2:	68 1e 0f 00 00       	push   $0xf1e
f012ccd7:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ccdc:	e8 24 35 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012cce1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cce4:	e8 84 04 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012cce9:	29 c3                	sub    %eax,%ebx
f012cceb:	89 d8                	mov    %ebx,%eax
f012cced:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ccf2:	74 17                	je     f012cd0b <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012ccf4:	83 ec 04             	sub    $0x4,%esp
f012ccf7:	68 0e c9 13 f0       	push   $0xf013c90e
f012ccfc:	68 20 0f 00 00       	push   $0xf20
f012cd01:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cd06:	e8 fa 34 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cd0b:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012cd12:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012cd15:	e8 53 04 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012cd1a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012cd1d:	83 ec 08             	sub    $0x8,%esp
f012cd20:	68 00 fc 2f 00       	push   $0x2ffc00
f012cd25:	6a 00                	push   $0x0
f012cd27:	e8 da af fd ff       	call   f0107d06 <krealloc>
f012cd2c:	83 c4 10             	add    $0x10,%esp
f012cd2f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012cd35:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cd3b:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012cd40:	77 17                	ja     f012cd59 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd42:	83 ec 04             	sub    $0x4,%esp
f012cd45:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012cd4a:	68 27 0f 00 00       	push   $0xf27
f012cd4f:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cd54:	e8 ac 34 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012cd59:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cd5f:	89 c1                	mov    %eax,%ecx
f012cd61:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012cd68:	10 00 00 
f012cd6b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cd71:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cd76:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012cd7c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd82:	ba 00 00 00 00       	mov    $0x0,%edx
f012cd87:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012cd8d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd93:	29 d0                	sub    %edx,%eax
f012cd95:	89 c3                	mov    %eax,%ebx
f012cd97:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012cd9e:	10 00 00 
f012cda1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cda6:	0f b6 d0             	movzbl %al,%edx
f012cda9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012cdaf:	01 d0                	add    %edx,%eax
f012cdb1:	48                   	dec    %eax
f012cdb2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012cdb8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cdbe:	ba 00 00 00 00       	mov    $0x0,%edx
f012cdc3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012cdc9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cdcf:	29 d0                	sub    %edx,%eax
f012cdd1:	01 c3                	add    %eax,%ebx
f012cdd3:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012cdda:	10 00 00 
f012cddd:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cde2:	0f b6 c0             	movzbl %al,%eax
f012cde5:	c1 e0 04             	shl    $0x4,%eax
f012cde8:	89 c2                	mov    %eax,%edx
f012cdea:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012cdf0:	01 d0                	add    %edx,%eax
f012cdf2:	48                   	dec    %eax
f012cdf3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012cdf9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012cdff:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce04:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ce0a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ce10:	29 d0                	sub    %edx,%eax
f012ce12:	01 d8                	add    %ebx,%eax
f012ce14:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ce19:	39 c1                	cmp    %eax,%ecx
f012ce1b:	74 17                	je     f012ce34 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ce1d:	83 ec 04             	sub    $0x4,%esp
f012ce20:	68 dc c8 13 f0       	push   $0xf013c8dc
f012ce25:	68 29 0f 00 00       	push   $0xf29
f012ce2a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ce2f:	e8 d1 33 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ce34:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ce37:	e8 31 03 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ce3c:	29 c3                	sub    %eax,%ebx
f012ce3e:	89 d8                	mov    %ebx,%eax
f012ce40:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ce45:	74 17                	je     f012ce5e <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012ce47:	83 ec 04             	sub    $0x4,%esp
f012ce4a:	68 44 ba 13 f0       	push   $0xf013ba44
f012ce4f:	68 2b 0f 00 00       	push   $0xf2b
f012ce54:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ce59:	e8 a7 33 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ce5e:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012ce65:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ce68:	e8 00 03 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012ce6d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ce70:	83 ec 08             	sub    $0x8,%esp
f012ce73:	68 00 fc 2f 00       	push   $0x2ffc00
f012ce78:	6a 00                	push   $0x0
f012ce7a:	e8 87 ae fd ff       	call   f0107d06 <krealloc>
f012ce7f:	83 c4 10             	add    $0x10,%esp
f012ce82:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ce88:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ce8e:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ce93:	77 17                	ja     f012ceac <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce95:	83 ec 04             	sub    $0x4,%esp
f012ce98:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012ce9d:	68 32 0f 00 00       	push   $0xf32
f012cea2:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cea7:	e8 59 33 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ceac:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ceb2:	89 c1                	mov    %eax,%ecx
f012ceb4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012cebb:	10 00 00 
f012cebe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012cec4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cec9:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012cecf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ced5:	ba 00 00 00 00       	mov    $0x0,%edx
f012ceda:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012cee0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cee6:	29 d0                	sub    %edx,%eax
f012cee8:	89 c3                	mov    %eax,%ebx
f012ceea:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012cef1:	10 00 00 
f012cef4:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cef9:	0f b6 d0             	movzbl %al,%edx
f012cefc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cf02:	01 d0                	add    %edx,%eax
f012cf04:	48                   	dec    %eax
f012cf05:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cf0b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cf11:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf16:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cf1c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cf22:	29 d0                	sub    %edx,%eax
f012cf24:	01 c3                	add    %eax,%ebx
f012cf26:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012cf2d:	10 00 00 
f012cf30:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012cf35:	0f b6 c0             	movzbl %al,%eax
f012cf38:	c1 e0 04             	shl    $0x4,%eax
f012cf3b:	89 c2                	mov    %eax,%edx
f012cf3d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012cf43:	01 d0                	add    %edx,%eax
f012cf45:	48                   	dec    %eax
f012cf46:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012cf4c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cf52:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf57:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cf5d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cf63:	29 d0                	sub    %edx,%eax
f012cf65:	01 d8                	add    %ebx,%eax
f012cf67:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cf6c:	39 c1                	cmp    %eax,%ecx
f012cf6e:	74 17                	je     f012cf87 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cf70:	83 ec 04             	sub    $0x4,%esp
f012cf73:	68 dc c8 13 f0       	push   $0xf013c8dc
f012cf78:	68 34 0f 00 00       	push   $0xf34
f012cf7d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cf82:	e8 7e 32 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cf87:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf8a:	e8 de 01 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012cf8f:	29 c3                	sub    %eax,%ebx
f012cf91:	89 d8                	mov    %ebx,%eax
f012cf93:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cf98:	74 17                	je     f012cfb1 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012cf9a:	83 ec 04             	sub    $0x4,%esp
f012cf9d:	68 0e c9 13 f0       	push   $0xf013c90e
f012cfa2:	68 36 0f 00 00       	push   $0xf36
f012cfa7:	68 fa b5 13 f0       	push   $0xf013b5fa
f012cfac:	e8 54 32 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cfb1:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012cfb8:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cfbb:	e8 ad 01 fe ff       	call   f010d16d <sys_calculate_free_frames>
f012cfc0:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cfc3:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cfca:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cfcd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cfd3:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cfd9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cfdf:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cfe2:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cfe4:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cfea:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cff0:	01 c2                	add    %eax,%edx
f012cff2:	8a 45 ce             	mov    -0x32(%ebp),%al
f012cff5:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cff7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cffd:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d003:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012d00a:	eb 11                	jmp    f012d01d <test_krealloc+0xb1c>
			ptr[i] = 2;
f012d00c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012d00f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d015:	01 d0                	add    %edx,%eax
f012d017:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d01a:	ff 45 f4             	incl   -0xc(%ebp)
f012d01d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d023:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d026:	7d e4                	jge    f012d00c <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012d028:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d02e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012d034:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d03a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012d040:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d046:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d04d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d053:	01 d0                	add    %edx,%eax
f012d055:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012d05b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d061:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d067:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012d06e:	eb 1b                	jmp    f012d08b <test_krealloc+0xb8a>
			intArr[i] = 4;
f012d070:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d073:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d07a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d080:	01 d0                	add    %edx,%eax
f012d082:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d088:	ff 45 f0             	incl   -0x10(%ebp)
f012d08b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d091:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012d094:	7d da                	jge    f012d070 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d096:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d09c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d0a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012d0a9:	eb 17                	jmp    f012d0c2 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012d0ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012d0ae:	01 c0                	add    %eax,%eax
f012d0b0:	89 c2                	mov    %eax,%edx
f012d0b2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0b8:	01 d0                	add    %edx,%eax
f012d0ba:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d0bf:	ff 45 ec             	incl   -0x14(%ebp)
f012d0c2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d0c8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012d0cb:	7d de                	jge    f012d0ab <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012d0cd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d0d3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012d0d9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0df:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012d0e4:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d0ea:	01 c0                	add    %eax,%eax
f012d0ec:	89 c2                	mov    %eax,%edx
f012d0ee:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0f4:	01 d0                	add    %edx,%eax
f012d0f6:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012d0fb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d101:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d107:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d10e:	eb 49                	jmp    f012d159 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012d110:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d113:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d11a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d120:	01 d0                	add    %edx,%eax
f012d122:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012d125:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d128:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d12f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d135:	01 d0                	add    %edx,%eax
f012d137:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012d13d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d140:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d147:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d14d:	01 d0                	add    %edx,%eax
f012d14f:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d156:	ff 45 e8             	incl   -0x18(%ebp)
f012d159:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d15f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d162:	7d ac                	jge    f012d110 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012d164:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d16a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012d170:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d176:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012d179:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d17f:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012d185:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d18b:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012d192:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d198:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d19f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1a5:	01 d0                	add    %edx,%eax
f012d1a7:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012d1aa:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d1b0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1bd:	01 d0                	add    %edx,%eax
f012d1bf:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012d1c5:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d1cb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1d8:	01 d0                	add    %edx,%eax
f012d1da:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012d1e1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d1e7:	8a 00                	mov    (%eax),%al
f012d1e9:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012d1ec:	75 17                	jne    f012d205 <test_krealloc+0xd04>
f012d1ee:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012d1f4:	89 c2                	mov    %eax,%edx
f012d1f6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d1fc:	01 d0                	add    %edx,%eax
f012d1fe:	8a 00                	mov    (%eax),%al
f012d200:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012d203:	74 17                	je     f012d21c <test_krealloc+0xd1b>
			panic(
f012d205:	83 ec 04             	sub    $0x4,%esp
f012d208:	68 2c c9 13 f0       	push   $0xf013c92c
f012d20d:	68 79 0f 00 00       	push   $0xf79
f012d212:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d217:	e8 e9 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012d21c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d222:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012d228:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d22e:	8a 00                	mov    (%eax),%al
f012d230:	3c 02                	cmp    $0x2,%al
f012d232:	75 16                	jne    f012d24a <test_krealloc+0xd49>
f012d234:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d23a:	89 c2                	mov    %eax,%edx
f012d23c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d242:	01 d0                	add    %edx,%eax
f012d244:	8a 00                	mov    (%eax),%al
f012d246:	3c 02                	cmp    $0x2,%al
f012d248:	74 20                	je     f012d26a <test_krealloc+0xd69>
			panic(
f012d24a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d250:	8a 00                	mov    (%eax),%al
f012d252:	0f be c0             	movsbl %al,%eax
f012d255:	50                   	push   %eax
f012d256:	68 6c c9 13 f0       	push   $0xf013c96c
f012d25b:	68 7f 0f 00 00       	push   $0xf7f
f012d260:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d265:	e8 9b 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012d26a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d270:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012d276:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d27c:	8b 00                	mov    (%eax),%eax
f012d27e:	83 f8 03             	cmp    $0x3,%eax
f012d281:	75 1c                	jne    f012d29f <test_krealloc+0xd9e>
f012d283:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d289:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d290:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d296:	01 d0                	add    %edx,%eax
f012d298:	8b 00                	mov    (%eax),%eax
f012d29a:	83 f8 03             	cmp    $0x3,%eax
f012d29d:	74 17                	je     f012d2b6 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012d29f:	83 ec 04             	sub    $0x4,%esp
f012d2a2:	68 b8 c9 13 f0       	push   $0xf013c9b8
f012d2a7:	68 83 0f 00 00       	push   $0xf83
f012d2ac:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d2b1:	e8 4f 2f fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012d2b6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d2bc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012d2c2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2c8:	8b 00                	mov    (%eax),%eax
f012d2ca:	83 f8 04             	cmp    $0x4,%eax
f012d2cd:	75 1c                	jne    f012d2eb <test_krealloc+0xdea>
f012d2cf:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d2d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d2dc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2e2:	01 d0                	add    %edx,%eax
f012d2e4:	8b 00                	mov    (%eax),%eax
f012d2e6:	83 f8 04             	cmp    $0x4,%eax
f012d2e9:	74 17                	je     f012d302 <test_krealloc+0xe01>
			panic(
f012d2eb:	83 ec 04             	sub    $0x4,%esp
f012d2ee:	68 2c c9 13 f0       	push   $0xf013c92c
f012d2f3:	68 88 0f 00 00       	push   $0xf88
f012d2f8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d2fd:	e8 03 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012d302:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d308:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012d30e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d314:	66 8b 00             	mov    (%eax),%ax
f012d317:	66 83 f8 05          	cmp    $0x5,%ax
f012d31b:	75 1b                	jne    f012d338 <test_krealloc+0xe37>
f012d31d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d323:	01 c0                	add    %eax,%eax
f012d325:	89 c2                	mov    %eax,%edx
f012d327:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d32d:	01 d0                	add    %edx,%eax
f012d32f:	66 8b 00             	mov    (%eax),%ax
f012d332:	66 83 f8 05          	cmp    $0x5,%ax
f012d336:	74 17                	je     f012d34f <test_krealloc+0xe4e>
			panic(
f012d338:	83 ec 04             	sub    $0x4,%esp
f012d33b:	68 2c c9 13 f0       	push   $0xf013c92c
f012d340:	68 8d 0f 00 00       	push   $0xf8d
f012d345:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d34a:	e8 b6 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012d34f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d355:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012d35b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d361:	66 8b 00             	mov    (%eax),%ax
f012d364:	66 83 f8 06          	cmp    $0x6,%ax
f012d368:	75 1b                	jne    f012d385 <test_krealloc+0xe84>
f012d36a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d370:	01 c0                	add    %eax,%eax
f012d372:	89 c2                	mov    %eax,%edx
f012d374:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d37a:	01 d0                	add    %edx,%eax
f012d37c:	66 8b 00             	mov    (%eax),%ax
f012d37f:	66 83 f8 06          	cmp    $0x6,%ax
f012d383:	74 17                	je     f012d39c <test_krealloc+0xe9b>
			panic(
f012d385:	83 ec 04             	sub    $0x4,%esp
f012d388:	68 2c c9 13 f0       	push   $0xf013c92c
f012d38d:	68 92 0f 00 00       	push   $0xf92
f012d392:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d397:	e8 69 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012d39c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d3a2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012d3a8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3ae:	8a 00                	mov    (%eax),%al
f012d3b0:	3c 07                	cmp    $0x7,%al
f012d3b2:	75 1b                	jne    f012d3cf <test_krealloc+0xece>
f012d3b4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d3ba:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d3c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3c7:	01 d0                	add    %edx,%eax
f012d3c9:	8a 00                	mov    (%eax),%al
f012d3cb:	3c 07                	cmp    $0x7,%al
f012d3cd:	74 17                	je     f012d3e6 <test_krealloc+0xee5>
			panic(
f012d3cf:	83 ec 04             	sub    $0x4,%esp
f012d3d2:	68 2c c9 13 f0       	push   $0xf013c92c
f012d3d7:	68 97 0f 00 00       	push   $0xf97
f012d3dc:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d3e1:	e8 1f 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012d3e6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3ec:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d3f0:	66 83 f8 07          	cmp    $0x7,%ax
f012d3f4:	75 1f                	jne    f012d415 <test_krealloc+0xf14>
f012d3f6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d3fc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d403:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d409:	01 d0                	add    %edx,%eax
f012d40b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d40f:	66 83 f8 07          	cmp    $0x7,%ax
f012d413:	74 17                	je     f012d42c <test_krealloc+0xf2b>
			panic(
f012d415:	83 ec 04             	sub    $0x4,%esp
f012d418:	68 2c c9 13 f0       	push   $0xf013c92c
f012d41d:	68 9a 0f 00 00       	push   $0xf9a
f012d422:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d427:	e8 d9 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012d42c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d432:	8b 40 04             	mov    0x4(%eax),%eax
f012d435:	83 f8 07             	cmp    $0x7,%eax
f012d438:	75 1d                	jne    f012d457 <test_krealloc+0xf56>
f012d43a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d440:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d447:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d44d:	01 d0                	add    %edx,%eax
f012d44f:	8b 40 04             	mov    0x4(%eax),%eax
f012d452:	83 f8 07             	cmp    $0x7,%eax
f012d455:	74 17                	je     f012d46e <test_krealloc+0xf6d>
			panic(
f012d457:	83 ec 04             	sub    $0x4,%esp
f012d45a:	68 2c c9 13 f0       	push   $0xf013c92c
f012d45f:	68 9d 0f 00 00       	push   $0xf9d
f012d464:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d469:	e8 97 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d46e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d474:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d47a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d480:	8a 00                	mov    (%eax),%al
f012d482:	3c 08                	cmp    $0x8,%al
f012d484:	75 1b                	jne    f012d4a1 <test_krealloc+0xfa0>
f012d486:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d48c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d493:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d499:	01 d0                	add    %edx,%eax
f012d49b:	8a 00                	mov    (%eax),%al
f012d49d:	3c 08                	cmp    $0x8,%al
f012d49f:	74 17                	je     f012d4b8 <test_krealloc+0xfb7>
			panic(
f012d4a1:	83 ec 04             	sub    $0x4,%esp
f012d4a4:	68 2c c9 13 f0       	push   $0xf013c92c
f012d4a9:	68 a2 0f 00 00       	push   $0xfa2
f012d4ae:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d4b3:	e8 4d 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d4b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4be:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d4c2:	66 83 f8 08          	cmp    $0x8,%ax
f012d4c6:	75 1f                	jne    f012d4e7 <test_krealloc+0xfe6>
f012d4c8:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d4ce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d4d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4db:	01 d0                	add    %edx,%eax
f012d4dd:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d4e1:	66 83 f8 08          	cmp    $0x8,%ax
f012d4e5:	74 17                	je     f012d4fe <test_krealloc+0xffd>
			panic(
f012d4e7:	83 ec 04             	sub    $0x4,%esp
f012d4ea:	68 2c c9 13 f0       	push   $0xf013c92c
f012d4ef:	68 a5 0f 00 00       	push   $0xfa5
f012d4f4:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d4f9:	e8 07 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d4fe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d504:	8b 40 04             	mov    0x4(%eax),%eax
f012d507:	83 f8 08             	cmp    $0x8,%eax
f012d50a:	75 1d                	jne    f012d529 <test_krealloc+0x1028>
f012d50c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d512:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d519:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d51f:	01 d0                	add    %edx,%eax
f012d521:	8b 40 04             	mov    0x4(%eax),%eax
f012d524:	83 f8 08             	cmp    $0x8,%eax
f012d527:	74 17                	je     f012d540 <test_krealloc+0x103f>
			panic(
f012d529:	83 ec 04             	sub    $0x4,%esp
f012d52c:	68 2c c9 13 f0       	push   $0xf013c92c
f012d531:	68 a8 0f 00 00       	push   $0xfa8
f012d536:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d53b:	e8 c5 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d540:	e8 28 fc fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d545:	89 c2                	mov    %eax,%edx
f012d547:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d54a:	39 c2                	cmp    %eax,%edx
f012d54c:	74 17                	je     f012d565 <test_krealloc+0x1064>
			panic(
f012d54e:	83 ec 04             	sub    $0x4,%esp
f012d551:	68 ec c9 13 f0       	push   $0xf013c9ec
f012d556:	68 ac 0f 00 00       	push   $0xfac
f012d55b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d560:	e8 a0 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d565:	83 ec 0c             	sub    $0xc,%esp
f012d568:	68 38 ca 13 f0       	push   $0xf013ca38
f012d56d:	e8 9c 37 fd ff       	call   f0100d0e <cprintf>
f012d572:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d575:	e8 f3 fb fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d57a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d57d:	e8 72 68 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d582:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d588:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d58e:	83 ec 08             	sub    $0x8,%esp
f012d591:	6a 00                	push   $0x0
f012d593:	50                   	push   %eax
f012d594:	e8 6d a7 fd ff       	call   f0107d06 <krealloc>
f012d599:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d59c:	e8 53 68 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d5a1:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d5a7:	74 17                	je     f012d5c0 <test_krealloc+0x10bf>
			panic(
f012d5a9:	83 ec 04             	sub    $0x4,%esp
f012d5ac:	68 5c ca 13 f0       	push   $0xf013ca5c
f012d5b1:	68 b9 0f 00 00       	push   $0xfb9
f012d5b6:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d5bb:	e8 45 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d5c0:	e8 a8 fb fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d5c5:	89 c2                	mov    %eax,%edx
f012d5c7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5ca:	29 c2                	sub    %eax,%edx
f012d5cc:	89 d0                	mov    %edx,%eax
f012d5ce:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d5d3:	74 17                	je     f012d5ec <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d5d5:	83 ec 04             	sub    $0x4,%esp
f012d5d8:	68 d0 ca 13 f0       	push   $0xf013cad0
f012d5dd:	68 bb 0f 00 00       	push   $0xfbb
f012d5e2:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d5e7:	e8 19 2c fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d5ec:	e8 7c fb fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d5f1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5f4:	e8 fb 67 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d5f9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d5ff:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d605:	83 ec 08             	sub    $0x8,%esp
f012d608:	6a 00                	push   $0x0
f012d60a:	50                   	push   %eax
f012d60b:	e8 f6 a6 fd ff       	call   f0107d06 <krealloc>
f012d610:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d613:	e8 dc 67 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d618:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d61e:	74 17                	je     f012d637 <test_krealloc+0x1136>
			panic(
f012d620:	83 ec 04             	sub    $0x4,%esp
f012d623:	68 5c ca 13 f0       	push   $0xf013ca5c
f012d628:	68 c4 0f 00 00       	push   $0xfc4
f012d62d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d632:	e8 ce 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d637:	e8 31 fb fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d63c:	89 c2                	mov    %eax,%edx
f012d63e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d641:	29 c2                	sub    %eax,%edx
f012d643:	89 d0                	mov    %edx,%eax
f012d645:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d64a:	74 17                	je     f012d663 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d64c:	83 ec 04             	sub    $0x4,%esp
f012d64f:	68 d0 ca 13 f0       	push   $0xf013cad0
f012d654:	68 c6 0f 00 00       	push   $0xfc6
f012d659:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d65e:	e8 a2 2b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d663:	e8 05 fb fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d668:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d66b:	e8 84 67 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d670:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d676:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d67c:	83 ec 08             	sub    $0x8,%esp
f012d67f:	6a 00                	push   $0x0
f012d681:	50                   	push   %eax
f012d682:	e8 7f a6 fd ff       	call   f0107d06 <krealloc>
f012d687:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d68a:	e8 65 67 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d68f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d695:	74 17                	je     f012d6ae <test_krealloc+0x11ad>
			panic(
f012d697:	83 ec 04             	sub    $0x4,%esp
f012d69a:	68 14 b6 13 f0       	push   $0xf013b614
f012d69f:	68 ce 0f 00 00       	push   $0xfce
f012d6a4:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d6a9:	e8 57 2b fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d6ae:	e8 ba fa fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d6b3:	89 c2                	mov    %eax,%edx
f012d6b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6b8:	29 c2                	sub    %eax,%edx
f012d6ba:	89 d0                	mov    %edx,%eax
f012d6bc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d6c1:	74 17                	je     f012d6da <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d6c3:	83 ec 04             	sub    $0x4,%esp
f012d6c6:	68 d0 ca 13 f0       	push   $0xf013cad0
f012d6cb:	68 d0 0f 00 00       	push   $0xfd0
f012d6d0:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d6d5:	e8 2b 2b fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d6da:	e8 8e fa fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d6df:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d6e2:	e8 0d 67 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d6e7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d6ed:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d6f3:	83 ec 08             	sub    $0x8,%esp
f012d6f6:	6a 00                	push   $0x0
f012d6f8:	50                   	push   %eax
f012d6f9:	e8 08 a6 fd ff       	call   f0107d06 <krealloc>
f012d6fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d701:	e8 ee 66 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012d706:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d70c:	74 17                	je     f012d725 <test_krealloc+0x1224>
			panic(
f012d70e:	83 ec 04             	sub    $0x4,%esp
f012d711:	68 5c ca 13 f0       	push   $0xf013ca5c
f012d716:	68 d8 0f 00 00       	push   $0xfd8
f012d71b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d720:	e8 e0 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d725:	e8 43 fa fd ff       	call   f010d16d <sys_calculate_free_frames>
f012d72a:	89 c2                	mov    %eax,%edx
f012d72c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d72f:	29 c2                	sub    %eax,%edx
f012d731:	89 d0                	mov    %edx,%eax
f012d733:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d738:	74 17                	je     f012d751 <test_krealloc+0x1250>
			panic(
f012d73a:	83 ec 04             	sub    $0x4,%esp
f012d73d:	68 04 cb 13 f0       	push   $0xf013cb04
f012d742:	68 db 0f 00 00       	push   $0xfdb
f012d747:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d74c:	e8 b4 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d751:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d758:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d75f:	eb 48                	jmp    f012d7a9 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d761:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d764:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f012d769:	83 ec 04             	sub    $0x4,%esp
f012d76c:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d772:	51                   	push   %ecx
f012d773:	52                   	push   %edx
f012d774:	50                   	push   %eax
f012d775:	e8 63 93 fd ff       	call   f0106add <get_page_table>
f012d77a:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d77d:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d783:	85 c0                	test   %eax,%eax
f012d785:	75 17                	jne    f012d79e <test_krealloc+0x129d>
					panic(
f012d787:	83 ec 04             	sub    $0x4,%esp
f012d78a:	68 fc be 13 f0       	push   $0xf013befc
f012d78f:	68 e7 0f 00 00       	push   $0xfe7
f012d794:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d799:	e8 67 2a fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d79e:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d7a5:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d7a9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d7ad:	78 b2                	js     f012d761 <test_krealloc+0x1260>
f012d7af:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d7b3:	7f 09                	jg     f012d7be <test_krealloc+0x12bd>
f012d7b5:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d7bc:	76 a3                	jbe    f012d761 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d7be:	83 ec 0c             	sub    $0xc,%esp
f012d7c1:	68 43 cb 13 f0       	push   $0xf013cb43
f012d7c6:	e8 43 35 fd ff       	call   f0100d0e <cprintf>
f012d7cb:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d7ce:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d7d4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d7da:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d7e1:	eb 21                	jmp    f012d804 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d7e3:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d7e9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d7ec:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d7f2:	01 c8                	add    %ecx,%eax
f012d7f4:	8a 00                	mov    (%eax),%al
f012d7f6:	0f be c0             	movsbl %al,%eax
f012d7f9:	01 d0                	add    %edx,%eax
f012d7fb:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d801:	ff 45 dc             	incl   -0x24(%ebp)
f012d804:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d80a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d80d:	7d d4                	jge    f012d7e3 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d80f:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d815:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d81b:	42                   	inc    %edx
f012d81c:	01 d2                	add    %edx,%edx
f012d81e:	39 d0                	cmp    %edx,%eax
f012d820:	74 17                	je     f012d839 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d822:	83 ec 04             	sub    $0x4,%esp
f012d825:	68 4c cb 13 f0       	push   $0xf013cb4c
f012d82a:	68 f9 0f 00 00       	push   $0xff9
f012d82f:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d834:	e8 cc 29 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d839:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d83f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d845:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d84c:	eb 25                	jmp    f012d873 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d84e:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d854:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d857:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d85e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d864:	01 c8                	add    %ecx,%eax
f012d866:	8b 00                	mov    (%eax),%eax
f012d868:	01 d0                	add    %edx,%eax
f012d86a:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d870:	ff 45 dc             	incl   -0x24(%ebp)
f012d873:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d879:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d87c:	7d d0                	jge    f012d84e <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d87e:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d884:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d88a:	42                   	inc    %edx
f012d88b:	c1 e2 02             	shl    $0x2,%edx
f012d88e:	39 d0                	cmp    %edx,%eax
f012d890:	74 17                	je     f012d8a9 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d892:	83 ec 04             	sub    $0x4,%esp
f012d895:	68 4c cb 13 f0       	push   $0xf013cb4c
f012d89a:	68 03 10 00 00       	push   $0x1003
f012d89f:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d8a4:	e8 5c 29 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d8a9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d8af:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d8b5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d8bc:	eb 24                	jmp    f012d8e2 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d8be:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d8c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d8c7:	01 c0                	add    %eax,%eax
f012d8c9:	89 c1                	mov    %eax,%ecx
f012d8cb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d8d1:	01 c8                	add    %ecx,%eax
f012d8d3:	66 8b 00             	mov    (%eax),%ax
f012d8d6:	98                   	cwtl   
f012d8d7:	01 d0                	add    %edx,%eax
f012d8d9:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d8df:	ff 45 dc             	incl   -0x24(%ebp)
f012d8e2:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d8e8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d8eb:	7d d1                	jge    f012d8be <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d8ed:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d8f3:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d8f9:	8d 48 01             	lea    0x1(%eax),%ecx
f012d8fc:	89 c8                	mov    %ecx,%eax
f012d8fe:	c1 e0 02             	shl    $0x2,%eax
f012d901:	01 c8                	add    %ecx,%eax
f012d903:	39 c2                	cmp    %eax,%edx
f012d905:	74 17                	je     f012d91e <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d907:	83 ec 04             	sub    $0x4,%esp
f012d90a:	68 4c cb 13 f0       	push   $0xf013cb4c
f012d90f:	68 0d 10 00 00       	push   $0x100d
f012d914:	68 fa b5 13 f0       	push   $0xf013b5fa
f012d919:	e8 e7 28 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d91e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d924:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d92a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d931:	eb 70                	jmp    f012d9a3 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d933:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d939:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d93c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d943:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d949:	01 c8                	add    %ecx,%eax
f012d94b:	8a 00                	mov    (%eax),%al
f012d94d:	0f be c0             	movsbl %al,%eax
f012d950:	01 d0                	add    %edx,%eax
f012d952:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d958:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d95e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d961:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d968:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d96e:	01 c8                	add    %ecx,%eax
f012d970:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d974:	98                   	cwtl   
f012d975:	01 d0                	add    %edx,%eax
f012d977:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d97d:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d983:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d986:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d98d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d993:	01 c8                	add    %ecx,%eax
f012d995:	8b 40 04             	mov    0x4(%eax),%eax
f012d998:	01 d0                	add    %edx,%eax
f012d99a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d9a0:	ff 45 dc             	incl   -0x24(%ebp)
f012d9a3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9a9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d9ac:	7d 85                	jge    f012d933 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d9ae:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d9b4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9ba:	8d 50 01             	lea    0x1(%eax),%edx
f012d9bd:	89 d0                	mov    %edx,%eax
f012d9bf:	01 c0                	add    %eax,%eax
f012d9c1:	01 d0                	add    %edx,%eax
f012d9c3:	01 c0                	add    %eax,%eax
f012d9c5:	01 d0                	add    %edx,%eax
f012d9c7:	39 c1                	cmp    %eax,%ecx
f012d9c9:	75 3a                	jne    f012da05 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d9cb:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d9d1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9d7:	8d 50 01             	lea    0x1(%eax),%edx
f012d9da:	89 d0                	mov    %edx,%eax
f012d9dc:	01 c0                	add    %eax,%eax
f012d9de:	01 d0                	add    %edx,%eax
f012d9e0:	01 c0                	add    %eax,%eax
f012d9e2:	01 d0                	add    %edx,%eax
f012d9e4:	39 c1                	cmp    %eax,%ecx
f012d9e6:	75 1d                	jne    f012da05 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d9e8:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d9ee:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9f4:	8d 50 01             	lea    0x1(%eax),%edx
f012d9f7:	89 d0                	mov    %edx,%eax
f012d9f9:	01 c0                	add    %eax,%eax
f012d9fb:	01 d0                	add    %edx,%eax
f012d9fd:	01 c0                	add    %eax,%eax
f012d9ff:	01 d0                	add    %edx,%eax
f012da01:	39 c1                	cmp    %eax,%ecx
f012da03:	74 17                	je     f012da1c <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012da05:	83 ec 04             	sub    $0x4,%esp
f012da08:	68 4c cb 13 f0       	push   $0xf013cb4c
f012da0d:	68 1b 10 00 00       	push   $0x101b
f012da12:	68 fa b5 13 f0       	push   $0xf013b5fa
f012da17:	e8 e9 27 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012da1c:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012da23:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012da26:	e8 42 f7 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012da2b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012da2e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da34:	83 ec 08             	sub    $0x8,%esp
f012da37:	68 00 3c 00 00       	push   $0x3c00
f012da3c:	50                   	push   %eax
f012da3d:	e8 c4 a2 fd ff       	call   f0107d06 <krealloc>
f012da42:	83 c4 10             	add    $0x10,%esp
f012da45:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012da4b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012da51:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012da56:	77 17                	ja     f012da6f <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da58:	83 ec 04             	sub    $0x4,%esp
f012da5b:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012da60:	68 27 10 00 00       	push   $0x1027
f012da65:	68 fa b5 13 f0       	push   $0xf013b5fa
f012da6a:	e8 96 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012da6f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da75:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012da7b:	74 17                	je     f012da94 <test_krealloc+0x1593>
			panic(
f012da7d:	83 ec 04             	sub    $0x4,%esp
f012da80:	68 84 cb 13 f0       	push   $0xf013cb84
f012da85:	68 2a 10 00 00       	push   $0x102a
f012da8a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012da8f:	e8 71 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012da94:	e8 d4 f6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012da99:	89 c2                	mov    %eax,%edx
f012da9b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012da9e:	39 c2                	cmp    %eax,%edx
f012daa0:	74 17                	je     f012dab9 <test_krealloc+0x15b8>
			panic(
f012daa2:	83 ec 04             	sub    $0x4,%esp
f012daa5:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012daaa:	68 2d 10 00 00       	push   $0x102d
f012daaf:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dab4:	e8 4c 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012dab9:	e8 af f6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dabe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012dac1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dac7:	83 ec 08             	sub    $0x8,%esp
f012daca:	68 00 fc 0f 00       	push   $0xffc00
f012dacf:	50                   	push   %eax
f012dad0:	e8 31 a2 fd ff       	call   f0107d06 <krealloc>
f012dad5:	83 c4 10             	add    $0x10,%esp
f012dad8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dade:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dae4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dae9:	77 17                	ja     f012db02 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012daeb:	83 ec 04             	sub    $0x4,%esp
f012daee:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012daf3:	68 33 10 00 00       	push   $0x1033
f012daf8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dafd:	e8 03 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012db02:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012db08:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012db0e:	74 17                	je     f012db27 <test_krealloc+0x1626>
			panic(
f012db10:	83 ec 04             	sub    $0x4,%esp
f012db13:	68 84 cb 13 f0       	push   $0xf013cb84
f012db18:	68 36 10 00 00       	push   $0x1036
f012db1d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012db22:	e8 de 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012db27:	e8 41 f6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012db2c:	89 c2                	mov    %eax,%edx
f012db2e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db31:	39 c2                	cmp    %eax,%edx
f012db33:	74 17                	je     f012db4c <test_krealloc+0x164b>
			panic(
f012db35:	83 ec 04             	sub    $0x4,%esp
f012db38:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012db3d:	68 39 10 00 00       	push   $0x1039
f012db42:	68 fa b5 13 f0       	push   $0xf013b5fa
f012db47:	e8 b9 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012db4c:	e8 1c f6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012db51:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012db54:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012db5a:	83 ec 08             	sub    $0x8,%esp
f012db5d:	68 00 fc 0f 00       	push   $0xffc00
f012db62:	50                   	push   %eax
f012db63:	e8 9e a1 fd ff       	call   f0107d06 <krealloc>
f012db68:	83 c4 10             	add    $0x10,%esp
f012db6b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db71:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012db77:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db7c:	77 17                	ja     f012db95 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db7e:	83 ec 04             	sub    $0x4,%esp
f012db81:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012db86:	68 3f 10 00 00       	push   $0x103f
f012db8b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012db90:	e8 70 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012db95:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012db9b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012dba1:	74 17                	je     f012dbba <test_krealloc+0x16b9>
			panic(
f012dba3:	83 ec 04             	sub    $0x4,%esp
f012dba6:	68 84 cb 13 f0       	push   $0xf013cb84
f012dbab:	68 42 10 00 00       	push   $0x1042
f012dbb0:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dbb5:	e8 4b 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012dbba:	e8 ae f5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dbbf:	89 c2                	mov    %eax,%edx
f012dbc1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dbc4:	39 c2                	cmp    %eax,%edx
f012dbc6:	74 17                	je     f012dbdf <test_krealloc+0x16de>
			panic(
f012dbc8:	83 ec 04             	sub    $0x4,%esp
f012dbcb:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012dbd0:	68 45 10 00 00       	push   $0x1045
f012dbd5:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dbda:	e8 26 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012dbdf:	e8 89 f5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dbe4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012dbe7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dbed:	83 ec 08             	sub    $0x8,%esp
f012dbf0:	68 00 fc 0f 00       	push   $0xffc00
f012dbf5:	50                   	push   %eax
f012dbf6:	e8 0b a1 fd ff       	call   f0107d06 <krealloc>
f012dbfb:	83 c4 10             	add    $0x10,%esp
f012dbfe:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dc04:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dc0a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc0f:	77 17                	ja     f012dc28 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc11:	83 ec 04             	sub    $0x4,%esp
f012dc14:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012dc19:	68 4d 10 00 00       	push   $0x104d
f012dc1e:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dc23:	e8 dd 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012dc28:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dc2e:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012dc34:	74 17                	je     f012dc4d <test_krealloc+0x174c>
			panic(
f012dc36:	83 ec 04             	sub    $0x4,%esp
f012dc39:	68 34 cc 13 f0       	push   $0xf013cc34
f012dc3e:	68 50 10 00 00       	push   $0x1050
f012dc43:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dc48:	e8 b8 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012dc4d:	e8 1b f5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dc52:	89 c2                	mov    %eax,%edx
f012dc54:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dc57:	39 c2                	cmp    %eax,%edx
f012dc59:	74 17                	je     f012dc72 <test_krealloc+0x1771>
			panic(
f012dc5b:	83 ec 04             	sub    $0x4,%esp
f012dc5e:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012dc63:	68 53 10 00 00       	push   $0x1053
f012dc68:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dc6d:	e8 93 25 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012dc72:	83 ec 0c             	sub    $0xc,%esp
f012dc75:	68 13 be 13 f0       	push   $0xf013be13
f012dc7a:	e8 8f 30 fd ff       	call   f0100d0e <cprintf>
f012dc7f:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012dc82:	e8 e6 f4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dc87:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012dc8a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dc90:	83 ec 08             	sub    $0x8,%esp
f012dc93:	68 00 18 10 00       	push   $0x101800
f012dc98:	50                   	push   %eax
f012dc99:	e8 68 a0 fd ff       	call   f0107d06 <krealloc>
f012dc9e:	83 c4 10             	add    $0x10,%esp
f012dca1:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dca4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dca7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dcac:	77 17                	ja     f012dcc5 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dcae:	83 ec 04             	sub    $0x4,%esp
f012dcb1:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012dcb6:	68 5c 10 00 00       	push   $0x105c
f012dcbb:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dcc0:	e8 40 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dcc5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dccb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dcce:	74 17                	je     f012dce7 <test_krealloc+0x17e6>
			panic(
f012dcd0:	83 ec 04             	sub    $0x4,%esp
f012dcd3:	68 94 cc 13 f0       	push   $0xf013cc94
f012dcd8:	68 5f 10 00 00       	push   $0x105f
f012dcdd:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dce2:	e8 1e 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012dce7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dcea:	e8 7e f4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dcef:	29 c3                	sub    %eax,%ebx
f012dcf1:	89 d8                	mov    %ebx,%eax
f012dcf3:	83 f8 02             	cmp    $0x2,%eax
f012dcf6:	74 17                	je     f012dd0f <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012dcf8:	83 ec 04             	sub    $0x4,%esp
f012dcfb:	68 10 cd 13 f0       	push   $0xf013cd10
f012dd00:	68 61 10 00 00       	push   $0x1061
f012dd05:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dd0a:	e8 f6 24 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012dd0f:	e8 59 f4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dd14:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012dd17:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd1d:	83 ec 08             	sub    $0x8,%esp
f012dd20:	68 00 fc 3f 00       	push   $0x3ffc00
f012dd25:	50                   	push   %eax
f012dd26:	e8 db 9f fd ff       	call   f0107d06 <krealloc>
f012dd2b:	83 c4 10             	add    $0x10,%esp
f012dd2e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dd31:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dd34:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dd39:	77 17                	ja     f012dd52 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd3b:	83 ec 04             	sub    $0x4,%esp
f012dd3e:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012dd43:	68 67 10 00 00       	push   $0x1067
f012dd48:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dd4d:	e8 b3 24 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012dd52:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd58:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dd5b:	74 17                	je     f012dd74 <test_krealloc+0x1873>
			panic(
f012dd5d:	83 ec 04             	sub    $0x4,%esp
f012dd60:	68 94 cc 13 f0       	push   $0xf013cc94
f012dd65:	68 6a 10 00 00       	push   $0x106a
f012dd6a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dd6f:	e8 91 24 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012dd74:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd77:	e8 f1 f3 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dd7c:	29 c3                	sub    %eax,%ebx
f012dd7e:	89 d8                	mov    %ebx,%eax
f012dd80:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dd85:	74 17                	je     f012dd9e <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012dd87:	83 ec 04             	sub    $0x4,%esp
f012dd8a:	68 10 cd 13 f0       	push   $0xf013cd10
f012dd8f:	68 6d 10 00 00       	push   $0x106d
f012dd94:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dd99:	e8 67 24 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012dd9e:	83 ec 0c             	sub    $0xc,%esp
f012dda1:	68 58 be 13 f0       	push   $0xf013be58
f012dda6:	e8 63 2f fd ff       	call   f0100d0e <cprintf>
f012ddab:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ddae:	e8 ba f3 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012ddb3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ddb6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ddbc:	83 ec 08             	sub    $0x8,%esp
f012ddbf:	68 00 fc 9f 00       	push   $0x9ffc00
f012ddc4:	50                   	push   %eax
f012ddc5:	e8 3c 9f fd ff       	call   f0107d06 <krealloc>
f012ddca:	83 c4 10             	add    $0x10,%esp
f012ddcd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ddd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ddd3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ddd8:	77 17                	ja     f012ddf1 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ddda:	83 ec 04             	sub    $0x4,%esp
f012dddd:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012dde2:	68 78 10 00 00       	push   $0x1078
f012dde7:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ddec:	e8 14 24 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012ddf1:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012ddf8:	10 00 00 
f012ddfb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012de01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012de06:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012de0c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012de12:	ba 00 00 00 00       	mov    $0x0,%edx
f012de17:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012de1d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012de23:	29 d0                	sub    %edx,%eax
f012de25:	89 c1                	mov    %eax,%ecx
f012de27:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012de2e:	10 00 00 
f012de31:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012de36:	0f b6 d0             	movzbl %al,%edx
f012de39:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012de3f:	01 d0                	add    %edx,%eax
f012de41:	48                   	dec    %eax
f012de42:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012de48:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012de4e:	ba 00 00 00 00       	mov    $0x0,%edx
f012de53:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012de59:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012de5f:	29 d0                	sub    %edx,%eax
f012de61:	01 c1                	add    %eax,%ecx
f012de63:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012de6a:	10 00 00 
f012de6d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012de72:	0f b6 c0             	movzbl %al,%eax
f012de75:	c1 e0 04             	shl    $0x4,%eax
f012de78:	89 c2                	mov    %eax,%edx
f012de7a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012de80:	01 d0                	add    %edx,%eax
f012de82:	48                   	dec    %eax
f012de83:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012de89:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012de8f:	ba 00 00 00 00       	mov    $0x0,%edx
f012de94:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012de9a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012dea0:	29 d0                	sub    %edx,%eax
f012dea2:	01 c8                	add    %ecx,%eax
f012dea4:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012deaa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dead:	39 c2                	cmp    %eax,%edx
f012deaf:	74 18                	je     f012dec9 <test_krealloc+0x19c8>
			panic(
f012deb1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012deb4:	50                   	push   %eax
f012deb5:	68 44 cd 13 f0       	push   $0xf013cd44
f012deba:	68 7c 10 00 00       	push   $0x107c
f012debf:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dec4:	e8 3c 23 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012dec9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012decf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ded2:	75 17                	jne    f012deeb <test_krealloc+0x19ea>
			panic(
f012ded4:	83 ec 04             	sub    $0x4,%esp
f012ded7:	68 88 cd 13 f0       	push   $0xf013cd88
f012dedc:	68 7f 10 00 00       	push   $0x107f
f012dee1:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dee6:	e8 1a 23 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012deeb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012deee:	e8 7a f2 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012def3:	29 c3                	sub    %eax,%ebx
f012def5:	89 d8                	mov    %ebx,%eax
f012def7:	3d 00 06 00 00       	cmp    $0x600,%eax
f012defc:	74 17                	je     f012df15 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012defe:	83 ec 04             	sub    $0x4,%esp
f012df01:	68 10 cd 13 f0       	push   $0xf013cd10
f012df06:	68 82 10 00 00       	push   $0x1082
f012df0b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012df10:	e8 f0 22 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012df15:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df18:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012df1e:	e8 4a f2 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012df23:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012df26:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df2c:	83 ec 08             	sub    $0x8,%esp
f012df2f:	68 00 fc 5f 00       	push   $0x5ffc00
f012df34:	50                   	push   %eax
f012df35:	e8 cc 9d fd ff       	call   f0107d06 <krealloc>
f012df3a:	83 c4 10             	add    $0x10,%esp
f012df3d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012df40:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df43:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012df48:	77 17                	ja     f012df61 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012df4a:	83 ec 04             	sub    $0x4,%esp
f012df4d:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012df52:	68 8b 10 00 00       	push   $0x108b
f012df57:	68 fa b5 13 f0       	push   $0xf013b5fa
f012df5c:	e8 a4 22 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012df61:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df67:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012df6a:	74 17                	je     f012df83 <test_krealloc+0x1a82>
			panic(
f012df6c:	83 ec 04             	sub    $0x4,%esp
f012df6f:	68 94 cc 13 f0       	push   $0xf013cc94
f012df74:	68 8e 10 00 00       	push   $0x108e
f012df79:	68 fa b5 13 f0       	push   $0xf013b5fa
f012df7e:	e8 82 22 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012df83:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012df86:	e8 e2 f1 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012df8b:	29 c3                	sub    %eax,%ebx
f012df8d:	89 d8                	mov    %ebx,%eax
f012df8f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012df94:	74 17                	je     f012dfad <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012df96:	83 ec 04             	sub    $0x4,%esp
f012df99:	68 10 cd 13 f0       	push   $0xf013cd10
f012df9e:	68 91 10 00 00       	push   $0x1091
f012dfa3:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dfa8:	e8 58 22 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012dfad:	e8 bb f1 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012dfb2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012dfb5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dfbb:	83 ec 08             	sub    $0x8,%esp
f012dfbe:	68 00 fc 3f 01       	push   $0x13ffc00
f012dfc3:	50                   	push   %eax
f012dfc4:	e8 3d 9d fd ff       	call   f0107d06 <krealloc>
f012dfc9:	83 c4 10             	add    $0x10,%esp
f012dfcc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dfcf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dfd2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dfd7:	77 17                	ja     f012dff0 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dfd9:	83 ec 04             	sub    $0x4,%esp
f012dfdc:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012dfe1:	68 98 10 00 00       	push   $0x1098
f012dfe6:	68 fa b5 13 f0       	push   $0xf013b5fa
f012dfeb:	e8 15 22 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012dff0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dff6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dff9:	75 17                	jne    f012e012 <test_krealloc+0x1b11>
			panic(
f012dffb:	83 ec 04             	sub    $0x4,%esp
f012dffe:	68 88 cd 13 f0       	push   $0xf013cd88
f012e003:	68 9b 10 00 00       	push   $0x109b
f012e008:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e00d:	e8 f3 21 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012e012:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012e019:	10 00 00 
f012e01c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012e022:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e027:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012e02d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e033:	ba 00 00 00 00       	mov    $0x0,%edx
f012e038:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012e03e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e044:	29 d0                	sub    %edx,%eax
f012e046:	89 c1                	mov    %eax,%ecx
f012e048:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012e04f:	10 00 00 
f012e052:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e057:	0f b6 d0             	movzbl %al,%edx
f012e05a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012e060:	01 d0                	add    %edx,%eax
f012e062:	48                   	dec    %eax
f012e063:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012e069:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e06f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e074:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012e07a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e080:	29 d0                	sub    %edx,%eax
f012e082:	01 c1                	add    %eax,%ecx
f012e084:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012e08b:	10 00 00 
f012e08e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e093:	0f b6 c0             	movzbl %al,%eax
f012e096:	c1 e0 04             	shl    $0x4,%eax
f012e099:	89 c2                	mov    %eax,%edx
f012e09b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012e0a1:	01 d0                	add    %edx,%eax
f012e0a3:	48                   	dec    %eax
f012e0a4:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012e0aa:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e0b0:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0b5:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012e0bb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e0c1:	29 d0                	sub    %edx,%eax
f012e0c3:	01 c8                	add    %ecx,%eax
f012e0c5:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012e0cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e0ce:	39 c2                	cmp    %eax,%edx
f012e0d0:	74 17                	je     f012e0e9 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012e0d2:	83 ec 04             	sub    $0x4,%esp
f012e0d5:	68 0c ce 13 f0       	push   $0xf013ce0c
f012e0da:	68 9d 10 00 00       	push   $0x109d
f012e0df:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e0e4:	e8 1c 21 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012e0e9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e0ec:	e8 7c f0 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e0f1:	29 c3                	sub    %eax,%ebx
f012e0f3:	89 d8                	mov    %ebx,%eax
f012e0f5:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012e0fa:	74 17                	je     f012e113 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012e0fc:	83 ec 04             	sub    $0x4,%esp
f012e0ff:	68 10 cd 13 f0       	push   $0xf013cd10
f012e104:	68 a0 10 00 00       	push   $0x10a0
f012e109:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e10e:	e8 f2 20 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012e113:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e116:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e11c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e122:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012e128:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e12f:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e132:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e139:	eb 21                	jmp    f012e15c <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012e13b:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e141:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012e144:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e14a:	01 c8                	add    %ecx,%eax
f012e14c:	8a 00                	mov    (%eax),%al
f012e14e:	0f be c0             	movsbl %al,%eax
f012e151:	01 d0                	add    %edx,%eax
f012e153:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e159:	ff 45 d8             	incl   -0x28(%ebp)
f012e15c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e162:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e165:	7d d4                	jge    f012e13b <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e167:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012e16d:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012e173:	42                   	inc    %edx
f012e174:	01 d2                	add    %edx,%edx
f012e176:	39 d0                	cmp    %edx,%eax
f012e178:	74 17                	je     f012e191 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012e17a:	83 ec 04             	sub    $0x4,%esp
f012e17d:	68 40 ce 13 f0       	push   $0xf013ce40
f012e182:	68 ae 10 00 00       	push   $0x10ae
f012e187:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e18c:	e8 74 20 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e191:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e197:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012e19d:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e1a4:	00 00 00 
		sums[1] = 0;
f012e1a7:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012e1ae:	00 00 00 
		sums[2] = 0;
f012e1b1:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012e1b8:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e1bb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e1c2:	eb 70                	jmp    f012e234 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012e1c4:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e1ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1cd:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1d4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1da:	01 c8                	add    %ecx,%eax
f012e1dc:	8a 00                	mov    (%eax),%al
f012e1de:	0f be c0             	movsbl %al,%eax
f012e1e1:	01 d0                	add    %edx,%eax
f012e1e3:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012e1e9:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012e1ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1f2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1ff:	01 c8                	add    %ecx,%eax
f012e201:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e205:	98                   	cwtl   
f012e206:	01 d0                	add    %edx,%eax
f012e208:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012e20e:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012e214:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e217:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e21e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e224:	01 c8                	add    %ecx,%eax
f012e226:	8b 40 04             	mov    0x4(%eax),%eax
f012e229:	01 d0                	add    %edx,%eax
f012e22b:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e231:	ff 45 d8             	incl   -0x28(%ebp)
f012e234:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e23a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e23d:	7d 85                	jge    f012e1c4 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012e23f:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012e245:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e24b:	8d 50 01             	lea    0x1(%eax),%edx
f012e24e:	89 d0                	mov    %edx,%eax
f012e250:	01 c0                	add    %eax,%eax
f012e252:	01 d0                	add    %edx,%eax
f012e254:	01 c0                	add    %eax,%eax
f012e256:	01 d0                	add    %edx,%eax
f012e258:	39 c1                	cmp    %eax,%ecx
f012e25a:	75 3a                	jne    f012e296 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012e25c:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012e262:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e268:	8d 50 01             	lea    0x1(%eax),%edx
f012e26b:	89 d0                	mov    %edx,%eax
f012e26d:	01 c0                	add    %eax,%eax
f012e26f:	01 d0                	add    %edx,%eax
f012e271:	01 c0                	add    %eax,%eax
f012e273:	01 d0                	add    %edx,%eax
f012e275:	39 c1                	cmp    %eax,%ecx
f012e277:	75 1d                	jne    f012e296 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012e279:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012e27f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e285:	8d 50 01             	lea    0x1(%eax),%edx
f012e288:	89 d0                	mov    %edx,%eax
f012e28a:	01 c0                	add    %eax,%eax
f012e28c:	01 d0                	add    %edx,%eax
f012e28e:	01 c0                	add    %eax,%eax
f012e290:	01 d0                	add    %edx,%eax
f012e292:	39 c1                	cmp    %eax,%ecx
f012e294:	74 17                	je     f012e2ad <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012e296:	83 ec 04             	sub    $0x4,%esp
f012e299:	68 40 ce 13 f0       	push   $0xf013ce40
f012e29e:	68 c0 10 00 00       	push   $0x10c0
f012e2a3:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e2a8:	e8 58 1f fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e2ad:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e2b3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012e2b9:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e2c0:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e2c3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e2ca:	eb 24                	jmp    f012e2f0 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012e2cc:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e2d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e2d5:	01 c0                	add    %eax,%eax
f012e2d7:	89 c1                	mov    %eax,%ecx
f012e2d9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e2df:	01 c8                	add    %ecx,%eax
f012e2e1:	66 8b 00             	mov    (%eax),%ax
f012e2e4:	98                   	cwtl   
f012e2e5:	01 d0                	add    %edx,%eax
f012e2e7:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e2ed:	ff 45 d8             	incl   -0x28(%ebp)
f012e2f0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e2f6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e2f9:	7d d1                	jge    f012e2cc <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012e2fb:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e301:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e307:	8d 48 01             	lea    0x1(%eax),%ecx
f012e30a:	89 c8                	mov    %ecx,%eax
f012e30c:	c1 e0 02             	shl    $0x2,%eax
f012e30f:	01 c8                	add    %ecx,%eax
f012e311:	39 c2                	cmp    %eax,%edx
f012e313:	74 17                	je     f012e32c <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012e315:	83 ec 04             	sub    $0x4,%esp
f012e318:	68 40 ce 13 f0       	push   $0xf013ce40
f012e31d:	68 ca 10 00 00       	push   $0x10ca
f012e322:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e327:	e8 d9 1e fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012e32c:	e8 3c ee fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e331:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e334:	e8 bb 5a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012e339:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012e33f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e345:	83 ec 08             	sub    $0x8,%esp
f012e348:	6a 00                	push   $0x0
f012e34a:	50                   	push   %eax
f012e34b:	e8 b6 99 fd ff       	call   f0107d06 <krealloc>
f012e350:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e353:	e8 9c 5a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012e358:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e35e:	74 17                	je     f012e377 <test_krealloc+0x1e76>
			panic(
f012e360:	83 ec 04             	sub    $0x4,%esp
f012e363:	68 14 b6 13 f0       	push   $0xf013b614
f012e368:	68 d2 10 00 00       	push   $0x10d2
f012e36d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e372:	e8 8e 1e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012e377:	e8 f1 ed fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e37c:	89 c2                	mov    %eax,%edx
f012e37e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e381:	29 c2                	sub    %eax,%edx
f012e383:	89 d0                	mov    %edx,%eax
f012e385:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012e38a:	74 17                	je     f012e3a3 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012e38c:	83 ec 04             	sub    $0x4,%esp
f012e38f:	68 d0 ca 13 f0       	push   $0xf013cad0
f012e394:	68 d4 10 00 00       	push   $0x10d4
f012e399:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e39e:	e8 62 1e fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012e3a3:	e8 c5 ed fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e3a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e3ab:	e8 44 5a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012e3b0:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012e3b6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e3bc:	83 ec 0c             	sub    $0xc,%esp
f012e3bf:	50                   	push   %eax
f012e3c0:	e8 61 97 fd ff       	call   f0107b26 <kfree>
f012e3c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e3c8:	e8 27 5a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012e3cd:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e3d3:	74 17                	je     f012e3ec <test_krealloc+0x1eeb>
			panic(
f012e3d5:	83 ec 04             	sub    $0x4,%esp
f012e3d8:	68 14 b6 13 f0       	push   $0xf013b614
f012e3dd:	68 dc 10 00 00       	push   $0x10dc
f012e3e2:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e3e7:	e8 19 1e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012e3ec:	e8 7c ed fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e3f1:	89 c2                	mov    %eax,%edx
f012e3f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e3f6:	29 c2                	sub    %eax,%edx
f012e3f8:	89 d0                	mov    %edx,%eax
f012e3fa:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e3ff:	74 17                	je     f012e418 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012e401:	83 ec 04             	sub    $0x4,%esp
f012e404:	68 d0 ca 13 f0       	push   $0xf013cad0
f012e409:	68 de 10 00 00       	push   $0x10de
f012e40e:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e413:	e8 ed 1d fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e418:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e41f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e426:	eb 48                	jmp    f012e470 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e428:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e42b:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f012e430:	83 ec 04             	sub    $0x4,%esp
f012e433:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012e439:	51                   	push   %ecx
f012e43a:	52                   	push   %edx
f012e43b:	50                   	push   %eax
f012e43c:	e8 9c 86 fd ff       	call   f0106add <get_page_table>
f012e441:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e444:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e44a:	85 c0                	test   %eax,%eax
f012e44c:	75 17                	jne    f012e465 <test_krealloc+0x1f64>
					panic(
f012e44e:	83 ec 04             	sub    $0x4,%esp
f012e451:	68 fc be 13 f0       	push   $0xf013befc
f012e456:	68 eb 10 00 00       	push   $0x10eb
f012e45b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e460:	e8 a0 1d fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e465:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e46c:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e470:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e474:	78 b2                	js     f012e428 <test_krealloc+0x1f27>
f012e476:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e47a:	7f 09                	jg     f012e485 <test_krealloc+0x1f84>
f012e47c:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e483:	76 a3                	jbe    f012e428 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e485:	83 ec 0c             	sub    $0xc,%esp
f012e488:	68 de b7 13 f0       	push   $0xf013b7de
f012e48d:	e8 7c 28 fd ff       	call   f0100d0e <cprintf>
f012e492:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e495:	83 ec 0c             	sub    $0xc,%esp
f012e498:	68 6c ce 13 f0       	push   $0xf013ce6c
f012e49d:	e8 6c 28 fd ff       	call   f0100d0e <cprintf>
f012e4a2:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e4a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e4aa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e4ad:	5b                   	pop    %ebx
f012e4ae:	5f                   	pop    %edi
f012e4af:	5d                   	pop    %ebp
f012e4b0:	c3                   	ret    

f012e4b1 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e4b1:	55                   	push   %ebp
f012e4b2:	89 e5                	mov    %esp,%ebp
f012e4b4:	57                   	push   %edi
f012e4b5:	53                   	push   %ebx
f012e4b6:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e4bc:	83 ec 0c             	sub    $0xc,%esp
f012e4bf:	68 3c b5 13 f0       	push   $0xf013b53c
f012e4c4:	e8 45 28 fd ff       	call   f0100d0e <cprintf>
f012e4c9:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e4cc:	83 ec 0c             	sub    $0xc,%esp
f012e4cf:	68 6c b5 13 f0       	push   $0xf013b56c
f012e4d4:	e8 35 28 fd ff       	call   f0100d0e <cprintf>
f012e4d9:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e4dc:	83 ec 0c             	sub    $0xc,%esp
f012e4df:	68 3c b5 13 f0       	push   $0xf013b53c
f012e4e4:	e8 25 28 fd ff       	call   f0100d0e <cprintf>
f012e4e9:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e4ec:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e4f0:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e4f4:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e4fa:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e500:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e507:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e50e:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e514:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e519:	b8 00 00 00 00       	mov    $0x0,%eax
f012e51e:	89 d7                	mov    %edx,%edi
f012e520:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e522:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e529:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e52f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e534:	b8 00 00 00 00       	mov    $0x0,%eax
f012e539:	89 d7                	mov    %edx,%edi
f012e53b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e53d:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e543:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e548:	b8 00 00 00 00       	mov    $0x0,%eax
f012e54d:	89 d7                	mov    %edx,%edi
f012e54f:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e551:	e8 17 ec fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e556:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e559:	83 ec 08             	sub    $0x8,%esp
f012e55c:	68 00 fc 0f 00       	push   $0xffc00
f012e561:	6a 00                	push   $0x0
f012e563:	e8 9e 97 fd ff       	call   f0107d06 <krealloc>
f012e568:	83 c4 10             	add    $0x10,%esp
f012e56b:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e571:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e577:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e57c:	77 17                	ja     f012e595 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e57e:	83 ec 04             	sub    $0x4,%esp
f012e581:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012e586:	68 1a 11 00 00       	push   $0x111a
f012e58b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e590:	e8 70 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e595:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e59b:	89 c1                	mov    %eax,%ecx
f012e59d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e5a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e5a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e5ac:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e5af:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e5b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5b7:	f7 75 b4             	divl   -0x4c(%ebp)
f012e5ba:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e5bd:	29 d0                	sub    %edx,%eax
f012e5bf:	89 c3                	mov    %eax,%ebx
f012e5c1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e5c8:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e5cd:	0f b6 d0             	movzbl %al,%edx
f012e5d0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e5d3:	01 d0                	add    %edx,%eax
f012e5d5:	48                   	dec    %eax
f012e5d6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e5d9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e5dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5e1:	f7 75 ac             	divl   -0x54(%ebp)
f012e5e4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e5e7:	29 d0                	sub    %edx,%eax
f012e5e9:	01 c3                	add    %eax,%ebx
f012e5eb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e5f2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e5f7:	0f b6 c0             	movzbl %al,%eax
f012e5fa:	c1 e0 04             	shl    $0x4,%eax
f012e5fd:	89 c2                	mov    %eax,%edx
f012e5ff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e602:	01 d0                	add    %edx,%eax
f012e604:	48                   	dec    %eax
f012e605:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e608:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e60b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e610:	f7 75 a4             	divl   -0x5c(%ebp)
f012e613:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e616:	29 d0                	sub    %edx,%eax
f012e618:	01 d8                	add    %ebx,%eax
f012e61a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e61f:	39 c1                	cmp    %eax,%ecx
f012e621:	74 17                	je     f012e63a <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e623:	83 ec 04             	sub    $0x4,%esp
f012e626:	68 dc c8 13 f0       	push   $0xf013c8dc
f012e62b:	68 1c 11 00 00       	push   $0x111c
f012e630:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e635:	e8 cb 1b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e63a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e63d:	e8 2b eb fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e642:	29 c3                	sub    %eax,%ebx
f012e644:	89 d8                	mov    %ebx,%eax
f012e646:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e64b:	74 17                	je     f012e664 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e64d:	83 ec 04             	sub    $0x4,%esp
f012e650:	68 0e c9 13 f0       	push   $0xf013c90e
f012e655:	68 1f 11 00 00       	push   $0x111f
f012e65a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e65f:	e8 a1 1b fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e664:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e66b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e66e:	e8 fa ea fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e673:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e676:	83 ec 08             	sub    $0x8,%esp
f012e679:	68 00 fc 0f 00       	push   $0xffc00
f012e67e:	6a 00                	push   $0x0
f012e680:	e8 81 96 fd ff       	call   f0107d06 <krealloc>
f012e685:	83 c4 10             	add    $0x10,%esp
f012e688:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e68e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e694:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e699:	77 17                	ja     f012e6b2 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e69b:	83 ec 04             	sub    $0x4,%esp
f012e69e:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012e6a3:	68 27 11 00 00       	push   $0x1127
f012e6a8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e6ad:	e8 53 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e6b2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e6b8:	89 c1                	mov    %eax,%ecx
f012e6ba:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e6c1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e6c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e6c9:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e6cc:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e6cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6d4:	f7 75 9c             	divl   -0x64(%ebp)
f012e6d7:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e6da:	29 d0                	sub    %edx,%eax
f012e6dc:	89 c3                	mov    %eax,%ebx
f012e6de:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e6e5:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e6ea:	0f b6 d0             	movzbl %al,%edx
f012e6ed:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e6f0:	01 d0                	add    %edx,%eax
f012e6f2:	48                   	dec    %eax
f012e6f3:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e6f6:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e6f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6fe:	f7 75 94             	divl   -0x6c(%ebp)
f012e701:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e704:	29 d0                	sub    %edx,%eax
f012e706:	01 c3                	add    %eax,%ebx
f012e708:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e70f:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e714:	0f b6 c0             	movzbl %al,%eax
f012e717:	c1 e0 04             	shl    $0x4,%eax
f012e71a:	89 c2                	mov    %eax,%edx
f012e71c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e71f:	01 d0                	add    %edx,%eax
f012e721:	48                   	dec    %eax
f012e722:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e725:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e728:	ba 00 00 00 00       	mov    $0x0,%edx
f012e72d:	f7 75 8c             	divl   -0x74(%ebp)
f012e730:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e733:	29 d0                	sub    %edx,%eax
f012e735:	01 d8                	add    %ebx,%eax
f012e737:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e73c:	39 c1                	cmp    %eax,%ecx
f012e73e:	74 17                	je     f012e757 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e740:	83 ec 04             	sub    $0x4,%esp
f012e743:	68 dc c8 13 f0       	push   $0xf013c8dc
f012e748:	68 29 11 00 00       	push   $0x1129
f012e74d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e752:	e8 ae 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e757:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e75a:	e8 0e ea fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e75f:	29 c3                	sub    %eax,%ebx
f012e761:	89 d8                	mov    %ebx,%eax
f012e763:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e768:	74 17                	je     f012e781 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e76a:	83 ec 04             	sub    $0x4,%esp
f012e76d:	68 0e c9 13 f0       	push   $0xf013c90e
f012e772:	68 2b 11 00 00       	push   $0x112b
f012e777:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e77c:	e8 84 1a fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e781:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e788:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e78b:	e8 dd e9 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e790:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e793:	83 ec 08             	sub    $0x8,%esp
f012e796:	68 00 fc 0f 00       	push   $0xffc00
f012e79b:	6a 00                	push   $0x0
f012e79d:	e8 64 95 fd ff       	call   f0107d06 <krealloc>
f012e7a2:	83 c4 10             	add    $0x10,%esp
f012e7a5:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e7ab:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7b1:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e7b6:	77 17                	ja     f012e7cf <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e7b8:	83 ec 04             	sub    $0x4,%esp
f012e7bb:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012e7c0:	68 33 11 00 00       	push   $0x1133
f012e7c5:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e7ca:	e8 36 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e7cf:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7d5:	89 c1                	mov    %eax,%ecx
f012e7d7:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e7de:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e7e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e7e6:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e7e9:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e7ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7f1:	f7 75 84             	divl   -0x7c(%ebp)
f012e7f4:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e7f7:	29 d0                	sub    %edx,%eax
f012e7f9:	89 c3                	mov    %eax,%ebx
f012e7fb:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e802:	10 00 00 
f012e805:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e80a:	0f b6 d0             	movzbl %al,%edx
f012e80d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e813:	01 d0                	add    %edx,%eax
f012e815:	48                   	dec    %eax
f012e816:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e81c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e822:	ba 00 00 00 00       	mov    $0x0,%edx
f012e827:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e82d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e833:	29 d0                	sub    %edx,%eax
f012e835:	01 c3                	add    %eax,%ebx
f012e837:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e83e:	10 00 00 
f012e841:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e846:	0f b6 c0             	movzbl %al,%eax
f012e849:	c1 e0 04             	shl    $0x4,%eax
f012e84c:	89 c2                	mov    %eax,%edx
f012e84e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e854:	01 d0                	add    %edx,%eax
f012e856:	48                   	dec    %eax
f012e857:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e85d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e863:	ba 00 00 00 00       	mov    $0x0,%edx
f012e868:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e86e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e874:	29 d0                	sub    %edx,%eax
f012e876:	01 d8                	add    %ebx,%eax
f012e878:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e87d:	39 c1                	cmp    %eax,%ecx
f012e87f:	74 17                	je     f012e898 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e881:	83 ec 04             	sub    $0x4,%esp
f012e884:	68 dc c8 13 f0       	push   $0xf013c8dc
f012e889:	68 35 11 00 00       	push   $0x1135
f012e88e:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e893:	e8 6d 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e898:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e89b:	e8 cd e8 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e8a0:	29 c3                	sub    %eax,%ebx
f012e8a2:	89 d8                	mov    %ebx,%eax
f012e8a4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e8a9:	74 17                	je     f012e8c2 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e8ab:	83 ec 04             	sub    $0x4,%esp
f012e8ae:	68 0e c9 13 f0       	push   $0xf013c90e
f012e8b3:	68 37 11 00 00       	push   $0x1137
f012e8b8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e8bd:	e8 43 19 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e8c2:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e8c9:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e8cc:	e8 9c e8 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e8d1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e8d4:	83 ec 08             	sub    $0x8,%esp
f012e8d7:	68 00 fc 0f 00       	push   $0xffc00
f012e8dc:	6a 00                	push   $0x0
f012e8de:	e8 23 94 fd ff       	call   f0107d06 <krealloc>
f012e8e3:	83 c4 10             	add    $0x10,%esp
f012e8e6:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e8ec:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e8f2:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e8f7:	77 17                	ja     f012e910 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8f9:	83 ec 04             	sub    $0x4,%esp
f012e8fc:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012e901:	68 3e 11 00 00       	push   $0x113e
f012e906:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e90b:	e8 f5 18 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e910:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e916:	89 c1                	mov    %eax,%ecx
f012e918:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e91f:	10 00 00 
f012e922:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e928:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e92d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e933:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e939:	ba 00 00 00 00       	mov    $0x0,%edx
f012e93e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e944:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e94a:	29 d0                	sub    %edx,%eax
f012e94c:	89 c3                	mov    %eax,%ebx
f012e94e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e955:	10 00 00 
f012e958:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e95d:	0f b6 d0             	movzbl %al,%edx
f012e960:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e966:	01 d0                	add    %edx,%eax
f012e968:	48                   	dec    %eax
f012e969:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e96f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e975:	ba 00 00 00 00       	mov    $0x0,%edx
f012e97a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e980:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e986:	29 d0                	sub    %edx,%eax
f012e988:	01 c3                	add    %eax,%ebx
f012e98a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e991:	10 00 00 
f012e994:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012e999:	0f b6 c0             	movzbl %al,%eax
f012e99c:	c1 e0 04             	shl    $0x4,%eax
f012e99f:	89 c2                	mov    %eax,%edx
f012e9a1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e9a7:	01 d0                	add    %edx,%eax
f012e9a9:	48                   	dec    %eax
f012e9aa:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e9b0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e9b6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9bb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e9c1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e9c7:	29 d0                	sub    %edx,%eax
f012e9c9:	01 d8                	add    %ebx,%eax
f012e9cb:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e9d0:	39 c1                	cmp    %eax,%ecx
f012e9d2:	74 17                	je     f012e9eb <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e9d4:	83 ec 04             	sub    $0x4,%esp
f012e9d7:	68 dc c8 13 f0       	push   $0xf013c8dc
f012e9dc:	68 40 11 00 00       	push   $0x1140
f012e9e1:	68 fa b5 13 f0       	push   $0xf013b5fa
f012e9e6:	e8 1a 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e9eb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e9ee:	e8 7a e7 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012e9f3:	29 c3                	sub    %eax,%ebx
f012e9f5:	89 d8                	mov    %ebx,%eax
f012e9f7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e9fc:	74 17                	je     f012ea15 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e9fe:	83 ec 04             	sub    $0x4,%esp
f012ea01:	68 0e c9 13 f0       	push   $0xf013c90e
f012ea06:	68 42 11 00 00       	push   $0x1142
f012ea0b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ea10:	e8 f0 17 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012ea15:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012ea1c:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ea1f:	e8 49 e7 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012ea24:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ea27:	83 ec 08             	sub    $0x8,%esp
f012ea2a:	68 00 fc 1f 00       	push   $0x1ffc00
f012ea2f:	6a 00                	push   $0x0
f012ea31:	e8 d0 92 fd ff       	call   f0107d06 <krealloc>
f012ea36:	83 c4 10             	add    $0x10,%esp
f012ea39:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012ea3f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea45:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012ea4a:	77 17                	ja     f012ea63 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea4c:	83 ec 04             	sub    $0x4,%esp
f012ea4f:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012ea54:	68 49 11 00 00       	push   $0x1149
f012ea59:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ea5e:	e8 a2 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012ea63:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea69:	89 c1                	mov    %eax,%ecx
f012ea6b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012ea72:	10 00 00 
f012ea75:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012ea7b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea80:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012ea86:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ea8c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea91:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012ea97:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ea9d:	29 d0                	sub    %edx,%eax
f012ea9f:	89 c3                	mov    %eax,%ebx
f012eaa1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012eaa8:	10 00 00 
f012eaab:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012eab0:	0f b6 d0             	movzbl %al,%edx
f012eab3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012eab9:	01 d0                	add    %edx,%eax
f012eabb:	48                   	dec    %eax
f012eabc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012eac2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012eac8:	ba 00 00 00 00       	mov    $0x0,%edx
f012eacd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012ead3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ead9:	29 d0                	sub    %edx,%eax
f012eadb:	01 c3                	add    %eax,%ebx
f012eadd:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012eae4:	10 00 00 
f012eae7:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012eaec:	0f b6 c0             	movzbl %al,%eax
f012eaef:	c1 e0 04             	shl    $0x4,%eax
f012eaf2:	89 c2                	mov    %eax,%edx
f012eaf4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012eafa:	01 d0                	add    %edx,%eax
f012eafc:	48                   	dec    %eax
f012eafd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012eb03:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eb09:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb0e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012eb14:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eb1a:	29 d0                	sub    %edx,%eax
f012eb1c:	01 d8                	add    %ebx,%eax
f012eb1e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012eb23:	39 c1                	cmp    %eax,%ecx
f012eb25:	74 17                	je     f012eb3e <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012eb27:	83 ec 04             	sub    $0x4,%esp
f012eb2a:	68 dc c8 13 f0       	push   $0xf013c8dc
f012eb2f:	68 4b 11 00 00       	push   $0x114b
f012eb34:	68 fa b5 13 f0       	push   $0xf013b5fa
f012eb39:	e8 c7 16 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012eb3e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eb41:	e8 27 e6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012eb46:	29 c3                	sub    %eax,%ebx
f012eb48:	89 d8                	mov    %ebx,%eax
f012eb4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012eb4f:	74 17                	je     f012eb68 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012eb51:	83 ec 04             	sub    $0x4,%esp
f012eb54:	68 0e c9 13 f0       	push   $0xf013c90e
f012eb59:	68 4d 11 00 00       	push   $0x114d
f012eb5e:	68 fa b5 13 f0       	push   $0xf013b5fa
f012eb63:	e8 9d 16 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012eb68:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012eb6f:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012eb72:	e8 f6 e5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012eb77:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012eb7a:	83 ec 08             	sub    $0x8,%esp
f012eb7d:	68 00 fc 1f 00       	push   $0x1ffc00
f012eb82:	6a 00                	push   $0x0
f012eb84:	e8 7d 91 fd ff       	call   f0107d06 <krealloc>
f012eb89:	83 c4 10             	add    $0x10,%esp
f012eb8c:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012eb92:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eb98:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012eb9d:	77 17                	ja     f012ebb6 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eb9f:	83 ec 04             	sub    $0x4,%esp
f012eba2:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012eba7:	68 54 11 00 00       	push   $0x1154
f012ebac:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ebb1:	e8 4f 16 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012ebb6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ebbc:	89 c1                	mov    %eax,%ecx
f012ebbe:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012ebc5:	10 00 00 
f012ebc8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012ebce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ebd3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012ebd9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ebdf:	ba 00 00 00 00       	mov    $0x0,%edx
f012ebe4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012ebea:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ebf0:	29 d0                	sub    %edx,%eax
f012ebf2:	89 c3                	mov    %eax,%ebx
f012ebf4:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012ebfb:	10 00 00 
f012ebfe:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012ec03:	0f b6 d0             	movzbl %al,%edx
f012ec06:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012ec0c:	01 d0                	add    %edx,%eax
f012ec0e:	48                   	dec    %eax
f012ec0f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012ec15:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ec1b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec20:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012ec26:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ec2c:	29 d0                	sub    %edx,%eax
f012ec2e:	01 c3                	add    %eax,%ebx
f012ec30:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012ec37:	10 00 00 
f012ec3a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012ec3f:	0f b6 c0             	movzbl %al,%eax
f012ec42:	c1 e0 04             	shl    $0x4,%eax
f012ec45:	89 c2                	mov    %eax,%edx
f012ec47:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ec4d:	01 d0                	add    %edx,%eax
f012ec4f:	48                   	dec    %eax
f012ec50:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012ec56:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ec5c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec61:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012ec67:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ec6d:	29 d0                	sub    %edx,%eax
f012ec6f:	01 d8                	add    %ebx,%eax
f012ec71:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012ec76:	39 c1                	cmp    %eax,%ecx
f012ec78:	74 17                	je     f012ec91 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012ec7a:	83 ec 04             	sub    $0x4,%esp
f012ec7d:	68 dc c8 13 f0       	push   $0xf013c8dc
f012ec82:	68 56 11 00 00       	push   $0x1156
f012ec87:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ec8c:	e8 74 15 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ec91:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ec94:	e8 d4 e4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012ec99:	29 c3                	sub    %eax,%ebx
f012ec9b:	89 d8                	mov    %ebx,%eax
f012ec9d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012eca2:	74 17                	je     f012ecbb <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012eca4:	83 ec 04             	sub    $0x4,%esp
f012eca7:	68 0e c9 13 f0       	push   $0xf013c90e
f012ecac:	68 58 11 00 00       	push   $0x1158
f012ecb1:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ecb6:	e8 4a 15 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012ecbb:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012ecc2:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ecc5:	e8 a3 e4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012ecca:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012eccd:	83 ec 08             	sub    $0x8,%esp
f012ecd0:	68 00 fc 2f 00       	push   $0x2ffc00
f012ecd5:	6a 00                	push   $0x0
f012ecd7:	e8 2a 90 fd ff       	call   f0107d06 <krealloc>
f012ecdc:	83 c4 10             	add    $0x10,%esp
f012ecdf:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012ece5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eceb:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012ecf0:	77 17                	ja     f012ed09 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ecf2:	83 ec 04             	sub    $0x4,%esp
f012ecf5:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012ecfa:	68 5f 11 00 00       	push   $0x115f
f012ecff:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ed04:	e8 fc 14 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012ed09:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ed0f:	89 c1                	mov    %eax,%ecx
f012ed11:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012ed18:	10 00 00 
f012ed1b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ed21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed26:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012ed2c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ed32:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed37:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012ed3d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ed43:	29 d0                	sub    %edx,%eax
f012ed45:	89 c3                	mov    %eax,%ebx
f012ed47:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ed4e:	10 00 00 
f012ed51:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012ed56:	0f b6 d0             	movzbl %al,%edx
f012ed59:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ed5f:	01 d0                	add    %edx,%eax
f012ed61:	48                   	dec    %eax
f012ed62:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ed68:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ed6e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed73:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ed79:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ed7f:	29 d0                	sub    %edx,%eax
f012ed81:	01 c3                	add    %eax,%ebx
f012ed83:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ed8a:	10 00 00 
f012ed8d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012ed92:	0f b6 c0             	movzbl %al,%eax
f012ed95:	c1 e0 04             	shl    $0x4,%eax
f012ed98:	89 c2                	mov    %eax,%edx
f012ed9a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012eda0:	01 d0                	add    %edx,%eax
f012eda2:	48                   	dec    %eax
f012eda3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012eda9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012edaf:	ba 00 00 00 00       	mov    $0x0,%edx
f012edb4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012edba:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012edc0:	29 d0                	sub    %edx,%eax
f012edc2:	01 d8                	add    %ebx,%eax
f012edc4:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012edc9:	39 c1                	cmp    %eax,%ecx
f012edcb:	74 17                	je     f012ede4 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012edcd:	83 ec 04             	sub    $0x4,%esp
f012edd0:	68 dc c8 13 f0       	push   $0xf013c8dc
f012edd5:	68 61 11 00 00       	push   $0x1161
f012edda:	68 fa b5 13 f0       	push   $0xf013b5fa
f012eddf:	e8 21 14 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ede4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ede7:	e8 81 e3 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012edec:	29 c3                	sub    %eax,%ebx
f012edee:	89 d8                	mov    %ebx,%eax
f012edf0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012edf5:	74 17                	je     f012ee0e <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012edf7:	83 ec 04             	sub    $0x4,%esp
f012edfa:	68 44 ba 13 f0       	push   $0xf013ba44
f012edff:	68 63 11 00 00       	push   $0x1163
f012ee04:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ee09:	e8 f7 13 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ee0e:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012ee15:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ee18:	e8 50 e3 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012ee1d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ee20:	83 ec 08             	sub    $0x8,%esp
f012ee23:	68 00 fc 2f 00       	push   $0x2ffc00
f012ee28:	6a 00                	push   $0x0
f012ee2a:	e8 d7 8e fd ff       	call   f0107d06 <krealloc>
f012ee2f:	83 c4 10             	add    $0x10,%esp
f012ee32:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ee38:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ee3e:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ee43:	77 17                	ja     f012ee5c <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee45:	83 ec 04             	sub    $0x4,%esp
f012ee48:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012ee4d:	68 6a 11 00 00       	push   $0x116a
f012ee52:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ee57:	e8 a9 13 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ee5c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ee62:	89 c1                	mov    %eax,%ecx
f012ee64:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ee6b:	10 00 00 
f012ee6e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ee74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ee79:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ee7f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ee85:	ba 00 00 00 00       	mov    $0x0,%edx
f012ee8a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ee90:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ee96:	29 d0                	sub    %edx,%eax
f012ee98:	89 c3                	mov    %eax,%ebx
f012ee9a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012eea1:	10 00 00 
f012eea4:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012eea9:	0f b6 d0             	movzbl %al,%edx
f012eeac:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012eeb2:	01 d0                	add    %edx,%eax
f012eeb4:	48                   	dec    %eax
f012eeb5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012eebb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eec1:	ba 00 00 00 00       	mov    $0x0,%edx
f012eec6:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012eecc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eed2:	29 d0                	sub    %edx,%eax
f012eed4:	01 c3                	add    %eax,%ebx
f012eed6:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012eedd:	10 00 00 
f012eee0:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012eee5:	0f b6 c0             	movzbl %al,%eax
f012eee8:	c1 e0 04             	shl    $0x4,%eax
f012eeeb:	89 c2                	mov    %eax,%edx
f012eeed:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012eef3:	01 d0                	add    %edx,%eax
f012eef5:	48                   	dec    %eax
f012eef6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012eefc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ef02:	ba 00 00 00 00       	mov    $0x0,%edx
f012ef07:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012ef0d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ef13:	29 d0                	sub    %edx,%eax
f012ef15:	01 d8                	add    %ebx,%eax
f012ef17:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ef1c:	39 c1                	cmp    %eax,%ecx
f012ef1e:	74 17                	je     f012ef37 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ef20:	83 ec 04             	sub    $0x4,%esp
f012ef23:	68 dc c8 13 f0       	push   $0xf013c8dc
f012ef28:	68 6c 11 00 00       	push   $0x116c
f012ef2d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ef32:	e8 ce 12 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ef37:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef3a:	e8 2e e2 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012ef3f:	29 c3                	sub    %eax,%ebx
f012ef41:	89 d8                	mov    %ebx,%eax
f012ef43:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ef48:	74 17                	je     f012ef61 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012ef4a:	83 ec 04             	sub    $0x4,%esp
f012ef4d:	68 0e c9 13 f0       	push   $0xf013c90e
f012ef52:	68 6e 11 00 00       	push   $0x116e
f012ef57:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ef5c:	e8 a4 12 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ef61:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012ef68:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ef6b:	e8 fd e1 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012ef70:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ef73:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ef7a:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ef7d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ef83:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012ef89:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ef8f:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ef92:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ef94:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012ef9a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012efa0:	01 c2                	add    %eax,%edx
f012efa2:	8a 45 ce             	mov    -0x32(%ebp),%al
f012efa5:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012efa7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012efad:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012efb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012efba:	eb 11                	jmp    f012efcd <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012efbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012efbf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012efc5:	01 d0                	add    %edx,%eax
f012efc7:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012efca:	ff 45 f4             	incl   -0xc(%ebp)
f012efcd:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012efd3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012efd6:	7d e4                	jge    f012efbc <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012efd8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012efde:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012efe4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012efea:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012eff0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012eff6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012effd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f003:	01 d0                	add    %edx,%eax
f012f005:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012f00b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f011:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012f017:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f01e:	eb 1b                	jmp    f012f03b <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012f020:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f023:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f02a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f030:	01 d0                	add    %edx,%eax
f012f032:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012f038:	ff 45 f0             	incl   -0x10(%ebp)
f012f03b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f041:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f044:	7d da                	jge    f012f020 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f046:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f04c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f052:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012f059:	eb 17                	jmp    f012f072 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012f05b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f05e:	01 c0                	add    %eax,%eax
f012f060:	89 c2                	mov    %eax,%edx
f012f062:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f068:	01 d0                	add    %edx,%eax
f012f06a:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f06f:	ff 45 ec             	incl   -0x14(%ebp)
f012f072:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f078:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012f07b:	7d de                	jge    f012f05b <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012f07d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f083:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012f089:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f08f:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012f094:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f09a:	01 c0                	add    %eax,%eax
f012f09c:	89 c2                	mov    %eax,%edx
f012f09e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f0a4:	01 d0                	add    %edx,%eax
f012f0a6:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012f0ab:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f0b1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f0b7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f0be:	eb 49                	jmp    f012f109 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012f0c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0c3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0ca:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0d0:	01 d0                	add    %edx,%eax
f012f0d2:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012f0d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0e5:	01 d0                	add    %edx,%eax
f012f0e7:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012f0ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0f0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0fd:	01 d0                	add    %edx,%eax
f012f0ff:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f106:	ff 45 e8             	incl   -0x18(%ebp)
f012f109:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f10f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f112:	7d ac                	jge    f012f0c0 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012f114:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f11a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012f120:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f126:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012f129:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f12f:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012f135:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f13b:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012f142:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f148:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f14f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f155:	01 d0                	add    %edx,%eax
f012f157:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012f15a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f160:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f167:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f16d:	01 d0                	add    %edx,%eax
f012f16f:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012f175:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f17b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f182:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f188:	01 d0                	add    %edx,%eax
f012f18a:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012f191:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f197:	8a 00                	mov    (%eax),%al
f012f199:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012f19c:	75 17                	jne    f012f1b5 <test_krealloc_BF+0xd04>
f012f19e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012f1a4:	89 c2                	mov    %eax,%edx
f012f1a6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f1ac:	01 d0                	add    %edx,%eax
f012f1ae:	8a 00                	mov    (%eax),%al
f012f1b0:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012f1b3:	74 17                	je     f012f1cc <test_krealloc_BF+0xd1b>
			panic(
f012f1b5:	83 ec 04             	sub    $0x4,%esp
f012f1b8:	68 2c c9 13 f0       	push   $0xf013c92c
f012f1bd:	68 b1 11 00 00       	push   $0x11b1
f012f1c2:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f1c7:	e8 39 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012f1cc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f1d2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012f1d8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f1de:	8a 00                	mov    (%eax),%al
f012f1e0:	3c 02                	cmp    $0x2,%al
f012f1e2:	75 16                	jne    f012f1fa <test_krealloc_BF+0xd49>
f012f1e4:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f1ea:	89 c2                	mov    %eax,%edx
f012f1ec:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f1f2:	01 d0                	add    %edx,%eax
f012f1f4:	8a 00                	mov    (%eax),%al
f012f1f6:	3c 02                	cmp    $0x2,%al
f012f1f8:	74 20                	je     f012f21a <test_krealloc_BF+0xd69>
			panic(
f012f1fa:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f200:	8a 00                	mov    (%eax),%al
f012f202:	0f be c0             	movsbl %al,%eax
f012f205:	50                   	push   %eax
f012f206:	68 6c c9 13 f0       	push   $0xf013c96c
f012f20b:	68 b7 11 00 00       	push   $0x11b7
f012f210:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f215:	e8 eb 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012f21a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f220:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012f226:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f22c:	8b 00                	mov    (%eax),%eax
f012f22e:	83 f8 03             	cmp    $0x3,%eax
f012f231:	75 1c                	jne    f012f24f <test_krealloc_BF+0xd9e>
f012f233:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012f239:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f240:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f246:	01 d0                	add    %edx,%eax
f012f248:	8b 00                	mov    (%eax),%eax
f012f24a:	83 f8 03             	cmp    $0x3,%eax
f012f24d:	74 17                	je     f012f266 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012f24f:	83 ec 04             	sub    $0x4,%esp
f012f252:	68 b8 c9 13 f0       	push   $0xf013c9b8
f012f257:	68 bb 11 00 00       	push   $0x11bb
f012f25c:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f261:	e8 9f 0f fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012f266:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f26c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012f272:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f278:	8b 00                	mov    (%eax),%eax
f012f27a:	83 f8 04             	cmp    $0x4,%eax
f012f27d:	75 1c                	jne    f012f29b <test_krealloc_BF+0xdea>
f012f27f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f285:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f28c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f292:	01 d0                	add    %edx,%eax
f012f294:	8b 00                	mov    (%eax),%eax
f012f296:	83 f8 04             	cmp    $0x4,%eax
f012f299:	74 17                	je     f012f2b2 <test_krealloc_BF+0xe01>
			panic(
f012f29b:	83 ec 04             	sub    $0x4,%esp
f012f29e:	68 2c c9 13 f0       	push   $0xf013c92c
f012f2a3:	68 c0 11 00 00       	push   $0x11c0
f012f2a8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f2ad:	e8 53 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012f2b2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f2b8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012f2be:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2c4:	66 8b 00             	mov    (%eax),%ax
f012f2c7:	66 83 f8 05          	cmp    $0x5,%ax
f012f2cb:	75 1b                	jne    f012f2e8 <test_krealloc_BF+0xe37>
f012f2cd:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f2d3:	01 c0                	add    %eax,%eax
f012f2d5:	89 c2                	mov    %eax,%edx
f012f2d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2dd:	01 d0                	add    %edx,%eax
f012f2df:	66 8b 00             	mov    (%eax),%ax
f012f2e2:	66 83 f8 05          	cmp    $0x5,%ax
f012f2e6:	74 17                	je     f012f2ff <test_krealloc_BF+0xe4e>
			panic(
f012f2e8:	83 ec 04             	sub    $0x4,%esp
f012f2eb:	68 2c c9 13 f0       	push   $0xf013c92c
f012f2f0:	68 c5 11 00 00       	push   $0x11c5
f012f2f5:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f2fa:	e8 06 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012f2ff:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f305:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012f30b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f311:	66 8b 00             	mov    (%eax),%ax
f012f314:	66 83 f8 06          	cmp    $0x6,%ax
f012f318:	75 1b                	jne    f012f335 <test_krealloc_BF+0xe84>
f012f31a:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f320:	01 c0                	add    %eax,%eax
f012f322:	89 c2                	mov    %eax,%edx
f012f324:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f32a:	01 d0                	add    %edx,%eax
f012f32c:	66 8b 00             	mov    (%eax),%ax
f012f32f:	66 83 f8 06          	cmp    $0x6,%ax
f012f333:	74 17                	je     f012f34c <test_krealloc_BF+0xe9b>
			panic(
f012f335:	83 ec 04             	sub    $0x4,%esp
f012f338:	68 2c c9 13 f0       	push   $0xf013c92c
f012f33d:	68 ca 11 00 00       	push   $0x11ca
f012f342:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f347:	e8 b9 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012f34c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f352:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012f358:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f35e:	8a 00                	mov    (%eax),%al
f012f360:	3c 07                	cmp    $0x7,%al
f012f362:	75 1b                	jne    f012f37f <test_krealloc_BF+0xece>
f012f364:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f36a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f371:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f377:	01 d0                	add    %edx,%eax
f012f379:	8a 00                	mov    (%eax),%al
f012f37b:	3c 07                	cmp    $0x7,%al
f012f37d:	74 17                	je     f012f396 <test_krealloc_BF+0xee5>
			panic(
f012f37f:	83 ec 04             	sub    $0x4,%esp
f012f382:	68 2c c9 13 f0       	push   $0xf013c92c
f012f387:	68 cf 11 00 00       	push   $0x11cf
f012f38c:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f391:	e8 6f 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012f396:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f39c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f3a0:	66 83 f8 07          	cmp    $0x7,%ax
f012f3a4:	75 1f                	jne    f012f3c5 <test_krealloc_BF+0xf14>
f012f3a6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f3ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f3b3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3b9:	01 d0                	add    %edx,%eax
f012f3bb:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f3bf:	66 83 f8 07          	cmp    $0x7,%ax
f012f3c3:	74 17                	je     f012f3dc <test_krealloc_BF+0xf2b>
			panic(
f012f3c5:	83 ec 04             	sub    $0x4,%esp
f012f3c8:	68 2c c9 13 f0       	push   $0xf013c92c
f012f3cd:	68 d2 11 00 00       	push   $0x11d2
f012f3d2:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f3d7:	e8 29 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012f3dc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3e2:	8b 40 04             	mov    0x4(%eax),%eax
f012f3e5:	83 f8 07             	cmp    $0x7,%eax
f012f3e8:	75 1d                	jne    f012f407 <test_krealloc_BF+0xf56>
f012f3ea:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f3f0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f3f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3fd:	01 d0                	add    %edx,%eax
f012f3ff:	8b 40 04             	mov    0x4(%eax),%eax
f012f402:	83 f8 07             	cmp    $0x7,%eax
f012f405:	74 17                	je     f012f41e <test_krealloc_BF+0xf6d>
			panic(
f012f407:	83 ec 04             	sub    $0x4,%esp
f012f40a:	68 2c c9 13 f0       	push   $0xf013c92c
f012f40f:	68 d5 11 00 00       	push   $0x11d5
f012f414:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f419:	e8 e7 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012f41e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f424:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012f42a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f430:	8a 00                	mov    (%eax),%al
f012f432:	3c 08                	cmp    $0x8,%al
f012f434:	75 1b                	jne    f012f451 <test_krealloc_BF+0xfa0>
f012f436:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f43c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f443:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f449:	01 d0                	add    %edx,%eax
f012f44b:	8a 00                	mov    (%eax),%al
f012f44d:	3c 08                	cmp    $0x8,%al
f012f44f:	74 17                	je     f012f468 <test_krealloc_BF+0xfb7>
			panic(
f012f451:	83 ec 04             	sub    $0x4,%esp
f012f454:	68 2c c9 13 f0       	push   $0xf013c92c
f012f459:	68 da 11 00 00       	push   $0x11da
f012f45e:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f463:	e8 9d 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f468:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f46e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f472:	66 83 f8 08          	cmp    $0x8,%ax
f012f476:	75 1f                	jne    f012f497 <test_krealloc_BF+0xfe6>
f012f478:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f47e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f485:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f48b:	01 d0                	add    %edx,%eax
f012f48d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f491:	66 83 f8 08          	cmp    $0x8,%ax
f012f495:	74 17                	je     f012f4ae <test_krealloc_BF+0xffd>
			panic(
f012f497:	83 ec 04             	sub    $0x4,%esp
f012f49a:	68 2c c9 13 f0       	push   $0xf013c92c
f012f49f:	68 dd 11 00 00       	push   $0x11dd
f012f4a4:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f4a9:	e8 57 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f4ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4b4:	8b 40 04             	mov    0x4(%eax),%eax
f012f4b7:	83 f8 08             	cmp    $0x8,%eax
f012f4ba:	75 1d                	jne    f012f4d9 <test_krealloc_BF+0x1028>
f012f4bc:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f4c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f4c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4cf:	01 d0                	add    %edx,%eax
f012f4d1:	8b 40 04             	mov    0x4(%eax),%eax
f012f4d4:	83 f8 08             	cmp    $0x8,%eax
f012f4d7:	74 17                	je     f012f4f0 <test_krealloc_BF+0x103f>
			panic(
f012f4d9:	83 ec 04             	sub    $0x4,%esp
f012f4dc:	68 2c c9 13 f0       	push   $0xf013c92c
f012f4e1:	68 e0 11 00 00       	push   $0x11e0
f012f4e6:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f4eb:	e8 15 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f4f0:	e8 78 dc fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f4f5:	89 c2                	mov    %eax,%edx
f012f4f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f4fa:	39 c2                	cmp    %eax,%edx
f012f4fc:	74 17                	je     f012f515 <test_krealloc_BF+0x1064>
			panic(
f012f4fe:	83 ec 04             	sub    $0x4,%esp
f012f501:	68 ec c9 13 f0       	push   $0xf013c9ec
f012f506:	68 e4 11 00 00       	push   $0x11e4
f012f50b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f510:	e8 f0 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f515:	83 ec 0c             	sub    $0xc,%esp
f012f518:	68 38 ca 13 f0       	push   $0xf013ca38
f012f51d:	e8 ec 17 fd ff       	call   f0100d0e <cprintf>
f012f522:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f525:	e8 43 dc fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f52a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f52d:	e8 c2 48 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f532:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f538:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f53e:	83 ec 08             	sub    $0x8,%esp
f012f541:	6a 00                	push   $0x0
f012f543:	50                   	push   %eax
f012f544:	e8 bd 87 fd ff       	call   f0107d06 <krealloc>
f012f549:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f54c:	e8 a3 48 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f551:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f557:	74 17                	je     f012f570 <test_krealloc_BF+0x10bf>
			panic(
f012f559:	83 ec 04             	sub    $0x4,%esp
f012f55c:	68 5c ca 13 f0       	push   $0xf013ca5c
f012f561:	68 f1 11 00 00       	push   $0x11f1
f012f566:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f56b:	e8 95 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f570:	e8 f8 db fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f575:	89 c2                	mov    %eax,%edx
f012f577:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f57a:	29 c2                	sub    %eax,%edx
f012f57c:	89 d0                	mov    %edx,%eax
f012f57e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f583:	74 17                	je     f012f59c <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f585:	83 ec 04             	sub    $0x4,%esp
f012f588:	68 d0 ca 13 f0       	push   $0xf013cad0
f012f58d:	68 f3 11 00 00       	push   $0x11f3
f012f592:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f597:	e8 69 0c fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f59c:	e8 cc db fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f5a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f5a4:	e8 4b 48 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f5a9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f5af:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f5b5:	83 ec 08             	sub    $0x8,%esp
f012f5b8:	6a 00                	push   $0x0
f012f5ba:	50                   	push   %eax
f012f5bb:	e8 46 87 fd ff       	call   f0107d06 <krealloc>
f012f5c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f5c3:	e8 2c 48 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f5c8:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f5ce:	74 17                	je     f012f5e7 <test_krealloc_BF+0x1136>
			panic(
f012f5d0:	83 ec 04             	sub    $0x4,%esp
f012f5d3:	68 5c ca 13 f0       	push   $0xf013ca5c
f012f5d8:	68 fc 11 00 00       	push   $0x11fc
f012f5dd:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f5e2:	e8 1e 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f5e7:	e8 81 db fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f5ec:	89 c2                	mov    %eax,%edx
f012f5ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f5f1:	29 c2                	sub    %eax,%edx
f012f5f3:	89 d0                	mov    %edx,%eax
f012f5f5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f5fa:	74 17                	je     f012f613 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f5fc:	83 ec 04             	sub    $0x4,%esp
f012f5ff:	68 d0 ca 13 f0       	push   $0xf013cad0
f012f604:	68 fe 11 00 00       	push   $0x11fe
f012f609:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f60e:	e8 f2 0b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f613:	e8 55 db fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f618:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f61b:	e8 d4 47 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f620:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f626:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f62c:	83 ec 08             	sub    $0x8,%esp
f012f62f:	6a 00                	push   $0x0
f012f631:	50                   	push   %eax
f012f632:	e8 cf 86 fd ff       	call   f0107d06 <krealloc>
f012f637:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f63a:	e8 b5 47 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f63f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f645:	74 17                	je     f012f65e <test_krealloc_BF+0x11ad>
			panic(
f012f647:	83 ec 04             	sub    $0x4,%esp
f012f64a:	68 14 b6 13 f0       	push   $0xf013b614
f012f64f:	68 06 12 00 00       	push   $0x1206
f012f654:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f659:	e8 a7 0b fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f65e:	e8 0a db fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f663:	89 c2                	mov    %eax,%edx
f012f665:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f668:	29 c2                	sub    %eax,%edx
f012f66a:	89 d0                	mov    %edx,%eax
f012f66c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f671:	74 17                	je     f012f68a <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f673:	83 ec 04             	sub    $0x4,%esp
f012f676:	68 d0 ca 13 f0       	push   $0xf013cad0
f012f67b:	68 08 12 00 00       	push   $0x1208
f012f680:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f685:	e8 7b 0b fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f68a:	e8 de da fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f68f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f692:	e8 5d 47 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f697:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f69d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f6a3:	83 ec 08             	sub    $0x8,%esp
f012f6a6:	6a 00                	push   $0x0
f012f6a8:	50                   	push   %eax
f012f6a9:	e8 58 86 fd ff       	call   f0107d06 <krealloc>
f012f6ae:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f6b1:	e8 3e 47 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f012f6b6:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f6bc:	74 17                	je     f012f6d5 <test_krealloc_BF+0x1224>
			panic(
f012f6be:	83 ec 04             	sub    $0x4,%esp
f012f6c1:	68 5c ca 13 f0       	push   $0xf013ca5c
f012f6c6:	68 10 12 00 00       	push   $0x1210
f012f6cb:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f6d0:	e8 30 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f6d5:	e8 93 da fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f6da:	89 c2                	mov    %eax,%edx
f012f6dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6df:	29 c2                	sub    %eax,%edx
f012f6e1:	89 d0                	mov    %edx,%eax
f012f6e3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f6e8:	74 17                	je     f012f701 <test_krealloc_BF+0x1250>
			panic(
f012f6ea:	83 ec 04             	sub    $0x4,%esp
f012f6ed:	68 04 cb 13 f0       	push   $0xf013cb04
f012f6f2:	68 13 12 00 00       	push   $0x1213
f012f6f7:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f6fc:	e8 04 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f701:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f708:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f70f:	eb 48                	jmp    f012f759 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f711:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f714:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f012f719:	83 ec 04             	sub    $0x4,%esp
f012f71c:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f722:	51                   	push   %ecx
f012f723:	52                   	push   %edx
f012f724:	50                   	push   %eax
f012f725:	e8 b3 73 fd ff       	call   f0106add <get_page_table>
f012f72a:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f72d:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f733:	85 c0                	test   %eax,%eax
f012f735:	75 17                	jne    f012f74e <test_krealloc_BF+0x129d>
					panic(
f012f737:	83 ec 04             	sub    $0x4,%esp
f012f73a:	68 fc be 13 f0       	push   $0xf013befc
f012f73f:	68 1f 12 00 00       	push   $0x121f
f012f744:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f749:	e8 b7 0a fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f74e:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f755:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f759:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f75d:	78 b2                	js     f012f711 <test_krealloc_BF+0x1260>
f012f75f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f763:	7f 09                	jg     f012f76e <test_krealloc_BF+0x12bd>
f012f765:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f76c:	76 a3                	jbe    f012f711 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f76e:	83 ec 0c             	sub    $0xc,%esp
f012f771:	68 43 cb 13 f0       	push   $0xf013cb43
f012f776:	e8 93 15 fd ff       	call   f0100d0e <cprintf>
f012f77b:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f77e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f784:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f78a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f791:	eb 21                	jmp    f012f7b4 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f793:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f799:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f79c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f7a2:	01 c8                	add    %ecx,%eax
f012f7a4:	8a 00                	mov    (%eax),%al
f012f7a6:	0f be c0             	movsbl %al,%eax
f012f7a9:	01 d0                	add    %edx,%eax
f012f7ab:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f7b1:	ff 45 dc             	incl   -0x24(%ebp)
f012f7b4:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f7ba:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f7bd:	7d d4                	jge    f012f793 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f7bf:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f7c5:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f7cb:	42                   	inc    %edx
f012f7cc:	01 d2                	add    %edx,%edx
f012f7ce:	39 d0                	cmp    %edx,%eax
f012f7d0:	74 17                	je     f012f7e9 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f7d2:	83 ec 04             	sub    $0x4,%esp
f012f7d5:	68 4c cb 13 f0       	push   $0xf013cb4c
f012f7da:	68 31 12 00 00       	push   $0x1231
f012f7df:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f7e4:	e8 1c 0a fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f7e9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f7ef:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f7f5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f7fc:	eb 25                	jmp    f012f823 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f7fe:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f804:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f807:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f80e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f814:	01 c8                	add    %ecx,%eax
f012f816:	8b 00                	mov    (%eax),%eax
f012f818:	01 d0                	add    %edx,%eax
f012f81a:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f820:	ff 45 dc             	incl   -0x24(%ebp)
f012f823:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f829:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f82c:	7d d0                	jge    f012f7fe <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f82e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f834:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f83a:	42                   	inc    %edx
f012f83b:	c1 e2 02             	shl    $0x2,%edx
f012f83e:	39 d0                	cmp    %edx,%eax
f012f840:	74 17                	je     f012f859 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f842:	83 ec 04             	sub    $0x4,%esp
f012f845:	68 4c cb 13 f0       	push   $0xf013cb4c
f012f84a:	68 3b 12 00 00       	push   $0x123b
f012f84f:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f854:	e8 ac 09 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f859:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f85f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f865:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f86c:	eb 24                	jmp    f012f892 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f86e:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f874:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f877:	01 c0                	add    %eax,%eax
f012f879:	89 c1                	mov    %eax,%ecx
f012f87b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f881:	01 c8                	add    %ecx,%eax
f012f883:	66 8b 00             	mov    (%eax),%ax
f012f886:	98                   	cwtl   
f012f887:	01 d0                	add    %edx,%eax
f012f889:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f88f:	ff 45 dc             	incl   -0x24(%ebp)
f012f892:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f898:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f89b:	7d d1                	jge    f012f86e <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f89d:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f8a3:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f8a9:	8d 48 01             	lea    0x1(%eax),%ecx
f012f8ac:	89 c8                	mov    %ecx,%eax
f012f8ae:	c1 e0 02             	shl    $0x2,%eax
f012f8b1:	01 c8                	add    %ecx,%eax
f012f8b3:	39 c2                	cmp    %eax,%edx
f012f8b5:	74 17                	je     f012f8ce <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f8b7:	83 ec 04             	sub    $0x4,%esp
f012f8ba:	68 4c cb 13 f0       	push   $0xf013cb4c
f012f8bf:	68 45 12 00 00       	push   $0x1245
f012f8c4:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f8c9:	e8 37 09 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f8ce:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f8d4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f8da:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f8e1:	eb 70                	jmp    f012f953 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f8e3:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f8e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f8ec:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f8f3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f8f9:	01 c8                	add    %ecx,%eax
f012f8fb:	8a 00                	mov    (%eax),%al
f012f8fd:	0f be c0             	movsbl %al,%eax
f012f900:	01 d0                	add    %edx,%eax
f012f902:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f908:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f90e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f911:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f918:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f91e:	01 c8                	add    %ecx,%eax
f012f920:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f924:	98                   	cwtl   
f012f925:	01 d0                	add    %edx,%eax
f012f927:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f92d:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f933:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f936:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f93d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f943:	01 c8                	add    %ecx,%eax
f012f945:	8b 40 04             	mov    0x4(%eax),%eax
f012f948:	01 d0                	add    %edx,%eax
f012f94a:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f950:	ff 45 dc             	incl   -0x24(%ebp)
f012f953:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f959:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f95c:	7d 85                	jge    f012f8e3 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f95e:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f964:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f96a:	8d 50 01             	lea    0x1(%eax),%edx
f012f96d:	89 d0                	mov    %edx,%eax
f012f96f:	01 c0                	add    %eax,%eax
f012f971:	01 d0                	add    %edx,%eax
f012f973:	01 c0                	add    %eax,%eax
f012f975:	01 d0                	add    %edx,%eax
f012f977:	39 c1                	cmp    %eax,%ecx
f012f979:	75 3a                	jne    f012f9b5 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f97b:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f981:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f987:	8d 50 01             	lea    0x1(%eax),%edx
f012f98a:	89 d0                	mov    %edx,%eax
f012f98c:	01 c0                	add    %eax,%eax
f012f98e:	01 d0                	add    %edx,%eax
f012f990:	01 c0                	add    %eax,%eax
f012f992:	01 d0                	add    %edx,%eax
f012f994:	39 c1                	cmp    %eax,%ecx
f012f996:	75 1d                	jne    f012f9b5 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f998:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f99e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f9a4:	8d 50 01             	lea    0x1(%eax),%edx
f012f9a7:	89 d0                	mov    %edx,%eax
f012f9a9:	01 c0                	add    %eax,%eax
f012f9ab:	01 d0                	add    %edx,%eax
f012f9ad:	01 c0                	add    %eax,%eax
f012f9af:	01 d0                	add    %edx,%eax
f012f9b1:	39 c1                	cmp    %eax,%ecx
f012f9b3:	74 17                	je     f012f9cc <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f9b5:	83 ec 04             	sub    $0x4,%esp
f012f9b8:	68 4c cb 13 f0       	push   $0xf013cb4c
f012f9bd:	68 53 12 00 00       	push   $0x1253
f012f9c2:	68 fa b5 13 f0       	push   $0xf013b5fa
f012f9c7:	e8 39 08 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f9cc:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f9d3:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f9d6:	e8 92 d7 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012f9db:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f9de:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f9e4:	83 ec 08             	sub    $0x8,%esp
f012f9e7:	68 00 3c 00 00       	push   $0x3c00
f012f9ec:	50                   	push   %eax
f012f9ed:	e8 14 83 fd ff       	call   f0107d06 <krealloc>
f012f9f2:	83 c4 10             	add    $0x10,%esp
f012f9f5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f9fb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fa01:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fa06:	77 17                	ja     f012fa1f <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fa08:	83 ec 04             	sub    $0x4,%esp
f012fa0b:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012fa10:	68 5f 12 00 00       	push   $0x125f
f012fa15:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fa1a:	e8 e6 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fa1f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fa25:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fa2b:	74 17                	je     f012fa44 <test_krealloc_BF+0x1593>
			panic(
f012fa2d:	83 ec 04             	sub    $0x4,%esp
f012fa30:	68 84 cb 13 f0       	push   $0xf013cb84
f012fa35:	68 62 12 00 00       	push   $0x1262
f012fa3a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fa3f:	e8 c1 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fa44:	e8 24 d7 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fa49:	89 c2                	mov    %eax,%edx
f012fa4b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fa4e:	39 c2                	cmp    %eax,%edx
f012fa50:	74 17                	je     f012fa69 <test_krealloc_BF+0x15b8>
			panic(
f012fa52:	83 ec 04             	sub    $0x4,%esp
f012fa55:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012fa5a:	68 65 12 00 00       	push   $0x1265
f012fa5f:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fa64:	e8 9c 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012fa69:	e8 ff d6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fa6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012fa71:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa77:	83 ec 08             	sub    $0x8,%esp
f012fa7a:	68 00 fc 0f 00       	push   $0xffc00
f012fa7f:	50                   	push   %eax
f012fa80:	e8 81 82 fd ff       	call   f0107d06 <krealloc>
f012fa85:	83 c4 10             	add    $0x10,%esp
f012fa88:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fa8e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fa94:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fa99:	77 17                	ja     f012fab2 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fa9b:	83 ec 04             	sub    $0x4,%esp
f012fa9e:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012faa3:	68 6b 12 00 00       	push   $0x126b
f012faa8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012faad:	e8 53 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fab2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fab8:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fabe:	74 17                	je     f012fad7 <test_krealloc_BF+0x1626>
			panic(
f012fac0:	83 ec 04             	sub    $0x4,%esp
f012fac3:	68 84 cb 13 f0       	push   $0xf013cb84
f012fac8:	68 6e 12 00 00       	push   $0x126e
f012facd:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fad2:	e8 2e 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fad7:	e8 91 d6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fadc:	89 c2                	mov    %eax,%edx
f012fade:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fae1:	39 c2                	cmp    %eax,%edx
f012fae3:	74 17                	je     f012fafc <test_krealloc_BF+0x164b>
			panic(
f012fae5:	83 ec 04             	sub    $0x4,%esp
f012fae8:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012faed:	68 71 12 00 00       	push   $0x1271
f012faf2:	68 fa b5 13 f0       	push   $0xf013b5fa
f012faf7:	e8 09 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fafc:	e8 6c d6 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fb01:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012fb04:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb0a:	83 ec 08             	sub    $0x8,%esp
f012fb0d:	68 00 fc 0f 00       	push   $0xffc00
f012fb12:	50                   	push   %eax
f012fb13:	e8 ee 81 fd ff       	call   f0107d06 <krealloc>
f012fb18:	83 c4 10             	add    $0x10,%esp
f012fb1b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb21:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fb27:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fb2c:	77 17                	ja     f012fb45 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fb2e:	83 ec 04             	sub    $0x4,%esp
f012fb31:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012fb36:	68 77 12 00 00       	push   $0x1277
f012fb3b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fb40:	e8 c0 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fb45:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb4b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fb51:	74 17                	je     f012fb6a <test_krealloc_BF+0x16b9>
			panic(
f012fb53:	83 ec 04             	sub    $0x4,%esp
f012fb56:	68 84 cb 13 f0       	push   $0xf013cb84
f012fb5b:	68 7a 12 00 00       	push   $0x127a
f012fb60:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fb65:	e8 9b 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fb6a:	e8 fe d5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fb6f:	89 c2                	mov    %eax,%edx
f012fb71:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fb74:	39 c2                	cmp    %eax,%edx
f012fb76:	74 17                	je     f012fb8f <test_krealloc_BF+0x16de>
			panic(
f012fb78:	83 ec 04             	sub    $0x4,%esp
f012fb7b:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012fb80:	68 7d 12 00 00       	push   $0x127d
f012fb85:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fb8a:	e8 76 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fb8f:	e8 d9 d5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fb94:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012fb97:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fb9d:	83 ec 08             	sub    $0x8,%esp
f012fba0:	68 00 fc 0f 00       	push   $0xffc00
f012fba5:	50                   	push   %eax
f012fba6:	e8 5b 81 fd ff       	call   f0107d06 <krealloc>
f012fbab:	83 c4 10             	add    $0x10,%esp
f012fbae:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fbb4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fbba:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fbbf:	77 17                	ja     f012fbd8 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fbc1:	83 ec 04             	sub    $0x4,%esp
f012fbc4:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012fbc9:	68 85 12 00 00       	push   $0x1285
f012fbce:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fbd3:	e8 2d 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012fbd8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fbde:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fbe4:	74 17                	je     f012fbfd <test_krealloc_BF+0x174c>
			panic(
f012fbe6:	83 ec 04             	sub    $0x4,%esp
f012fbe9:	68 34 cc 13 f0       	push   $0xf013cc34
f012fbee:	68 88 12 00 00       	push   $0x1288
f012fbf3:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fbf8:	e8 08 06 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fbfd:	e8 6b d5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fc02:	89 c2                	mov    %eax,%edx
f012fc04:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fc07:	39 c2                	cmp    %eax,%edx
f012fc09:	74 17                	je     f012fc22 <test_krealloc_BF+0x1771>
			panic(
f012fc0b:	83 ec 04             	sub    $0x4,%esp
f012fc0e:	68 f0 cb 13 f0       	push   $0xf013cbf0
f012fc13:	68 8b 12 00 00       	push   $0x128b
f012fc18:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fc1d:	e8 e3 05 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012fc22:	83 ec 0c             	sub    $0xc,%esp
f012fc25:	68 13 be 13 f0       	push   $0xf013be13
f012fc2a:	e8 df 10 fd ff       	call   f0100d0e <cprintf>
f012fc2f:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012fc32:	e8 36 d5 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fc37:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012fc3a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fc40:	83 ec 08             	sub    $0x8,%esp
f012fc43:	68 00 18 10 00       	push   $0x101800
f012fc48:	50                   	push   %eax
f012fc49:	e8 b8 80 fd ff       	call   f0107d06 <krealloc>
f012fc4e:	83 c4 10             	add    $0x10,%esp
f012fc51:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc57:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc5c:	77 17                	ja     f012fc75 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc5e:	83 ec 04             	sub    $0x4,%esp
f012fc61:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012fc66:	68 93 12 00 00       	push   $0x1293
f012fc6b:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fc70:	e8 90 05 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fc75:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fc7b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fc7e:	74 17                	je     f012fc97 <test_krealloc_BF+0x17e6>
			panic(
f012fc80:	83 ec 04             	sub    $0x4,%esp
f012fc83:	68 94 cc 13 f0       	push   $0xf013cc94
f012fc88:	68 96 12 00 00       	push   $0x1296
f012fc8d:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fc92:	e8 6e 05 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012fc97:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fc9a:	e8 ce d4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fc9f:	29 c3                	sub    %eax,%ebx
f012fca1:	89 d8                	mov    %ebx,%eax
f012fca3:	83 f8 02             	cmp    $0x2,%eax
f012fca6:	74 17                	je     f012fcbf <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012fca8:	83 ec 04             	sub    $0x4,%esp
f012fcab:	68 10 cd 13 f0       	push   $0xf013cd10
f012fcb0:	68 98 12 00 00       	push   $0x1298
f012fcb5:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fcba:	e8 46 05 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012fcbf:	e8 a9 d4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fcc4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012fcc7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fccd:	83 ec 08             	sub    $0x8,%esp
f012fcd0:	68 00 fc 3f 00       	push   $0x3ffc00
f012fcd5:	50                   	push   %eax
f012fcd6:	e8 2b 80 fd ff       	call   f0107d06 <krealloc>
f012fcdb:	83 c4 10             	add    $0x10,%esp
f012fcde:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fce1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fce4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fce9:	77 17                	ja     f012fd02 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fceb:	83 ec 04             	sub    $0x4,%esp
f012fcee:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012fcf3:	68 9e 12 00 00       	push   $0x129e
f012fcf8:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fcfd:	e8 03 05 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fd02:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd08:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fd0b:	74 17                	je     f012fd24 <test_krealloc_BF+0x1873>
			panic(
f012fd0d:	83 ec 04             	sub    $0x4,%esp
f012fd10:	68 94 cc 13 f0       	push   $0xf013cc94
f012fd15:	68 a1 12 00 00       	push   $0x12a1
f012fd1a:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fd1f:	e8 e1 04 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012fd24:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd27:	e8 41 d4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fd2c:	29 c3                	sub    %eax,%ebx
f012fd2e:	89 d8                	mov    %ebx,%eax
f012fd30:	3d 00 02 00 00       	cmp    $0x200,%eax
f012fd35:	74 17                	je     f012fd4e <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012fd37:	83 ec 04             	sub    $0x4,%esp
f012fd3a:	68 10 cd 13 f0       	push   $0xf013cd10
f012fd3f:	68 a4 12 00 00       	push   $0x12a4
f012fd44:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fd49:	e8 b7 04 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012fd4e:	83 ec 0c             	sub    $0xc,%esp
f012fd51:	68 58 be 13 f0       	push   $0xf013be58
f012fd56:	e8 b3 0f fd ff       	call   f0100d0e <cprintf>
f012fd5b:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fd5e:	e8 0a d4 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fd63:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012fd66:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd6c:	83 ec 08             	sub    $0x8,%esp
f012fd6f:	68 00 fc 9f 00       	push   $0x9ffc00
f012fd74:	50                   	push   %eax
f012fd75:	e8 8c 7f fd ff       	call   f0107d06 <krealloc>
f012fd7a:	83 c4 10             	add    $0x10,%esp
f012fd7d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fd80:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd83:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fd88:	77 17                	ja     f012fda1 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fd8a:	83 ec 04             	sub    $0x4,%esp
f012fd8d:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012fd92:	68 af 12 00 00       	push   $0x12af
f012fd97:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fd9c:	e8 64 04 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012fda1:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012fda8:	10 00 00 
f012fdab:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012fdb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fdb6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012fdbc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fdc2:	ba 00 00 00 00       	mov    $0x0,%edx
f012fdc7:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012fdcd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fdd3:	29 d0                	sub    %edx,%eax
f012fdd5:	89 c1                	mov    %eax,%ecx
f012fdd7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012fdde:	10 00 00 
f012fde1:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012fde6:	0f b6 d0             	movzbl %al,%edx
f012fde9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012fdef:	01 d0                	add    %edx,%eax
f012fdf1:	48                   	dec    %eax
f012fdf2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012fdf8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fdfe:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe03:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012fe09:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fe0f:	29 d0                	sub    %edx,%eax
f012fe11:	01 c1                	add    %eax,%ecx
f012fe13:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012fe1a:	10 00 00 
f012fe1d:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012fe22:	0f b6 c0             	movzbl %al,%eax
f012fe25:	c1 e0 04             	shl    $0x4,%eax
f012fe28:	89 c2                	mov    %eax,%edx
f012fe2a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012fe30:	01 d0                	add    %edx,%eax
f012fe32:	48                   	dec    %eax
f012fe33:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012fe39:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fe3f:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe44:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fe4a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fe50:	29 d0                	sub    %edx,%eax
f012fe52:	01 c8                	add    %ecx,%eax
f012fe54:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fe5a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe5d:	39 c2                	cmp    %eax,%edx
f012fe5f:	74 18                	je     f012fe79 <test_krealloc_BF+0x19c8>
			panic(
f012fe61:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe64:	50                   	push   %eax
f012fe65:	68 44 cd 13 f0       	push   $0xf013cd44
f012fe6a:	68 b3 12 00 00       	push   $0x12b3
f012fe6f:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fe74:	e8 8c 03 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fe79:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fe7f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fe82:	75 17                	jne    f012fe9b <test_krealloc_BF+0x19ea>
			panic(
f012fe84:	83 ec 04             	sub    $0x4,%esp
f012fe87:	68 88 cd 13 f0       	push   $0xf013cd88
f012fe8c:	68 b6 12 00 00       	push   $0x12b6
f012fe91:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fe96:	e8 6a 03 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012fe9b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fe9e:	e8 ca d2 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fea3:	29 c3                	sub    %eax,%ebx
f012fea5:	89 d8                	mov    %ebx,%eax
f012fea7:	3d 00 06 00 00       	cmp    $0x600,%eax
f012feac:	74 17                	je     f012fec5 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012feae:	83 ec 04             	sub    $0x4,%esp
f012feb1:	68 10 cd 13 f0       	push   $0xf013cd10
f012feb6:	68 b9 12 00 00       	push   $0x12b9
f012febb:	68 fa b5 13 f0       	push   $0xf013b5fa
f012fec0:	e8 40 03 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012fec5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fec8:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012fece:	e8 9a d2 fd ff       	call   f010d16d <sys_calculate_free_frames>
f012fed3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012fed6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fedc:	83 ec 08             	sub    $0x8,%esp
f012fedf:	68 00 fc 3f 00       	push   $0x3ffc00
f012fee4:	50                   	push   %eax
f012fee5:	e8 1c 7e fd ff       	call   f0107d06 <krealloc>
f012feea:	83 c4 10             	add    $0x10,%esp
f012feed:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fef0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fef3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fef8:	77 17                	ja     f012ff11 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fefa:	83 ec 04             	sub    $0x4,%esp
f012fefd:	68 a0 c8 13 f0       	push   $0xf013c8a0
f012ff02:	68 c2 12 00 00       	push   $0x12c2
f012ff07:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ff0c:	e8 f4 02 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012ff11:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff17:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ff1a:	75 17                	jne    f012ff33 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ff1c:	83 ec 04             	sub    $0x4,%esp
f012ff1f:	68 88 cd 13 f0       	push   $0xf013cd88
f012ff24:	68 c4 12 00 00       	push   $0x12c4
f012ff29:	68 fa b5 13 f0       	push   $0xf013b5fa
f012ff2e:	e8 d2 02 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012ff33:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012ff3a:	10 00 00 
f012ff3d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ff43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ff48:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012ff4e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ff54:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff59:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012ff5f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ff65:	29 d0                	sub    %edx,%eax
f012ff67:	89 c1                	mov    %eax,%ecx
f012ff69:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012ff70:	10 00 00 
f012ff73:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012ff78:	0f b6 d0             	movzbl %al,%edx
f012ff7b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ff81:	01 d0                	add    %edx,%eax
f012ff83:	48                   	dec    %eax
f012ff84:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012ff8a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ff90:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff95:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012ff9b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ffa1:	29 d0                	sub    %edx,%eax
f012ffa3:	01 c1                	add    %eax,%ecx
f012ffa5:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ffac:	10 00 00 
f012ffaf:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f012ffb4:	0f b6 c0             	movzbl %al,%eax
f012ffb7:	c1 e0 04             	shl    $0x4,%eax
f012ffba:	89 c2                	mov    %eax,%edx
f012ffbc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ffc2:	01 d0                	add    %edx,%eax
f012ffc4:	48                   	dec    %eax
f012ffc5:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012ffcb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ffd1:	ba 00 00 00 00       	mov    $0x0,%edx
f012ffd6:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012ffdc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ffe2:	29 d0                	sub    %edx,%eax
f012ffe4:	01 c8                	add    %ecx,%eax
f012ffe6:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012ffec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ffef:	39 c2                	cmp    %eax,%edx
f012fff1:	74 17                	je     f013000a <test_krealloc_BF+0x1b59>
f012fff3:	83 ec 04             	sub    $0x4,%esp
f012fff6:	68 dc c8 13 f0       	push   $0xf013c8dc
f012fffb:	68 c5 12 00 00       	push   $0x12c5
f0130000:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130005:	e8 fb 01 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f013000a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f013000d:	e8 5b d1 fd ff       	call   f010d16d <sys_calculate_free_frames>
f0130012:	29 c3                	sub    %eax,%ebx
f0130014:	89 d8                	mov    %ebx,%eax
f0130016:	3d 00 01 00 00       	cmp    $0x100,%eax
f013001b:	74 17                	je     f0130034 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f013001d:	83 ec 04             	sub    $0x4,%esp
f0130020:	68 10 cd 13 f0       	push   $0xf013cd10
f0130025:	68 c9 12 00 00       	push   $0x12c9
f013002a:	68 fa b5 13 f0       	push   $0xf013b5fa
f013002f:	e8 d1 01 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f0130034:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130037:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f013003d:	e8 2b d1 fd ff       	call   f010d16d <sys_calculate_free_frames>
f0130042:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f0130045:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013004b:	83 ec 08             	sub    $0x8,%esp
f013004e:	68 00 fc 3f 01       	push   $0x13ffc00
f0130053:	50                   	push   %eax
f0130054:	e8 ad 7c fd ff       	call   f0107d06 <krealloc>
f0130059:	83 c4 10             	add    $0x10,%esp
f013005c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f013005f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130062:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0130067:	77 17                	ja     f0130080 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f0130069:	83 ec 04             	sub    $0x4,%esp
f013006c:	68 a0 c8 13 f0       	push   $0xf013c8a0
f0130071:	68 cf 12 00 00       	push   $0x12cf
f0130076:	68 fa b5 13 f0       	push   $0xf013b5fa
f013007b:	e8 85 01 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f0130080:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0130086:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0130089:	75 17                	jne    f01300a2 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f013008b:	83 ec 04             	sub    $0x4,%esp
f013008e:	68 88 cd 13 f0       	push   $0xf013cd88
f0130093:	68 d1 12 00 00       	push   $0x12d1
f0130098:	68 fa b5 13 f0       	push   $0xf013b5fa
f013009d:	e8 63 01 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f01300a2:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01300a9:	10 00 00 
f01300ac:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01300b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01300b7:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01300bd:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01300c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01300c8:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01300ce:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01300d4:	29 d0                	sub    %edx,%eax
f01300d6:	89 c1                	mov    %eax,%ecx
f01300d8:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01300df:	10 00 00 
f01300e2:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f01300e7:	0f b6 d0             	movzbl %al,%edx
f01300ea:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01300f0:	01 d0                	add    %edx,%eax
f01300f2:	48                   	dec    %eax
f01300f3:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01300f9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01300ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0130104:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f013010a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0130110:	29 d0                	sub    %edx,%eax
f0130112:	01 c1                	add    %eax,%ecx
f0130114:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f013011b:	10 00 00 
f013011e:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0130123:	0f b6 c0             	movzbl %al,%eax
f0130126:	c1 e0 04             	shl    $0x4,%eax
f0130129:	89 c2                	mov    %eax,%edx
f013012b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0130131:	01 d0                	add    %edx,%eax
f0130133:	48                   	dec    %eax
f0130134:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f013013a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130140:	ba 00 00 00 00       	mov    $0x0,%edx
f0130145:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f013014b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130151:	29 d0                	sub    %edx,%eax
f0130153:	01 c8                	add    %ecx,%eax
f0130155:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f013015b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f013015e:	39 c2                	cmp    %eax,%edx
f0130160:	74 17                	je     f0130179 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f0130162:	83 ec 04             	sub    $0x4,%esp
f0130165:	68 a8 ce 13 f0       	push   $0xf013cea8
f013016a:	68 d3 12 00 00       	push   $0x12d3
f013016f:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130174:	e8 8c 00 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f0130179:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f013017c:	e8 ec cf fd ff       	call   f010d16d <sys_calculate_free_frames>
f0130181:	29 c3                	sub    %eax,%ebx
f0130183:	89 d8                	mov    %ebx,%eax
f0130185:	3d 00 10 00 00       	cmp    $0x1000,%eax
f013018a:	74 17                	je     f01301a3 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f013018c:	83 ec 04             	sub    $0x4,%esp
f013018f:	68 10 cd 13 f0       	push   $0xf013cd10
f0130194:	68 d6 12 00 00       	push   $0x12d6
f0130199:	68 fa b5 13 f0       	push   $0xf013b5fa
f013019e:	e8 62 00 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f01301a3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01301a6:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f01301ac:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01301b2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f01301b8:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01301bf:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f01301c2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01301c9:	eb 21                	jmp    f01301ec <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f01301cb:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01301d1:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01301d4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01301da:	01 c8                	add    %ecx,%eax
f01301dc:	8a 00                	mov    (%eax),%al
f01301de:	0f be c0             	movsbl %al,%eax
f01301e1:	01 d0                	add    %edx,%eax
f01301e3:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f01301e9:	ff 45 d8             	incl   -0x28(%ebp)
f01301ec:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01301f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01301f5:	7d d4                	jge    f01301cb <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f01301f7:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01301fd:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f0130203:	42                   	inc    %edx
f0130204:	01 d2                	add    %edx,%edx
f0130206:	39 d0                	cmp    %edx,%eax
f0130208:	74 17                	je     f0130221 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f013020a:	83 ec 04             	sub    $0x4,%esp
f013020d:	68 40 ce 13 f0       	push   $0xf013ce40
f0130212:	68 e4 12 00 00       	push   $0x12e4
f0130217:	68 fa b5 13 f0       	push   $0xf013b5fa
f013021c:	e8 e4 ff fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0130221:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0130227:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f013022d:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130234:	00 00 00 
		sums[1] = 0;
f0130237:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f013023e:	00 00 00 
		sums[2] = 0;
f0130241:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f0130248:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f013024b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0130252:	eb 70                	jmp    f01302c4 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f0130254:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f013025a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013025d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130264:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f013026a:	01 c8                	add    %ecx,%eax
f013026c:	8a 00                	mov    (%eax),%al
f013026e:	0f be c0             	movsbl %al,%eax
f0130271:	01 d0                	add    %edx,%eax
f0130273:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f0130279:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f013027f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130282:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130289:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f013028f:	01 c8                	add    %ecx,%eax
f0130291:	66 8b 40 02          	mov    0x2(%eax),%ax
f0130295:	98                   	cwtl   
f0130296:	01 d0                	add    %edx,%eax
f0130298:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f013029e:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01302a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302a7:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01302ae:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01302b4:	01 c8                	add    %ecx,%eax
f01302b6:	8b 40 04             	mov    0x4(%eax),%eax
f01302b9:	01 d0                	add    %edx,%eax
f01302bb:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f01302c1:	ff 45 d8             	incl   -0x28(%ebp)
f01302c4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01302cd:	7d 85                	jge    f0130254 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f01302cf:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f01302d5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302db:	8d 50 01             	lea    0x1(%eax),%edx
f01302de:	89 d0                	mov    %edx,%eax
f01302e0:	01 c0                	add    %eax,%eax
f01302e2:	01 d0                	add    %edx,%eax
f01302e4:	01 c0                	add    %eax,%eax
f01302e6:	01 d0                	add    %edx,%eax
f01302e8:	39 c1                	cmp    %eax,%ecx
f01302ea:	75 3a                	jne    f0130326 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f01302ec:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f01302f2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302f8:	8d 50 01             	lea    0x1(%eax),%edx
f01302fb:	89 d0                	mov    %edx,%eax
f01302fd:	01 c0                	add    %eax,%eax
f01302ff:	01 d0                	add    %edx,%eax
f0130301:	01 c0                	add    %eax,%eax
f0130303:	01 d0                	add    %edx,%eax
f0130305:	39 c1                	cmp    %eax,%ecx
f0130307:	75 1d                	jne    f0130326 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f0130309:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f013030f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0130315:	8d 50 01             	lea    0x1(%eax),%edx
f0130318:	89 d0                	mov    %edx,%eax
f013031a:	01 c0                	add    %eax,%eax
f013031c:	01 d0                	add    %edx,%eax
f013031e:	01 c0                	add    %eax,%eax
f0130320:	01 d0                	add    %edx,%eax
f0130322:	39 c1                	cmp    %eax,%ecx
f0130324:	74 17                	je     f013033d <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f0130326:	83 ec 04             	sub    $0x4,%esp
f0130329:	68 40 ce 13 f0       	push   $0xf013ce40
f013032e:	68 f6 12 00 00       	push   $0x12f6
f0130333:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130338:	e8 c8 fe fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f013033d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130343:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f0130349:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130350:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130353:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f013035a:	eb 24                	jmp    f0130380 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f013035c:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130362:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130365:	01 c0                	add    %eax,%eax
f0130367:	89 c1                	mov    %eax,%ecx
f0130369:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f013036f:	01 c8                	add    %ecx,%eax
f0130371:	66 8b 00             	mov    (%eax),%ax
f0130374:	98                   	cwtl   
f0130375:	01 d0                	add    %edx,%eax
f0130377:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f013037d:	ff 45 d8             	incl   -0x28(%ebp)
f0130380:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0130386:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0130389:	7d d1                	jge    f013035c <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f013038b:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130391:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0130397:	8d 48 01             	lea    0x1(%eax),%ecx
f013039a:	89 c8                	mov    %ecx,%eax
f013039c:	c1 e0 02             	shl    $0x2,%eax
f013039f:	01 c8                	add    %ecx,%eax
f01303a1:	39 c2                	cmp    %eax,%edx
f01303a3:	74 17                	je     f01303bc <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f01303a5:	83 ec 04             	sub    $0x4,%esp
f01303a8:	68 40 ce 13 f0       	push   $0xf013ce40
f01303ad:	68 00 13 00 00       	push   $0x1300
f01303b2:	68 fa b5 13 f0       	push   $0xf013b5fa
f01303b7:	e8 49 fe fc ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f01303bc:	e8 ac cd fd ff       	call   f010d16d <sys_calculate_free_frames>
f01303c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01303c4:	e8 2b 3a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01303c9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f01303cf:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01303d5:	83 ec 08             	sub    $0x8,%esp
f01303d8:	6a 00                	push   $0x0
f01303da:	50                   	push   %eax
f01303db:	e8 26 79 fd ff       	call   f0107d06 <krealloc>
f01303e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01303e3:	e8 0c 3a fd ff       	call   f0103df4 <pf_calculate_free_frames>
f01303e8:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01303ee:	74 17                	je     f0130407 <test_krealloc_BF+0x1f56>
			panic(
f01303f0:	83 ec 04             	sub    $0x4,%esp
f01303f3:	68 14 b6 13 f0       	push   $0xf013b614
f01303f8:	68 08 13 00 00       	push   $0x1308
f01303fd:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130402:	e8 fe fd fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f0130407:	e8 61 cd fd ff       	call   f010d16d <sys_calculate_free_frames>
f013040c:	89 c2                	mov    %eax,%edx
f013040e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130411:	29 c2                	sub    %eax,%edx
f0130413:	89 d0                	mov    %edx,%eax
f0130415:	3d 00 14 00 00       	cmp    $0x1400,%eax
f013041a:	74 17                	je     f0130433 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f013041c:	83 ec 04             	sub    $0x4,%esp
f013041f:	68 d0 ca 13 f0       	push   $0xf013cad0
f0130424:	68 0a 13 00 00       	push   $0x130a
f0130429:	68 fa b5 13 f0       	push   $0xf013b5fa
f013042e:	e8 d2 fd fc ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f0130433:	e8 35 cd fd ff       	call   f010d16d <sys_calculate_free_frames>
f0130438:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f013043b:	e8 b4 39 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f0130440:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f0130446:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f013044c:	83 ec 0c             	sub    $0xc,%esp
f013044f:	50                   	push   %eax
f0130450:	e8 d1 76 fd ff       	call   f0107b26 <kfree>
f0130455:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0130458:	e8 97 39 fd ff       	call   f0103df4 <pf_calculate_free_frames>
f013045d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130463:	74 17                	je     f013047c <test_krealloc_BF+0x1fcb>
			panic(
f0130465:	83 ec 04             	sub    $0x4,%esp
f0130468:	68 14 b6 13 f0       	push   $0xf013b614
f013046d:	68 12 13 00 00       	push   $0x1312
f0130472:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130477:	e8 89 fd fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f013047c:	e8 ec cc fd ff       	call   f010d16d <sys_calculate_free_frames>
f0130481:	89 c2                	mov    %eax,%edx
f0130483:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130486:	29 c2                	sub    %eax,%edx
f0130488:	89 d0                	mov    %edx,%eax
f013048a:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f013048f:	74 17                	je     f01304a8 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f0130491:	83 ec 04             	sub    $0x4,%esp
f0130494:	68 d0 ca 13 f0       	push   $0xf013cad0
f0130499:	68 14 13 00 00       	push   $0x1314
f013049e:	68 fa b5 13 f0       	push   $0xf013b5fa
f01304a3:	e8 5d fd fc ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01304a8:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f01304af:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01304b6:	eb 48                	jmp    f0130500 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f01304b8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01304bb:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01304c0:	83 ec 04             	sub    $0x4,%esp
f01304c3:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f01304c9:	51                   	push   %ecx
f01304ca:	52                   	push   %edx
f01304cb:	50                   	push   %eax
f01304cc:	e8 0c 66 fd ff       	call   f0106add <get_page_table>
f01304d1:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01304d4:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f01304da:	85 c0                	test   %eax,%eax
f01304dc:	75 17                	jne    f01304f5 <test_krealloc_BF+0x2044>
					panic(
f01304de:	83 ec 04             	sub    $0x4,%esp
f01304e1:	68 fc be 13 f0       	push   $0xf013befc
f01304e6:	68 21 13 00 00       	push   $0x1321
f01304eb:	68 fa b5 13 f0       	push   $0xf013b5fa
f01304f0:	e8 10 fd fc ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01304f5:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01304fc:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f0130500:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0130504:	78 b2                	js     f01304b8 <test_krealloc_BF+0x2007>
f0130506:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f013050a:	7f 09                	jg     f0130515 <test_krealloc_BF+0x2064>
f013050c:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0130513:	76 a3                	jbe    f01304b8 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f0130515:	83 ec 0c             	sub    $0xc,%esp
f0130518:	68 de b7 13 f0       	push   $0xf013b7de
f013051d:	e8 ec 07 fd ff       	call   f0100d0e <cprintf>
f0130522:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f0130525:	83 ec 0c             	sub    $0xc,%esp
f0130528:	68 e0 ce 13 f0       	push   $0xf013cee0
f013052d:	e8 dc 07 fd ff       	call   f0100d0e <cprintf>
f0130532:	83 c4 10             	add    $0x10,%esp
	return 0;
f0130535:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013053a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013053d:	5b                   	pop    %ebx
f013053e:	5f                   	pop    %edi
f013053f:	5d                   	pop    %ebp
f0130540:	c3                   	ret    

f0130541 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f0130541:	55                   	push   %ebp
f0130542:	89 e5                	mov    %esp,%ebp
f0130544:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f0130547:	a1 00 07 86 f0       	mov    0xf0860700,%eax
f013054c:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f0130551:	74 17                	je     f013056a <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f0130553:	83 ec 04             	sub    $0x4,%esp
f0130556:	68 20 cf 13 f0       	push   $0xf013cf20
f013055b:	68 39 13 00 00       	push   $0x1339
f0130560:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130565:	e8 9b fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f013056a:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f013056f:	8b 15 00 07 86 f0    	mov    0xf0860700,%edx
f0130575:	4a                   	dec    %edx
f0130576:	39 d0                	cmp    %edx,%eax
f0130578:	74 17                	je     f0130591 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f013057a:	83 ec 04             	sub    $0x4,%esp
f013057d:	68 74 cf 13 f0       	push   $0xf013cf74
f0130582:	68 3f 13 00 00       	push   $0x133f
f0130587:	68 fa b5 13 f0       	push   $0xf013b5fa
f013058c:	e8 74 fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0130591:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0130596:	85 c0                	test   %eax,%eax
f0130598:	74 17                	je     f01305b1 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f013059a:	83 ec 04             	sub    $0x4,%esp
f013059d:	68 b0 cf 13 f0       	push   $0xf013cfb0
f01305a2:	68 45 13 00 00       	push   $0x1345
f01305a7:	68 fa b5 13 f0       	push   $0xf013b5fa
f01305ac:	e8 54 fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01305b1:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f01305b6:	83 f8 01             	cmp    $0x1,%eax
f01305b9:	74 17                	je     f01305d2 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f01305bb:	83 ec 04             	sub    $0x4,%esp
f01305be:	68 e8 cf 13 f0       	push   $0xf013cfe8
f01305c3:	68 4b 13 00 00       	push   $0x134b
f01305c8:	68 fa b5 13 f0       	push   $0xf013b5fa
f01305cd:	e8 33 fc fc ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f01305d2:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f01305d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f01305da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01305de:	74 66                	je     f0130646 <test_initialize_dyn_block_system+0x105>
f01305e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305e3:	8b 48 0c             	mov    0xc(%eax),%ecx
f01305e6:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01305ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01305f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01305f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01305f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01305fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0130600:	f7 75 ec             	divl   -0x14(%ebp)
f0130603:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130606:	29 d0                	sub    %edx,%eax
f0130608:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f013060d:	29 c2                	sub    %eax,%edx
f013060f:	89 d0                	mov    %edx,%eax
f0130611:	39 c1                	cmp    %eax,%ecx
f0130613:	75 31                	jne    f0130646 <test_initialize_dyn_block_system+0x105>
f0130615:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130618:	8b 48 08             	mov    0x8(%eax),%ecx
f013061b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0130622:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130625:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013062a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f013062d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130630:	ba 00 00 00 00       	mov    $0x0,%edx
f0130635:	f7 75 e4             	divl   -0x1c(%ebp)
f0130638:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013063b:	29 d0                	sub    %edx,%eax
f013063d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130642:	39 c1                	cmp    %eax,%ecx
f0130644:	74 17                	je     f013065d <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f0130646:	83 ec 04             	sub    $0x4,%esp
f0130649:	68 20 d0 13 f0       	push   $0xf013d020
f013064e:	68 52 13 00 00       	push   $0x1352
f0130653:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130658:	e8 a8 fb fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f013065d:	8b 45 14             	mov    0x14(%ebp),%eax
f0130660:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130663:	74 17                	je     f013067c <test_initialize_dyn_block_system+0x13b>
f0130665:	83 ec 04             	sub    $0x4,%esp
f0130668:	68 14 b6 13 f0       	push   $0xf013b614
f013066d:	68 56 13 00 00       	push   $0x1356
f0130672:	68 fa b5 13 f0       	push   $0xf013b5fa
f0130677:	e8 89 fb fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f013067c:	8b 45 08             	mov    0x8(%ebp),%eax
f013067f:	2b 45 10             	sub    0x10(%ebp),%eax
f0130682:	3d a0 00 00 00       	cmp    $0xa0,%eax
f0130687:	74 1b                	je     f01306a4 <test_initialize_dyn_block_system+0x163>
f0130689:	8b 45 08             	mov    0x8(%ebp),%eax
f013068c:	2b 45 10             	sub    0x10(%ebp),%eax
f013068f:	50                   	push   %eax
f0130690:	68 5c d0 13 f0       	push   $0xf013d05c
f0130695:	68 57 13 00 00       	push   $0x1357
f013069a:	68 fa b5 13 f0       	push   $0xf013b5fa
f013069f:	e8 61 fb fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f01306a4:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f01306ab:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01306b0:	83 ec 04             	sub    $0x4,%esp
f01306b3:	6a 00                	push   $0x0
f01306b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01306b8:	50                   	push   %eax
f01306b9:	e8 e9 5f fe ff       	call   f01166a7 <CB>
f01306be:	83 c4 10             	add    $0x10,%esp
f01306c1:	83 f8 01             	cmp    $0x1,%eax
f01306c4:	75 35                	jne    f01306fb <test_initialize_dyn_block_system+0x1ba>
f01306c6:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01306cb:	83 ec 04             	sub    $0x4,%esp
f01306ce:	6a 01                	push   $0x1
f01306d0:	ff 75 f4             	pushl  -0xc(%ebp)
f01306d3:	50                   	push   %eax
f01306d4:	e8 ce 5f fe ff       	call   f01166a7 <CB>
f01306d9:	83 c4 10             	add    $0x10,%esp
f01306dc:	83 f8 01             	cmp    $0x1,%eax
f01306df:	75 1a                	jne    f01306fb <test_initialize_dyn_block_system+0x1ba>
f01306e1:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01306e6:	83 ec 04             	sub    $0x4,%esp
f01306e9:	6a 02                	push   $0x2
f01306eb:	ff 75 f4             	pushl  -0xc(%ebp)
f01306ee:	50                   	push   %eax
f01306ef:	e8 b3 5f fe ff       	call   f01166a7 <CB>
f01306f4:	83 c4 10             	add    $0x10,%esp
f01306f7:	85 c0                	test   %eax,%eax
f01306f9:	74 17                	je     f0130712 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f01306fb:	83 ec 04             	sub    $0x4,%esp
f01306fe:	68 a0 d0 13 f0       	push   $0xf013d0a0
f0130703:	68 5f 13 00 00       	push   $0x135f
f0130708:	68 fa b5 13 f0       	push   $0xf013b5fa
f013070d:	e8 f3 fa fc ff       	call   f0100205 <_panic>

			a+=4096;
f0130712:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f0130719:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0130720:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130723:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0130728:	89 45 d8             	mov    %eax,-0x28(%ebp)
f013072b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013072e:	ba 00 00 00 00       	mov    $0x0,%edx
f0130733:	f7 75 dc             	divl   -0x24(%ebp)
f0130736:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130739:	29 d0                	sub    %edx,%eax
f013073b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130740:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130743:	74 05                	je     f013074a <test_initialize_dyn_block_system+0x209>
				break;
		}
f0130745:	e9 61 ff ff ff       	jmp    f01306ab <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f013074a:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f013074b:	83 ec 0c             	sub    $0xc,%esp
f013074e:	68 00 d1 13 f0       	push   $0xf013d100
f0130753:	e8 b6 05 fd ff       	call   f0100d0e <cprintf>
f0130758:	83 c4 10             	add    $0x10,%esp
	return 0;
f013075b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130760:	c9                   	leave  
f0130761:	c3                   	ret    

f0130762 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0130762:	55                   	push   %ebp
f0130763:	89 e5                	mov    %esp,%ebp
f0130765:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130768:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013076c:	77 07                	ja     f0130775 <nearest_pow2_ceil+0x13>
f013076e:	b8 01 00 00 00       	mov    $0x1,%eax
f0130773:	eb 20                	jmp    f0130795 <nearest_pow2_ceil+0x33>
    int power = 2;
f0130775:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f013077c:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f013077f:	eb 08                	jmp    f0130789 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0130781:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130784:	01 c0                	add    %eax,%eax
f0130786:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f0130789:	d1 6d 08             	shrl   0x8(%ebp)
f013078c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130790:	75 ef                	jne    f0130781 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f0130792:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130795:	c9                   	leave  
f0130796:	c3                   	ret    

f0130797 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0130797:	55                   	push   %ebp
f0130798:	89 e5                	mov    %esp,%ebp
f013079a:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013079d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01307a1:	77 07                	ja     f01307aa <log2_ceil+0x13>
f01307a3:	b8 01 00 00 00       	mov    $0x1,%eax
f01307a8:	eb 1b                	jmp    f01307c5 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f01307aa:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f01307b1:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f01307b4:	eb 03                	jmp    f01307b9 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f01307b6:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f01307b9:	d1 6d 08             	shrl   0x8(%ebp)
f01307bc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01307c0:	75 f4                	jne    f01307b6 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f01307c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01307c5:	c9                   	leave  
f01307c6:	c3                   	ret    

f01307c7 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f01307c7:	55                   	push   %ebp
f01307c8:	89 e5                	mov    %esp,%ebp
f01307ca:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f01307cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01307d0:	8b 00                	mov    (%eax),%eax
f01307d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f01307d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01307d8:	8b 00                	mov    (%eax),%eax
f01307da:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01307dd:	eb 52                	jmp    f0130831 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01307df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307e2:	8b 00                	mov    (%eax),%eax
f01307e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01307e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01307ed:	75 12                	jne    f0130801 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f01307ef:	83 ec 0c             	sub    $0xc,%esp
f01307f2:	68 58 d1 13 f0       	push   $0xf013d158
f01307f7:	e8 12 05 fd ff       	call   f0100d0e <cprintf>
f01307fc:	83 c4 10             	add    $0x10,%esp
			break;
f01307ff:	eb 3f                	jmp    f0130840 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0130801:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130805:	74 38                	je     f013083f <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0130807:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013080a:	8b 00                	mov    (%eax),%eax
f013080c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f013080f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130812:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130815:	75 12                	jne    f0130829 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f0130817:	83 ec 0c             	sub    $0xc,%esp
f013081a:	68 74 d1 13 f0       	push   $0xf013d174
f013081f:	e8 ea 04 fd ff       	call   f0100d0e <cprintf>
f0130824:	83 c4 10             	add    $0x10,%esp
			break;
f0130827:	eb 17                	jmp    f0130840 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f0130829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013082c:	8b 00                	mov    (%eax),%eax
f013082e:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0130831:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130835:	74 09                	je     f0130840 <detect_loop_in_FrameInfo_list+0x79>
f0130837:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013083b:	75 a2                	jne    f01307df <detect_loop_in_FrameInfo_list+0x18>
f013083d:	eb 01                	jmp    f0130840 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f013083f:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0130840:	83 ec 0c             	sub    $0xc,%esp
f0130843:	68 8b d1 13 f0       	push   $0xf013d18b
f0130848:	e8 c1 04 fd ff       	call   f0100d0e <cprintf>
f013084d:	83 c4 10             	add    $0x10,%esp
}
f0130850:	90                   	nop
f0130851:	c9                   	leave  
f0130852:	c3                   	ret    

f0130853 <scarce_memory>:

void scarce_memory()
{
f0130853:	55                   	push   %ebp
f0130854:	89 e5                	mov    %esp,%ebp
f0130856:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f0130859:	a1 ec 06 86 f0       	mov    0xf08606ec,%eax
f013085e:	ba 64 00 00 00       	mov    $0x64,%edx
f0130863:	29 c2                	sub    %eax,%edx
f0130865:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f013086a:	0f af c2             	imul   %edx,%eax
f013086d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130872:	f7 e2                	mul    %edx
f0130874:	89 d0                	mov    %edx,%eax
f0130876:	c1 e8 05             	shr    $0x5,%eax
f0130879:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f013087c:	a1 ec 06 86 f0       	mov    0xf08606ec,%eax
f0130881:	ba 64 00 00 00       	mov    $0x64,%edx
f0130886:	29 c2                	sub    %eax,%edx
f0130888:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f013088d:	89 d1                	mov    %edx,%ecx
f013088f:	0f af c8             	imul   %eax,%ecx
f0130892:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130897:	f7 e1                	mul    %ecx
f0130899:	c1 ea 05             	shr    $0x5,%edx
f013089c:	89 d0                	mov    %edx,%eax
f013089e:	c1 e0 02             	shl    $0x2,%eax
f01308a1:	01 d0                	add    %edx,%eax
f01308a3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01308aa:	01 d0                	add    %edx,%eax
f01308ac:	c1 e0 02             	shl    $0x2,%eax
f01308af:	29 c1                	sub    %eax,%ecx
f01308b1:	89 ca                	mov    %ecx,%edx
f01308b3:	85 d2                	test   %edx,%edx
f01308b5:	74 03                	je     f01308ba <scarce_memory+0x67>
		total_size_tobe_allocated++;
f01308b7:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f01308ba:	8b 15 0c 07 86 f0    	mov    0xf086070c,%edx
f01308c0:	a1 20 07 86 f0       	mov    0xf0860720,%eax
f01308c5:	29 c2                	sub    %eax,%edx
f01308c7:	89 d0                	mov    %edx,%eax
f01308c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f01308cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01308cf:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01308d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f01308d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01308dc:	eb 12                	jmp    f01308f0 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f01308de:	83 ec 0c             	sub    $0xc,%esp
f01308e1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01308e4:	50                   	push   %eax
f01308e5:	e8 34 60 fd ff       	call   f010691e <allocate_frame>
f01308ea:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01308ed:	ff 45 f0             	incl   -0x10(%ebp)
f01308f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01308f3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01308f6:	76 e6                	jbe    f01308de <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f01308f8:	90                   	nop
f01308f9:	c9                   	leave  
f01308fa:	c3                   	ret    

f01308fb <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01308fb:	55                   	push   %ebp
f01308fc:	89 e5                	mov    %esp,%ebp
f01308fe:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f0130901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f0130908:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f013090f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f0130916:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013091a:	0f 85 d0 01 00 00    	jne    f0130af0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130920:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0130927:	e9 de 00 00 00       	jmp    f0130a0a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f013092c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130933:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0130938:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013093b:	c1 e2 04             	shl    $0x4,%edx
f013093e:	01 d0                	add    %edx,%eax
f0130940:	8b 00                	mov    (%eax),%eax
f0130942:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130945:	e9 85 00 00 00       	jmp    f01309cf <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f013094a:	83 ec 0c             	sub    $0xc,%esp
f013094d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130950:	e8 31 76 fd ff       	call   f0107f86 <env_page_ws_get_size>
f0130955:	83 c4 10             	add    $0x10,%esp
f0130958:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013095b:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130960:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130966:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130969:	0f af c2             	imul   %edx,%eax
f013096c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130971:	f7 e2                	mul    %edx
f0130973:	89 d0                	mov    %edx,%eax
f0130975:	c1 e8 05             	shr    $0x5,%eax
f0130978:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013097b:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130980:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130986:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130989:	89 d1                	mov    %edx,%ecx
f013098b:	0f af c8             	imul   %eax,%ecx
f013098e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130993:	f7 e1                	mul    %ecx
f0130995:	c1 ea 05             	shr    $0x5,%edx
f0130998:	89 d0                	mov    %edx,%eax
f013099a:	c1 e0 02             	shl    $0x2,%eax
f013099d:	01 d0                	add    %edx,%eax
f013099f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01309a6:	01 d0                	add    %edx,%eax
f01309a8:	c1 e0 02             	shl    $0x2,%eax
f01309ab:	29 c1                	sub    %eax,%ecx
f01309ad:	89 ca                	mov    %ecx,%edx
f01309af:	85 d2                	test   %edx,%edx
f01309b1:	74 03                	je     f01309b6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f01309b3:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01309b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01309b9:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01309bc:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01309c1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309c4:	c1 e2 04             	shl    $0x4,%edx
f01309c7:	01 d0                	add    %edx,%eax
f01309c9:	8b 40 08             	mov    0x8(%eax),%eax
f01309cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01309cf:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f01309d4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309d7:	c1 e2 04             	shl    $0x4,%edx
f01309da:	01 d0                	add    %edx,%eax
f01309dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01309e0:	74 08                	je     f01309ea <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f01309e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01309e5:	8b 52 44             	mov    0x44(%edx),%edx
f01309e8:	eb 05                	jmp    f01309ef <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f01309ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01309ef:	89 50 08             	mov    %edx,0x8(%eax)
f01309f2:	8b 40 08             	mov    0x8(%eax),%eax
f01309f5:	85 c0                	test   %eax,%eax
f01309f7:	0f 85 4d ff ff ff    	jne    f013094a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f01309fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130a01:	0f 85 43 ff ff ff    	jne    f013094a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130a07:	ff 45 e8             	incl   -0x18(%ebp)
f0130a0a:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0130a0f:	0f b6 c0             	movzbl %al,%eax
f0130a12:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0130a15:	0f 8f 11 ff ff ff    	jg     f013092c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0130a1b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130a22:	a1 f0 06 86 f0       	mov    0xf08606f0,%eax
f0130a27:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130a2a:	eb 19                	jmp    f0130a45 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f0130a2c:	83 ec 0c             	sub    $0xc,%esp
f0130a2f:	ff 75 dc             	pushl  -0x24(%ebp)
f0130a32:	e8 4f 75 fd ff       	call   f0107f86 <env_page_ws_get_size>
f0130a37:	83 c4 10             	add    $0x10,%esp
f0130a3a:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130a3d:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0130a42:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130a45:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a49:	74 08                	je     f0130a53 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f0130a4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130a4e:	8b 40 44             	mov    0x44(%eax),%eax
f0130a51:	eb 05                	jmp    f0130a58 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130a53:	b8 00 00 00 00       	mov    $0x0,%eax
f0130a58:	a3 f8 06 86 f0       	mov    %eax,0xf08606f8
f0130a5d:	a1 f8 06 86 f0       	mov    0xf08606f8,%eax
f0130a62:	85 c0                	test   %eax,%eax
f0130a64:	75 c6                	jne    f0130a2c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130a66:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a6a:	75 c0                	jne    f0130a2c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130a6c:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130a71:	85 c0                	test   %eax,%eax
f0130a73:	0f 84 ec 00 00 00    	je     f0130b65 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130a79:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130a7e:	83 ec 0c             	sub    $0xc,%esp
f0130a81:	50                   	push   %eax
f0130a82:	e8 ff 74 fd ff       	call   f0107f86 <env_page_ws_get_size>
f0130a87:	83 c4 10             	add    $0x10,%esp
f0130a8a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130a8d:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130a92:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130a98:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130a9b:	0f af c2             	imul   %edx,%eax
f0130a9e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130aa3:	f7 e2                	mul    %edx
f0130aa5:	89 d0                	mov    %edx,%eax
f0130aa7:	c1 e8 05             	shr    $0x5,%eax
f0130aaa:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130aad:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130ab2:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130ab8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130abb:	89 d1                	mov    %edx,%ecx
f0130abd:	0f af c8             	imul   %eax,%ecx
f0130ac0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130ac5:	f7 e1                	mul    %ecx
f0130ac7:	c1 ea 05             	shr    $0x5,%edx
f0130aca:	89 d0                	mov    %edx,%eax
f0130acc:	c1 e0 02             	shl    $0x2,%eax
f0130acf:	01 d0                	add    %edx,%eax
f0130ad1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130ad8:	01 d0                	add    %edx,%eax
f0130ada:	c1 e0 02             	shl    $0x2,%eax
f0130add:	29 c1                	sub    %eax,%ecx
f0130adf:	89 ca                	mov    %ecx,%edx
f0130ae1:	85 d2                	test   %edx,%edx
f0130ae3:	74 03                	je     f0130ae8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f0130ae5:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130ae8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130aeb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130aee:	eb 75                	jmp    f0130b65 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130af0:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130af5:	83 ec 0c             	sub    $0xc,%esp
f0130af8:	50                   	push   %eax
f0130af9:	e8 88 74 fd ff       	call   f0107f86 <env_page_ws_get_size>
f0130afe:	83 c4 10             	add    $0x10,%esp
f0130b01:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130b04:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130b09:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b0f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130b12:	0f af c2             	imul   %edx,%eax
f0130b15:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130b1a:	f7 e2                	mul    %edx
f0130b1c:	89 d0                	mov    %edx,%eax
f0130b1e:	c1 e8 05             	shr    $0x5,%eax
f0130b21:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130b24:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130b29:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b2f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130b32:	89 d1                	mov    %edx,%ecx
f0130b34:	0f af c8             	imul   %eax,%ecx
f0130b37:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130b3c:	f7 e1                	mul    %ecx
f0130b3e:	c1 ea 05             	shr    $0x5,%edx
f0130b41:	89 d0                	mov    %edx,%eax
f0130b43:	c1 e0 02             	shl    $0x2,%eax
f0130b46:	01 d0                	add    %edx,%eax
f0130b48:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130b4f:	01 d0                	add    %edx,%eax
f0130b51:	c1 e0 02             	shl    $0x2,%eax
f0130b54:	29 c1                	sub    %eax,%ecx
f0130b56:	89 ca                	mov    %ecx,%edx
f0130b58:	85 d2                	test   %edx,%edx
f0130b5a:	74 03                	je     f0130b5f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130b5c:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130b5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130b62:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130b65:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b6b:	01 c2                	add    %eax,%edx
f0130b6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130b70:	01 d0                	add    %edx,%eax
}
f0130b72:	c9                   	leave  
f0130b73:	c3                   	ret    

f0130b74 <schenv>:


void schenv()
{
f0130b74:	55                   	push   %ebp
f0130b75:	89 e5                	mov    %esp,%ebp
f0130b77:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130b7a:	c6 05 a4 07 86 f0 00 	movb   $0x0,0xf08607a4
	__ne = NULL;
f0130b81:	c7 05 34 07 86 f0 00 	movl   $0x0,0xf0860734
f0130b88:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130b92:	eb 3f                	jmp    f0130bd3 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130b94:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0130b99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130b9c:	c1 e2 04             	shl    $0x4,%edx
f0130b9f:	01 d0                	add    %edx,%eax
f0130ba1:	83 ec 0c             	sub    $0xc,%esp
f0130ba4:	50                   	push   %eax
f0130ba5:	e8 07 39 fd ff       	call   f01044b1 <queue_size>
f0130baa:	83 c4 10             	add    $0x10,%esp
f0130bad:	85 c0                	test   %eax,%eax
f0130baf:	74 1f                	je     f0130bd0 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0130bb1:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0130bb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130bb9:	c1 e2 04             	shl    $0x4,%edx
f0130bbc:	01 d0                	add    %edx,%eax
f0130bbe:	8b 40 04             	mov    0x4(%eax),%eax
f0130bc1:	a3 34 07 86 f0       	mov    %eax,0xf0860734
			__nl = i;
f0130bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bc9:	a2 a4 07 86 f0       	mov    %al,0xf08607a4
			break;
f0130bce:	eb 10                	jmp    f0130be0 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130bd0:	ff 45 f4             	incl   -0xc(%ebp)
f0130bd3:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0130bd8:	0f b6 c0             	movzbl %al,%eax
f0130bdb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130bde:	7f b4                	jg     f0130b94 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0130be0:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130be5:	85 c0                	test   %eax,%eax
f0130be7:	0f 84 86 00 00 00    	je     f0130c73 <schenv+0xff>
	{
		if (__ne != NULL)
f0130bed:	a1 34 07 86 f0       	mov    0xf0860734,%eax
f0130bf2:	85 c0                	test   %eax,%eax
f0130bf4:	74 4b                	je     f0130c41 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0130bf6:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130bfb:	0f b6 c0             	movzbl %al,%eax
f0130bfe:	8d 50 01             	lea    0x1(%eax),%edx
f0130c01:	a0 a4 07 86 f0       	mov    0xf08607a4,%al
f0130c06:	0f b6 c0             	movzbl %al,%eax
f0130c09:	39 c2                	cmp    %eax,%edx
f0130c0b:	7d 66                	jge    f0130c73 <schenv+0xff>
			{
				__ne = curenv;
f0130c0d:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130c12:	a3 34 07 86 f0       	mov    %eax,0xf0860734
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130c17:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130c1c:	0f b6 c0             	movzbl %al,%eax
f0130c1f:	8a 15 7c 07 86 f0    	mov    0xf086077c,%dl
f0130c25:	0f b6 d2             	movzbl %dl,%edx
f0130c28:	4a                   	dec    %edx
f0130c29:	39 d0                	cmp    %edx,%eax
f0130c2b:	7d 08                	jge    f0130c35 <schenv+0xc1>
f0130c2d:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130c32:	40                   	inc    %eax
f0130c33:	eb 05                	jmp    f0130c3a <schenv+0xc6>
f0130c35:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130c3a:	a2 a4 07 86 f0       	mov    %al,0xf08607a4
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130c3f:	eb 32                	jmp    f0130c73 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130c41:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130c46:	a3 34 07 86 f0       	mov    %eax,0xf0860734
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130c4b:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130c50:	0f b6 c0             	movzbl %al,%eax
f0130c53:	8a 15 7c 07 86 f0    	mov    0xf086077c,%dl
f0130c59:	0f b6 d2             	movzbl %dl,%edx
f0130c5c:	4a                   	dec    %edx
f0130c5d:	39 d0                	cmp    %edx,%eax
f0130c5f:	7d 08                	jge    f0130c69 <schenv+0xf5>
f0130c61:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130c66:	40                   	inc    %eax
f0130c67:	eb 05                	jmp    f0130c6e <schenv+0xfa>
f0130c69:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130c6e:	a2 a4 07 86 f0       	mov    %al,0xf08607a4
		}
	}
}
f0130c73:	90                   	nop
f0130c74:	c9                   	leave  
f0130c75:	c3                   	ret    

f0130c76 <chksch>:

void chksch(uint8 onoff)
{
f0130c76:	55                   	push   %ebp
f0130c77:	89 e5                	mov    %esp,%ebp
f0130c79:	83 ec 04             	sub    $0x4,%esp
f0130c7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c7f:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130c82:	c7 05 90 07 86 f0 00 	movl   $0x0,0xf0860790
f0130c89:	00 00 00 
	__ne = NULL;
f0130c8c:	c7 05 34 07 86 f0 00 	movl   $0x0,0xf0860734
f0130c93:	00 00 00 
	__pl = 0 ;
f0130c96:	c6 05 dc 06 86 f0 00 	movb   $0x0,0xf08606dc
	__nl = 0 ;
f0130c9d:	c6 05 a4 07 86 f0 00 	movb   $0x0,0xf08607a4
	__chkstatus = onoff;
f0130ca4:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130ca7:	a2 30 07 86 f0       	mov    %al,0xf0860730
}
f0130cac:	90                   	nop
f0130cad:	c9                   	leave  
f0130cae:	c3                   	ret    

f0130caf <chk1>:
void chk1()
{
f0130caf:	55                   	push   %ebp
f0130cb0:	89 e5                	mov    %esp,%ebp
f0130cb2:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130cb5:	a0 30 07 86 f0       	mov    0xf0860730,%al
f0130cba:	84 c0                	test   %al,%al
f0130cbc:	74 2b                	je     f0130ce9 <chk1+0x3a>
		return ;
	__pe = curenv;
f0130cbe:	a1 f4 fd 85 f0       	mov    0xf085fdf4,%eax
f0130cc3:	a3 90 07 86 f0       	mov    %eax,0xf0860790
	__pl = __nl ;
f0130cc8:	a0 a4 07 86 f0       	mov    0xf08607a4,%al
f0130ccd:	a2 dc 06 86 f0       	mov    %al,0xf08606dc
	if (__pe == NULL)
f0130cd2:	a1 90 07 86 f0       	mov    0xf0860790,%eax
f0130cd7:	85 c0                	test   %eax,%eax
f0130cd9:	75 07                	jne    f0130ce2 <chk1+0x33>
	{
		__pl = 0;
f0130cdb:	c6 05 dc 06 86 f0 00 	movb   $0x0,0xf08606dc
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0130ce2:	e8 8d fe ff ff       	call   f0130b74 <schenv>
f0130ce7:	eb 01                	jmp    f0130cea <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130ce9:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130cea:	c9                   	leave  
f0130ceb:	c3                   	ret    

f0130cec <chk2>:
void chk2(struct Env* __se)
{
f0130cec:	55                   	push   %ebp
f0130ced:	89 e5                	mov    %esp,%ebp
f0130cef:	53                   	push   %ebx
f0130cf0:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0130cf3:	a0 30 07 86 f0       	mov    0xf0860730,%al
f0130cf8:	84 c0                	test   %al,%al
f0130cfa:	0f 84 43 02 00 00    	je     f0130f43 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130d00:	a1 34 07 86 f0       	mov    0xf0860734,%eax
f0130d05:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130d08:	74 19                	je     f0130d23 <chk2+0x37>
f0130d0a:	68 a5 d1 13 f0       	push   $0xf013d1a5
f0130d0f:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0130d14:	68 c0 00 00 00       	push   $0xc0
f0130d19:	68 c7 d1 13 f0       	push   $0xf013d1c7
f0130d1e:	e8 98 f5 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0130d23:	a1 34 07 86 f0       	mov    0xf0860734,%eax
f0130d28:	85 c0                	test   %eax,%eax
f0130d2a:	0f 84 25 01 00 00    	je     f0130e55 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0130d30:	8b 15 28 07 86 f0    	mov    0xf0860728,%edx
f0130d36:	a0 a4 07 86 f0       	mov    0xf08607a4,%al
f0130d3b:	0f b6 c0             	movzbl %al,%eax
f0130d3e:	01 d0                	add    %edx,%eax
f0130d40:	8a 00                	mov    (%eax),%al
f0130d42:	0f b6 d8             	movzbl %al,%ebx
f0130d45:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130d4a:	99                   	cltd   
f0130d4b:	f7 fb                	idiv   %ebx
f0130d4d:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130d53:	8b 15 28 07 86 f0    	mov    0xf0860728,%edx
f0130d59:	a0 a4 07 86 f0       	mov    0xf08607a4,%al
f0130d5e:	0f b6 c0             	movzbl %al,%eax
f0130d61:	01 d0                	add    %edx,%eax
f0130d63:	8a 00                	mov    (%eax),%al
f0130d65:	0f b6 d8             	movzbl %al,%ebx
f0130d68:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130d6d:	99                   	cltd   
f0130d6e:	f7 fb                	idiv   %ebx
f0130d70:	89 c3                	mov    %eax,%ebx
f0130d72:	89 c8                	mov    %ecx,%eax
f0130d74:	99                   	cltd   
f0130d75:	f7 fb                	idiv   %ebx
f0130d77:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130d7b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130d7f:	83 e0 01             	and    $0x1,%eax
f0130d82:	66 85 c0             	test   %ax,%ax
f0130d85:	74 07                	je     f0130d8e <chk2+0xa2>
f0130d87:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130d8b:	40                   	inc    %eax
f0130d8c:	eb 04                	jmp    f0130d92 <chk2+0xa6>
f0130d8e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130d92:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130d96:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130d9a:	89 d0                	mov    %edx,%eax
f0130d9c:	c1 e0 02             	shl    $0x2,%eax
f0130d9f:	01 d0                	add    %edx,%eax
f0130da1:	01 c0                	add    %eax,%eax
f0130da3:	01 d0                	add    %edx,%eax
f0130da5:	c1 e0 02             	shl    $0x2,%eax
f0130da8:	01 d0                	add    %edx,%eax
f0130daa:	01 c0                	add    %eax,%eax
f0130dac:	89 c1                	mov    %eax,%ecx
f0130dae:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130db3:	f7 e9                	imul   %ecx
f0130db5:	c1 fa 05             	sar    $0x5,%edx
f0130db8:	89 c8                	mov    %ecx,%eax
f0130dba:	c1 f8 1f             	sar    $0x1f,%eax
f0130dbd:	29 c2                	sub    %eax,%edx
f0130dbf:	89 d0                	mov    %edx,%eax
f0130dc1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130dc5:	e8 b8 35 fd ff       	call   f0104382 <kclock_read_cnt0>
f0130dca:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130dce:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130dd2:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130dd6:	76 0a                	jbe    f0130de2 <chk2+0xf6>
f0130dd8:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130ddc:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130de0:	76 19                	jbe    f0130dfb <chk2+0x10f>
f0130de2:	68 e0 d1 13 f0       	push   $0xf013d1e0
f0130de7:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0130dec:	68 ca 00 00 00       	push   $0xca
f0130df1:	68 c7 d1 13 f0       	push   $0xf013d1c7
f0130df6:	e8 c0 f4 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130dfb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130e02:	eb 44                	jmp    f0130e48 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130e04:	a1 34 07 86 f0       	mov    0xf0860734,%eax
f0130e09:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130e0c:	89 c2                	mov    %eax,%edx
f0130e0e:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0130e13:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130e16:	c1 e1 04             	shl    $0x4,%ecx
f0130e19:	01 c8                	add    %ecx,%eax
f0130e1b:	83 ec 08             	sub    $0x8,%esp
f0130e1e:	52                   	push   %edx
f0130e1f:	50                   	push   %eax
f0130e20:	e8 a6 38 fd ff       	call   f01046cb <find_env_in_queue>
f0130e25:	83 c4 10             	add    $0x10,%esp
f0130e28:	85 c0                	test   %eax,%eax
f0130e2a:	74 19                	je     f0130e45 <chk2+0x159>
f0130e2c:	68 04 d2 13 f0       	push   $0xf013d204
f0130e31:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0130e36:	68 ce 00 00 00       	push   $0xce
f0130e3b:	68 c7 d1 13 f0       	push   $0xf013d1c7
f0130e40:	e8 76 f4 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130e45:	ff 45 f4             	incl   -0xc(%ebp)
f0130e48:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0130e4d:	0f b6 c0             	movzbl %al,%eax
f0130e50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130e53:	7f af                	jg     f0130e04 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130e55:	a1 90 07 86 f0       	mov    0xf0860790,%eax
f0130e5a:	85 c0                	test   %eax,%eax
f0130e5c:	0f 84 e2 00 00 00    	je     f0130f44 <chk2+0x258>
f0130e62:	8b 15 90 07 86 f0    	mov    0xf0860790,%edx
f0130e68:	a1 34 07 86 f0       	mov    0xf0860734,%eax
f0130e6d:	39 c2                	cmp    %eax,%edx
f0130e6f:	0f 84 cf 00 00 00    	je     f0130f44 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130e75:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130e7a:	0f b6 c0             	movzbl %al,%eax
f0130e7d:	8a 15 7c 07 86 f0    	mov    0xf086077c,%dl
f0130e83:	0f b6 d2             	movzbl %dl,%edx
f0130e86:	4a                   	dec    %edx
f0130e87:	39 d0                	cmp    %edx,%eax
f0130e89:	74 08                	je     f0130e93 <chk2+0x1a7>
f0130e8b:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130e90:	40                   	inc    %eax
f0130e91:	eb 05                	jmp    f0130e98 <chk2+0x1ac>
f0130e93:	a0 dc 06 86 f0       	mov    0xf08606dc,%al
f0130e98:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130e9b:	a1 90 07 86 f0       	mov    0xf0860790,%eax
f0130ea0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130ea3:	89 c2                	mov    %eax,%edx
f0130ea5:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0130eaa:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130eae:	c1 e1 04             	shl    $0x4,%ecx
f0130eb1:	01 c8                	add    %ecx,%eax
f0130eb3:	83 ec 08             	sub    $0x8,%esp
f0130eb6:	52                   	push   %edx
f0130eb7:	50                   	push   %eax
f0130eb8:	e8 0e 38 fd ff       	call   f01046cb <find_env_in_queue>
f0130ebd:	83 c4 10             	add    $0x10,%esp
f0130ec0:	85 c0                	test   %eax,%eax
f0130ec2:	75 19                	jne    f0130edd <chk2+0x1f1>
f0130ec4:	68 44 d2 13 f0       	push   $0xf013d244
f0130ec9:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0130ece:	68 d4 00 00 00       	push   $0xd4
f0130ed3:	68 c7 d1 13 f0       	push   $0xf013d1c7
f0130ed8:	e8 de f3 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130edd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130ee4:	eb 4e                	jmp    f0130f34 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130ee6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130eea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130eed:	74 41                	je     f0130f30 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130eef:	a1 90 07 86 f0       	mov    0xf0860790,%eax
f0130ef4:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130ef7:	89 c2                	mov    %eax,%edx
f0130ef9:	a1 e4 06 86 f0       	mov    0xf08606e4,%eax
f0130efe:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130f01:	c1 e1 04             	shl    $0x4,%ecx
f0130f04:	01 c8                	add    %ecx,%eax
f0130f06:	83 ec 08             	sub    $0x8,%esp
f0130f09:	52                   	push   %edx
f0130f0a:	50                   	push   %eax
f0130f0b:	e8 bb 37 fd ff       	call   f01046cb <find_env_in_queue>
f0130f10:	83 c4 10             	add    $0x10,%esp
f0130f13:	85 c0                	test   %eax,%eax
f0130f15:	74 1a                	je     f0130f31 <chk2+0x245>
f0130f17:	68 88 d2 13 f0       	push   $0xf013d288
f0130f1c:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0130f21:	68 d8 00 00 00       	push   $0xd8
f0130f26:	68 c7 d1 13 f0       	push   $0xf013d1c7
f0130f2b:	e8 8b f3 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130f30:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130f31:	ff 45 f0             	incl   -0x10(%ebp)
f0130f34:	a0 7c 07 86 f0       	mov    0xf086077c,%al
f0130f39:	0f b6 c0             	movzbl %al,%eax
f0130f3c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130f3f:	7f a5                	jg     f0130ee6 <chk2+0x1fa>
f0130f41:	eb 01                	jmp    f0130f44 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130f43:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130f44:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130f47:	c9                   	leave  
f0130f48:	c3                   	ret    

f0130f49 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130f49:	55                   	push   %ebp
f0130f4a:	89 e5                	mov    %esp,%ebp
f0130f4c:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130f4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130f56:	eb 40                	jmp    f0130f98 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f5b:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130f61:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0130f66:	83 ec 08             	sub    $0x8,%esp
f0130f69:	52                   	push   %edx
f0130f6a:	50                   	push   %eax
f0130f6b:	e8 9b 01 00 00       	call   f013110b <check_va2pa>
f0130f70:	83 c4 10             	add    $0x10,%esp
f0130f73:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130f76:	74 19                	je     f0130f91 <check_boot_pgdir+0x48>
f0130f78:	68 c8 d2 13 f0       	push   $0xf013d2c8
f0130f7d:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0130f82:	68 fa 00 00 00       	push   $0xfa
f0130f87:	68 c7 d1 13 f0       	push   $0xf013d1c7
f0130f8c:	e8 74 f2 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130f91:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f9b:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130fa1:	a1 74 07 86 f0       	mov    0xf0860774,%eax
f0130fa6:	39 c2                	cmp    %eax,%edx
f0130fa8:	72 ae                	jb     f0130f58 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130faa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130fb1:	eb 74                	jmp    f0131027 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130fb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fb6:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130fbc:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0130fc1:	83 ec 08             	sub    $0x8,%esp
f0130fc4:	52                   	push   %edx
f0130fc5:	50                   	push   %eax
f0130fc6:	e8 40 01 00 00       	call   f013110b <check_va2pa>
f0130fcb:	83 c4 10             	add    $0x10,%esp
f0130fce:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130fd5:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130fdc:	77 17                	ja     f0130ff5 <check_boot_pgdir+0xac>
f0130fde:	ff 75 f0             	pushl  -0x10(%ebp)
f0130fe1:	68 00 d3 13 f0       	push   $0xf013d300
f0130fe6:	68 04 01 00 00       	push   $0x104
f0130feb:	68 c7 d1 13 f0       	push   $0xf013d1c7
f0130ff0:	e8 10 f2 fc ff       	call   f0100205 <_panic>
f0130ff5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130ff8:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130ffe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131001:	01 ca                	add    %ecx,%edx
f0131003:	39 d0                	cmp    %edx,%eax
f0131005:	74 19                	je     f0131020 <check_boot_pgdir+0xd7>
f0131007:	68 34 d3 13 f0       	push   $0xf013d334
f013100c:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0131011:	68 04 01 00 00       	push   $0x104
f0131016:	68 c7 d1 13 f0       	push   $0xf013d1c7
f013101b:	e8 e5 f1 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0131020:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0131027:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f013102e:	76 83                	jbe    f0130fb3 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0131030:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131037:	e9 af 00 00 00       	jmp    f01310eb <check_boot_pgdir+0x1a2>
		switch (i) {
f013103c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013103f:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0131044:	74 11                	je     f0131057 <check_boot_pgdir+0x10e>
f0131046:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f013104b:	72 36                	jb     f0131083 <check_boot_pgdir+0x13a>
f013104d:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0131052:	83 f8 02             	cmp    $0x2,%eax
f0131055:	77 2c                	ja     f0131083 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0131057:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f013105c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013105f:	c1 e2 02             	shl    $0x2,%edx
f0131062:	01 d0                	add    %edx,%eax
f0131064:	8b 00                	mov    (%eax),%eax
f0131066:	85 c0                	test   %eax,%eax
f0131068:	75 7a                	jne    f01310e4 <check_boot_pgdir+0x19b>
f013106a:	68 b6 d3 13 f0       	push   $0xf013d3b6
f013106f:	68 b2 d1 13 f0       	push   $0xf013d1b2
f0131074:	68 0f 01 00 00       	push   $0x10f
f0131079:	68 c7 d1 13 f0       	push   $0xf013d1c7
f013107e:	e8 82 f1 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0131083:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f013108a:	76 2c                	jbe    f01310b8 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f013108c:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f0131091:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131094:	c1 e2 02             	shl    $0x2,%edx
f0131097:	01 d0                	add    %edx,%eax
f0131099:	8b 00                	mov    (%eax),%eax
f013109b:	85 c0                	test   %eax,%eax
f013109d:	75 48                	jne    f01310e7 <check_boot_pgdir+0x19e>
f013109f:	68 b6 d3 13 f0       	push   $0xf013d3b6
f01310a4:	68 b2 d1 13 f0       	push   $0xf013d1b2
f01310a9:	68 13 01 00 00       	push   $0x113
f01310ae:	68 c7 d1 13 f0       	push   $0xf013d1c7
f01310b3:	e8 4d f1 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f01310b8:	a1 78 07 86 f0       	mov    0xf0860778,%eax
f01310bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310c0:	c1 e2 02             	shl    $0x2,%edx
f01310c3:	01 d0                	add    %edx,%eax
f01310c5:	8b 00                	mov    (%eax),%eax
f01310c7:	85 c0                	test   %eax,%eax
f01310c9:	74 1c                	je     f01310e7 <check_boot_pgdir+0x19e>
f01310cb:	68 cc d3 13 f0       	push   $0xf013d3cc
f01310d0:	68 b2 d1 13 f0       	push   $0xf013d1b2
f01310d5:	68 15 01 00 00       	push   $0x115
f01310da:	68 c7 d1 13 f0       	push   $0xf013d1c7
f01310df:	e8 21 f1 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01310e4:	90                   	nop
f01310e5:	eb 01                	jmp    f01310e8 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01310e7:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01310e8:	ff 45 f4             	incl   -0xc(%ebp)
f01310eb:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01310f2:	0f 86 44 ff ff ff    	jbe    f013103c <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f01310f8:	83 ec 0c             	sub    $0xc,%esp
f01310fb:	68 e8 d3 13 f0       	push   $0xf013d3e8
f0131100:	e8 09 fc fc ff       	call   f0100d0e <cprintf>
f0131105:	83 c4 10             	add    $0x10,%esp
}
f0131108:	90                   	nop
f0131109:	c9                   	leave  
f013110a:	c3                   	ret    

f013110b <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f013110b:	55                   	push   %ebp
f013110c:	89 e5                	mov    %esp,%ebp
f013110e:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0131111:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131114:	c1 e8 16             	shr    $0x16,%eax
f0131117:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013111e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131121:	01 d0                	add    %edx,%eax
f0131123:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0131126:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131129:	8b 00                	mov    (%eax),%eax
f013112b:	83 e0 01             	and    $0x1,%eax
f013112e:	85 c0                	test   %eax,%eax
f0131130:	75 0a                	jne    f013113c <check_va2pa+0x31>
		return ~0;
f0131132:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131137:	e9 87 00 00 00       	jmp    f01311c3 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f013113c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013113f:	8b 00                	mov    (%eax),%eax
f0131141:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0131146:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131149:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013114c:	c1 e8 0c             	shr    $0xc,%eax
f013114f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131152:	a1 0c 07 86 f0       	mov    0xf086070c,%eax
f0131157:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f013115a:	72 17                	jb     f0131173 <check_va2pa+0x68>
f013115c:	ff 75 f0             	pushl  -0x10(%ebp)
f013115f:	68 08 d4 13 f0       	push   $0xf013d408
f0131164:	68 2b 01 00 00       	push   $0x12b
f0131169:	68 c7 d1 13 f0       	push   $0xf013d1c7
f013116e:	e8 92 f0 fc ff       	call   f0100205 <_panic>
f0131173:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131176:	2d 00 00 00 10       	sub    $0x10000000,%eax
f013117b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f013117e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131181:	c1 e8 0c             	shr    $0xc,%eax
f0131184:	25 ff 03 00 00       	and    $0x3ff,%eax
f0131189:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131190:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131193:	01 d0                	add    %edx,%eax
f0131195:	8b 00                	mov    (%eax),%eax
f0131197:	83 e0 01             	and    $0x1,%eax
f013119a:	85 c0                	test   %eax,%eax
f013119c:	75 07                	jne    f01311a5 <check_va2pa+0x9a>
		return ~0;
f013119e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01311a3:	eb 1e                	jmp    f01311c3 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f01311a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311a8:	c1 e8 0c             	shr    $0xc,%eax
f01311ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01311b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01311b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01311ba:	01 d0                	add    %edx,%eax
f01311bc:	8b 00                	mov    (%eax),%eax
f01311be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01311c3:	c9                   	leave  
f01311c4:	c3                   	ret    

f01311c5 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01311c5:	55                   	push   %ebp
f01311c6:	89 e5                	mov    %esp,%ebp
f01311c8:	53                   	push   %ebx
f01311c9:	83 ec 14             	sub    $0x14,%esp
f01311cc:	8b 45 10             	mov    0x10(%ebp),%eax
f01311cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311d2:	8b 45 14             	mov    0x14(%ebp),%eax
f01311d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01311d8:	8b 45 18             	mov    0x18(%ebp),%eax
f01311db:	ba 00 00 00 00       	mov    $0x0,%edx
f01311e0:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01311e3:	77 55                	ja     f013123a <printnum+0x75>
f01311e5:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01311e8:	72 05                	jb     f01311ef <printnum+0x2a>
f01311ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01311ed:	77 4b                	ja     f013123a <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01311ef:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01311f2:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01311f5:	8b 45 18             	mov    0x18(%ebp),%eax
f01311f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01311fd:	52                   	push   %edx
f01311fe:	50                   	push   %eax
f01311ff:	ff 75 f4             	pushl  -0xc(%ebp)
f0131202:	ff 75 f0             	pushl  -0x10(%ebp)
f0131205:	e8 b6 23 00 00       	call   f01335c0 <__udivdi3>
f013120a:	83 c4 10             	add    $0x10,%esp
f013120d:	83 ec 04             	sub    $0x4,%esp
f0131210:	ff 75 20             	pushl  0x20(%ebp)
f0131213:	53                   	push   %ebx
f0131214:	ff 75 18             	pushl  0x18(%ebp)
f0131217:	52                   	push   %edx
f0131218:	50                   	push   %eax
f0131219:	ff 75 0c             	pushl  0xc(%ebp)
f013121c:	ff 75 08             	pushl  0x8(%ebp)
f013121f:	e8 a1 ff ff ff       	call   f01311c5 <printnum>
f0131224:	83 c4 20             	add    $0x20,%esp
f0131227:	eb 1a                	jmp    f0131243 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0131229:	83 ec 08             	sub    $0x8,%esp
f013122c:	ff 75 0c             	pushl  0xc(%ebp)
f013122f:	ff 75 20             	pushl  0x20(%ebp)
f0131232:	8b 45 08             	mov    0x8(%ebp),%eax
f0131235:	ff d0                	call   *%eax
f0131237:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f013123a:	ff 4d 1c             	decl   0x1c(%ebp)
f013123d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0131241:	7f e6                	jg     f0131229 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0131243:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0131246:	bb 00 00 00 00       	mov    $0x0,%ebx
f013124b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013124e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131251:	53                   	push   %ebx
f0131252:	51                   	push   %ecx
f0131253:	52                   	push   %edx
f0131254:	50                   	push   %eax
f0131255:	e8 76 24 00 00       	call   f01336d0 <__umoddi3>
f013125a:	83 c4 10             	add    $0x10,%esp
f013125d:	05 54 d6 13 f0       	add    $0xf013d654,%eax
f0131262:	8a 00                	mov    (%eax),%al
f0131264:	0f be c0             	movsbl %al,%eax
f0131267:	83 ec 08             	sub    $0x8,%esp
f013126a:	ff 75 0c             	pushl  0xc(%ebp)
f013126d:	50                   	push   %eax
f013126e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131271:	ff d0                	call   *%eax
f0131273:	83 c4 10             	add    $0x10,%esp
}
f0131276:	90                   	nop
f0131277:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f013127a:	c9                   	leave  
f013127b:	c3                   	ret    

f013127c <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f013127c:	55                   	push   %ebp
f013127d:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f013127f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0131283:	7e 1c                	jle    f01312a1 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0131285:	8b 45 08             	mov    0x8(%ebp),%eax
f0131288:	8b 00                	mov    (%eax),%eax
f013128a:	8d 50 08             	lea    0x8(%eax),%edx
f013128d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131290:	89 10                	mov    %edx,(%eax)
f0131292:	8b 45 08             	mov    0x8(%ebp),%eax
f0131295:	8b 00                	mov    (%eax),%eax
f0131297:	83 e8 08             	sub    $0x8,%eax
f013129a:	8b 50 04             	mov    0x4(%eax),%edx
f013129d:	8b 00                	mov    (%eax),%eax
f013129f:	eb 40                	jmp    f01312e1 <getuint+0x65>
	else if (lflag)
f01312a1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01312a5:	74 1e                	je     f01312c5 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f01312a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01312aa:	8b 00                	mov    (%eax),%eax
f01312ac:	8d 50 04             	lea    0x4(%eax),%edx
f01312af:	8b 45 08             	mov    0x8(%ebp),%eax
f01312b2:	89 10                	mov    %edx,(%eax)
f01312b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01312b7:	8b 00                	mov    (%eax),%eax
f01312b9:	83 e8 04             	sub    $0x4,%eax
f01312bc:	8b 00                	mov    (%eax),%eax
f01312be:	ba 00 00 00 00       	mov    $0x0,%edx
f01312c3:	eb 1c                	jmp    f01312e1 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01312c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01312c8:	8b 00                	mov    (%eax),%eax
f01312ca:	8d 50 04             	lea    0x4(%eax),%edx
f01312cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01312d0:	89 10                	mov    %edx,(%eax)
f01312d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312d5:	8b 00                	mov    (%eax),%eax
f01312d7:	83 e8 04             	sub    $0x4,%eax
f01312da:	8b 00                	mov    (%eax),%eax
f01312dc:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01312e1:	5d                   	pop    %ebp
f01312e2:	c3                   	ret    

f01312e3 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01312e3:	55                   	push   %ebp
f01312e4:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01312e6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01312ea:	7e 1c                	jle    f0131308 <getint+0x25>
		return va_arg(*ap, long long);
f01312ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ef:	8b 00                	mov    (%eax),%eax
f01312f1:	8d 50 08             	lea    0x8(%eax),%edx
f01312f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01312f7:	89 10                	mov    %edx,(%eax)
f01312f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01312fc:	8b 00                	mov    (%eax),%eax
f01312fe:	83 e8 08             	sub    $0x8,%eax
f0131301:	8b 50 04             	mov    0x4(%eax),%edx
f0131304:	8b 00                	mov    (%eax),%eax
f0131306:	eb 38                	jmp    f0131340 <getint+0x5d>
	else if (lflag)
f0131308:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013130c:	74 1a                	je     f0131328 <getint+0x45>
		return va_arg(*ap, long);
f013130e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131311:	8b 00                	mov    (%eax),%eax
f0131313:	8d 50 04             	lea    0x4(%eax),%edx
f0131316:	8b 45 08             	mov    0x8(%ebp),%eax
f0131319:	89 10                	mov    %edx,(%eax)
f013131b:	8b 45 08             	mov    0x8(%ebp),%eax
f013131e:	8b 00                	mov    (%eax),%eax
f0131320:	83 e8 04             	sub    $0x4,%eax
f0131323:	8b 00                	mov    (%eax),%eax
f0131325:	99                   	cltd   
f0131326:	eb 18                	jmp    f0131340 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0131328:	8b 45 08             	mov    0x8(%ebp),%eax
f013132b:	8b 00                	mov    (%eax),%eax
f013132d:	8d 50 04             	lea    0x4(%eax),%edx
f0131330:	8b 45 08             	mov    0x8(%ebp),%eax
f0131333:	89 10                	mov    %edx,(%eax)
f0131335:	8b 45 08             	mov    0x8(%ebp),%eax
f0131338:	8b 00                	mov    (%eax),%eax
f013133a:	83 e8 04             	sub    $0x4,%eax
f013133d:	8b 00                	mov    (%eax),%eax
f013133f:	99                   	cltd   
}
f0131340:	5d                   	pop    %ebp
f0131341:	c3                   	ret    

f0131342 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0131342:	55                   	push   %ebp
f0131343:	89 e5                	mov    %esp,%ebp
f0131345:	56                   	push   %esi
f0131346:	53                   	push   %ebx
f0131347:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f013134a:	eb 17                	jmp    f0131363 <vprintfmt+0x21>
			if (ch == '\0')
f013134c:	85 db                	test   %ebx,%ebx
f013134e:	0f 84 af 03 00 00    	je     f0131703 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0131354:	83 ec 08             	sub    $0x8,%esp
f0131357:	ff 75 0c             	pushl  0xc(%ebp)
f013135a:	53                   	push   %ebx
f013135b:	8b 45 08             	mov    0x8(%ebp),%eax
f013135e:	ff d0                	call   *%eax
f0131360:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0131363:	8b 45 10             	mov    0x10(%ebp),%eax
f0131366:	8d 50 01             	lea    0x1(%eax),%edx
f0131369:	89 55 10             	mov    %edx,0x10(%ebp)
f013136c:	8a 00                	mov    (%eax),%al
f013136e:	0f b6 d8             	movzbl %al,%ebx
f0131371:	83 fb 25             	cmp    $0x25,%ebx
f0131374:	75 d6                	jne    f013134c <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0131376:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f013137a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0131381:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0131388:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f013138f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0131396:	8b 45 10             	mov    0x10(%ebp),%eax
f0131399:	8d 50 01             	lea    0x1(%eax),%edx
f013139c:	89 55 10             	mov    %edx,0x10(%ebp)
f013139f:	8a 00                	mov    (%eax),%al
f01313a1:	0f b6 d8             	movzbl %al,%ebx
f01313a4:	8d 43 dd             	lea    -0x23(%ebx),%eax
f01313a7:	83 f8 55             	cmp    $0x55,%eax
f01313aa:	0f 87 2b 03 00 00    	ja     f01316db <vprintfmt+0x399>
f01313b0:	8b 04 85 78 d6 13 f0 	mov    -0xfec2988(,%eax,4),%eax
f01313b7:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f01313b9:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01313bd:	eb d7                	jmp    f0131396 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01313bf:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01313c3:	eb d1                	jmp    f0131396 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01313c5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01313cc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01313cf:	89 d0                	mov    %edx,%eax
f01313d1:	c1 e0 02             	shl    $0x2,%eax
f01313d4:	01 d0                	add    %edx,%eax
f01313d6:	01 c0                	add    %eax,%eax
f01313d8:	01 d8                	add    %ebx,%eax
f01313da:	83 e8 30             	sub    $0x30,%eax
f01313dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01313e0:	8b 45 10             	mov    0x10(%ebp),%eax
f01313e3:	8a 00                	mov    (%eax),%al
f01313e5:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01313e8:	83 fb 2f             	cmp    $0x2f,%ebx
f01313eb:	7e 3e                	jle    f013142b <vprintfmt+0xe9>
f01313ed:	83 fb 39             	cmp    $0x39,%ebx
f01313f0:	7f 39                	jg     f013142b <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01313f2:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01313f5:	eb d5                	jmp    f01313cc <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01313f7:	8b 45 14             	mov    0x14(%ebp),%eax
f01313fa:	83 c0 04             	add    $0x4,%eax
f01313fd:	89 45 14             	mov    %eax,0x14(%ebp)
f0131400:	8b 45 14             	mov    0x14(%ebp),%eax
f0131403:	83 e8 04             	sub    $0x4,%eax
f0131406:	8b 00                	mov    (%eax),%eax
f0131408:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f013140b:	eb 1f                	jmp    f013142c <vprintfmt+0xea>

		case '.':
			if (width < 0)
f013140d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131411:	79 83                	jns    f0131396 <vprintfmt+0x54>
				width = 0;
f0131413:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f013141a:	e9 77 ff ff ff       	jmp    f0131396 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f013141f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0131426:	e9 6b ff ff ff       	jmp    f0131396 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f013142b:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f013142c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131430:	0f 89 60 ff ff ff    	jns    f0131396 <vprintfmt+0x54>
				width = precision, precision = -1;
f0131436:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131439:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013143c:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0131443:	e9 4e ff ff ff       	jmp    f0131396 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0131448:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f013144b:	e9 46 ff ff ff       	jmp    f0131396 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0131450:	8b 45 14             	mov    0x14(%ebp),%eax
f0131453:	83 c0 04             	add    $0x4,%eax
f0131456:	89 45 14             	mov    %eax,0x14(%ebp)
f0131459:	8b 45 14             	mov    0x14(%ebp),%eax
f013145c:	83 e8 04             	sub    $0x4,%eax
f013145f:	8b 00                	mov    (%eax),%eax
f0131461:	83 ec 08             	sub    $0x8,%esp
f0131464:	ff 75 0c             	pushl  0xc(%ebp)
f0131467:	50                   	push   %eax
f0131468:	8b 45 08             	mov    0x8(%ebp),%eax
f013146b:	ff d0                	call   *%eax
f013146d:	83 c4 10             	add    $0x10,%esp
			break;
f0131470:	e9 89 02 00 00       	jmp    f01316fe <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0131475:	8b 45 14             	mov    0x14(%ebp),%eax
f0131478:	83 c0 04             	add    $0x4,%eax
f013147b:	89 45 14             	mov    %eax,0x14(%ebp)
f013147e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131481:	83 e8 04             	sub    $0x4,%eax
f0131484:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0131486:	85 db                	test   %ebx,%ebx
f0131488:	79 02                	jns    f013148c <vprintfmt+0x14a>
				err = -err;
f013148a:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f013148c:	83 fb 64             	cmp    $0x64,%ebx
f013148f:	7f 0b                	jg     f013149c <vprintfmt+0x15a>
f0131491:	8b 34 9d c0 d4 13 f0 	mov    -0xfec2b40(,%ebx,4),%esi
f0131498:	85 f6                	test   %esi,%esi
f013149a:	75 19                	jne    f01314b5 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f013149c:	53                   	push   %ebx
f013149d:	68 65 d6 13 f0       	push   $0xf013d665
f01314a2:	ff 75 0c             	pushl  0xc(%ebp)
f01314a5:	ff 75 08             	pushl  0x8(%ebp)
f01314a8:	e8 5e 02 00 00       	call   f013170b <printfmt>
f01314ad:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01314b0:	e9 49 02 00 00       	jmp    f01316fe <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01314b5:	56                   	push   %esi
f01314b6:	68 6e d6 13 f0       	push   $0xf013d66e
f01314bb:	ff 75 0c             	pushl  0xc(%ebp)
f01314be:	ff 75 08             	pushl  0x8(%ebp)
f01314c1:	e8 45 02 00 00       	call   f013170b <printfmt>
f01314c6:	83 c4 10             	add    $0x10,%esp
			break;
f01314c9:	e9 30 02 00 00       	jmp    f01316fe <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01314ce:	8b 45 14             	mov    0x14(%ebp),%eax
f01314d1:	83 c0 04             	add    $0x4,%eax
f01314d4:	89 45 14             	mov    %eax,0x14(%ebp)
f01314d7:	8b 45 14             	mov    0x14(%ebp),%eax
f01314da:	83 e8 04             	sub    $0x4,%eax
f01314dd:	8b 30                	mov    (%eax),%esi
f01314df:	85 f6                	test   %esi,%esi
f01314e1:	75 05                	jne    f01314e8 <vprintfmt+0x1a6>
				p = "(null)";
f01314e3:	be 71 d6 13 f0       	mov    $0xf013d671,%esi
			if (width > 0 && padc != '-')
f01314e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01314ec:	7e 6d                	jle    f013155b <vprintfmt+0x219>
f01314ee:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01314f2:	74 67                	je     f013155b <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01314f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01314f7:	83 ec 08             	sub    $0x8,%esp
f01314fa:	50                   	push   %eax
f01314fb:	56                   	push   %esi
f01314fc:	e8 12 05 00 00       	call   f0131a13 <strnlen>
f0131501:	83 c4 10             	add    $0x10,%esp
f0131504:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0131507:	eb 16                	jmp    f013151f <vprintfmt+0x1dd>
					putch(padc, putdat);
f0131509:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f013150d:	83 ec 08             	sub    $0x8,%esp
f0131510:	ff 75 0c             	pushl  0xc(%ebp)
f0131513:	50                   	push   %eax
f0131514:	8b 45 08             	mov    0x8(%ebp),%eax
f0131517:	ff d0                	call   *%eax
f0131519:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f013151c:	ff 4d e4             	decl   -0x1c(%ebp)
f013151f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131523:	7f e4                	jg     f0131509 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0131525:	eb 34                	jmp    f013155b <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0131527:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013152b:	74 1c                	je     f0131549 <vprintfmt+0x207>
f013152d:	83 fb 1f             	cmp    $0x1f,%ebx
f0131530:	7e 05                	jle    f0131537 <vprintfmt+0x1f5>
f0131532:	83 fb 7e             	cmp    $0x7e,%ebx
f0131535:	7e 12                	jle    f0131549 <vprintfmt+0x207>
					putch('?', putdat);
f0131537:	83 ec 08             	sub    $0x8,%esp
f013153a:	ff 75 0c             	pushl  0xc(%ebp)
f013153d:	6a 3f                	push   $0x3f
f013153f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131542:	ff d0                	call   *%eax
f0131544:	83 c4 10             	add    $0x10,%esp
f0131547:	eb 0f                	jmp    f0131558 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0131549:	83 ec 08             	sub    $0x8,%esp
f013154c:	ff 75 0c             	pushl  0xc(%ebp)
f013154f:	53                   	push   %ebx
f0131550:	8b 45 08             	mov    0x8(%ebp),%eax
f0131553:	ff d0                	call   *%eax
f0131555:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0131558:	ff 4d e4             	decl   -0x1c(%ebp)
f013155b:	89 f0                	mov    %esi,%eax
f013155d:	8d 70 01             	lea    0x1(%eax),%esi
f0131560:	8a 00                	mov    (%eax),%al
f0131562:	0f be d8             	movsbl %al,%ebx
f0131565:	85 db                	test   %ebx,%ebx
f0131567:	74 24                	je     f013158d <vprintfmt+0x24b>
f0131569:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013156d:	78 b8                	js     f0131527 <vprintfmt+0x1e5>
f013156f:	ff 4d e0             	decl   -0x20(%ebp)
f0131572:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131576:	79 af                	jns    f0131527 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131578:	eb 13                	jmp    f013158d <vprintfmt+0x24b>
				putch(' ', putdat);
f013157a:	83 ec 08             	sub    $0x8,%esp
f013157d:	ff 75 0c             	pushl  0xc(%ebp)
f0131580:	6a 20                	push   $0x20
f0131582:	8b 45 08             	mov    0x8(%ebp),%eax
f0131585:	ff d0                	call   *%eax
f0131587:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013158a:	ff 4d e4             	decl   -0x1c(%ebp)
f013158d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131591:	7f e7                	jg     f013157a <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0131593:	e9 66 01 00 00       	jmp    f01316fe <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0131598:	83 ec 08             	sub    $0x8,%esp
f013159b:	ff 75 e8             	pushl  -0x18(%ebp)
f013159e:	8d 45 14             	lea    0x14(%ebp),%eax
f01315a1:	50                   	push   %eax
f01315a2:	e8 3c fd ff ff       	call   f01312e3 <getint>
f01315a7:	83 c4 10             	add    $0x10,%esp
f01315aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01315ad:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01315b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315b6:	85 d2                	test   %edx,%edx
f01315b8:	79 23                	jns    f01315dd <vprintfmt+0x29b>
				putch('-', putdat);
f01315ba:	83 ec 08             	sub    $0x8,%esp
f01315bd:	ff 75 0c             	pushl  0xc(%ebp)
f01315c0:	6a 2d                	push   $0x2d
f01315c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01315c5:	ff d0                	call   *%eax
f01315c7:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01315ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315d0:	f7 d8                	neg    %eax
f01315d2:	83 d2 00             	adc    $0x0,%edx
f01315d5:	f7 da                	neg    %edx
f01315d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01315da:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01315dd:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01315e4:	e9 bc 00 00 00       	jmp    f01316a5 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01315e9:	83 ec 08             	sub    $0x8,%esp
f01315ec:	ff 75 e8             	pushl  -0x18(%ebp)
f01315ef:	8d 45 14             	lea    0x14(%ebp),%eax
f01315f2:	50                   	push   %eax
f01315f3:	e8 84 fc ff ff       	call   f013127c <getuint>
f01315f8:	83 c4 10             	add    $0x10,%esp
f01315fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01315fe:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0131601:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0131608:	e9 98 00 00 00       	jmp    f01316a5 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f013160d:	83 ec 08             	sub    $0x8,%esp
f0131610:	ff 75 0c             	pushl  0xc(%ebp)
f0131613:	6a 58                	push   $0x58
f0131615:	8b 45 08             	mov    0x8(%ebp),%eax
f0131618:	ff d0                	call   *%eax
f013161a:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013161d:	83 ec 08             	sub    $0x8,%esp
f0131620:	ff 75 0c             	pushl  0xc(%ebp)
f0131623:	6a 58                	push   $0x58
f0131625:	8b 45 08             	mov    0x8(%ebp),%eax
f0131628:	ff d0                	call   *%eax
f013162a:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013162d:	83 ec 08             	sub    $0x8,%esp
f0131630:	ff 75 0c             	pushl  0xc(%ebp)
f0131633:	6a 58                	push   $0x58
f0131635:	8b 45 08             	mov    0x8(%ebp),%eax
f0131638:	ff d0                	call   *%eax
f013163a:	83 c4 10             	add    $0x10,%esp
			break;
f013163d:	e9 bc 00 00 00       	jmp    f01316fe <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0131642:	83 ec 08             	sub    $0x8,%esp
f0131645:	ff 75 0c             	pushl  0xc(%ebp)
f0131648:	6a 30                	push   $0x30
f013164a:	8b 45 08             	mov    0x8(%ebp),%eax
f013164d:	ff d0                	call   *%eax
f013164f:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0131652:	83 ec 08             	sub    $0x8,%esp
f0131655:	ff 75 0c             	pushl  0xc(%ebp)
f0131658:	6a 78                	push   $0x78
f013165a:	8b 45 08             	mov    0x8(%ebp),%eax
f013165d:	ff d0                	call   *%eax
f013165f:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0131662:	8b 45 14             	mov    0x14(%ebp),%eax
f0131665:	83 c0 04             	add    $0x4,%eax
f0131668:	89 45 14             	mov    %eax,0x14(%ebp)
f013166b:	8b 45 14             	mov    0x14(%ebp),%eax
f013166e:	83 e8 04             	sub    $0x4,%eax
f0131671:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131673:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131676:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f013167d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131684:	eb 1f                	jmp    f01316a5 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0131686:	83 ec 08             	sub    $0x8,%esp
f0131689:	ff 75 e8             	pushl  -0x18(%ebp)
f013168c:	8d 45 14             	lea    0x14(%ebp),%eax
f013168f:	50                   	push   %eax
f0131690:	e8 e7 fb ff ff       	call   f013127c <getuint>
f0131695:	83 c4 10             	add    $0x10,%esp
f0131698:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013169b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f013169e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01316a5:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01316a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01316ac:	83 ec 04             	sub    $0x4,%esp
f01316af:	52                   	push   %edx
f01316b0:	ff 75 e4             	pushl  -0x1c(%ebp)
f01316b3:	50                   	push   %eax
f01316b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01316b7:	ff 75 f0             	pushl  -0x10(%ebp)
f01316ba:	ff 75 0c             	pushl  0xc(%ebp)
f01316bd:	ff 75 08             	pushl  0x8(%ebp)
f01316c0:	e8 00 fb ff ff       	call   f01311c5 <printnum>
f01316c5:	83 c4 20             	add    $0x20,%esp
			break;
f01316c8:	eb 34                	jmp    f01316fe <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01316ca:	83 ec 08             	sub    $0x8,%esp
f01316cd:	ff 75 0c             	pushl  0xc(%ebp)
f01316d0:	53                   	push   %ebx
f01316d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01316d4:	ff d0                	call   *%eax
f01316d6:	83 c4 10             	add    $0x10,%esp
			break;
f01316d9:	eb 23                	jmp    f01316fe <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01316db:	83 ec 08             	sub    $0x8,%esp
f01316de:	ff 75 0c             	pushl  0xc(%ebp)
f01316e1:	6a 25                	push   $0x25
f01316e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01316e6:	ff d0                	call   *%eax
f01316e8:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01316eb:	ff 4d 10             	decl   0x10(%ebp)
f01316ee:	eb 03                	jmp    f01316f3 <vprintfmt+0x3b1>
f01316f0:	ff 4d 10             	decl   0x10(%ebp)
f01316f3:	8b 45 10             	mov    0x10(%ebp),%eax
f01316f6:	48                   	dec    %eax
f01316f7:	8a 00                	mov    (%eax),%al
f01316f9:	3c 25                	cmp    $0x25,%al
f01316fb:	75 f3                	jne    f01316f0 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01316fd:	90                   	nop
		}
	}
f01316fe:	e9 47 fc ff ff       	jmp    f013134a <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0131703:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0131704:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131707:	5b                   	pop    %ebx
f0131708:	5e                   	pop    %esi
f0131709:	5d                   	pop    %ebp
f013170a:	c3                   	ret    

f013170b <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f013170b:	55                   	push   %ebp
f013170c:	89 e5                	mov    %esp,%ebp
f013170e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0131711:	8d 45 10             	lea    0x10(%ebp),%eax
f0131714:	83 c0 04             	add    $0x4,%eax
f0131717:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f013171a:	8b 45 10             	mov    0x10(%ebp),%eax
f013171d:	ff 75 f4             	pushl  -0xc(%ebp)
f0131720:	50                   	push   %eax
f0131721:	ff 75 0c             	pushl  0xc(%ebp)
f0131724:	ff 75 08             	pushl  0x8(%ebp)
f0131727:	e8 16 fc ff ff       	call   f0131342 <vprintfmt>
f013172c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f013172f:	90                   	nop
f0131730:	c9                   	leave  
f0131731:	c3                   	ret    

f0131732 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0131732:	55                   	push   %ebp
f0131733:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0131735:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131738:	8b 40 08             	mov    0x8(%eax),%eax
f013173b:	8d 50 01             	lea    0x1(%eax),%edx
f013173e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131741:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0131744:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131747:	8b 10                	mov    (%eax),%edx
f0131749:	8b 45 0c             	mov    0xc(%ebp),%eax
f013174c:	8b 40 04             	mov    0x4(%eax),%eax
f013174f:	39 c2                	cmp    %eax,%edx
f0131751:	73 12                	jae    f0131765 <sprintputch+0x33>
		*b->buf++ = ch;
f0131753:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131756:	8b 00                	mov    (%eax),%eax
f0131758:	8d 48 01             	lea    0x1(%eax),%ecx
f013175b:	8b 55 0c             	mov    0xc(%ebp),%edx
f013175e:	89 0a                	mov    %ecx,(%edx)
f0131760:	8b 55 08             	mov    0x8(%ebp),%edx
f0131763:	88 10                	mov    %dl,(%eax)
}
f0131765:	90                   	nop
f0131766:	5d                   	pop    %ebp
f0131767:	c3                   	ret    

f0131768 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0131768:	55                   	push   %ebp
f0131769:	89 e5                	mov    %esp,%ebp
f013176b:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f013176e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131771:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131774:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131777:	8d 50 ff             	lea    -0x1(%eax),%edx
f013177a:	8b 45 08             	mov    0x8(%ebp),%eax
f013177d:	01 d0                	add    %edx,%eax
f013177f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131782:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0131789:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013178d:	74 06                	je     f0131795 <vsnprintf+0x2d>
f013178f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131793:	7f 07                	jg     f013179c <vsnprintf+0x34>
		return -E_INVAL;
f0131795:	b8 03 00 00 00       	mov    $0x3,%eax
f013179a:	eb 20                	jmp    f01317bc <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f013179c:	ff 75 14             	pushl  0x14(%ebp)
f013179f:	ff 75 10             	pushl  0x10(%ebp)
f01317a2:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01317a5:	50                   	push   %eax
f01317a6:	68 32 17 13 f0       	push   $0xf0131732
f01317ab:	e8 92 fb ff ff       	call   f0131342 <vprintfmt>
f01317b0:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01317b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01317b6:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01317b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01317bc:	c9                   	leave  
f01317bd:	c3                   	ret    

f01317be <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01317be:	55                   	push   %ebp
f01317bf:	89 e5                	mov    %esp,%ebp
f01317c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01317c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01317c7:	83 c0 04             	add    $0x4,%eax
f01317ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01317cd:	8b 45 10             	mov    0x10(%ebp),%eax
f01317d0:	ff 75 f4             	pushl  -0xc(%ebp)
f01317d3:	50                   	push   %eax
f01317d4:	ff 75 0c             	pushl  0xc(%ebp)
f01317d7:	ff 75 08             	pushl  0x8(%ebp)
f01317da:	e8 89 ff ff ff       	call   f0131768 <vsnprintf>
f01317df:	83 c4 10             	add    $0x10,%esp
f01317e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01317e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01317e8:	c9                   	leave  
f01317e9:	c3                   	ret    

f01317ea <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01317ea:	55                   	push   %ebp
f01317eb:	89 e5                	mov    %esp,%ebp
f01317ed:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01317f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01317f4:	74 13                	je     f0131809 <readline+0x1f>
		cprintf("%s", prompt);
f01317f6:	83 ec 08             	sub    $0x8,%esp
f01317f9:	ff 75 08             	pushl  0x8(%ebp)
f01317fc:	68 d0 d7 13 f0       	push   $0xf013d7d0
f0131801:	e8 08 f5 fc ff       	call   f0100d0e <cprintf>
f0131806:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0131809:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131810:	83 ec 0c             	sub    $0xc,%esp
f0131813:	6a 00                	push   $0x0
f0131815:	e8 a1 f4 fc ff       	call   f0100cbb <iscons>
f013181a:	83 c4 10             	add    $0x10,%esp
f013181d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131820:	e8 7d f4 fc ff       	call   f0100ca2 <getchar>
f0131825:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0131828:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013182c:	79 22                	jns    f0131850 <readline+0x66>
			if (c != -E_EOF)
f013182e:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131832:	0f 84 ad 00 00 00    	je     f01318e5 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0131838:	83 ec 08             	sub    $0x8,%esp
f013183b:	ff 75 ec             	pushl  -0x14(%ebp)
f013183e:	68 d3 d7 13 f0       	push   $0xf013d7d3
f0131843:	e8 c6 f4 fc ff       	call   f0100d0e <cprintf>
f0131848:	83 c4 10             	add    $0x10,%esp
			return;
f013184b:	e9 95 00 00 00       	jmp    f01318e5 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131850:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131854:	7e 34                	jle    f013188a <readline+0xa0>
f0131856:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013185d:	7f 2b                	jg     f013188a <readline+0xa0>
			if (echoing)
f013185f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131863:	74 0e                	je     f0131873 <readline+0x89>
				cputchar(c);
f0131865:	83 ec 0c             	sub    $0xc,%esp
f0131868:	ff 75 ec             	pushl  -0x14(%ebp)
f013186b:	e8 1b f4 fc ff       	call   f0100c8b <cputchar>
f0131870:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131873:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131876:	8d 50 01             	lea    0x1(%eax),%edx
f0131879:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013187c:	89 c2                	mov    %eax,%edx
f013187e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131881:	01 d0                	add    %edx,%eax
f0131883:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131886:	88 10                	mov    %dl,(%eax)
f0131888:	eb 56                	jmp    f01318e0 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f013188a:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f013188e:	75 1f                	jne    f01318af <readline+0xc5>
f0131890:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131894:	7e 19                	jle    f01318af <readline+0xc5>
			if (echoing)
f0131896:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013189a:	74 0e                	je     f01318aa <readline+0xc0>
				cputchar(c);
f013189c:	83 ec 0c             	sub    $0xc,%esp
f013189f:	ff 75 ec             	pushl  -0x14(%ebp)
f01318a2:	e8 e4 f3 fc ff       	call   f0100c8b <cputchar>
f01318a7:	83 c4 10             	add    $0x10,%esp

			i--;
f01318aa:	ff 4d f4             	decl   -0xc(%ebp)
f01318ad:	eb 31                	jmp    f01318e0 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01318af:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01318b3:	74 0a                	je     f01318bf <readline+0xd5>
f01318b5:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01318b9:	0f 85 61 ff ff ff    	jne    f0131820 <readline+0x36>
			if (echoing)
f01318bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318c3:	74 0e                	je     f01318d3 <readline+0xe9>
				cputchar(c);
f01318c5:	83 ec 0c             	sub    $0xc,%esp
f01318c8:	ff 75 ec             	pushl  -0x14(%ebp)
f01318cb:	e8 bb f3 fc ff       	call   f0100c8b <cputchar>
f01318d0:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01318d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318d9:	01 d0                	add    %edx,%eax
f01318db:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01318de:	eb 06                	jmp    f01318e6 <readline+0xfc>
		}
	}
f01318e0:	e9 3b ff ff ff       	jmp    f0131820 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01318e5:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01318e6:	c9                   	leave  
f01318e7:	c3                   	ret    

f01318e8 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01318e8:	55                   	push   %ebp
f01318e9:	89 e5                	mov    %esp,%ebp
f01318eb:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f01318ee:	e8 fb b9 fd ff       	call   f010d2ee <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f01318f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01318f7:	74 13                	je     f013190c <atomic_readline+0x24>
		cprintf("%s", prompt);
f01318f9:	83 ec 08             	sub    $0x8,%esp
f01318fc:	ff 75 08             	pushl  0x8(%ebp)
f01318ff:	68 d0 d7 13 f0       	push   $0xf013d7d0
f0131904:	e8 05 f4 fc ff       	call   f0100d0e <cprintf>
f0131909:	83 c4 10             	add    $0x10,%esp

	i = 0;
f013190c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131913:	83 ec 0c             	sub    $0xc,%esp
f0131916:	6a 00                	push   $0x0
f0131918:	e8 9e f3 fc ff       	call   f0100cbb <iscons>
f013191d:	83 c4 10             	add    $0x10,%esp
f0131920:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131923:	e8 7a f3 fc ff       	call   f0100ca2 <getchar>
f0131928:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013192b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013192f:	79 23                	jns    f0131954 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0131931:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131935:	74 13                	je     f013194a <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0131937:	83 ec 08             	sub    $0x8,%esp
f013193a:	ff 75 ec             	pushl  -0x14(%ebp)
f013193d:	68 d3 d7 13 f0       	push   $0xf013d7d3
f0131942:	e8 c7 f3 fc ff       	call   f0100d0e <cprintf>
f0131947:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f013194a:	e8 b9 b9 fd ff       	call   f010d308 <sys_enable_interrupt>
			return;
f013194f:	e9 9a 00 00 00       	jmp    f01319ee <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131954:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131958:	7e 34                	jle    f013198e <atomic_readline+0xa6>
f013195a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131961:	7f 2b                	jg     f013198e <atomic_readline+0xa6>
			if (echoing)
f0131963:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131967:	74 0e                	je     f0131977 <atomic_readline+0x8f>
				cputchar(c);
f0131969:	83 ec 0c             	sub    $0xc,%esp
f013196c:	ff 75 ec             	pushl  -0x14(%ebp)
f013196f:	e8 17 f3 fc ff       	call   f0100c8b <cputchar>
f0131974:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131977:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013197a:	8d 50 01             	lea    0x1(%eax),%edx
f013197d:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131980:	89 c2                	mov    %eax,%edx
f0131982:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131985:	01 d0                	add    %edx,%eax
f0131987:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013198a:	88 10                	mov    %dl,(%eax)
f013198c:	eb 5b                	jmp    f01319e9 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f013198e:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131992:	75 1f                	jne    f01319b3 <atomic_readline+0xcb>
f0131994:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131998:	7e 19                	jle    f01319b3 <atomic_readline+0xcb>
			if (echoing)
f013199a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013199e:	74 0e                	je     f01319ae <atomic_readline+0xc6>
				cputchar(c);
f01319a0:	83 ec 0c             	sub    $0xc,%esp
f01319a3:	ff 75 ec             	pushl  -0x14(%ebp)
f01319a6:	e8 e0 f2 fc ff       	call   f0100c8b <cputchar>
f01319ab:	83 c4 10             	add    $0x10,%esp
			i--;
f01319ae:	ff 4d f4             	decl   -0xc(%ebp)
f01319b1:	eb 36                	jmp    f01319e9 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01319b3:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01319b7:	74 0a                	je     f01319c3 <atomic_readline+0xdb>
f01319b9:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01319bd:	0f 85 60 ff ff ff    	jne    f0131923 <atomic_readline+0x3b>
			if (echoing)
f01319c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319c7:	74 0e                	je     f01319d7 <atomic_readline+0xef>
				cputchar(c);
f01319c9:	83 ec 0c             	sub    $0xc,%esp
f01319cc:	ff 75 ec             	pushl  -0x14(%ebp)
f01319cf:	e8 b7 f2 fc ff       	call   f0100c8b <cputchar>
f01319d4:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01319d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319dd:	01 d0                	add    %edx,%eax
f01319df:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01319e2:	e8 21 b9 fd ff       	call   f010d308 <sys_enable_interrupt>
			return;
f01319e7:	eb 05                	jmp    f01319ee <atomic_readline+0x106>
		}
	}
f01319e9:	e9 35 ff ff ff       	jmp    f0131923 <atomic_readline+0x3b>
}
f01319ee:	c9                   	leave  
f01319ef:	c3                   	ret    

f01319f0 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f01319f0:	55                   	push   %ebp
f01319f1:	89 e5                	mov    %esp,%ebp
f01319f3:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f01319f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01319fd:	eb 06                	jmp    f0131a05 <strlen+0x15>
		n++;
f01319ff:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0131a02:	ff 45 08             	incl   0x8(%ebp)
f0131a05:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a08:	8a 00                	mov    (%eax),%al
f0131a0a:	84 c0                	test   %al,%al
f0131a0c:	75 f1                	jne    f01319ff <strlen+0xf>
		n++;
	return n;
f0131a0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a11:	c9                   	leave  
f0131a12:	c3                   	ret    

f0131a13 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0131a13:	55                   	push   %ebp
f0131a14:	89 e5                	mov    %esp,%ebp
f0131a16:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131a19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a20:	eb 09                	jmp    f0131a2b <strnlen+0x18>
		n++;
f0131a22:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131a25:	ff 45 08             	incl   0x8(%ebp)
f0131a28:	ff 4d 0c             	decl   0xc(%ebp)
f0131a2b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131a2f:	74 09                	je     f0131a3a <strnlen+0x27>
f0131a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a34:	8a 00                	mov    (%eax),%al
f0131a36:	84 c0                	test   %al,%al
f0131a38:	75 e8                	jne    f0131a22 <strnlen+0xf>
		n++;
	return n;
f0131a3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a3d:	c9                   	leave  
f0131a3e:	c3                   	ret    

f0131a3f <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131a3f:	55                   	push   %ebp
f0131a40:	89 e5                	mov    %esp,%ebp
f0131a42:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131a45:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a48:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0131a4b:	90                   	nop
f0131a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a4f:	8d 50 01             	lea    0x1(%eax),%edx
f0131a52:	89 55 08             	mov    %edx,0x8(%ebp)
f0131a55:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131a58:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131a5b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131a5e:	8a 12                	mov    (%edx),%dl
f0131a60:	88 10                	mov    %dl,(%eax)
f0131a62:	8a 00                	mov    (%eax),%al
f0131a64:	84 c0                	test   %al,%al
f0131a66:	75 e4                	jne    f0131a4c <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131a68:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a6b:	c9                   	leave  
f0131a6c:	c3                   	ret    

f0131a6d <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131a6d:	55                   	push   %ebp
f0131a6e:	89 e5                	mov    %esp,%ebp
f0131a70:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131a73:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a76:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131a79:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a80:	eb 1f                	jmp    f0131aa1 <strncpy+0x34>
		*dst++ = *src;
f0131a82:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a85:	8d 50 01             	lea    0x1(%eax),%edx
f0131a88:	89 55 08             	mov    %edx,0x8(%ebp)
f0131a8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131a8e:	8a 12                	mov    (%edx),%dl
f0131a90:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131a92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a95:	8a 00                	mov    (%eax),%al
f0131a97:	84 c0                	test   %al,%al
f0131a99:	74 03                	je     f0131a9e <strncpy+0x31>
			src++;
f0131a9b:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0131a9e:	ff 45 fc             	incl   -0x4(%ebp)
f0131aa1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131aa4:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131aa7:	72 d9                	jb     f0131a82 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131aa9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131aac:	c9                   	leave  
f0131aad:	c3                   	ret    

f0131aae <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0131aae:	55                   	push   %ebp
f0131aaf:	89 e5                	mov    %esp,%ebp
f0131ab1:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131ab4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ab7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131aba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131abe:	74 30                	je     f0131af0 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0131ac0:	eb 16                	jmp    f0131ad8 <strlcpy+0x2a>
			*dst++ = *src++;
f0131ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ac5:	8d 50 01             	lea    0x1(%eax),%edx
f0131ac8:	89 55 08             	mov    %edx,0x8(%ebp)
f0131acb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131ace:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131ad1:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131ad4:	8a 12                	mov    (%edx),%dl
f0131ad6:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131ad8:	ff 4d 10             	decl   0x10(%ebp)
f0131adb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131adf:	74 09                	je     f0131aea <strlcpy+0x3c>
f0131ae1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ae4:	8a 00                	mov    (%eax),%al
f0131ae6:	84 c0                	test   %al,%al
f0131ae8:	75 d8                	jne    f0131ac2 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131aea:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aed:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0131af0:	8b 55 08             	mov    0x8(%ebp),%edx
f0131af3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131af6:	29 c2                	sub    %eax,%edx
f0131af8:	89 d0                	mov    %edx,%eax
}
f0131afa:	c9                   	leave  
f0131afb:	c3                   	ret    

f0131afc <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0131afc:	55                   	push   %ebp
f0131afd:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0131aff:	eb 06                	jmp    f0131b07 <strcmp+0xb>
		p++, q++;
f0131b01:	ff 45 08             	incl   0x8(%ebp)
f0131b04:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0131b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b0a:	8a 00                	mov    (%eax),%al
f0131b0c:	84 c0                	test   %al,%al
f0131b0e:	74 0e                	je     f0131b1e <strcmp+0x22>
f0131b10:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b13:	8a 10                	mov    (%eax),%dl
f0131b15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b18:	8a 00                	mov    (%eax),%al
f0131b1a:	38 c2                	cmp    %al,%dl
f0131b1c:	74 e3                	je     f0131b01 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131b1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b21:	8a 00                	mov    (%eax),%al
f0131b23:	0f b6 d0             	movzbl %al,%edx
f0131b26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b29:	8a 00                	mov    (%eax),%al
f0131b2b:	0f b6 c0             	movzbl %al,%eax
f0131b2e:	29 c2                	sub    %eax,%edx
f0131b30:	89 d0                	mov    %edx,%eax
}
f0131b32:	5d                   	pop    %ebp
f0131b33:	c3                   	ret    

f0131b34 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0131b34:	55                   	push   %ebp
f0131b35:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131b37:	eb 09                	jmp    f0131b42 <strncmp+0xe>
		n--, p++, q++;
f0131b39:	ff 4d 10             	decl   0x10(%ebp)
f0131b3c:	ff 45 08             	incl   0x8(%ebp)
f0131b3f:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0131b42:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b46:	74 17                	je     f0131b5f <strncmp+0x2b>
f0131b48:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b4b:	8a 00                	mov    (%eax),%al
f0131b4d:	84 c0                	test   %al,%al
f0131b4f:	74 0e                	je     f0131b5f <strncmp+0x2b>
f0131b51:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b54:	8a 10                	mov    (%eax),%dl
f0131b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b59:	8a 00                	mov    (%eax),%al
f0131b5b:	38 c2                	cmp    %al,%dl
f0131b5d:	74 da                	je     f0131b39 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131b5f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b63:	75 07                	jne    f0131b6c <strncmp+0x38>
		return 0;
f0131b65:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b6a:	eb 14                	jmp    f0131b80 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131b6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b6f:	8a 00                	mov    (%eax),%al
f0131b71:	0f b6 d0             	movzbl %al,%edx
f0131b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b77:	8a 00                	mov    (%eax),%al
f0131b79:	0f b6 c0             	movzbl %al,%eax
f0131b7c:	29 c2                	sub    %eax,%edx
f0131b7e:	89 d0                	mov    %edx,%eax
}
f0131b80:	5d                   	pop    %ebp
f0131b81:	c3                   	ret    

f0131b82 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131b82:	55                   	push   %ebp
f0131b83:	89 e5                	mov    %esp,%ebp
f0131b85:	83 ec 04             	sub    $0x4,%esp
f0131b88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b8b:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131b8e:	eb 12                	jmp    f0131ba2 <strchr+0x20>
		if (*s == c)
f0131b90:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b93:	8a 00                	mov    (%eax),%al
f0131b95:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131b98:	75 05                	jne    f0131b9f <strchr+0x1d>
			return (char *) s;
f0131b9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b9d:	eb 11                	jmp    f0131bb0 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0131b9f:	ff 45 08             	incl   0x8(%ebp)
f0131ba2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ba5:	8a 00                	mov    (%eax),%al
f0131ba7:	84 c0                	test   %al,%al
f0131ba9:	75 e5                	jne    f0131b90 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131bab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131bb0:	c9                   	leave  
f0131bb1:	c3                   	ret    

f0131bb2 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0131bb2:	55                   	push   %ebp
f0131bb3:	89 e5                	mov    %esp,%ebp
f0131bb5:	83 ec 04             	sub    $0x4,%esp
f0131bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bbb:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131bbe:	eb 0d                	jmp    f0131bcd <strfind+0x1b>
		if (*s == c)
f0131bc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bc3:	8a 00                	mov    (%eax),%al
f0131bc5:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131bc8:	74 0e                	je     f0131bd8 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131bca:	ff 45 08             	incl   0x8(%ebp)
f0131bcd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bd0:	8a 00                	mov    (%eax),%al
f0131bd2:	84 c0                	test   %al,%al
f0131bd4:	75 ea                	jne    f0131bc0 <strfind+0xe>
f0131bd6:	eb 01                	jmp    f0131bd9 <strfind+0x27>
		if (*s == c)
			break;
f0131bd8:	90                   	nop
	return (char *) s;
f0131bd9:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131bdc:	c9                   	leave  
f0131bdd:	c3                   	ret    

f0131bde <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131bde:	55                   	push   %ebp
f0131bdf:	89 e5                	mov    %esp,%ebp
f0131be1:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0131be4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131be7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131bea:	8b 45 10             	mov    0x10(%ebp),%eax
f0131bed:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0131bf0:	eb 0e                	jmp    f0131c00 <memset+0x22>
		*p++ = c;
f0131bf2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bf5:	8d 50 01             	lea    0x1(%eax),%edx
f0131bf8:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131bfb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131bfe:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0131c00:	ff 4d f8             	decl   -0x8(%ebp)
f0131c03:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0131c07:	79 e9                	jns    f0131bf2 <memset+0x14>
		*p++ = c;

	return v;
f0131c09:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c0c:	c9                   	leave  
f0131c0d:	c3                   	ret    

f0131c0e <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131c0e:	55                   	push   %ebp
f0131c0f:	89 e5                	mov    %esp,%ebp
f0131c11:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131c14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c17:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131c1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c1d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0131c20:	eb 16                	jmp    f0131c38 <memcpy+0x2a>
		*d++ = *s++;
f0131c22:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c25:	8d 50 01             	lea    0x1(%eax),%edx
f0131c28:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131c2b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c2e:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131c31:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131c34:	8a 12                	mov    (%edx),%dl
f0131c36:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131c38:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c3b:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131c3e:	89 55 10             	mov    %edx,0x10(%ebp)
f0131c41:	85 c0                	test   %eax,%eax
f0131c43:	75 dd                	jne    f0131c22 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131c45:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c48:	c9                   	leave  
f0131c49:	c3                   	ret    

f0131c4a <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131c4a:	55                   	push   %ebp
f0131c4b:	89 e5                	mov    %esp,%ebp
f0131c4d:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131c50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c53:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131c56:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c59:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c5f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131c62:	73 50                	jae    f0131cb4 <memmove+0x6a>
f0131c64:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c67:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c6a:	01 d0                	add    %edx,%eax
f0131c6c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131c6f:	76 43                	jbe    f0131cb4 <memmove+0x6a>
		s += n;
f0131c71:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c74:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131c77:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c7a:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131c7d:	eb 10                	jmp    f0131c8f <memmove+0x45>
			*--d = *--s;
f0131c7f:	ff 4d f8             	decl   -0x8(%ebp)
f0131c82:	ff 4d fc             	decl   -0x4(%ebp)
f0131c85:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c88:	8a 10                	mov    (%eax),%dl
f0131c8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c8d:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131c8f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c92:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131c95:	89 55 10             	mov    %edx,0x10(%ebp)
f0131c98:	85 c0                	test   %eax,%eax
f0131c9a:	75 e3                	jne    f0131c7f <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131c9c:	eb 23                	jmp    f0131cc1 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0131c9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ca1:	8d 50 01             	lea    0x1(%eax),%edx
f0131ca4:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131ca7:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131caa:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131cad:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131cb0:	8a 12                	mov    (%edx),%dl
f0131cb2:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131cb4:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cb7:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131cba:	89 55 10             	mov    %edx,0x10(%ebp)
f0131cbd:	85 c0                	test   %eax,%eax
f0131cbf:	75 dd                	jne    f0131c9e <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131cc1:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131cc4:	c9                   	leave  
f0131cc5:	c3                   	ret    

f0131cc6 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131cc6:	55                   	push   %ebp
f0131cc7:	89 e5                	mov    %esp,%ebp
f0131cc9:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131ccc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ccf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131cd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131cd5:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131cd8:	eb 2a                	jmp    f0131d04 <memcmp+0x3e>
		if (*s1 != *s2)
f0131cda:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cdd:	8a 10                	mov    (%eax),%dl
f0131cdf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ce2:	8a 00                	mov    (%eax),%al
f0131ce4:	38 c2                	cmp    %al,%dl
f0131ce6:	74 16                	je     f0131cfe <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131ce8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ceb:	8a 00                	mov    (%eax),%al
f0131ced:	0f b6 d0             	movzbl %al,%edx
f0131cf0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cf3:	8a 00                	mov    (%eax),%al
f0131cf5:	0f b6 c0             	movzbl %al,%eax
f0131cf8:	29 c2                	sub    %eax,%edx
f0131cfa:	89 d0                	mov    %edx,%eax
f0131cfc:	eb 18                	jmp    f0131d16 <memcmp+0x50>
		s1++, s2++;
f0131cfe:	ff 45 fc             	incl   -0x4(%ebp)
f0131d01:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0131d04:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d07:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131d0a:	89 55 10             	mov    %edx,0x10(%ebp)
f0131d0d:	85 c0                	test   %eax,%eax
f0131d0f:	75 c9                	jne    f0131cda <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0131d11:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131d16:	c9                   	leave  
f0131d17:	c3                   	ret    

f0131d18 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0131d18:	55                   	push   %ebp
f0131d19:	89 e5                	mov    %esp,%ebp
f0131d1b:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131d1e:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d21:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d24:	01 d0                	add    %edx,%eax
f0131d26:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131d29:	eb 15                	jmp    f0131d40 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131d2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d2e:	8a 00                	mov    (%eax),%al
f0131d30:	0f b6 d0             	movzbl %al,%edx
f0131d33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131d36:	0f b6 c0             	movzbl %al,%eax
f0131d39:	39 c2                	cmp    %eax,%edx
f0131d3b:	74 0d                	je     f0131d4a <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131d3d:	ff 45 08             	incl   0x8(%ebp)
f0131d40:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d43:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131d46:	72 e3                	jb     f0131d2b <memfind+0x13>
f0131d48:	eb 01                	jmp    f0131d4b <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131d4a:	90                   	nop
	return (void *) s;
f0131d4b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131d4e:	c9                   	leave  
f0131d4f:	c3                   	ret    

f0131d50 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131d50:	55                   	push   %ebp
f0131d51:	89 e5                	mov    %esp,%ebp
f0131d53:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131d56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131d5d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131d64:	eb 03                	jmp    f0131d69 <strtol+0x19>
		s++;
f0131d66:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131d69:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d6c:	8a 00                	mov    (%eax),%al
f0131d6e:	3c 20                	cmp    $0x20,%al
f0131d70:	74 f4                	je     f0131d66 <strtol+0x16>
f0131d72:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d75:	8a 00                	mov    (%eax),%al
f0131d77:	3c 09                	cmp    $0x9,%al
f0131d79:	74 eb                	je     f0131d66 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131d7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d7e:	8a 00                	mov    (%eax),%al
f0131d80:	3c 2b                	cmp    $0x2b,%al
f0131d82:	75 05                	jne    f0131d89 <strtol+0x39>
		s++;
f0131d84:	ff 45 08             	incl   0x8(%ebp)
f0131d87:	eb 13                	jmp    f0131d9c <strtol+0x4c>
	else if (*s == '-')
f0131d89:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d8c:	8a 00                	mov    (%eax),%al
f0131d8e:	3c 2d                	cmp    $0x2d,%al
f0131d90:	75 0a                	jne    f0131d9c <strtol+0x4c>
		s++, neg = 1;
f0131d92:	ff 45 08             	incl   0x8(%ebp)
f0131d95:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131d9c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131da0:	74 06                	je     f0131da8 <strtol+0x58>
f0131da2:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131da6:	75 20                	jne    f0131dc8 <strtol+0x78>
f0131da8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dab:	8a 00                	mov    (%eax),%al
f0131dad:	3c 30                	cmp    $0x30,%al
f0131daf:	75 17                	jne    f0131dc8 <strtol+0x78>
f0131db1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131db4:	40                   	inc    %eax
f0131db5:	8a 00                	mov    (%eax),%al
f0131db7:	3c 78                	cmp    $0x78,%al
f0131db9:	75 0d                	jne    f0131dc8 <strtol+0x78>
		s += 2, base = 16;
f0131dbb:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131dbf:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131dc6:	eb 28                	jmp    f0131df0 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131dc8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131dcc:	75 15                	jne    f0131de3 <strtol+0x93>
f0131dce:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dd1:	8a 00                	mov    (%eax),%al
f0131dd3:	3c 30                	cmp    $0x30,%al
f0131dd5:	75 0c                	jne    f0131de3 <strtol+0x93>
		s++, base = 8;
f0131dd7:	ff 45 08             	incl   0x8(%ebp)
f0131dda:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131de1:	eb 0d                	jmp    f0131df0 <strtol+0xa0>
	else if (base == 0)
f0131de3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131de7:	75 07                	jne    f0131df0 <strtol+0xa0>
		base = 10;
f0131de9:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131df0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131df3:	8a 00                	mov    (%eax),%al
f0131df5:	3c 2f                	cmp    $0x2f,%al
f0131df7:	7e 19                	jle    f0131e12 <strtol+0xc2>
f0131df9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dfc:	8a 00                	mov    (%eax),%al
f0131dfe:	3c 39                	cmp    $0x39,%al
f0131e00:	7f 10                	jg     f0131e12 <strtol+0xc2>
			dig = *s - '0';
f0131e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e05:	8a 00                	mov    (%eax),%al
f0131e07:	0f be c0             	movsbl %al,%eax
f0131e0a:	83 e8 30             	sub    $0x30,%eax
f0131e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e10:	eb 42                	jmp    f0131e54 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131e12:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e15:	8a 00                	mov    (%eax),%al
f0131e17:	3c 60                	cmp    $0x60,%al
f0131e19:	7e 19                	jle    f0131e34 <strtol+0xe4>
f0131e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e1e:	8a 00                	mov    (%eax),%al
f0131e20:	3c 7a                	cmp    $0x7a,%al
f0131e22:	7f 10                	jg     f0131e34 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131e24:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e27:	8a 00                	mov    (%eax),%al
f0131e29:	0f be c0             	movsbl %al,%eax
f0131e2c:	83 e8 57             	sub    $0x57,%eax
f0131e2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e32:	eb 20                	jmp    f0131e54 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131e34:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e37:	8a 00                	mov    (%eax),%al
f0131e39:	3c 40                	cmp    $0x40,%al
f0131e3b:	7e 39                	jle    f0131e76 <strtol+0x126>
f0131e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e40:	8a 00                	mov    (%eax),%al
f0131e42:	3c 5a                	cmp    $0x5a,%al
f0131e44:	7f 30                	jg     f0131e76 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131e46:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e49:	8a 00                	mov    (%eax),%al
f0131e4b:	0f be c0             	movsbl %al,%eax
f0131e4e:	83 e8 37             	sub    $0x37,%eax
f0131e51:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e57:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131e5a:	7d 19                	jge    f0131e75 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131e5c:	ff 45 08             	incl   0x8(%ebp)
f0131e5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131e62:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131e66:	89 c2                	mov    %eax,%edx
f0131e68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e6b:	01 d0                	add    %edx,%eax
f0131e6d:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131e70:	e9 7b ff ff ff       	jmp    f0131df0 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131e75:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131e76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131e7a:	74 08                	je     f0131e84 <strtol+0x134>
		*endptr = (char *) s;
f0131e7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e7f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e82:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131e84:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131e88:	74 07                	je     f0131e91 <strtol+0x141>
f0131e8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131e8d:	f7 d8                	neg    %eax
f0131e8f:	eb 03                	jmp    f0131e94 <strtol+0x144>
f0131e91:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131e94:	c9                   	leave  
f0131e95:	c3                   	ret    

f0131e96 <ltostr>:

void
ltostr(long value, char *str)
{
f0131e96:	55                   	push   %ebp
f0131e97:	89 e5                	mov    %esp,%ebp
f0131e99:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131e9c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131ea3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131eaa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131eae:	79 13                	jns    f0131ec3 <ltostr+0x2d>
	{
		neg = 1;
f0131eb0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131eb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131eba:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131ebd:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131ec0:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131ec3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ec6:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131ecb:	99                   	cltd   
f0131ecc:	f7 f9                	idiv   %ecx
f0131ece:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131ed1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ed4:	8d 50 01             	lea    0x1(%eax),%edx
f0131ed7:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131eda:	89 c2                	mov    %eax,%edx
f0131edc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131edf:	01 d0                	add    %edx,%eax
f0131ee1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131ee4:	83 c2 30             	add    $0x30,%edx
f0131ee7:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131ee9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131eec:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131ef1:	f7 e9                	imul   %ecx
f0131ef3:	c1 fa 02             	sar    $0x2,%edx
f0131ef6:	89 c8                	mov    %ecx,%eax
f0131ef8:	c1 f8 1f             	sar    $0x1f,%eax
f0131efb:	29 c2                	sub    %eax,%edx
f0131efd:	89 d0                	mov    %edx,%eax
f0131eff:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131f02:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131f05:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131f0a:	f7 e9                	imul   %ecx
f0131f0c:	c1 fa 02             	sar    $0x2,%edx
f0131f0f:	89 c8                	mov    %ecx,%eax
f0131f11:	c1 f8 1f             	sar    $0x1f,%eax
f0131f14:	29 c2                	sub    %eax,%edx
f0131f16:	89 d0                	mov    %edx,%eax
f0131f18:	c1 e0 02             	shl    $0x2,%eax
f0131f1b:	01 d0                	add    %edx,%eax
f0131f1d:	01 c0                	add    %eax,%eax
f0131f1f:	29 c1                	sub    %eax,%ecx
f0131f21:	89 ca                	mov    %ecx,%edx
f0131f23:	85 d2                	test   %edx,%edx
f0131f25:	75 9c                	jne    f0131ec3 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131f27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131f2e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131f31:	48                   	dec    %eax
f0131f32:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131f35:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131f39:	74 3d                	je     f0131f78 <ltostr+0xe2>
		start = 1 ;
f0131f3b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131f42:	eb 34                	jmp    f0131f78 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131f44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f4a:	01 d0                	add    %edx,%eax
f0131f4c:	8a 00                	mov    (%eax),%al
f0131f4e:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f57:	01 c2                	add    %eax,%edx
f0131f59:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131f5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f5f:	01 c8                	add    %ecx,%eax
f0131f61:	8a 00                	mov    (%eax),%al
f0131f63:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131f65:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131f68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f6b:	01 c2                	add    %eax,%edx
f0131f6d:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131f70:	88 02                	mov    %al,(%edx)
		start++ ;
f0131f72:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131f75:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f7b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131f7e:	7c c4                	jl     f0131f44 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131f80:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f86:	01 d0                	add    %edx,%eax
f0131f88:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131f8b:	90                   	nop
f0131f8c:	c9                   	leave  
f0131f8d:	c3                   	ret    

f0131f8e <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131f8e:	55                   	push   %ebp
f0131f8f:	89 e5                	mov    %esp,%ebp
f0131f91:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131f94:	ff 75 08             	pushl  0x8(%ebp)
f0131f97:	e8 54 fa ff ff       	call   f01319f0 <strlen>
f0131f9c:	83 c4 04             	add    $0x4,%esp
f0131f9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131fa2:	ff 75 0c             	pushl  0xc(%ebp)
f0131fa5:	e8 46 fa ff ff       	call   f01319f0 <strlen>
f0131faa:	83 c4 04             	add    $0x4,%esp
f0131fad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131fb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131fb7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131fbe:	eb 17                	jmp    f0131fd7 <strcconcat+0x49>
		final[s] = str1[s] ;
f0131fc0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131fc3:	8b 45 10             	mov    0x10(%ebp),%eax
f0131fc6:	01 c2                	add    %eax,%edx
f0131fc8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131fcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fce:	01 c8                	add    %ecx,%eax
f0131fd0:	8a 00                	mov    (%eax),%al
f0131fd2:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131fd4:	ff 45 fc             	incl   -0x4(%ebp)
f0131fd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131fda:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131fdd:	7c e1                	jl     f0131fc0 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131fdf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131fe6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131fed:	eb 1f                	jmp    f013200e <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131fef:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ff2:	8d 50 01             	lea    0x1(%eax),%edx
f0131ff5:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131ff8:	89 c2                	mov    %eax,%edx
f0131ffa:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ffd:	01 c2                	add    %eax,%edx
f0131fff:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0132002:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132005:	01 c8                	add    %ecx,%eax
f0132007:	8a 00                	mov    (%eax),%al
f0132009:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f013200b:	ff 45 f8             	incl   -0x8(%ebp)
f013200e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0132011:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132014:	7c d9                	jl     f0131fef <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0132016:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0132019:	8b 45 10             	mov    0x10(%ebp),%eax
f013201c:	01 d0                	add    %edx,%eax
f013201e:	c6 00 00             	movb   $0x0,(%eax)
}
f0132021:	90                   	nop
f0132022:	c9                   	leave  
f0132023:	c3                   	ret    

f0132024 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0132024:	55                   	push   %ebp
f0132025:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0132027:	8b 45 14             	mov    0x14(%ebp),%eax
f013202a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0132030:	8b 45 14             	mov    0x14(%ebp),%eax
f0132033:	8b 00                	mov    (%eax),%eax
f0132035:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013203c:	8b 45 10             	mov    0x10(%ebp),%eax
f013203f:	01 d0                	add    %edx,%eax
f0132041:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0132047:	eb 0c                	jmp    f0132055 <strsplit+0x31>
			*string++ = 0;
f0132049:	8b 45 08             	mov    0x8(%ebp),%eax
f013204c:	8d 50 01             	lea    0x1(%eax),%edx
f013204f:	89 55 08             	mov    %edx,0x8(%ebp)
f0132052:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0132055:	8b 45 08             	mov    0x8(%ebp),%eax
f0132058:	8a 00                	mov    (%eax),%al
f013205a:	84 c0                	test   %al,%al
f013205c:	74 18                	je     f0132076 <strsplit+0x52>
f013205e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132061:	8a 00                	mov    (%eax),%al
f0132063:	0f be c0             	movsbl %al,%eax
f0132066:	50                   	push   %eax
f0132067:	ff 75 0c             	pushl  0xc(%ebp)
f013206a:	e8 13 fb ff ff       	call   f0131b82 <strchr>
f013206f:	83 c4 08             	add    $0x8,%esp
f0132072:	85 c0                	test   %eax,%eax
f0132074:	75 d3                	jne    f0132049 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0132076:	8b 45 08             	mov    0x8(%ebp),%eax
f0132079:	8a 00                	mov    (%eax),%al
f013207b:	84 c0                	test   %al,%al
f013207d:	74 5a                	je     f01320d9 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f013207f:	8b 45 14             	mov    0x14(%ebp),%eax
f0132082:	8b 00                	mov    (%eax),%eax
f0132084:	83 f8 0f             	cmp    $0xf,%eax
f0132087:	75 07                	jne    f0132090 <strsplit+0x6c>
		{
			return 0;
f0132089:	b8 00 00 00 00       	mov    $0x0,%eax
f013208e:	eb 66                	jmp    f01320f6 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0132090:	8b 45 14             	mov    0x14(%ebp),%eax
f0132093:	8b 00                	mov    (%eax),%eax
f0132095:	8d 48 01             	lea    0x1(%eax),%ecx
f0132098:	8b 55 14             	mov    0x14(%ebp),%edx
f013209b:	89 0a                	mov    %ecx,(%edx)
f013209d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01320a4:	8b 45 10             	mov    0x10(%ebp),%eax
f01320a7:	01 c2                	add    %eax,%edx
f01320a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01320ac:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f01320ae:	eb 03                	jmp    f01320b3 <strsplit+0x8f>
			string++;
f01320b0:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f01320b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01320b6:	8a 00                	mov    (%eax),%al
f01320b8:	84 c0                	test   %al,%al
f01320ba:	74 8b                	je     f0132047 <strsplit+0x23>
f01320bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01320bf:	8a 00                	mov    (%eax),%al
f01320c1:	0f be c0             	movsbl %al,%eax
f01320c4:	50                   	push   %eax
f01320c5:	ff 75 0c             	pushl  0xc(%ebp)
f01320c8:	e8 b5 fa ff ff       	call   f0131b82 <strchr>
f01320cd:	83 c4 08             	add    $0x8,%esp
f01320d0:	85 c0                	test   %eax,%eax
f01320d2:	74 dc                	je     f01320b0 <strsplit+0x8c>
			string++;
	}
f01320d4:	e9 6e ff ff ff       	jmp    f0132047 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01320d9:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01320da:	8b 45 14             	mov    0x14(%ebp),%eax
f01320dd:	8b 00                	mov    (%eax),%eax
f01320df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01320e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01320e9:	01 d0                	add    %edx,%eax
f01320eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01320f1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01320f6:	c9                   	leave  
f01320f7:	c3                   	ret    

f01320f8 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f01320f8:	55                   	push   %ebp
f01320f9:	89 e5                	mov    %esp,%ebp
f01320fb:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01320fe:	90                   	nop
f01320ff:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0132106:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0132109:	89 c2                	mov    %eax,%edx
f013210b:	ec                   	in     (%dx),%al
f013210c:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f013210f:	8a 45 f7             	mov    -0x9(%ebp),%al
f0132112:	0f b6 c0             	movzbl %al,%eax
f0132115:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132118:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013211b:	25 c0 00 00 00       	and    $0xc0,%eax
f0132120:	83 f8 40             	cmp    $0x40,%eax
f0132123:	75 da                	jne    f01320ff <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0132125:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132129:	74 11                	je     f013213c <ide_wait_ready+0x44>
f013212b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013212e:	83 e0 21             	and    $0x21,%eax
f0132131:	85 c0                	test   %eax,%eax
f0132133:	74 07                	je     f013213c <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0132135:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013213a:	eb 05                	jmp    f0132141 <ide_wait_ready+0x49>
	}
	return 0;
f013213c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132141:	c9                   	leave  
f0132142:	c3                   	ret    

f0132143 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0132143:	55                   	push   %ebp
f0132144:	89 e5                	mov    %esp,%ebp
f0132146:	57                   	push   %edi
f0132147:	53                   	push   %ebx
f0132148:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f013214b:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132152:	76 16                	jbe    f013216a <ide_read+0x27>
f0132154:	68 e3 d7 13 f0       	push   $0xf013d7e3
f0132159:	68 f0 d7 13 f0       	push   $0xf013d7f0
f013215e:	6a 25                	push   $0x25
f0132160:	68 05 d8 13 f0       	push   $0xf013d805
f0132165:	e8 9b e0 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f013216a:	83 ec 0c             	sub    $0xc,%esp
f013216d:	6a 00                	push   $0x0
f013216f:	e8 84 ff ff ff       	call   f01320f8 <ide_wait_ready>
f0132174:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0132177:	8b 45 10             	mov    0x10(%ebp),%eax
f013217a:	0f b6 c0             	movzbl %al,%eax
f013217d:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0132184:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0132187:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013218a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013218d:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f013218e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132191:	0f b6 c0             	movzbl %al,%eax
f0132194:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f013219b:	88 45 d3             	mov    %al,-0x2d(%ebp)
f013219e:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01321a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01321a4:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01321a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01321a8:	c1 e8 08             	shr    $0x8,%eax
f01321ab:	0f b6 c0             	movzbl %al,%eax
f01321ae:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01321b5:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01321b8:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01321bb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01321be:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01321bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01321c2:	c1 e8 10             	shr    $0x10,%eax
f01321c5:	0f b6 c0             	movzbl %al,%eax
f01321c8:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01321cf:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01321d2:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01321d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01321d8:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01321d9:	a1 ac 06 86 f0       	mov    0xf08606ac,%eax
f01321de:	83 e0 01             	and    $0x1,%eax
f01321e1:	c1 e0 04             	shl    $0x4,%eax
f01321e4:	88 c2                	mov    %al,%dl
f01321e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01321e9:	c1 e8 18             	shr    $0x18,%eax
f01321ec:	83 e0 0f             	and    $0xf,%eax
f01321ef:	09 d0                	or     %edx,%eax
f01321f1:	83 c8 e0             	or     $0xffffffe0,%eax
f01321f4:	0f b6 c0             	movzbl %al,%eax
f01321f7:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01321fe:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0132201:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0132204:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132207:	ee                   	out    %al,(%dx)
f0132208:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013220f:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0132213:	8a 45 d7             	mov    -0x29(%ebp),%al
f0132216:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0132219:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013221a:	eb 55                	jmp    f0132271 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f013221c:	83 ec 0c             	sub    $0xc,%esp
f013221f:	6a 01                	push   $0x1
f0132221:	e8 d2 fe ff ff       	call   f01320f8 <ide_wait_ready>
f0132226:	83 c4 10             	add    $0x10,%esp
f0132229:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013222c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132230:	79 05                	jns    f0132237 <ide_read+0xf4>
			return r;
f0132232:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132235:	eb 45                	jmp    f013227c <ide_read+0x139>
f0132237:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013223e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132241:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132244:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f013224b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013224e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132251:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132254:	89 cb                	mov    %ecx,%ebx
f0132256:	89 df                	mov    %ebx,%edi
f0132258:	89 c1                	mov    %eax,%ecx
f013225a:	fc                   	cld    
f013225b:	f2 6d                	repnz insl (%dx),%es:(%edi)
f013225d:	89 c8                	mov    %ecx,%eax
f013225f:	89 fb                	mov    %edi,%ebx
f0132261:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0132264:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0132267:	ff 4d 10             	decl   0x10(%ebp)
f013226a:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0132271:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0132275:	75 a5                	jne    f013221c <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0132277:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013227c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013227f:	5b                   	pop    %ebx
f0132280:	5f                   	pop    %edi
f0132281:	5d                   	pop    %ebp
f0132282:	c3                   	ret    

f0132283 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0132283:	55                   	push   %ebp
f0132284:	89 e5                	mov    %esp,%ebp
f0132286:	56                   	push   %esi
f0132287:	53                   	push   %ebx
f0132288:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f013228b:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132292:	76 16                	jbe    f01322aa <ide_write+0x27>
f0132294:	68 e3 d7 13 f0       	push   $0xf013d7e3
f0132299:	68 f0 d7 13 f0       	push   $0xf013d7f0
f013229e:	6a 3e                	push   $0x3e
f01322a0:	68 05 d8 13 f0       	push   $0xf013d805
f01322a5:	e8 5b df fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f01322aa:	83 ec 0c             	sub    $0xc,%esp
f01322ad:	6a 00                	push   $0x0
f01322af:	e8 44 fe ff ff       	call   f01320f8 <ide_wait_ready>
f01322b4:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f01322b7:	8b 45 10             	mov    0x10(%ebp),%eax
f01322ba:	0f b6 c0             	movzbl %al,%eax
f01322bd:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01322c4:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01322c7:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01322ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01322cd:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01322ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01322d1:	0f b6 c0             	movzbl %al,%eax
f01322d4:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01322db:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01322de:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01322e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01322e4:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01322e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01322e8:	c1 e8 08             	shr    $0x8,%eax
f01322eb:	0f b6 c0             	movzbl %al,%eax
f01322ee:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01322f5:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01322f8:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01322fb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01322fe:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01322ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0132302:	c1 e8 10             	shr    $0x10,%eax
f0132305:	0f b6 c0             	movzbl %al,%eax
f0132308:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f013230f:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0132312:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0132315:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132318:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0132319:	a1 ac 06 86 f0       	mov    0xf08606ac,%eax
f013231e:	83 e0 01             	and    $0x1,%eax
f0132321:	c1 e0 04             	shl    $0x4,%eax
f0132324:	88 c2                	mov    %al,%dl
f0132326:	8b 45 08             	mov    0x8(%ebp),%eax
f0132329:	c1 e8 18             	shr    $0x18,%eax
f013232c:	83 e0 0f             	and    $0xf,%eax
f013232f:	09 d0                	or     %edx,%eax
f0132331:	83 c8 e0             	or     $0xffffffe0,%eax
f0132334:	0f b6 c0             	movzbl %al,%eax
f0132337:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f013233e:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0132341:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0132344:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132347:	ee                   	out    %al,(%dx)
f0132348:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013234f:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0132353:	8a 45 d7             	mov    -0x29(%ebp),%al
f0132356:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0132359:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013235a:	eb 55                	jmp    f01323b1 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f013235c:	83 ec 0c             	sub    $0xc,%esp
f013235f:	6a 01                	push   $0x1
f0132361:	e8 92 fd ff ff       	call   f01320f8 <ide_wait_ready>
f0132366:	83 c4 10             	add    $0x10,%esp
f0132369:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013236c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132370:	79 05                	jns    f0132377 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0132372:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132375:	eb 45                	jmp    f01323bc <ide_write+0x139>
f0132377:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013237e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132381:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132384:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f013238b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013238e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132391:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132394:	89 cb                	mov    %ecx,%ebx
f0132396:	89 de                	mov    %ebx,%esi
f0132398:	89 c1                	mov    %eax,%ecx
f013239a:	fc                   	cld    
f013239b:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f013239d:	89 c8                	mov    %ecx,%eax
f013239f:	89 f3                	mov    %esi,%ebx
f01323a1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01323a4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01323a7:	ff 4d 10             	decl   0x10(%ebp)
f01323aa:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01323b1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01323b5:	75 a5                	jne    f013235c <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f01323b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01323bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01323bf:	5b                   	pop    %ebx
f01323c0:	5e                   	pop    %esi
f01323c1:	5d                   	pop    %ebp
f01323c2:	c3                   	ret    

f01323c3 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f01323c3:	55                   	push   %ebp
f01323c4:	89 e5                	mov    %esp,%ebp
f01323c6:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f01323c9:	83 ec 0c             	sub    $0xc,%esp
f01323cc:	68 10 d8 13 f0       	push   $0xf013d810
f01323d1:	e8 38 e9 fc ff       	call   f0100d0e <cprintf>
f01323d6:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f01323d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f01323e0:	83 ec 0c             	sub    $0xc,%esp
f01323e3:	68 3c d8 13 f0       	push   $0xf013d83c
f01323e8:	e8 21 e9 fc ff       	call   f0100d0e <cprintf>
f01323ed:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f01323f0:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01323f4:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f01323f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323fc:	eb 56                	jmp    f0132454 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01323fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132402:	74 1c                	je     f0132420 <print_mem_block_lists+0x5d>
f0132404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132407:	8b 50 08             	mov    0x8(%eax),%edx
f013240a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013240d:	8b 48 08             	mov    0x8(%eax),%ecx
f0132410:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132413:	8b 40 0c             	mov    0xc(%eax),%eax
f0132416:	01 c8                	add    %ecx,%eax
f0132418:	39 c2                	cmp    %eax,%edx
f013241a:	73 04                	jae    f0132420 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f013241c:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132420:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132423:	8b 50 08             	mov    0x8(%eax),%edx
f0132426:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132429:	8b 40 0c             	mov    0xc(%eax),%eax
f013242c:	01 c2                	add    %eax,%edx
f013242e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132431:	8b 40 08             	mov    0x8(%eax),%eax
f0132434:	83 ec 04             	sub    $0x4,%esp
f0132437:	52                   	push   %edx
f0132438:	50                   	push   %eax
f0132439:	68 51 d8 13 f0       	push   $0xf013d851
f013243e:	e8 cb e8 fc ff       	call   f0100d0e <cprintf>
f0132443:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0132446:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132449:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013244c:	a1 68 07 86 f0       	mov    0xf0860768,%eax
f0132451:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132454:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132458:	74 07                	je     f0132461 <print_mem_block_lists+0x9e>
f013245a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013245d:	8b 00                	mov    (%eax),%eax
f013245f:	eb 05                	jmp    f0132466 <print_mem_block_lists+0xa3>
f0132461:	b8 00 00 00 00       	mov    $0x0,%eax
f0132466:	a3 68 07 86 f0       	mov    %eax,0xf0860768
f013246b:	a1 68 07 86 f0       	mov    0xf0860768,%eax
f0132470:	85 c0                	test   %eax,%eax
f0132472:	75 8a                	jne    f01323fe <print_mem_block_lists+0x3b>
f0132474:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132478:	75 84                	jne    f01323fe <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f013247a:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013247e:	75 10                	jne    f0132490 <print_mem_block_lists+0xcd>
f0132480:	83 ec 0c             	sub    $0xc,%esp
f0132483:	68 60 d8 13 f0       	push   $0xf013d860
f0132488:	e8 81 e8 fc ff       	call   f0100d0e <cprintf>
f013248d:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0132490:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0132497:	83 ec 0c             	sub    $0xc,%esp
f013249a:	68 84 d8 13 f0       	push   $0xf013d884
f013249f:	e8 6a e8 fc ff       	call   f0100d0e <cprintf>
f01324a4:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f01324a7:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01324ab:	a1 c4 06 86 f0       	mov    0xf08606c4,%eax
f01324b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01324b3:	eb 56                	jmp    f013250b <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01324b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01324b9:	74 1c                	je     f01324d7 <print_mem_block_lists+0x114>
f01324bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324be:	8b 50 08             	mov    0x8(%eax),%edx
f01324c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324c4:	8b 48 08             	mov    0x8(%eax),%ecx
f01324c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324ca:	8b 40 0c             	mov    0xc(%eax),%eax
f01324cd:	01 c8                	add    %ecx,%eax
f01324cf:	39 c2                	cmp    %eax,%edx
f01324d1:	73 04                	jae    f01324d7 <print_mem_block_lists+0x114>
			sorted = 0 ;
f01324d3:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01324d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324da:	8b 50 08             	mov    0x8(%eax),%edx
f01324dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324e0:	8b 40 0c             	mov    0xc(%eax),%eax
f01324e3:	01 c2                	add    %eax,%edx
f01324e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324e8:	8b 40 08             	mov    0x8(%eax),%eax
f01324eb:	83 ec 04             	sub    $0x4,%esp
f01324ee:	52                   	push   %edx
f01324ef:	50                   	push   %eax
f01324f0:	68 51 d8 13 f0       	push   $0xf013d851
f01324f5:	e8 14 e8 fc ff       	call   f0100d0e <cprintf>
f01324fa:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01324fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132500:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0132503:	a1 cc 06 86 f0       	mov    0xf08606cc,%eax
f0132508:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013250b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013250f:	74 07                	je     f0132518 <print_mem_block_lists+0x155>
f0132511:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132514:	8b 00                	mov    (%eax),%eax
f0132516:	eb 05                	jmp    f013251d <print_mem_block_lists+0x15a>
f0132518:	b8 00 00 00 00       	mov    $0x0,%eax
f013251d:	a3 cc 06 86 f0       	mov    %eax,0xf08606cc
f0132522:	a1 cc 06 86 f0       	mov    0xf08606cc,%eax
f0132527:	85 c0                	test   %eax,%eax
f0132529:	75 8a                	jne    f01324b5 <print_mem_block_lists+0xf2>
f013252b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013252f:	75 84                	jne    f01324b5 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0132531:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0132535:	75 10                	jne    f0132547 <print_mem_block_lists+0x184>
f0132537:	83 ec 0c             	sub    $0xc,%esp
f013253a:	68 9c d8 13 f0       	push   $0xf013d89c
f013253f:	e8 ca e7 fc ff       	call   f0100d0e <cprintf>
f0132544:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0132547:	83 ec 0c             	sub    $0xc,%esp
f013254a:	68 10 d8 13 f0       	push   $0xf013d810
f013254f:	e8 ba e7 fc ff       	call   f0100d0e <cprintf>
f0132554:	83 c4 10             	add    $0x10,%esp

}
f0132557:	90                   	nop
f0132558:	c9                   	leave  
f0132559:	c3                   	ret    

f013255a <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f013255a:	55                   	push   %ebp
f013255b:	89 e5                	mov    %esp,%ebp
f013255d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code

	LIST_INIT(&AvailableMemBlocksList);
f0132560:	c7 05 94 07 86 f0 00 	movl   $0x0,0xf0860794
f0132567:	00 00 00 
f013256a:	c7 05 98 07 86 f0 00 	movl   $0x0,0xf0860798
f0132571:	00 00 00 
f0132574:	c7 05 a0 07 86 f0 00 	movl   $0x0,0xf08607a0
f013257b:	00 00 00 

		struct MemBlock *tmp=MemBlockNodes;
f013257e:	a1 d4 06 86 f0       	mov    0xf08606d4,%eax
f0132583:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (int i=0;i<numOfBlocks;i++)
f0132586:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013258d:	e9 9e 00 00 00       	jmp    f0132630 <initialize_MemBlocksList+0xd6>
		{

			LIST_INSERT_HEAD(&AvailableMemBlocksList,&MemBlockNodes[i]);
f0132592:	a1 d4 06 86 f0       	mov    0xf08606d4,%eax
f0132597:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013259a:	c1 e2 04             	shl    $0x4,%edx
f013259d:	01 d0                	add    %edx,%eax
f013259f:	85 c0                	test   %eax,%eax
f01325a1:	75 14                	jne    f01325b7 <initialize_MemBlocksList+0x5d>
f01325a3:	83 ec 04             	sub    $0x4,%esp
f01325a6:	68 c4 d8 13 f0       	push   $0xf013d8c4
f01325ab:	6a 48                	push   $0x48
f01325ad:	68 e7 d8 13 f0       	push   $0xf013d8e7
f01325b2:	e8 4e dc fc ff       	call   f0100205 <_panic>
f01325b7:	a1 d4 06 86 f0       	mov    0xf08606d4,%eax
f01325bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325bf:	c1 e2 04             	shl    $0x4,%edx
f01325c2:	01 d0                	add    %edx,%eax
f01325c4:	8b 15 94 07 86 f0    	mov    0xf0860794,%edx
f01325ca:	89 10                	mov    %edx,(%eax)
f01325cc:	8b 00                	mov    (%eax),%eax
f01325ce:	85 c0                	test   %eax,%eax
f01325d0:	74 18                	je     f01325ea <initialize_MemBlocksList+0x90>
f01325d2:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f01325d7:	8b 15 d4 06 86 f0    	mov    0xf08606d4,%edx
f01325dd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01325e0:	c1 e1 04             	shl    $0x4,%ecx
f01325e3:	01 ca                	add    %ecx,%edx
f01325e5:	89 50 04             	mov    %edx,0x4(%eax)
f01325e8:	eb 12                	jmp    f01325fc <initialize_MemBlocksList+0xa2>
f01325ea:	a1 d4 06 86 f0       	mov    0xf08606d4,%eax
f01325ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325f2:	c1 e2 04             	shl    $0x4,%edx
f01325f5:	01 d0                	add    %edx,%eax
f01325f7:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f01325fc:	a1 d4 06 86 f0       	mov    0xf08606d4,%eax
f0132601:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132604:	c1 e2 04             	shl    $0x4,%edx
f0132607:	01 d0                	add    %edx,%eax
f0132609:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f013260e:	a1 d4 06 86 f0       	mov    0xf08606d4,%eax
f0132613:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132616:	c1 e2 04             	shl    $0x4,%edx
f0132619:	01 d0                	add    %edx,%eax
f013261b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132622:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0132627:	40                   	inc    %eax
f0132628:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
	// Write your code here, remove the panic and write your code

	LIST_INIT(&AvailableMemBlocksList);

		struct MemBlock *tmp=MemBlockNodes;
		for (int i=0;i<numOfBlocks;i++)
f013262d:	ff 45 f4             	incl   -0xc(%ebp)
f0132630:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132633:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132636:	0f 82 56 ff ff ff    	jb     f0132592 <initialize_MemBlocksList+0x38>

			LIST_INSERT_HEAD(&AvailableMemBlocksList,&MemBlockNodes[i]);
		}


}
f013263c:	90                   	nop
f013263d:	c9                   	leave  
f013263e:	c3                   	ret    

f013263f <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013263f:	55                   	push   %ebp
f0132640:	89 e5                	mov    %esp,%ebp
f0132642:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code


	struct MemBlock *tmp=blockList->lh_first;
f0132645:	8b 45 08             	mov    0x8(%ebp),%eax
f0132648:	8b 00                	mov    (%eax),%eax
f013264a:	89 45 fc             	mov    %eax,-0x4(%ebp)

	while(tmp!=NULL)
f013264d:	eb 18                	jmp    f0132667 <find_block+0x28>
		{
			if(tmp->sva==va)
f013264f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132652:	8b 40 08             	mov    0x8(%eax),%eax
f0132655:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0132658:	75 05                	jne    f013265f <find_block+0x20>
			{
				return tmp;
f013265a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013265d:	eb 11                	jmp    f0132670 <find_block+0x31>

			}
		tmp=tmp->prev_next_info.le_next;
f013265f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132662:	8b 00                	mov    (%eax),%eax
f0132664:	89 45 fc             	mov    %eax,-0x4(%ebp)
	// Write your code here, remove the panic and write your code


	struct MemBlock *tmp=blockList->lh_first;

	while(tmp!=NULL)
f0132667:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013266b:	75 e2                	jne    f013264f <find_block+0x10>
				return tmp;

			}
		tmp=tmp->prev_next_info.le_next;
		}
		return tmp;
f013266d:	8b 45 fc             	mov    -0x4(%ebp),%eax
//
//		}
//
//		}
//			return tmp;
}
f0132670:	c9                   	leave  
f0132671:	c3                   	ret    

f0132672 <insert_sorted_allocList>:
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================


void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0132672:	55                   	push   %ebp
f0132673:	89 e5                	mov    %esp,%ebp
f0132675:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code

	if(AllocMemBlocksList.lh_first==NULL)
f0132678:	a1 c4 06 86 f0       	mov    0xf08606c4,%eax
f013267d:	85 c0                	test   %eax,%eax
f013267f:	0f 85 83 00 00 00    	jne    f0132708 <insert_sorted_allocList+0x96>
	{
		LIST_INIT(&AllocMemBlocksList);
f0132685:	c7 05 c4 06 86 f0 00 	movl   $0x0,0xf08606c4
f013268c:	00 00 00 
f013268f:	c7 05 c8 06 86 f0 00 	movl   $0x0,0xf08606c8
f0132696:	00 00 00 
f0132699:	c7 05 d0 06 86 f0 00 	movl   $0x0,0xf08606d0
f01326a0:	00 00 00 
		LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
f01326a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01326a7:	75 14                	jne    f01326bd <insert_sorted_allocList+0x4b>
f01326a9:	83 ec 04             	sub    $0x4,%esp
f01326ac:	68 c4 d8 13 f0       	push   $0xf013d8c4
f01326b1:	6a 7f                	push   $0x7f
f01326b3:	68 e7 d8 13 f0       	push   $0xf013d8e7
f01326b8:	e8 48 db fc ff       	call   f0100205 <_panic>
f01326bd:	8b 15 c4 06 86 f0    	mov    0xf08606c4,%edx
f01326c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01326c6:	89 10                	mov    %edx,(%eax)
f01326c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01326cb:	8b 00                	mov    (%eax),%eax
f01326cd:	85 c0                	test   %eax,%eax
f01326cf:	74 0d                	je     f01326de <insert_sorted_allocList+0x6c>
f01326d1:	a1 c4 06 86 f0       	mov    0xf08606c4,%eax
f01326d6:	8b 55 08             	mov    0x8(%ebp),%edx
f01326d9:	89 50 04             	mov    %edx,0x4(%eax)
f01326dc:	eb 08                	jmp    f01326e6 <insert_sorted_allocList+0x74>
f01326de:	8b 45 08             	mov    0x8(%ebp),%eax
f01326e1:	a3 c8 06 86 f0       	mov    %eax,0xf08606c8
f01326e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01326e9:	a3 c4 06 86 f0       	mov    %eax,0xf08606c4
f01326ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01326f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01326f8:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f01326fd:	40                   	inc    %eax
f01326fe:	a3 d0 06 86 f0       	mov    %eax,0xf08606d0
			}
			tmp=tmp->prev_next_info.le_next;
		}

	}
}
f0132703:	e9 16 01 00 00       	jmp    f013281e <insert_sorted_allocList+0x1ac>
		LIST_INIT(&AllocMemBlocksList);
		LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
	}


	else if(blockToInsert->sva>AllocMemBlocksList.lh_last->sva)
f0132708:	8b 45 08             	mov    0x8(%ebp),%eax
f013270b:	8b 50 08             	mov    0x8(%eax),%edx
f013270e:	a1 c8 06 86 f0       	mov    0xf08606c8,%eax
f0132713:	8b 40 08             	mov    0x8(%eax),%eax
f0132716:	39 c2                	cmp    %eax,%edx
f0132718:	76 68                	jbe    f0132782 <insert_sorted_allocList+0x110>
	{
		LIST_INSERT_TAIL(&AllocMemBlocksList,blockToInsert);
f013271a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013271e:	75 17                	jne    f0132737 <insert_sorted_allocList+0xc5>
f0132720:	83 ec 04             	sub    $0x4,%esp
f0132723:	68 00 d9 13 f0       	push   $0xf013d900
f0132728:	68 85 00 00 00       	push   $0x85
f013272d:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132732:	e8 ce da fc ff       	call   f0100205 <_panic>
f0132737:	8b 15 c8 06 86 f0    	mov    0xf08606c8,%edx
f013273d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132740:	89 50 04             	mov    %edx,0x4(%eax)
f0132743:	8b 45 08             	mov    0x8(%ebp),%eax
f0132746:	8b 40 04             	mov    0x4(%eax),%eax
f0132749:	85 c0                	test   %eax,%eax
f013274b:	74 0c                	je     f0132759 <insert_sorted_allocList+0xe7>
f013274d:	a1 c8 06 86 f0       	mov    0xf08606c8,%eax
f0132752:	8b 55 08             	mov    0x8(%ebp),%edx
f0132755:	89 10                	mov    %edx,(%eax)
f0132757:	eb 08                	jmp    f0132761 <insert_sorted_allocList+0xef>
f0132759:	8b 45 08             	mov    0x8(%ebp),%eax
f013275c:	a3 c4 06 86 f0       	mov    %eax,0xf08606c4
f0132761:	8b 45 08             	mov    0x8(%ebp),%eax
f0132764:	a3 c8 06 86 f0       	mov    %eax,0xf08606c8
f0132769:	8b 45 08             	mov    0x8(%ebp),%eax
f013276c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132772:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0132777:	40                   	inc    %eax
f0132778:	a3 d0 06 86 f0       	mov    %eax,0xf08606d0
			}
			tmp=tmp->prev_next_info.le_next;
		}

	}
}
f013277d:	e9 9c 00 00 00       	jmp    f013281e <insert_sorted_allocList+0x1ac>
		LIST_INSERT_TAIL(&AllocMemBlocksList,blockToInsert);
	}

	else
	{
		struct MemBlock *tmp=AllocMemBlocksList.lh_first;
f0132782:	a1 c4 06 86 f0       	mov    0xf08606c4,%eax
f0132787:	89 45 f4             	mov    %eax,-0xc(%ebp)
		while(tmp!=NULL)
f013278a:	e9 85 00 00 00       	jmp    f0132814 <insert_sorted_allocList+0x1a2>
		{
			if(blockToInsert->sva<tmp->sva)
f013278f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132792:	8b 50 08             	mov    0x8(%eax),%edx
f0132795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132798:	8b 40 08             	mov    0x8(%eax),%eax
f013279b:	39 c2                	cmp    %eax,%edx
f013279d:	73 6d                	jae    f013280c <insert_sorted_allocList+0x19a>
			{

				LIST_INSERT_BEFORE(&AllocMemBlocksList,tmp,blockToInsert);
f013279f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327a3:	74 06                	je     f01327ab <insert_sorted_allocList+0x139>
f01327a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01327a9:	75 17                	jne    f01327c2 <insert_sorted_allocList+0x150>
f01327ab:	83 ec 04             	sub    $0x4,%esp
f01327ae:	68 24 d9 13 f0       	push   $0xf013d924
f01327b3:	68 90 00 00 00       	push   $0x90
f01327b8:	68 e7 d8 13 f0       	push   $0xf013d8e7
f01327bd:	e8 43 da fc ff       	call   f0100205 <_panic>
f01327c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327c5:	8b 50 04             	mov    0x4(%eax),%edx
f01327c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01327cb:	89 50 04             	mov    %edx,0x4(%eax)
f01327ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01327d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01327d4:	89 10                	mov    %edx,(%eax)
f01327d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327d9:	8b 40 04             	mov    0x4(%eax),%eax
f01327dc:	85 c0                	test   %eax,%eax
f01327de:	74 0d                	je     f01327ed <insert_sorted_allocList+0x17b>
f01327e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327e3:	8b 40 04             	mov    0x4(%eax),%eax
f01327e6:	8b 55 08             	mov    0x8(%ebp),%edx
f01327e9:	89 10                	mov    %edx,(%eax)
f01327eb:	eb 08                	jmp    f01327f5 <insert_sorted_allocList+0x183>
f01327ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01327f0:	a3 c4 06 86 f0       	mov    %eax,0xf08606c4
f01327f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01327fb:	89 50 04             	mov    %edx,0x4(%eax)
f01327fe:	a1 d0 06 86 f0       	mov    0xf08606d0,%eax
f0132803:	40                   	inc    %eax
f0132804:	a3 d0 06 86 f0       	mov    %eax,0xf08606d0
				break;
f0132809:	90                   	nop
			}
			tmp=tmp->prev_next_info.le_next;
		}

	}
}
f013280a:	eb 12                	jmp    f013281e <insert_sorted_allocList+0x1ac>
			{

				LIST_INSERT_BEFORE(&AllocMemBlocksList,tmp,blockToInsert);
				break;
			}
			tmp=tmp->prev_next_info.le_next;
f013280c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013280f:	8b 00                	mov    (%eax),%eax
f0132811:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	else
	{
		struct MemBlock *tmp=AllocMemBlocksList.lh_first;
		while(tmp!=NULL)
f0132814:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132818:	0f 85 71 ff ff ff    	jne    f013278f <insert_sorted_allocList+0x11d>
			}
			tmp=tmp->prev_next_info.le_next;
		}

	}
}
f013281e:	90                   	nop
f013281f:	c9                   	leave  
f0132820:	c3                   	ret    

f0132821 <alloc_block_FF>:
//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================

struct MemBlock *alloc_block_FF(uint32 size)
{
f0132821:	55                   	push   %ebp
f0132822:	89 e5                	mov    %esp,%ebp
f0132824:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *tmp=FreeMemBlocksList.lh_first;
f0132827:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f013282c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	while(tmp!=NULL)
f013282f:	e9 76 01 00 00       	jmp    f01329aa <alloc_block_FF+0x189>
	{
		if(size==(tmp->size))
f0132834:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132837:	8b 40 0c             	mov    0xc(%eax),%eax
f013283a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013283d:	0f 85 8a 00 00 00    	jne    f01328cd <alloc_block_FF+0xac>
		{

			LIST_REMOVE(&FreeMemBlocksList,tmp);
f0132843:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132847:	75 17                	jne    f0132860 <alloc_block_FF+0x3f>
f0132849:	83 ec 04             	sub    $0x4,%esp
f013284c:	68 59 d9 13 f0       	push   $0xf013d959
f0132851:	68 a8 00 00 00       	push   $0xa8
f0132856:	68 e7 d8 13 f0       	push   $0xf013d8e7
f013285b:	e8 a5 d9 fc ff       	call   f0100205 <_panic>
f0132860:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132863:	8b 00                	mov    (%eax),%eax
f0132865:	85 c0                	test   %eax,%eax
f0132867:	74 10                	je     f0132879 <alloc_block_FF+0x58>
f0132869:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013286c:	8b 00                	mov    (%eax),%eax
f013286e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132871:	8b 52 04             	mov    0x4(%edx),%edx
f0132874:	89 50 04             	mov    %edx,0x4(%eax)
f0132877:	eb 0b                	jmp    f0132884 <alloc_block_FF+0x63>
f0132879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013287c:	8b 40 04             	mov    0x4(%eax),%eax
f013287f:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f0132884:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132887:	8b 40 04             	mov    0x4(%eax),%eax
f013288a:	85 c0                	test   %eax,%eax
f013288c:	74 0f                	je     f013289d <alloc_block_FF+0x7c>
f013288e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132891:	8b 40 04             	mov    0x4(%eax),%eax
f0132894:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132897:	8b 12                	mov    (%edx),%edx
f0132899:	89 10                	mov    %edx,(%eax)
f013289b:	eb 0a                	jmp    f01328a7 <alloc_block_FF+0x86>
f013289d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328a0:	8b 00                	mov    (%eax),%eax
f01328a2:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f01328a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01328b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328b3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01328ba:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f01328bf:	48                   	dec    %eax
f01328c0:	a3 6c 07 86 f0       	mov    %eax,0xf086076c

			return tmp;
f01328c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328c8:	e9 ea 00 00 00       	jmp    f01329b7 <alloc_block_FF+0x196>

		}
		else if(size<tmp->size)
f01328cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328d0:	8b 40 0c             	mov    0xc(%eax),%eax
f01328d3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01328d6:	0f 86 c6 00 00 00    	jbe    f01329a2 <alloc_block_FF+0x181>
		{

			 struct MemBlock *newBlock=LIST_FIRST(&(AvailableMemBlocksList));
f01328dc:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f01328e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
			 newBlock->size=size;
f01328e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328e7:	8b 55 08             	mov    0x8(%ebp),%edx
f01328ea:	89 50 0c             	mov    %edx,0xc(%eax)
			 newBlock->sva=tmp->sva;
f01328ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328f0:	8b 50 08             	mov    0x8(%eax),%edx
f01328f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328f6:	89 50 08             	mov    %edx,0x8(%eax)
			 tmp->size=tmp->size-size;
f01328f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01328ff:	2b 45 08             	sub    0x8(%ebp),%eax
f0132902:	89 c2                	mov    %eax,%edx
f0132904:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132907:	89 50 0c             	mov    %edx,0xc(%eax)
			 tmp->sva=tmp->sva+size;
f013290a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013290d:	8b 50 08             	mov    0x8(%eax),%edx
f0132910:	8b 45 08             	mov    0x8(%ebp),%eax
f0132913:	01 c2                	add    %eax,%edx
f0132915:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132918:	89 50 08             	mov    %edx,0x8(%eax)

			 LIST_REMOVE(&AvailableMemBlocksList,newBlock);
f013291b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013291f:	75 17                	jne    f0132938 <alloc_block_FF+0x117>
f0132921:	83 ec 04             	sub    $0x4,%esp
f0132924:	68 59 d9 13 f0       	push   $0xf013d959
f0132929:	68 b6 00 00 00       	push   $0xb6
f013292e:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132933:	e8 cd d8 fc ff       	call   f0100205 <_panic>
f0132938:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013293b:	8b 00                	mov    (%eax),%eax
f013293d:	85 c0                	test   %eax,%eax
f013293f:	74 10                	je     f0132951 <alloc_block_FF+0x130>
f0132941:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132944:	8b 00                	mov    (%eax),%eax
f0132946:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132949:	8b 52 04             	mov    0x4(%edx),%edx
f013294c:	89 50 04             	mov    %edx,0x4(%eax)
f013294f:	eb 0b                	jmp    f013295c <alloc_block_FF+0x13b>
f0132951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132954:	8b 40 04             	mov    0x4(%eax),%eax
f0132957:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f013295c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013295f:	8b 40 04             	mov    0x4(%eax),%eax
f0132962:	85 c0                	test   %eax,%eax
f0132964:	74 0f                	je     f0132975 <alloc_block_FF+0x154>
f0132966:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132969:	8b 40 04             	mov    0x4(%eax),%eax
f013296c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013296f:	8b 12                	mov    (%edx),%edx
f0132971:	89 10                	mov    %edx,(%eax)
f0132973:	eb 0a                	jmp    f013297f <alloc_block_FF+0x15e>
f0132975:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132978:	8b 00                	mov    (%eax),%eax
f013297a:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f013297f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132982:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132988:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013298b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132992:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0132997:	48                   	dec    %eax
f0132998:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
			 return newBlock;
f013299d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01329a0:	eb 15                	jmp    f01329b7 <alloc_block_FF+0x196>

		}
		tmp=tmp->prev_next_info.le_next;
f01329a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329a5:	8b 00                	mov    (%eax),%eax
f01329a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *tmp=FreeMemBlocksList.lh_first;

	while(tmp!=NULL)
f01329aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329ae:	0f 85 80 fe ff ff    	jne    f0132834 <alloc_block_FF+0x13>
			 return newBlock;

		}
		tmp=tmp->prev_next_info.le_next;
	}
	return tmp;
f01329b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01329b7:	c9                   	leave  
f01329b8:	c3                   	ret    

f01329b9 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f01329b9:	55                   	push   %ebp
f01329ba:	89 e5                	mov    %esp,%ebp
f01329bc:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code

	struct MemBlock *tmp=FreeMemBlocksList.lh_first;
f01329bf:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f01329c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 newSize=UINT_MAX;
f01329c7:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)


		while(tmp!=NULL)
f01329ce:	e9 c0 00 00 00       	jmp    f0132a93 <alloc_block_BF+0xda>
		{
			if(size==(tmp->size))
f01329d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329d6:	8b 40 0c             	mov    0xc(%eax),%eax
f01329d9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329dc:	0f 85 8a 00 00 00    	jne    f0132a6c <alloc_block_BF+0xb3>
			{
				LIST_REMOVE(&FreeMemBlocksList,tmp);
f01329e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329e6:	75 17                	jne    f01329ff <alloc_block_BF+0x46>
f01329e8:	83 ec 04             	sub    $0x4,%esp
f01329eb:	68 59 d9 13 f0       	push   $0xf013d959
f01329f0:	68 cf 00 00 00       	push   $0xcf
f01329f5:	68 e7 d8 13 f0       	push   $0xf013d8e7
f01329fa:	e8 06 d8 fc ff       	call   f0100205 <_panic>
f01329ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a02:	8b 00                	mov    (%eax),%eax
f0132a04:	85 c0                	test   %eax,%eax
f0132a06:	74 10                	je     f0132a18 <alloc_block_BF+0x5f>
f0132a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a0b:	8b 00                	mov    (%eax),%eax
f0132a0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a10:	8b 52 04             	mov    0x4(%edx),%edx
f0132a13:	89 50 04             	mov    %edx,0x4(%eax)
f0132a16:	eb 0b                	jmp    f0132a23 <alloc_block_BF+0x6a>
f0132a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a1b:	8b 40 04             	mov    0x4(%eax),%eax
f0132a1e:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f0132a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a26:	8b 40 04             	mov    0x4(%eax),%eax
f0132a29:	85 c0                	test   %eax,%eax
f0132a2b:	74 0f                	je     f0132a3c <alloc_block_BF+0x83>
f0132a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a30:	8b 40 04             	mov    0x4(%eax),%eax
f0132a33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a36:	8b 12                	mov    (%edx),%edx
f0132a38:	89 10                	mov    %edx,(%eax)
f0132a3a:	eb 0a                	jmp    f0132a46 <alloc_block_BF+0x8d>
f0132a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a3f:	8b 00                	mov    (%eax),%eax
f0132a41:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f0132a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a49:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a59:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0132a5e:	48                   	dec    %eax
f0132a5f:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
				return tmp;
f0132a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a67:	e9 2a 01 00 00       	jmp    f0132b96 <alloc_block_BF+0x1dd>

			}
			else if (tmp->size<newSize&&tmp->size>size)
f0132a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a6f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a72:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132a75:	73 14                	jae    f0132a8b <alloc_block_BF+0xd2>
f0132a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a7a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a7d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132a80:	76 09                	jbe    f0132a8b <alloc_block_BF+0xd2>
			{
				newSize=tmp->size;
f0132a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a85:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a88:	89 45 f0             	mov    %eax,-0x10(%ebp)


			}
			tmp=tmp->prev_next_info.le_next;
f0132a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a8e:	8b 00                	mov    (%eax),%eax
f0132a90:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct MemBlock *tmp=FreeMemBlocksList.lh_first;
	uint32 newSize=UINT_MAX;


		while(tmp!=NULL)
f0132a93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132a97:	0f 85 36 ff ff ff    	jne    f01329d3 <alloc_block_BF+0x1a>
		}//tmp=NULL




			tmp =FreeMemBlocksList.lh_first;
f0132a9d:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132aa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
			while(tmp!=NULL)
f0132aa5:	e9 dd 00 00 00       	jmp    f0132b87 <alloc_block_BF+0x1ce>
			{
				if(tmp->size==newSize)
f0132aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aad:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ab0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132ab3:	0f 85 c6 00 00 00    	jne    f0132b7f <alloc_block_BF+0x1c6>
					{
					 struct MemBlock *newBlock=LIST_FIRST(&(AvailableMemBlocksList));
f0132ab9:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f0132abe:	89 45 ec             	mov    %eax,-0x14(%ebp)

								 newBlock->sva=tmp->sva;     //newBlock.sva=tmp.sva
f0132ac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ac4:	8b 50 08             	mov    0x8(%eax),%edx
f0132ac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132aca:	89 50 08             	mov    %edx,0x8(%eax)
								 newBlock->size=size;
f0132acd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ad0:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ad3:	89 50 0c             	mov    %edx,0xc(%eax)

											 tmp->sva+=size;
f0132ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ad9:	8b 50 08             	mov    0x8(%eax),%edx
f0132adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132adf:	01 c2                	add    %eax,%edx
f0132ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ae4:	89 50 08             	mov    %edx,0x8(%eax)
											 tmp->size-=size;
f0132ae7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132aea:	8b 40 0c             	mov    0xc(%eax),%eax
f0132aed:	2b 45 08             	sub    0x8(%ebp),%eax
f0132af0:	89 c2                	mov    %eax,%edx
f0132af2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132af5:	89 50 0c             	mov    %edx,0xc(%eax)
											 LIST_REMOVE(&AvailableMemBlocksList,newBlock);
f0132af8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132afc:	75 17                	jne    f0132b15 <alloc_block_BF+0x15c>
f0132afe:	83 ec 04             	sub    $0x4,%esp
f0132b01:	68 59 d9 13 f0       	push   $0xf013d959
f0132b06:	68 eb 00 00 00       	push   $0xeb
f0132b0b:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132b10:	e8 f0 d6 fc ff       	call   f0100205 <_panic>
f0132b15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b18:	8b 00                	mov    (%eax),%eax
f0132b1a:	85 c0                	test   %eax,%eax
f0132b1c:	74 10                	je     f0132b2e <alloc_block_BF+0x175>
f0132b1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b21:	8b 00                	mov    (%eax),%eax
f0132b23:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132b26:	8b 52 04             	mov    0x4(%edx),%edx
f0132b29:	89 50 04             	mov    %edx,0x4(%eax)
f0132b2c:	eb 0b                	jmp    f0132b39 <alloc_block_BF+0x180>
f0132b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b31:	8b 40 04             	mov    0x4(%eax),%eax
f0132b34:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f0132b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b3c:	8b 40 04             	mov    0x4(%eax),%eax
f0132b3f:	85 c0                	test   %eax,%eax
f0132b41:	74 0f                	je     f0132b52 <alloc_block_BF+0x199>
f0132b43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b46:	8b 40 04             	mov    0x4(%eax),%eax
f0132b49:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132b4c:	8b 12                	mov    (%edx),%edx
f0132b4e:	89 10                	mov    %edx,(%eax)
f0132b50:	eb 0a                	jmp    f0132b5c <alloc_block_BF+0x1a3>
f0132b52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b55:	8b 00                	mov    (%eax),%eax
f0132b57:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f0132b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b68:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b6f:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0132b74:	48                   	dec    %eax
f0132b75:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
											 return newBlock;
f0132b7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b7d:	eb 17                	jmp    f0132b96 <alloc_block_BF+0x1dd>

					}
				tmp=tmp->prev_next_info.le_next;
f0132b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b82:	8b 00                	mov    (%eax),%eax
f0132b84:	89 45 f4             	mov    %eax,-0xc(%ebp)




			tmp =FreeMemBlocksList.lh_first;
			while(tmp!=NULL)
f0132b87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b8b:	0f 85 19 ff ff ff    	jne    f0132aaa <alloc_block_BF+0xf1>
			//tmp ->  block newSize,Sva




		return NULL; //return NULL
f0132b91:	b8 00 00 00 00       	mov    $0x0,%eax
	}
f0132b96:	c9                   	leave  
f0132b97:	c3                   	ret    

f0132b98 <alloc_block_NF>:
//=========================================



struct MemBlock *alloc_block_NF(uint32 size)
{
f0132b98:	55                   	push   %ebp
f0132b99:	89 e5                	mov    %esp,%ebp
f0132b9b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your code
	struct MemBlock *tmp1;
	uint32 currentSva;
	if(AllocMemBlocksList.lh_first==NULL)
f0132b9e:	a1 c4 06 86 f0       	mov    0xf08606c4,%eax
f0132ba3:	85 c0                	test   %eax,%eax
f0132ba5:	75 19                	jne    f0132bc0 <alloc_block_NF+0x28>
	{
		tmp1=alloc_block_FF(size);
f0132ba7:	83 ec 0c             	sub    $0xc,%esp
f0132baa:	ff 75 08             	pushl  0x8(%ebp)
f0132bad:	e8 6f fc ff ff       	call   f0132821 <alloc_block_FF>
f0132bb2:	83 c4 10             	add    $0x10,%esp
f0132bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return tmp1;
f0132bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bbb:	e9 e9 01 00 00       	jmp    f0132da9 <alloc_block_NF+0x211>
	}

			else
			{
            currentSva=AllocMemBlocksList.lh_last->sva;
f0132bc0:	a1 c8 06 86 f0       	mov    0xf08606c8,%eax
f0132bc5:	8b 40 08             	mov    0x8(%eax),%eax
f0132bc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
			tmp1=find_block(&FreeMemBlocksList,AllocMemBlocksList.lh_last->size+AllocMemBlocksList.lh_last->sva);
f0132bcb:	a1 c8 06 86 f0       	mov    0xf08606c8,%eax
f0132bd0:	8b 50 0c             	mov    0xc(%eax),%edx
f0132bd3:	a1 c8 06 86 f0       	mov    0xf08606c8,%eax
f0132bd8:	8b 40 08             	mov    0x8(%eax),%eax
f0132bdb:	01 d0                	add    %edx,%eax
f0132bdd:	83 ec 08             	sub    $0x8,%esp
f0132be0:	50                   	push   %eax
f0132be1:	68 60 07 86 f0       	push   $0xf0860760
f0132be6:	e8 54 fa ff ff       	call   f013263f <find_block>
f0132beb:	83 c4 10             	add    $0x10,%esp
f0132bee:	89 45 f4             	mov    %eax,-0xc(%ebp)


do
	{

		if(size==(tmp1->size))
f0132bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bf4:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bf7:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132bfa:	0f 85 9b 00 00 00    	jne    f0132c9b <alloc_block_NF+0x103>
				{
			currentSva=tmp1->size+tmp1->sva;
f0132c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c03:	8b 50 0c             	mov    0xc(%eax),%edx
f0132c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c09:	8b 40 08             	mov    0x8(%eax),%eax
f0132c0c:	01 d0                	add    %edx,%eax
f0132c0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
					LIST_REMOVE(&FreeMemBlocksList,tmp1);
f0132c11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c15:	75 17                	jne    f0132c2e <alloc_block_NF+0x96>
f0132c17:	83 ec 04             	sub    $0x4,%esp
f0132c1a:	68 59 d9 13 f0       	push   $0xf013d959
f0132c1f:	68 1a 01 00 00       	push   $0x11a
f0132c24:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132c29:	e8 d7 d5 fc ff       	call   f0100205 <_panic>
f0132c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c31:	8b 00                	mov    (%eax),%eax
f0132c33:	85 c0                	test   %eax,%eax
f0132c35:	74 10                	je     f0132c47 <alloc_block_NF+0xaf>
f0132c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c3a:	8b 00                	mov    (%eax),%eax
f0132c3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c3f:	8b 52 04             	mov    0x4(%edx),%edx
f0132c42:	89 50 04             	mov    %edx,0x4(%eax)
f0132c45:	eb 0b                	jmp    f0132c52 <alloc_block_NF+0xba>
f0132c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c4a:	8b 40 04             	mov    0x4(%eax),%eax
f0132c4d:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f0132c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c55:	8b 40 04             	mov    0x4(%eax),%eax
f0132c58:	85 c0                	test   %eax,%eax
f0132c5a:	74 0f                	je     f0132c6b <alloc_block_NF+0xd3>
f0132c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c5f:	8b 40 04             	mov    0x4(%eax),%eax
f0132c62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c65:	8b 12                	mov    (%edx),%edx
f0132c67:	89 10                	mov    %edx,(%eax)
f0132c69:	eb 0a                	jmp    f0132c75 <alloc_block_NF+0xdd>
f0132c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c6e:	8b 00                	mov    (%eax),%eax
f0132c70:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f0132c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c81:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c88:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0132c8d:	48                   	dec    %eax
f0132c8e:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
					return tmp1;
f0132c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c96:	e9 0e 01 00 00       	jmp    f0132da9 <alloc_block_NF+0x211>

				}
				else if(size<tmp1->size)
f0132c9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c9e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ca1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132ca4:	0f 86 cf 00 00 00    	jbe    f0132d79 <alloc_block_NF+0x1e1>
				{

					 struct MemBlock *newBlock=LIST_FIRST(&(AvailableMemBlocksList));
f0132caa:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f0132caf:	89 45 ec             	mov    %eax,-0x14(%ebp)
					 newBlock->size=size;
f0132cb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cb5:	8b 55 08             	mov    0x8(%ebp),%edx
f0132cb8:	89 50 0c             	mov    %edx,0xc(%eax)
					 newBlock->sva=tmp1->sva;
f0132cbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cbe:	8b 50 08             	mov    0x8(%eax),%edx
f0132cc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cc4:	89 50 08             	mov    %edx,0x8(%eax)
					 tmp1->sva+=size;
f0132cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cca:	8b 50 08             	mov    0x8(%eax),%edx
f0132ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0132cd0:	01 c2                	add    %eax,%edx
f0132cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cd5:	89 50 08             	mov    %edx,0x8(%eax)
					 tmp1->size-=size;
f0132cd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cdb:	8b 40 0c             	mov    0xc(%eax),%eax
f0132cde:	2b 45 08             	sub    0x8(%ebp),%eax
f0132ce1:	89 c2                	mov    %eax,%edx
f0132ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ce6:	89 50 0c             	mov    %edx,0xc(%eax)
                     currentSva=tmp1->sva;
f0132ce9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cec:	8b 40 08             	mov    0x8(%eax),%eax
f0132cef:	89 45 f0             	mov    %eax,-0x10(%ebp)

					 LIST_REMOVE(&AvailableMemBlocksList,newBlock);
f0132cf2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132cf6:	75 17                	jne    f0132d0f <alloc_block_NF+0x177>
f0132cf8:	83 ec 04             	sub    $0x4,%esp
f0132cfb:	68 59 d9 13 f0       	push   $0xf013d959
f0132d00:	68 28 01 00 00       	push   $0x128
f0132d05:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132d0a:	e8 f6 d4 fc ff       	call   f0100205 <_panic>
f0132d0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d12:	8b 00                	mov    (%eax),%eax
f0132d14:	85 c0                	test   %eax,%eax
f0132d16:	74 10                	je     f0132d28 <alloc_block_NF+0x190>
f0132d18:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d1b:	8b 00                	mov    (%eax),%eax
f0132d1d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132d20:	8b 52 04             	mov    0x4(%edx),%edx
f0132d23:	89 50 04             	mov    %edx,0x4(%eax)
f0132d26:	eb 0b                	jmp    f0132d33 <alloc_block_NF+0x19b>
f0132d28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d2b:	8b 40 04             	mov    0x4(%eax),%eax
f0132d2e:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f0132d33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d36:	8b 40 04             	mov    0x4(%eax),%eax
f0132d39:	85 c0                	test   %eax,%eax
f0132d3b:	74 0f                	je     f0132d4c <alloc_block_NF+0x1b4>
f0132d3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d40:	8b 40 04             	mov    0x4(%eax),%eax
f0132d43:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132d46:	8b 12                	mov    (%edx),%edx
f0132d48:	89 10                	mov    %edx,(%eax)
f0132d4a:	eb 0a                	jmp    f0132d56 <alloc_block_NF+0x1be>
f0132d4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d4f:	8b 00                	mov    (%eax),%eax
f0132d51:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f0132d56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d62:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d69:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0132d6e:	48                   	dec    %eax
f0132d6f:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
					 return newBlock;
f0132d74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d77:	eb 30                	jmp    f0132da9 <alloc_block_NF+0x211>

				}
		if(tmp1==FreeMemBlocksList.lh_last)
f0132d79:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132d7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0132d81:	75 0a                	jne    f0132d8d <alloc_block_NF+0x1f5>
			tmp1=FreeMemBlocksList.lh_first;
f0132d83:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132d88:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132d8b:	eb 08                	jmp    f0132d95 <alloc_block_NF+0x1fd>
		else
				tmp1=tmp1->prev_next_info.le_next;
f0132d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d90:	8b 00                	mov    (%eax),%eax
f0132d92:	89 45 f4             	mov    %eax,-0xc(%ebp)


			}
while(tmp1->sva!=currentSva);
f0132d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d98:	8b 40 08             	mov    0x8(%eax),%eax
f0132d9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132d9e:	0f 85 4d fe ff ff    	jne    f0132bf1 <alloc_block_NF+0x59>

			return NULL;
f0132da4:	b8 00 00 00 00       	mov    $0x0,%eax

	}
f0132da9:	c9                   	leave  
f0132daa:	c3                   	ret    

f0132dab <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132dab:	55                   	push   %ebp
f0132dac:	89 e5                	mov    %esp,%ebp
f0132dae:	53                   	push   %ebx
f0132daf:	83 ec 14             	sub    $0x14,%esp
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code

	if(FreeMemBlocksList.lh_first==NULL)
f0132db2:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132db7:	85 c0                	test   %eax,%eax
f0132db9:	0f 85 86 00 00 00    	jne    f0132e45 <insert_sorted_with_merge_freeList+0x9a>
	{
		LIST_INIT(&FreeMemBlocksList);
f0132dbf:	c7 05 60 07 86 f0 00 	movl   $0x0,0xf0860760
f0132dc6:	00 00 00 
f0132dc9:	c7 05 64 07 86 f0 00 	movl   $0x0,0xf0860764
f0132dd0:	00 00 00 
f0132dd3:	c7 05 6c 07 86 f0 00 	movl   $0x0,0xf086076c
f0132dda:	00 00 00 
		LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
f0132ddd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132de1:	75 17                	jne    f0132dfa <insert_sorted_with_merge_freeList+0x4f>
f0132de3:	83 ec 04             	sub    $0x4,%esp
f0132de6:	68 c4 d8 13 f0       	push   $0xf013d8c4
f0132deb:	68 48 01 00 00       	push   $0x148
f0132df0:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132df5:	e8 0b d4 fc ff       	call   f0100205 <_panic>
f0132dfa:	8b 15 60 07 86 f0    	mov    0xf0860760,%edx
f0132e00:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e03:	89 10                	mov    %edx,(%eax)
f0132e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e08:	8b 00                	mov    (%eax),%eax
f0132e0a:	85 c0                	test   %eax,%eax
f0132e0c:	74 0d                	je     f0132e1b <insert_sorted_with_merge_freeList+0x70>
f0132e0e:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132e13:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e16:	89 50 04             	mov    %edx,0x4(%eax)
f0132e19:	eb 08                	jmp    f0132e23 <insert_sorted_with_merge_freeList+0x78>
f0132e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e1e:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f0132e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e26:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f0132e2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e2e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e35:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0132e3a:	40                   	inc    %eax
f0132e3b:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
	}

	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();

}
f0132e40:	e9 73 07 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
	if(FreeMemBlocksList.lh_first==NULL)
	{
		LIST_INIT(&FreeMemBlocksList);
		LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
	}
	else if(blockToInsert->sva>FreeMemBlocksList.lh_last->sva&&blockToInsert->sva!=(FreeMemBlocksList.lh_last->size+FreeMemBlocksList.lh_last->sva))
f0132e45:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e48:	8b 50 08             	mov    0x8(%eax),%edx
f0132e4b:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132e50:	8b 40 08             	mov    0x8(%eax),%eax
f0132e53:	39 c2                	cmp    %eax,%edx
f0132e55:	0f 86 84 00 00 00    	jbe    f0132edf <insert_sorted_with_merge_freeList+0x134>
f0132e5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e5e:	8b 50 08             	mov    0x8(%eax),%edx
f0132e61:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132e66:	8b 48 0c             	mov    0xc(%eax),%ecx
f0132e69:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132e6e:	8b 40 08             	mov    0x8(%eax),%eax
f0132e71:	01 c8                	add    %ecx,%eax
f0132e73:	39 c2                	cmp    %eax,%edx
f0132e75:	74 68                	je     f0132edf <insert_sorted_with_merge_freeList+0x134>
	{
		LIST_INSERT_TAIL(&FreeMemBlocksList,blockToInsert);
f0132e77:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132e7b:	75 17                	jne    f0132e94 <insert_sorted_with_merge_freeList+0xe9>
f0132e7d:	83 ec 04             	sub    $0x4,%esp
f0132e80:	68 00 d9 13 f0       	push   $0xf013d900
f0132e85:	68 4c 01 00 00       	push   $0x14c
f0132e8a:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132e8f:	e8 71 d3 fc ff       	call   f0100205 <_panic>
f0132e94:	8b 15 64 07 86 f0    	mov    0xf0860764,%edx
f0132e9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e9d:	89 50 04             	mov    %edx,0x4(%eax)
f0132ea0:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ea3:	8b 40 04             	mov    0x4(%eax),%eax
f0132ea6:	85 c0                	test   %eax,%eax
f0132ea8:	74 0c                	je     f0132eb6 <insert_sorted_with_merge_freeList+0x10b>
f0132eaa:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132eaf:	8b 55 08             	mov    0x8(%ebp),%edx
f0132eb2:	89 10                	mov    %edx,(%eax)
f0132eb4:	eb 08                	jmp    f0132ebe <insert_sorted_with_merge_freeList+0x113>
f0132eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eb9:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f0132ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ec1:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f0132ec6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ec9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ecf:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f0132ed4:	40                   	inc    %eax
f0132ed5:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
f0132eda:	e9 d9 06 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
	}
	else if(blockToInsert->sva>FreeMemBlocksList.lh_last->sva&&blockToInsert->sva==(FreeMemBlocksList.lh_last->size+FreeMemBlocksList.lh_last->sva))
f0132edf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ee2:	8b 50 08             	mov    0x8(%eax),%edx
f0132ee5:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132eea:	8b 40 08             	mov    0x8(%eax),%eax
f0132eed:	39 c2                	cmp    %eax,%edx
f0132eef:	0f 86 b5 00 00 00    	jbe    f0132faa <insert_sorted_with_merge_freeList+0x1ff>
f0132ef5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ef8:	8b 50 08             	mov    0x8(%eax),%edx
f0132efb:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132f00:	8b 48 0c             	mov    0xc(%eax),%ecx
f0132f03:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132f08:	8b 40 08             	mov    0x8(%eax),%eax
f0132f0b:	01 c8                	add    %ecx,%eax
f0132f0d:	39 c2                	cmp    %eax,%edx
f0132f0f:	0f 85 95 00 00 00    	jne    f0132faa <insert_sorted_with_merge_freeList+0x1ff>

	{
		FreeMemBlocksList.lh_last->size+=blockToInsert->size;
f0132f15:	a1 64 07 86 f0       	mov    0xf0860764,%eax
f0132f1a:	8b 15 64 07 86 f0    	mov    0xf0860764,%edx
f0132f20:	8b 4a 0c             	mov    0xc(%edx),%ecx
f0132f23:	8b 55 08             	mov    0x8(%ebp),%edx
f0132f26:	8b 52 0c             	mov    0xc(%edx),%edx
f0132f29:	01 ca                	add    %ecx,%edx
f0132f2b:	89 50 0c             	mov    %edx,0xc(%eax)
		blockToInsert->size=0;
f0132f2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f31:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
		blockToInsert->sva=0;
f0132f38:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f3b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f0132f42:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132f46:	75 17                	jne    f0132f5f <insert_sorted_with_merge_freeList+0x1b4>
f0132f48:	83 ec 04             	sub    $0x4,%esp
f0132f4b:	68 c4 d8 13 f0       	push   $0xf013d8c4
f0132f50:	68 54 01 00 00       	push   $0x154
f0132f55:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0132f5a:	e8 a6 d2 fc ff       	call   f0100205 <_panic>
f0132f5f:	8b 15 94 07 86 f0    	mov    0xf0860794,%edx
f0132f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f68:	89 10                	mov    %edx,(%eax)
f0132f6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f6d:	8b 00                	mov    (%eax),%eax
f0132f6f:	85 c0                	test   %eax,%eax
f0132f71:	74 0d                	je     f0132f80 <insert_sorted_with_merge_freeList+0x1d5>
f0132f73:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f0132f78:	8b 55 08             	mov    0x8(%ebp),%edx
f0132f7b:	89 50 04             	mov    %edx,0x4(%eax)
f0132f7e:	eb 08                	jmp    f0132f88 <insert_sorted_with_merge_freeList+0x1dd>
f0132f80:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f83:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f0132f88:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f8b:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f0132f90:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f93:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f9a:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0132f9f:	40                   	inc    %eax
f0132fa0:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
f0132fa5:	e9 0e 06 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
	}
	else if(blockToInsert->sva<FreeMemBlocksList.lh_first->sva&&FreeMemBlocksList.lh_first->sva==(blockToInsert->sva+blockToInsert->size))
f0132faa:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fad:	8b 50 08             	mov    0x8(%eax),%edx
f0132fb0:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132fb5:	8b 40 08             	mov    0x8(%eax),%eax
f0132fb8:	39 c2                	cmp    %eax,%edx
f0132fba:	0f 83 c1 00 00 00    	jae    f0133081 <insert_sorted_with_merge_freeList+0x2d6>
f0132fc0:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132fc5:	8b 50 08             	mov    0x8(%eax),%edx
f0132fc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fcb:	8b 48 08             	mov    0x8(%eax),%ecx
f0132fce:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fd1:	8b 40 0c             	mov    0xc(%eax),%eax
f0132fd4:	01 c8                	add    %ecx,%eax
f0132fd6:	39 c2                	cmp    %eax,%edx
f0132fd8:	0f 85 a3 00 00 00    	jne    f0133081 <insert_sorted_with_merge_freeList+0x2d6>
	{
		FreeMemBlocksList.lh_first->sva=blockToInsert->sva;
f0132fde:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132fe3:	8b 55 08             	mov    0x8(%ebp),%edx
f0132fe6:	8b 52 08             	mov    0x8(%edx),%edx
f0132fe9:	89 50 08             	mov    %edx,0x8(%eax)
		FreeMemBlocksList.lh_first->size+=blockToInsert->size;
f0132fec:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f0132ff1:	8b 15 60 07 86 f0    	mov    0xf0860760,%edx
f0132ff7:	8b 4a 0c             	mov    0xc(%edx),%ecx
f0132ffa:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ffd:	8b 52 0c             	mov    0xc(%edx),%edx
f0133000:	01 ca                	add    %ecx,%edx
f0133002:	89 50 0c             	mov    %edx,0xc(%eax)
		blockToInsert->sva=0;
f0133005:	8b 45 08             	mov    0x8(%ebp),%eax
f0133008:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		blockToInsert->size=0;
f013300f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133012:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

		LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f0133019:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013301d:	75 17                	jne    f0133036 <insert_sorted_with_merge_freeList+0x28b>
f013301f:	83 ec 04             	sub    $0x4,%esp
f0133022:	68 c4 d8 13 f0       	push   $0xf013d8c4
f0133027:	68 5d 01 00 00       	push   $0x15d
f013302c:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0133031:	e8 cf d1 fc ff       	call   f0100205 <_panic>
f0133036:	8b 15 94 07 86 f0    	mov    0xf0860794,%edx
f013303c:	8b 45 08             	mov    0x8(%ebp),%eax
f013303f:	89 10                	mov    %edx,(%eax)
f0133041:	8b 45 08             	mov    0x8(%ebp),%eax
f0133044:	8b 00                	mov    (%eax),%eax
f0133046:	85 c0                	test   %eax,%eax
f0133048:	74 0d                	je     f0133057 <insert_sorted_with_merge_freeList+0x2ac>
f013304a:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f013304f:	8b 55 08             	mov    0x8(%ebp),%edx
f0133052:	89 50 04             	mov    %edx,0x4(%eax)
f0133055:	eb 08                	jmp    f013305f <insert_sorted_with_merge_freeList+0x2b4>
f0133057:	8b 45 08             	mov    0x8(%ebp),%eax
f013305a:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f013305f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133062:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f0133067:	8b 45 08             	mov    0x8(%ebp),%eax
f013306a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133071:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0133076:	40                   	inc    %eax
f0133077:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
f013307c:	e9 37 05 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
	}
	else if(blockToInsert->sva<FreeMemBlocksList.lh_first->sva&&FreeMemBlocksList.lh_first->sva!=(blockToInsert->sva+blockToInsert->size))
f0133081:	8b 45 08             	mov    0x8(%ebp),%eax
f0133084:	8b 50 08             	mov    0x8(%eax),%edx
f0133087:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f013308c:	8b 40 08             	mov    0x8(%eax),%eax
f013308f:	39 c2                	cmp    %eax,%edx
f0133091:	0f 83 82 00 00 00    	jae    f0133119 <insert_sorted_with_merge_freeList+0x36e>
f0133097:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f013309c:	8b 50 08             	mov    0x8(%eax),%edx
f013309f:	8b 45 08             	mov    0x8(%ebp),%eax
f01330a2:	8b 48 08             	mov    0x8(%eax),%ecx
f01330a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01330a8:	8b 40 0c             	mov    0xc(%eax),%eax
f01330ab:	01 c8                	add    %ecx,%eax
f01330ad:	39 c2                	cmp    %eax,%edx
f01330af:	74 68                	je     f0133119 <insert_sorted_with_merge_freeList+0x36e>

	{
	LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
f01330b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01330b5:	75 17                	jne    f01330ce <insert_sorted_with_merge_freeList+0x323>
f01330b7:	83 ec 04             	sub    $0x4,%esp
f01330ba:	68 c4 d8 13 f0       	push   $0xf013d8c4
f01330bf:	68 62 01 00 00       	push   $0x162
f01330c4:	68 e7 d8 13 f0       	push   $0xf013d8e7
f01330c9:	e8 37 d1 fc ff       	call   f0100205 <_panic>
f01330ce:	8b 15 60 07 86 f0    	mov    0xf0860760,%edx
f01330d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01330d7:	89 10                	mov    %edx,(%eax)
f01330d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01330dc:	8b 00                	mov    (%eax),%eax
f01330de:	85 c0                	test   %eax,%eax
f01330e0:	74 0d                	je     f01330ef <insert_sorted_with_merge_freeList+0x344>
f01330e2:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f01330e7:	8b 55 08             	mov    0x8(%ebp),%edx
f01330ea:	89 50 04             	mov    %edx,0x4(%eax)
f01330ed:	eb 08                	jmp    f01330f7 <insert_sorted_with_merge_freeList+0x34c>
f01330ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01330f2:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f01330f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01330fa:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f01330ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0133102:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133109:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f013310e:	40                   	inc    %eax
f013310f:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
f0133114:	e9 9f 04 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
	}
	else
	{
		struct MemBlock *tmp=FreeMemBlocksList.lh_first->prev_next_info.le_next;
f0133119:	a1 60 07 86 f0       	mov    0xf0860760,%eax
f013311e:	8b 00                	mov    (%eax),%eax
f0133120:	89 45 f4             	mov    %eax,-0xc(%ebp)
		while(tmp!=NULL)
f0133123:	e9 84 04 00 00       	jmp    f01335ac <insert_sorted_with_merge_freeList+0x801>
		{
			if(tmp->sva>blockToInsert->sva&&tmp->sva!=(blockToInsert->sva+blockToInsert->size)&&blockToInsert->sva!=(LIST_PREV(tmp)->sva+LIST_PREV(tmp)->size))
f0133128:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013312b:	8b 50 08             	mov    0x8(%eax),%edx
f013312e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133131:	8b 40 08             	mov    0x8(%eax),%eax
f0133134:	39 c2                	cmp    %eax,%edx
f0133136:	0f 86 a9 00 00 00    	jbe    f01331e5 <insert_sorted_with_merge_freeList+0x43a>
f013313c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013313f:	8b 50 08             	mov    0x8(%eax),%edx
f0133142:	8b 45 08             	mov    0x8(%ebp),%eax
f0133145:	8b 48 08             	mov    0x8(%eax),%ecx
f0133148:	8b 45 08             	mov    0x8(%ebp),%eax
f013314b:	8b 40 0c             	mov    0xc(%eax),%eax
f013314e:	01 c8                	add    %ecx,%eax
f0133150:	39 c2                	cmp    %eax,%edx
f0133152:	0f 84 8d 00 00 00    	je     f01331e5 <insert_sorted_with_merge_freeList+0x43a>
f0133158:	8b 45 08             	mov    0x8(%ebp),%eax
f013315b:	8b 50 08             	mov    0x8(%eax),%edx
f013315e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133161:	8b 40 04             	mov    0x4(%eax),%eax
f0133164:	8b 48 08             	mov    0x8(%eax),%ecx
f0133167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013316a:	8b 40 04             	mov    0x4(%eax),%eax
f013316d:	8b 40 0c             	mov    0xc(%eax),%eax
f0133170:	01 c8                	add    %ecx,%eax
f0133172:	39 c2                	cmp    %eax,%edx
f0133174:	74 6f                	je     f01331e5 <insert_sorted_with_merge_freeList+0x43a>
			{
				LIST_INSERT_BEFORE(&FreeMemBlocksList,tmp,blockToInsert);
f0133176:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013317a:	74 06                	je     f0133182 <insert_sorted_with_merge_freeList+0x3d7>
f013317c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133180:	75 17                	jne    f0133199 <insert_sorted_with_merge_freeList+0x3ee>
f0133182:	83 ec 04             	sub    $0x4,%esp
f0133185:	68 24 d9 13 f0       	push   $0xf013d924
f013318a:	68 6b 01 00 00       	push   $0x16b
f013318f:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0133194:	e8 6c d0 fc ff       	call   f0100205 <_panic>
f0133199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013319c:	8b 50 04             	mov    0x4(%eax),%edx
f013319f:	8b 45 08             	mov    0x8(%ebp),%eax
f01331a2:	89 50 04             	mov    %edx,0x4(%eax)
f01331a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01331a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01331ab:	89 10                	mov    %edx,(%eax)
f01331ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331b0:	8b 40 04             	mov    0x4(%eax),%eax
f01331b3:	85 c0                	test   %eax,%eax
f01331b5:	74 0d                	je     f01331c4 <insert_sorted_with_merge_freeList+0x419>
f01331b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331ba:	8b 40 04             	mov    0x4(%eax),%eax
f01331bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01331c0:	89 10                	mov    %edx,(%eax)
f01331c2:	eb 08                	jmp    f01331cc <insert_sorted_with_merge_freeList+0x421>
f01331c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01331c7:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f01331cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331cf:	8b 55 08             	mov    0x8(%ebp),%edx
f01331d2:	89 50 04             	mov    %edx,0x4(%eax)
f01331d5:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f01331da:	40                   	inc    %eax
f01331db:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
				break;
f01331e0:	e9 d3 03 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
			}// no merge
			else if(tmp->sva>blockToInsert->sva&&tmp->sva==(blockToInsert->sva+blockToInsert->size)&&blockToInsert->sva!=(LIST_PREV(tmp)->sva+LIST_PREV(tmp)->size))
f01331e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331e8:	8b 50 08             	mov    0x8(%eax),%edx
f01331eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01331ee:	8b 40 08             	mov    0x8(%eax),%eax
f01331f1:	39 c2                	cmp    %eax,%edx
f01331f3:	0f 86 da 00 00 00    	jbe    f01332d3 <insert_sorted_with_merge_freeList+0x528>
f01331f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331fc:	8b 50 08             	mov    0x8(%eax),%edx
f01331ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0133202:	8b 48 08             	mov    0x8(%eax),%ecx
f0133205:	8b 45 08             	mov    0x8(%ebp),%eax
f0133208:	8b 40 0c             	mov    0xc(%eax),%eax
f013320b:	01 c8                	add    %ecx,%eax
f013320d:	39 c2                	cmp    %eax,%edx
f013320f:	0f 85 be 00 00 00    	jne    f01332d3 <insert_sorted_with_merge_freeList+0x528>
f0133215:	8b 45 08             	mov    0x8(%ebp),%eax
f0133218:	8b 50 08             	mov    0x8(%eax),%edx
f013321b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013321e:	8b 40 04             	mov    0x4(%eax),%eax
f0133221:	8b 48 08             	mov    0x8(%eax),%ecx
f0133224:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133227:	8b 40 04             	mov    0x4(%eax),%eax
f013322a:	8b 40 0c             	mov    0xc(%eax),%eax
f013322d:	01 c8                	add    %ecx,%eax
f013322f:	39 c2                	cmp    %eax,%edx
f0133231:	0f 84 9c 00 00 00    	je     f01332d3 <insert_sorted_with_merge_freeList+0x528>
			{
tmp->sva=blockToInsert->sva;
f0133237:	8b 45 08             	mov    0x8(%ebp),%eax
f013323a:	8b 50 08             	mov    0x8(%eax),%edx
f013323d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133240:	89 50 08             	mov    %edx,0x8(%eax)
tmp->size+=blockToInsert->size;
f0133243:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133246:	8b 50 0c             	mov    0xc(%eax),%edx
f0133249:	8b 45 08             	mov    0x8(%ebp),%eax
f013324c:	8b 40 0c             	mov    0xc(%eax),%eax
f013324f:	01 c2                	add    %eax,%edx
f0133251:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133254:	89 50 0c             	mov    %edx,0xc(%eax)
blockToInsert->sva=0;
f0133257:	8b 45 08             	mov    0x8(%ebp),%eax
f013325a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
blockToInsert->size=0;
f0133261:	8b 45 08             	mov    0x8(%ebp),%eax
f0133264:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f013326b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013326f:	75 17                	jne    f0133288 <insert_sorted_with_merge_freeList+0x4dd>
f0133271:	83 ec 04             	sub    $0x4,%esp
f0133274:	68 c4 d8 13 f0       	push   $0xf013d8c4
f0133279:	68 74 01 00 00       	push   $0x174
f013327e:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0133283:	e8 7d cf fc ff       	call   f0100205 <_panic>
f0133288:	8b 15 94 07 86 f0    	mov    0xf0860794,%edx
f013328e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133291:	89 10                	mov    %edx,(%eax)
f0133293:	8b 45 08             	mov    0x8(%ebp),%eax
f0133296:	8b 00                	mov    (%eax),%eax
f0133298:	85 c0                	test   %eax,%eax
f013329a:	74 0d                	je     f01332a9 <insert_sorted_with_merge_freeList+0x4fe>
f013329c:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f01332a1:	8b 55 08             	mov    0x8(%ebp),%edx
f01332a4:	89 50 04             	mov    %edx,0x4(%eax)
f01332a7:	eb 08                	jmp    f01332b1 <insert_sorted_with_merge_freeList+0x506>
f01332a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01332ac:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f01332b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01332b4:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f01332b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01332bc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01332c3:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f01332c8:	40                   	inc    %eax
f01332c9:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
break;
f01332ce:	e9 e5 02 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
			}//merge with the next
			else if(tmp->sva>blockToInsert->sva&&tmp->sva!=(blockToInsert->sva+blockToInsert->size)&&blockToInsert->sva==(LIST_PREV(tmp)->sva+LIST_PREV(tmp)->size))
f01332d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332d6:	8b 50 08             	mov    0x8(%eax),%edx
f01332d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01332dc:	8b 40 08             	mov    0x8(%eax),%eax
f01332df:	39 c2                	cmp    %eax,%edx
f01332e1:	0f 86 d7 00 00 00    	jbe    f01333be <insert_sorted_with_merge_freeList+0x613>
f01332e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332ea:	8b 50 08             	mov    0x8(%eax),%edx
f01332ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01332f0:	8b 48 08             	mov    0x8(%eax),%ecx
f01332f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01332f6:	8b 40 0c             	mov    0xc(%eax),%eax
f01332f9:	01 c8                	add    %ecx,%eax
f01332fb:	39 c2                	cmp    %eax,%edx
f01332fd:	0f 84 bb 00 00 00    	je     f01333be <insert_sorted_with_merge_freeList+0x613>
f0133303:	8b 45 08             	mov    0x8(%ebp),%eax
f0133306:	8b 50 08             	mov    0x8(%eax),%edx
f0133309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013330c:	8b 40 04             	mov    0x4(%eax),%eax
f013330f:	8b 48 08             	mov    0x8(%eax),%ecx
f0133312:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133315:	8b 40 04             	mov    0x4(%eax),%eax
f0133318:	8b 40 0c             	mov    0xc(%eax),%eax
f013331b:	01 c8                	add    %ecx,%eax
f013331d:	39 c2                	cmp    %eax,%edx
f013331f:	0f 85 99 00 00 00    	jne    f01333be <insert_sorted_with_merge_freeList+0x613>
			{
				struct MemBlock *ptr=LIST_PREV(tmp);
f0133325:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133328:	8b 40 04             	mov    0x4(%eax),%eax
f013332b:	89 45 f0             	mov    %eax,-0x10(%ebp)
				ptr->size+=blockToInsert->size;
f013332e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133331:	8b 50 0c             	mov    0xc(%eax),%edx
f0133334:	8b 45 08             	mov    0x8(%ebp),%eax
f0133337:	8b 40 0c             	mov    0xc(%eax),%eax
f013333a:	01 c2                	add    %eax,%edx
f013333c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013333f:	89 50 0c             	mov    %edx,0xc(%eax)
				blockToInsert->sva=0;
f0133342:	8b 45 08             	mov    0x8(%ebp),%eax
f0133345:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				blockToInsert->size =0;
f013334c:	8b 45 08             	mov    0x8(%ebp),%eax
f013334f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
				LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f0133356:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013335a:	75 17                	jne    f0133373 <insert_sorted_with_merge_freeList+0x5c8>
f013335c:	83 ec 04             	sub    $0x4,%esp
f013335f:	68 c4 d8 13 f0       	push   $0xf013d8c4
f0133364:	68 7d 01 00 00       	push   $0x17d
f0133369:	68 e7 d8 13 f0       	push   $0xf013d8e7
f013336e:	e8 92 ce fc ff       	call   f0100205 <_panic>
f0133373:	8b 15 94 07 86 f0    	mov    0xf0860794,%edx
f0133379:	8b 45 08             	mov    0x8(%ebp),%eax
f013337c:	89 10                	mov    %edx,(%eax)
f013337e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133381:	8b 00                	mov    (%eax),%eax
f0133383:	85 c0                	test   %eax,%eax
f0133385:	74 0d                	je     f0133394 <insert_sorted_with_merge_freeList+0x5e9>
f0133387:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f013338c:	8b 55 08             	mov    0x8(%ebp),%edx
f013338f:	89 50 04             	mov    %edx,0x4(%eax)
f0133392:	eb 08                	jmp    f013339c <insert_sorted_with_merge_freeList+0x5f1>
f0133394:	8b 45 08             	mov    0x8(%ebp),%eax
f0133397:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f013339c:	8b 45 08             	mov    0x8(%ebp),%eax
f013339f:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f01333a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01333a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01333ae:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f01333b3:	40                   	inc    %eax
f01333b4:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
break;
f01333b9:	e9 fa 01 00 00       	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
			}// merge with previous
			else if(tmp->sva>blockToInsert->sva&&tmp->sva==(blockToInsert->sva+blockToInsert->size)&&blockToInsert->sva==(LIST_PREV(tmp)->sva+LIST_PREV(tmp)->size))
f01333be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333c1:	8b 50 08             	mov    0x8(%eax),%edx
f01333c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01333c7:	8b 40 08             	mov    0x8(%eax),%eax
f01333ca:	39 c2                	cmp    %eax,%edx
f01333cc:	0f 86 d2 01 00 00    	jbe    f01335a4 <insert_sorted_with_merge_freeList+0x7f9>
f01333d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333d5:	8b 50 08             	mov    0x8(%eax),%edx
f01333d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01333db:	8b 48 08             	mov    0x8(%eax),%ecx
f01333de:	8b 45 08             	mov    0x8(%ebp),%eax
f01333e1:	8b 40 0c             	mov    0xc(%eax),%eax
f01333e4:	01 c8                	add    %ecx,%eax
f01333e6:	39 c2                	cmp    %eax,%edx
f01333e8:	0f 85 b6 01 00 00    	jne    f01335a4 <insert_sorted_with_merge_freeList+0x7f9>
f01333ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01333f1:	8b 50 08             	mov    0x8(%eax),%edx
f01333f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333f7:	8b 40 04             	mov    0x4(%eax),%eax
f01333fa:	8b 48 08             	mov    0x8(%eax),%ecx
f01333fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133400:	8b 40 04             	mov    0x4(%eax),%eax
f0133403:	8b 40 0c             	mov    0xc(%eax),%eax
f0133406:	01 c8                	add    %ecx,%eax
f0133408:	39 c2                	cmp    %eax,%edx
f013340a:	0f 85 94 01 00 00    	jne    f01335a4 <insert_sorted_with_merge_freeList+0x7f9>
			{

				LIST_PREV(tmp)->size+=blockToInsert->size+tmp->size;
f0133410:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133413:	8b 40 04             	mov    0x4(%eax),%eax
f0133416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133419:	8b 52 04             	mov    0x4(%edx),%edx
f013341c:	8b 4a 0c             	mov    0xc(%edx),%ecx
f013341f:	8b 55 08             	mov    0x8(%ebp),%edx
f0133422:	8b 5a 0c             	mov    0xc(%edx),%ebx
f0133425:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133428:	8b 52 0c             	mov    0xc(%edx),%edx
f013342b:	01 da                	add    %ebx,%edx
f013342d:	01 ca                	add    %ecx,%edx
f013342f:	89 50 0c             	mov    %edx,0xc(%eax)
				tmp->size=0;
f0133432:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133435:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
				tmp->sva=0;
f013343c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013343f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				LIST_REMOVE(&FreeMemBlocksList,tmp);
f0133446:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013344a:	75 17                	jne    f0133463 <insert_sorted_with_merge_freeList+0x6b8>
f013344c:	83 ec 04             	sub    $0x4,%esp
f013344f:	68 59 d9 13 f0       	push   $0xf013d959
f0133454:	68 86 01 00 00       	push   $0x186
f0133459:	68 e7 d8 13 f0       	push   $0xf013d8e7
f013345e:	e8 a2 cd fc ff       	call   f0100205 <_panic>
f0133463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133466:	8b 00                	mov    (%eax),%eax
f0133468:	85 c0                	test   %eax,%eax
f013346a:	74 10                	je     f013347c <insert_sorted_with_merge_freeList+0x6d1>
f013346c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013346f:	8b 00                	mov    (%eax),%eax
f0133471:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133474:	8b 52 04             	mov    0x4(%edx),%edx
f0133477:	89 50 04             	mov    %edx,0x4(%eax)
f013347a:	eb 0b                	jmp    f0133487 <insert_sorted_with_merge_freeList+0x6dc>
f013347c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013347f:	8b 40 04             	mov    0x4(%eax),%eax
f0133482:	a3 64 07 86 f0       	mov    %eax,0xf0860764
f0133487:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013348a:	8b 40 04             	mov    0x4(%eax),%eax
f013348d:	85 c0                	test   %eax,%eax
f013348f:	74 0f                	je     f01334a0 <insert_sorted_with_merge_freeList+0x6f5>
f0133491:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133494:	8b 40 04             	mov    0x4(%eax),%eax
f0133497:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013349a:	8b 12                	mov    (%edx),%edx
f013349c:	89 10                	mov    %edx,(%eax)
f013349e:	eb 0a                	jmp    f01334aa <insert_sorted_with_merge_freeList+0x6ff>
f01334a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334a3:	8b 00                	mov    (%eax),%eax
f01334a5:	a3 60 07 86 f0       	mov    %eax,0xf0860760
f01334aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01334b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334b6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01334bd:	a1 6c 07 86 f0       	mov    0xf086076c,%eax
f01334c2:	48                   	dec    %eax
f01334c3:	a3 6c 07 86 f0       	mov    %eax,0xf086076c
				LIST_INSERT_HEAD(&AvailableMemBlocksList,tmp);
f01334c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01334cc:	75 17                	jne    f01334e5 <insert_sorted_with_merge_freeList+0x73a>
f01334ce:	83 ec 04             	sub    $0x4,%esp
f01334d1:	68 c4 d8 13 f0       	push   $0xf013d8c4
f01334d6:	68 87 01 00 00       	push   $0x187
f01334db:	68 e7 d8 13 f0       	push   $0xf013d8e7
f01334e0:	e8 20 cd fc ff       	call   f0100205 <_panic>
f01334e5:	8b 15 94 07 86 f0    	mov    0xf0860794,%edx
f01334eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334ee:	89 10                	mov    %edx,(%eax)
f01334f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334f3:	8b 00                	mov    (%eax),%eax
f01334f5:	85 c0                	test   %eax,%eax
f01334f7:	74 0d                	je     f0133506 <insert_sorted_with_merge_freeList+0x75b>
f01334f9:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f01334fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133501:	89 50 04             	mov    %edx,0x4(%eax)
f0133504:	eb 08                	jmp    f013350e <insert_sorted_with_merge_freeList+0x763>
f0133506:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133509:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f013350e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133511:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f0133516:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133519:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133520:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f0133525:	40                   	inc    %eax
f0133526:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
				blockToInsert->sva=0;
f013352b:	8b 45 08             	mov    0x8(%ebp),%eax
f013352e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				blockToInsert->size=0;
f0133535:	8b 45 08             	mov    0x8(%ebp),%eax
f0133538:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
				LIST_INSERT_HEAD(&AvailableMemBlocksList,blockToInsert);
f013353f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133543:	75 17                	jne    f013355c <insert_sorted_with_merge_freeList+0x7b1>
f0133545:	83 ec 04             	sub    $0x4,%esp
f0133548:	68 c4 d8 13 f0       	push   $0xf013d8c4
f013354d:	68 8a 01 00 00       	push   $0x18a
f0133552:	68 e7 d8 13 f0       	push   $0xf013d8e7
f0133557:	e8 a9 cc fc ff       	call   f0100205 <_panic>
f013355c:	8b 15 94 07 86 f0    	mov    0xf0860794,%edx
f0133562:	8b 45 08             	mov    0x8(%ebp),%eax
f0133565:	89 10                	mov    %edx,(%eax)
f0133567:	8b 45 08             	mov    0x8(%ebp),%eax
f013356a:	8b 00                	mov    (%eax),%eax
f013356c:	85 c0                	test   %eax,%eax
f013356e:	74 0d                	je     f013357d <insert_sorted_with_merge_freeList+0x7d2>
f0133570:	a1 94 07 86 f0       	mov    0xf0860794,%eax
f0133575:	8b 55 08             	mov    0x8(%ebp),%edx
f0133578:	89 50 04             	mov    %edx,0x4(%eax)
f013357b:	eb 08                	jmp    f0133585 <insert_sorted_with_merge_freeList+0x7da>
f013357d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133580:	a3 98 07 86 f0       	mov    %eax,0xf0860798
f0133585:	8b 45 08             	mov    0x8(%ebp),%eax
f0133588:	a3 94 07 86 f0       	mov    %eax,0xf0860794
f013358d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133590:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133597:	a1 a0 07 86 f0       	mov    0xf08607a0,%eax
f013359c:	40                   	inc    %eax
f013359d:	a3 a0 07 86 f0       	mov    %eax,0xf08607a0
				break;
f01335a2:	eb 14                	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
			}//merge with next and previous
			tmp=tmp->prev_next_info.le_next;
f01335a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01335a7:	8b 00                	mov    (%eax),%eax
f01335a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
	}
	else
	{
		struct MemBlock *tmp=FreeMemBlocksList.lh_first->prev_next_info.le_next;
		while(tmp!=NULL)
f01335ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01335b0:	0f 85 72 fb ff ff    	jne    f0133128 <insert_sorted_with_merge_freeList+0x37d>
	}

	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();

}
f01335b6:	eb 00                	jmp    f01335b8 <insert_sorted_with_merge_freeList+0x80d>
f01335b8:	90                   	nop
f01335b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01335bc:	c9                   	leave  
f01335bd:	c3                   	ret    
f01335be:	66 90                	xchg   %ax,%ax

f01335c0 <__udivdi3>:
f01335c0:	55                   	push   %ebp
f01335c1:	57                   	push   %edi
f01335c2:	56                   	push   %esi
f01335c3:	53                   	push   %ebx
f01335c4:	83 ec 1c             	sub    $0x1c,%esp
f01335c7:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01335cb:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01335cf:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01335d3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01335d7:	89 ca                	mov    %ecx,%edx
f01335d9:	89 f8                	mov    %edi,%eax
f01335db:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01335df:	85 f6                	test   %esi,%esi
f01335e1:	75 2d                	jne    f0133610 <__udivdi3+0x50>
f01335e3:	39 cf                	cmp    %ecx,%edi
f01335e5:	77 65                	ja     f013364c <__udivdi3+0x8c>
f01335e7:	89 fd                	mov    %edi,%ebp
f01335e9:	85 ff                	test   %edi,%edi
f01335eb:	75 0b                	jne    f01335f8 <__udivdi3+0x38>
f01335ed:	b8 01 00 00 00       	mov    $0x1,%eax
f01335f2:	31 d2                	xor    %edx,%edx
f01335f4:	f7 f7                	div    %edi
f01335f6:	89 c5                	mov    %eax,%ebp
f01335f8:	31 d2                	xor    %edx,%edx
f01335fa:	89 c8                	mov    %ecx,%eax
f01335fc:	f7 f5                	div    %ebp
f01335fe:	89 c1                	mov    %eax,%ecx
f0133600:	89 d8                	mov    %ebx,%eax
f0133602:	f7 f5                	div    %ebp
f0133604:	89 cf                	mov    %ecx,%edi
f0133606:	89 fa                	mov    %edi,%edx
f0133608:	83 c4 1c             	add    $0x1c,%esp
f013360b:	5b                   	pop    %ebx
f013360c:	5e                   	pop    %esi
f013360d:	5f                   	pop    %edi
f013360e:	5d                   	pop    %ebp
f013360f:	c3                   	ret    
f0133610:	39 ce                	cmp    %ecx,%esi
f0133612:	77 28                	ja     f013363c <__udivdi3+0x7c>
f0133614:	0f bd fe             	bsr    %esi,%edi
f0133617:	83 f7 1f             	xor    $0x1f,%edi
f013361a:	75 40                	jne    f013365c <__udivdi3+0x9c>
f013361c:	39 ce                	cmp    %ecx,%esi
f013361e:	72 0a                	jb     f013362a <__udivdi3+0x6a>
f0133620:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0133624:	0f 87 9e 00 00 00    	ja     f01336c8 <__udivdi3+0x108>
f013362a:	b8 01 00 00 00       	mov    $0x1,%eax
f013362f:	89 fa                	mov    %edi,%edx
f0133631:	83 c4 1c             	add    $0x1c,%esp
f0133634:	5b                   	pop    %ebx
f0133635:	5e                   	pop    %esi
f0133636:	5f                   	pop    %edi
f0133637:	5d                   	pop    %ebp
f0133638:	c3                   	ret    
f0133639:	8d 76 00             	lea    0x0(%esi),%esi
f013363c:	31 ff                	xor    %edi,%edi
f013363e:	31 c0                	xor    %eax,%eax
f0133640:	89 fa                	mov    %edi,%edx
f0133642:	83 c4 1c             	add    $0x1c,%esp
f0133645:	5b                   	pop    %ebx
f0133646:	5e                   	pop    %esi
f0133647:	5f                   	pop    %edi
f0133648:	5d                   	pop    %ebp
f0133649:	c3                   	ret    
f013364a:	66 90                	xchg   %ax,%ax
f013364c:	89 d8                	mov    %ebx,%eax
f013364e:	f7 f7                	div    %edi
f0133650:	31 ff                	xor    %edi,%edi
f0133652:	89 fa                	mov    %edi,%edx
f0133654:	83 c4 1c             	add    $0x1c,%esp
f0133657:	5b                   	pop    %ebx
f0133658:	5e                   	pop    %esi
f0133659:	5f                   	pop    %edi
f013365a:	5d                   	pop    %ebp
f013365b:	c3                   	ret    
f013365c:	bd 20 00 00 00       	mov    $0x20,%ebp
f0133661:	89 eb                	mov    %ebp,%ebx
f0133663:	29 fb                	sub    %edi,%ebx
f0133665:	89 f9                	mov    %edi,%ecx
f0133667:	d3 e6                	shl    %cl,%esi
f0133669:	89 c5                	mov    %eax,%ebp
f013366b:	88 d9                	mov    %bl,%cl
f013366d:	d3 ed                	shr    %cl,%ebp
f013366f:	89 e9                	mov    %ebp,%ecx
f0133671:	09 f1                	or     %esi,%ecx
f0133673:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0133677:	89 f9                	mov    %edi,%ecx
f0133679:	d3 e0                	shl    %cl,%eax
f013367b:	89 c5                	mov    %eax,%ebp
f013367d:	89 d6                	mov    %edx,%esi
f013367f:	88 d9                	mov    %bl,%cl
f0133681:	d3 ee                	shr    %cl,%esi
f0133683:	89 f9                	mov    %edi,%ecx
f0133685:	d3 e2                	shl    %cl,%edx
f0133687:	8b 44 24 08          	mov    0x8(%esp),%eax
f013368b:	88 d9                	mov    %bl,%cl
f013368d:	d3 e8                	shr    %cl,%eax
f013368f:	09 c2                	or     %eax,%edx
f0133691:	89 d0                	mov    %edx,%eax
f0133693:	89 f2                	mov    %esi,%edx
f0133695:	f7 74 24 0c          	divl   0xc(%esp)
f0133699:	89 d6                	mov    %edx,%esi
f013369b:	89 c3                	mov    %eax,%ebx
f013369d:	f7 e5                	mul    %ebp
f013369f:	39 d6                	cmp    %edx,%esi
f01336a1:	72 19                	jb     f01336bc <__udivdi3+0xfc>
f01336a3:	74 0b                	je     f01336b0 <__udivdi3+0xf0>
f01336a5:	89 d8                	mov    %ebx,%eax
f01336a7:	31 ff                	xor    %edi,%edi
f01336a9:	e9 58 ff ff ff       	jmp    f0133606 <__udivdi3+0x46>
f01336ae:	66 90                	xchg   %ax,%ax
f01336b0:	8b 54 24 08          	mov    0x8(%esp),%edx
f01336b4:	89 f9                	mov    %edi,%ecx
f01336b6:	d3 e2                	shl    %cl,%edx
f01336b8:	39 c2                	cmp    %eax,%edx
f01336ba:	73 e9                	jae    f01336a5 <__udivdi3+0xe5>
f01336bc:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01336bf:	31 ff                	xor    %edi,%edi
f01336c1:	e9 40 ff ff ff       	jmp    f0133606 <__udivdi3+0x46>
f01336c6:	66 90                	xchg   %ax,%ax
f01336c8:	31 c0                	xor    %eax,%eax
f01336ca:	e9 37 ff ff ff       	jmp    f0133606 <__udivdi3+0x46>
f01336cf:	90                   	nop

f01336d0 <__umoddi3>:
f01336d0:	55                   	push   %ebp
f01336d1:	57                   	push   %edi
f01336d2:	56                   	push   %esi
f01336d3:	53                   	push   %ebx
f01336d4:	83 ec 1c             	sub    $0x1c,%esp
f01336d7:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01336db:	8b 74 24 34          	mov    0x34(%esp),%esi
f01336df:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01336e3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01336e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01336eb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01336ef:	89 f3                	mov    %esi,%ebx
f01336f1:	89 fa                	mov    %edi,%edx
f01336f3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01336f7:	89 34 24             	mov    %esi,(%esp)
f01336fa:	85 c0                	test   %eax,%eax
f01336fc:	75 1a                	jne    f0133718 <__umoddi3+0x48>
f01336fe:	39 f7                	cmp    %esi,%edi
f0133700:	0f 86 a2 00 00 00    	jbe    f01337a8 <__umoddi3+0xd8>
f0133706:	89 c8                	mov    %ecx,%eax
f0133708:	89 f2                	mov    %esi,%edx
f013370a:	f7 f7                	div    %edi
f013370c:	89 d0                	mov    %edx,%eax
f013370e:	31 d2                	xor    %edx,%edx
f0133710:	83 c4 1c             	add    $0x1c,%esp
f0133713:	5b                   	pop    %ebx
f0133714:	5e                   	pop    %esi
f0133715:	5f                   	pop    %edi
f0133716:	5d                   	pop    %ebp
f0133717:	c3                   	ret    
f0133718:	39 f0                	cmp    %esi,%eax
f013371a:	0f 87 ac 00 00 00    	ja     f01337cc <__umoddi3+0xfc>
f0133720:	0f bd e8             	bsr    %eax,%ebp
f0133723:	83 f5 1f             	xor    $0x1f,%ebp
f0133726:	0f 84 ac 00 00 00    	je     f01337d8 <__umoddi3+0x108>
f013372c:	bf 20 00 00 00       	mov    $0x20,%edi
f0133731:	29 ef                	sub    %ebp,%edi
f0133733:	89 fe                	mov    %edi,%esi
f0133735:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133739:	89 e9                	mov    %ebp,%ecx
f013373b:	d3 e0                	shl    %cl,%eax
f013373d:	89 d7                	mov    %edx,%edi
f013373f:	89 f1                	mov    %esi,%ecx
f0133741:	d3 ef                	shr    %cl,%edi
f0133743:	09 c7                	or     %eax,%edi
f0133745:	89 e9                	mov    %ebp,%ecx
f0133747:	d3 e2                	shl    %cl,%edx
f0133749:	89 14 24             	mov    %edx,(%esp)
f013374c:	89 d8                	mov    %ebx,%eax
f013374e:	d3 e0                	shl    %cl,%eax
f0133750:	89 c2                	mov    %eax,%edx
f0133752:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133756:	d3 e0                	shl    %cl,%eax
f0133758:	89 44 24 04          	mov    %eax,0x4(%esp)
f013375c:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133760:	89 f1                	mov    %esi,%ecx
f0133762:	d3 e8                	shr    %cl,%eax
f0133764:	09 d0                	or     %edx,%eax
f0133766:	d3 eb                	shr    %cl,%ebx
f0133768:	89 da                	mov    %ebx,%edx
f013376a:	f7 f7                	div    %edi
f013376c:	89 d3                	mov    %edx,%ebx
f013376e:	f7 24 24             	mull   (%esp)
f0133771:	89 c6                	mov    %eax,%esi
f0133773:	89 d1                	mov    %edx,%ecx
f0133775:	39 d3                	cmp    %edx,%ebx
f0133777:	0f 82 87 00 00 00    	jb     f0133804 <__umoddi3+0x134>
f013377d:	0f 84 91 00 00 00    	je     f0133814 <__umoddi3+0x144>
f0133783:	8b 54 24 04          	mov    0x4(%esp),%edx
f0133787:	29 f2                	sub    %esi,%edx
f0133789:	19 cb                	sbb    %ecx,%ebx
f013378b:	89 d8                	mov    %ebx,%eax
f013378d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133791:	d3 e0                	shl    %cl,%eax
f0133793:	89 e9                	mov    %ebp,%ecx
f0133795:	d3 ea                	shr    %cl,%edx
f0133797:	09 d0                	or     %edx,%eax
f0133799:	89 e9                	mov    %ebp,%ecx
f013379b:	d3 eb                	shr    %cl,%ebx
f013379d:	89 da                	mov    %ebx,%edx
f013379f:	83 c4 1c             	add    $0x1c,%esp
f01337a2:	5b                   	pop    %ebx
f01337a3:	5e                   	pop    %esi
f01337a4:	5f                   	pop    %edi
f01337a5:	5d                   	pop    %ebp
f01337a6:	c3                   	ret    
f01337a7:	90                   	nop
f01337a8:	89 fd                	mov    %edi,%ebp
f01337aa:	85 ff                	test   %edi,%edi
f01337ac:	75 0b                	jne    f01337b9 <__umoddi3+0xe9>
f01337ae:	b8 01 00 00 00       	mov    $0x1,%eax
f01337b3:	31 d2                	xor    %edx,%edx
f01337b5:	f7 f7                	div    %edi
f01337b7:	89 c5                	mov    %eax,%ebp
f01337b9:	89 f0                	mov    %esi,%eax
f01337bb:	31 d2                	xor    %edx,%edx
f01337bd:	f7 f5                	div    %ebp
f01337bf:	89 c8                	mov    %ecx,%eax
f01337c1:	f7 f5                	div    %ebp
f01337c3:	89 d0                	mov    %edx,%eax
f01337c5:	e9 44 ff ff ff       	jmp    f013370e <__umoddi3+0x3e>
f01337ca:	66 90                	xchg   %ax,%ax
f01337cc:	89 c8                	mov    %ecx,%eax
f01337ce:	89 f2                	mov    %esi,%edx
f01337d0:	83 c4 1c             	add    $0x1c,%esp
f01337d3:	5b                   	pop    %ebx
f01337d4:	5e                   	pop    %esi
f01337d5:	5f                   	pop    %edi
f01337d6:	5d                   	pop    %ebp
f01337d7:	c3                   	ret    
f01337d8:	3b 04 24             	cmp    (%esp),%eax
f01337db:	72 06                	jb     f01337e3 <__umoddi3+0x113>
f01337dd:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01337e1:	77 0f                	ja     f01337f2 <__umoddi3+0x122>
f01337e3:	89 f2                	mov    %esi,%edx
f01337e5:	29 f9                	sub    %edi,%ecx
f01337e7:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01337eb:	89 14 24             	mov    %edx,(%esp)
f01337ee:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01337f2:	8b 44 24 04          	mov    0x4(%esp),%eax
f01337f6:	8b 14 24             	mov    (%esp),%edx
f01337f9:	83 c4 1c             	add    $0x1c,%esp
f01337fc:	5b                   	pop    %ebx
f01337fd:	5e                   	pop    %esi
f01337fe:	5f                   	pop    %edi
f01337ff:	5d                   	pop    %ebp
f0133800:	c3                   	ret    
f0133801:	8d 76 00             	lea    0x0(%esi),%esi
f0133804:	2b 04 24             	sub    (%esp),%eax
f0133807:	19 fa                	sbb    %edi,%edx
f0133809:	89 d1                	mov    %edx,%ecx
f013380b:	89 c6                	mov    %eax,%esi
f013380d:	e9 71 ff ff ff       	jmp    f0133783 <__umoddi3+0xb3>
f0133812:	66 90                	xchg   %ax,%ax
f0133814:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133818:	72 ea                	jb     f0133804 <__umoddi3+0x134>
f013381a:	89 d9                	mov    %ebx,%ecx
f013381c:	e9 62 ff ff ff       	jmp    f0133783 <__umoddi3+0xb3>
